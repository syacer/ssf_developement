
base64_analyzer:     file format elf64-x86-64


Disassembly of section .init:

0000000000001828 <_init>:
    1828:	48 83 ec 08          	sub    $0x8,%rsp
    182c:	48 8b 05 9d b7 22 00 	mov    0x22b79d(%rip),%rax        # 22cfd0 <__gmon_start__>
    1833:	48 85 c0             	test   %rax,%rax
    1836:	74 02                	je     183a <_init+0x12>
    1838:	ff d0                	callq  *%rax
    183a:	48 83 c4 08          	add    $0x8,%rsp
    183e:	c3                   	retq   

Disassembly of section .plt:

0000000000001840 <.plt>:
    1840:	ff 35 5a b5 22 00    	pushq  0x22b55a(%rip)        # 22cda0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1846:	ff 25 5c b5 22 00    	jmpq   *0x22b55c(%rip)        # 22cda8 <_GLOBAL_OFFSET_TABLE_+0x10>
    184c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001850 <__uflow@plt>:
    1850:	ff 25 5a b5 22 00    	jmpq   *0x22b55a(%rip)        # 22cdb0 <__uflow@GLIBC_2.2.5>
    1856:	68 00 00 00 00       	pushq  $0x0
    185b:	e9 e0 ff ff ff       	jmpq   1840 <.plt>

0000000000001860 <getenv@plt>:
    1860:	ff 25 52 b5 22 00    	jmpq   *0x22b552(%rip)        # 22cdb8 <getenv@GLIBC_2.2.5>
    1866:	68 01 00 00 00       	pushq  $0x1
    186b:	e9 d0 ff ff ff       	jmpq   1840 <.plt>

0000000000001870 <free@plt>:
    1870:	ff 25 4a b5 22 00    	jmpq   *0x22b54a(%rip)        # 22cdc0 <free@GLIBC_2.2.5>
    1876:	68 02 00 00 00       	pushq  $0x2
    187b:	e9 c0 ff ff ff       	jmpq   1840 <.plt>

0000000000001880 <abort@plt>:
    1880:	ff 25 42 b5 22 00    	jmpq   *0x22b542(%rip)        # 22cdc8 <abort@GLIBC_2.2.5>
    1886:	68 03 00 00 00       	pushq  $0x3
    188b:	e9 b0 ff ff ff       	jmpq   1840 <.plt>

0000000000001890 <__errno_location@plt>:
    1890:	ff 25 3a b5 22 00    	jmpq   *0x22b53a(%rip)        # 22cdd0 <__errno_location@GLIBC_2.2.5>
    1896:	68 04 00 00 00       	pushq  $0x4
    189b:	e9 a0 ff ff ff       	jmpq   1840 <.plt>

00000000000018a0 <strncmp@plt>:
    18a0:	ff 25 32 b5 22 00    	jmpq   *0x22b532(%rip)        # 22cdd8 <strncmp@GLIBC_2.2.5>
    18a6:	68 05 00 00 00       	pushq  $0x5
    18ab:	e9 90 ff ff ff       	jmpq   1840 <.plt>

00000000000018b0 <_exit@plt>:
    18b0:	ff 25 2a b5 22 00    	jmpq   *0x22b52a(%rip)        # 22cde0 <_exit@GLIBC_2.2.5>
    18b6:	68 06 00 00 00       	pushq  $0x6
    18bb:	e9 80 ff ff ff       	jmpq   1840 <.plt>

00000000000018c0 <__fpending@plt>:
    18c0:	ff 25 22 b5 22 00    	jmpq   *0x22b522(%rip)        # 22cde8 <__fpending@GLIBC_2.2.5>
    18c6:	68 07 00 00 00       	pushq  $0x7
    18cb:	e9 70 ff ff ff       	jmpq   1840 <.plt>

00000000000018d0 <write@plt>:
    18d0:	ff 25 1a b5 22 00    	jmpq   *0x22b51a(%rip)        # 22cdf0 <write@GLIBC_2.2.5>
    18d6:	68 08 00 00 00       	pushq  $0x8
    18db:	e9 60 ff ff ff       	jmpq   1840 <.plt>

00000000000018e0 <fread_unlocked@plt>:
    18e0:	ff 25 12 b5 22 00    	jmpq   *0x22b512(%rip)        # 22cdf8 <fread_unlocked@GLIBC_2.2.5>
    18e6:	68 09 00 00 00       	pushq  $0x9
    18eb:	e9 50 ff ff ff       	jmpq   1840 <.plt>

00000000000018f0 <textdomain@plt>:
    18f0:	ff 25 0a b5 22 00    	jmpq   *0x22b50a(%rip)        # 22ce00 <textdomain@GLIBC_2.2.5>
    18f6:	68 0a 00 00 00       	pushq  $0xa
    18fb:	e9 40 ff ff ff       	jmpq   1840 <.plt>

0000000000001900 <fclose@plt>:
    1900:	ff 25 02 b5 22 00    	jmpq   *0x22b502(%rip)        # 22ce08 <fclose@GLIBC_2.2.5>
    1906:	68 0b 00 00 00       	pushq  $0xb
    190b:	e9 30 ff ff ff       	jmpq   1840 <.plt>

0000000000001910 <bindtextdomain@plt>:
    1910:	ff 25 fa b4 22 00    	jmpq   *0x22b4fa(%rip)        # 22ce10 <bindtextdomain@GLIBC_2.2.5>
    1916:	68 0c 00 00 00       	pushq  $0xc
    191b:	e9 20 ff ff ff       	jmpq   1840 <.plt>

0000000000001920 <dcgettext@plt>:
    1920:	ff 25 f2 b4 22 00    	jmpq   *0x22b4f2(%rip)        # 22ce18 <dcgettext@GLIBC_2.2.5>
    1926:	68 0d 00 00 00       	pushq  $0xd
    192b:	e9 10 ff ff ff       	jmpq   1840 <.plt>

0000000000001930 <__ctype_get_mb_cur_max@plt>:
    1930:	ff 25 ea b4 22 00    	jmpq   *0x22b4ea(%rip)        # 22ce20 <__ctype_get_mb_cur_max@GLIBC_2.2.5>
    1936:	68 0e 00 00 00       	pushq  $0xe
    193b:	e9 00 ff ff ff       	jmpq   1840 <.plt>

0000000000001940 <strlen@plt>:
    1940:	ff 25 e2 b4 22 00    	jmpq   *0x22b4e2(%rip)        # 22ce28 <strlen@GLIBC_2.2.5>
    1946:	68 0f 00 00 00       	pushq  $0xf
    194b:	e9 f0 fe ff ff       	jmpq   1840 <.plt>

0000000000001950 <__stack_chk_fail@plt>:
    1950:	ff 25 da b4 22 00    	jmpq   *0x22b4da(%rip)        # 22ce30 <__stack_chk_fail@GLIBC_2.4>
    1956:	68 10 00 00 00       	pushq  $0x10
    195b:	e9 e0 fe ff ff       	jmpq   1840 <.plt>

0000000000001960 <getopt_long@plt>:
    1960:	ff 25 d2 b4 22 00    	jmpq   *0x22b4d2(%rip)        # 22ce38 <getopt_long@GLIBC_2.2.5>
    1966:	68 11 00 00 00       	pushq  $0x11
    196b:	e9 d0 fe ff ff       	jmpq   1840 <.plt>

0000000000001970 <mbrtowc@plt>:
    1970:	ff 25 ca b4 22 00    	jmpq   *0x22b4ca(%rip)        # 22ce40 <mbrtowc@GLIBC_2.2.5>
    1976:	68 12 00 00 00       	pushq  $0x12
    197b:	e9 c0 fe ff ff       	jmpq   1840 <.plt>

0000000000001980 <strchr@plt>:
    1980:	ff 25 c2 b4 22 00    	jmpq   *0x22b4c2(%rip)        # 22ce48 <strchr@GLIBC_2.2.5>
    1986:	68 13 00 00 00       	pushq  $0x13
    198b:	e9 b0 fe ff ff       	jmpq   1840 <.plt>

0000000000001990 <printf@plt>:
    1990:	ff 25 ba b4 22 00    	jmpq   *0x22b4ba(%rip)        # 22ce50 <printf@GLIBC_2.2.5>
    1996:	68 14 00 00 00       	pushq  $0x14
    199b:	e9 a0 fe ff ff       	jmpq   1840 <.plt>

00000000000019a0 <__overflow@plt>:
    19a0:	ff 25 b2 b4 22 00    	jmpq   *0x22b4b2(%rip)        # 22ce58 <__overflow@GLIBC_2.2.5>
    19a6:	68 15 00 00 00       	pushq  $0x15
    19ab:	e9 90 fe ff ff       	jmpq   1840 <.plt>

00000000000019b0 <strrchr@plt>:
    19b0:	ff 25 aa b4 22 00    	jmpq   *0x22b4aa(%rip)        # 22ce60 <strrchr@GLIBC_2.2.5>
    19b6:	68 16 00 00 00       	pushq  $0x16
    19bb:	e9 80 fe ff ff       	jmpq   1840 <.plt>

00000000000019c0 <lseek@plt>:
    19c0:	ff 25 a2 b4 22 00    	jmpq   *0x22b4a2(%rip)        # 22ce68 <lseek@GLIBC_2.2.5>
    19c6:	68 17 00 00 00       	pushq  $0x17
    19cb:	e9 70 fe ff ff       	jmpq   1840 <.plt>

00000000000019d0 <__assert_fail@plt>:
    19d0:	ff 25 9a b4 22 00    	jmpq   *0x22b49a(%rip)        # 22ce70 <__assert_fail@GLIBC_2.2.5>
    19d6:	68 18 00 00 00       	pushq  $0x18
    19db:	e9 60 fe ff ff       	jmpq   1840 <.plt>

00000000000019e0 <__strtoul_internal@plt>:
    19e0:	ff 25 92 b4 22 00    	jmpq   *0x22b492(%rip)        # 22ce78 <__strtoul_internal@GLIBC_2.2.5>
    19e6:	68 19 00 00 00       	pushq  $0x19
    19eb:	e9 50 fe ff ff       	jmpq   1840 <.plt>

00000000000019f0 <memset@plt>:
    19f0:	ff 25 8a b4 22 00    	jmpq   *0x22b48a(%rip)        # 22ce80 <memset@GLIBC_2.2.5>
    19f6:	68 1a 00 00 00       	pushq  $0x1a
    19fb:	e9 40 fe ff ff       	jmpq   1840 <.plt>

0000000000001a00 <fscanf@plt>:
    1a00:	ff 25 82 b4 22 00    	jmpq   *0x22b482(%rip)        # 22ce88 <fscanf@GLIBC_2.2.5>
    1a06:	68 1b 00 00 00       	pushq  $0x1b
    1a0b:	e9 30 fe ff ff       	jmpq   1840 <.plt>

0000000000001a10 <close@plt>:
    1a10:	ff 25 7a b4 22 00    	jmpq   *0x22b47a(%rip)        # 22ce90 <close@GLIBC_2.2.5>
    1a16:	68 1c 00 00 00       	pushq  $0x1c
    1a1b:	e9 20 fe ff ff       	jmpq   1840 <.plt>

0000000000001a20 <posix_fadvise@plt>:
    1a20:	ff 25 72 b4 22 00    	jmpq   *0x22b472(%rip)        # 22ce98 <posix_fadvise@GLIBC_2.2.5>
    1a26:	68 1d 00 00 00       	pushq  $0x1d
    1a2b:	e9 10 fe ff ff       	jmpq   1840 <.plt>

0000000000001a30 <memchr@plt>:
    1a30:	ff 25 6a b4 22 00    	jmpq   *0x22b46a(%rip)        # 22cea0 <memchr@GLIBC_2.2.5>
    1a36:	68 1e 00 00 00       	pushq  $0x1e
    1a3b:	e9 00 fe ff ff       	jmpq   1840 <.plt>

0000000000001a40 <read@plt>:
    1a40:	ff 25 62 b4 22 00    	jmpq   *0x22b462(%rip)        # 22cea8 <read@GLIBC_2.2.5>
    1a46:	68 1f 00 00 00       	pushq  $0x1f
    1a4b:	e9 f0 fd ff ff       	jmpq   1840 <.plt>

0000000000001a50 <memcmp@plt>:
    1a50:	ff 25 5a b4 22 00    	jmpq   *0x22b45a(%rip)        # 22ceb0 <memcmp@GLIBC_2.2.5>
    1a56:	68 20 00 00 00       	pushq  $0x20
    1a5b:	e9 e0 fd ff ff       	jmpq   1840 <.plt>

0000000000001a60 <fputs_unlocked@plt>:
    1a60:	ff 25 52 b4 22 00    	jmpq   *0x22b452(%rip)        # 22ceb8 <fputs_unlocked@GLIBC_2.2.5>
    1a66:	68 21 00 00 00       	pushq  $0x21
    1a6b:	e9 d0 fd ff ff       	jmpq   1840 <.plt>

0000000000001a70 <calloc@plt>:
    1a70:	ff 25 4a b4 22 00    	jmpq   *0x22b44a(%rip)        # 22cec0 <calloc@GLIBC_2.2.5>
    1a76:	68 22 00 00 00       	pushq  $0x22
    1a7b:	e9 c0 fd ff ff       	jmpq   1840 <.plt>

0000000000001a80 <strcmp@plt>:
    1a80:	ff 25 42 b4 22 00    	jmpq   *0x22b442(%rip)        # 22cec8 <strcmp@GLIBC_2.2.5>
    1a86:	68 23 00 00 00       	pushq  $0x23
    1a8b:	e9 b0 fd ff ff       	jmpq   1840 <.plt>

0000000000001a90 <memcpy@plt>:
    1a90:	ff 25 3a b4 22 00    	jmpq   *0x22b43a(%rip)        # 22ced0 <memcpy@GLIBC_2.14>
    1a96:	68 24 00 00 00       	pushq  $0x24
    1a9b:	e9 a0 fd ff ff       	jmpq   1840 <.plt>

0000000000001aa0 <fileno@plt>:
    1aa0:	ff 25 32 b4 22 00    	jmpq   *0x22b432(%rip)        # 22ced8 <fileno@GLIBC_2.2.5>
    1aa6:	68 25 00 00 00       	pushq  $0x25
    1aab:	e9 90 fd ff ff       	jmpq   1840 <.plt>

0000000000001ab0 <malloc@plt>:
    1ab0:	ff 25 2a b4 22 00    	jmpq   *0x22b42a(%rip)        # 22cee0 <malloc@GLIBC_2.2.5>
    1ab6:	68 26 00 00 00       	pushq  $0x26
    1abb:	e9 80 fd ff ff       	jmpq   1840 <.plt>

0000000000001ac0 <fflush@plt>:
    1ac0:	ff 25 22 b4 22 00    	jmpq   *0x22b422(%rip)        # 22cee8 <fflush@GLIBC_2.2.5>
    1ac6:	68 27 00 00 00       	pushq  $0x27
    1acb:	e9 70 fd ff ff       	jmpq   1840 <.plt>

0000000000001ad0 <nl_langinfo@plt>:
    1ad0:	ff 25 1a b4 22 00    	jmpq   *0x22b41a(%rip)        # 22cef0 <nl_langinfo@GLIBC_2.2.5>
    1ad6:	68 28 00 00 00       	pushq  $0x28
    1adb:	e9 60 fd ff ff       	jmpq   1840 <.plt>

0000000000001ae0 <ungetc@plt>:
    1ae0:	ff 25 12 b4 22 00    	jmpq   *0x22b412(%rip)        # 22cef8 <ungetc@GLIBC_2.2.5>
    1ae6:	68 29 00 00 00       	pushq  $0x29
    1aeb:	e9 50 fd ff ff       	jmpq   1840 <.plt>

0000000000001af0 <__fxstat@plt>:
    1af0:	ff 25 0a b4 22 00    	jmpq   *0x22b40a(%rip)        # 22cf00 <__fxstat@GLIBC_2.2.5>
    1af6:	68 2a 00 00 00       	pushq  $0x2a
    1afb:	e9 40 fd ff ff       	jmpq   1840 <.plt>

0000000000001b00 <__freading@plt>:
    1b00:	ff 25 02 b4 22 00    	jmpq   *0x22b402(%rip)        # 22cf08 <__freading@GLIBC_2.2.5>
    1b06:	68 2b 00 00 00       	pushq  $0x2b
    1b0b:	e9 30 fd ff ff       	jmpq   1840 <.plt>

0000000000001b10 <fwrite_unlocked@plt>:
    1b10:	ff 25 fa b3 22 00    	jmpq   *0x22b3fa(%rip)        # 22cf10 <fwrite_unlocked@GLIBC_2.2.5>
    1b16:	68 2c 00 00 00       	pushq  $0x2c
    1b1b:	e9 20 fd ff ff       	jmpq   1840 <.plt>

0000000000001b20 <realloc@plt>:
    1b20:	ff 25 f2 b3 22 00    	jmpq   *0x22b3f2(%rip)        # 22cf18 <realloc@GLIBC_2.2.5>
    1b26:	68 2d 00 00 00       	pushq  $0x2d
    1b2b:	e9 10 fd ff ff       	jmpq   1840 <.plt>

0000000000001b30 <fdopen@plt>:
    1b30:	ff 25 ea b3 22 00    	jmpq   *0x22b3ea(%rip)        # 22cf20 <fdopen@GLIBC_2.2.5>
    1b36:	68 2e 00 00 00       	pushq  $0x2e
    1b3b:	e9 00 fd ff ff       	jmpq   1840 <.plt>

0000000000001b40 <setlocale@plt>:
    1b40:	ff 25 e2 b3 22 00    	jmpq   *0x22b3e2(%rip)        # 22cf28 <setlocale@GLIBC_2.2.5>
    1b46:	68 2f 00 00 00       	pushq  $0x2f
    1b4b:	e9 f0 fc ff ff       	jmpq   1840 <.plt>

0000000000001b50 <__printf_chk@plt>:
    1b50:	ff 25 da b3 22 00    	jmpq   *0x22b3da(%rip)        # 22cf30 <__printf_chk@GLIBC_2.3.4>
    1b56:	68 30 00 00 00       	pushq  $0x30
    1b5b:	e9 e0 fc ff ff       	jmpq   1840 <.plt>

0000000000001b60 <memmove@plt>:
    1b60:	ff 25 d2 b3 22 00    	jmpq   *0x22b3d2(%rip)        # 22cf38 <memmove@GLIBC_2.2.5>
    1b66:	68 31 00 00 00       	pushq  $0x31
    1b6b:	e9 d0 fc ff ff       	jmpq   1840 <.plt>

0000000000001b70 <error@plt>:
    1b70:	ff 25 ca b3 22 00    	jmpq   *0x22b3ca(%rip)        # 22cf40 <error@GLIBC_2.2.5>
    1b76:	68 32 00 00 00       	pushq  $0x32
    1b7b:	e9 c0 fc ff ff       	jmpq   1840 <.plt>

0000000000001b80 <waitpid@plt>:
    1b80:	ff 25 c2 b3 22 00    	jmpq   *0x22b3c2(%rip)        # 22cf48 <waitpid@GLIBC_2.2.5>
    1b86:	68 33 00 00 00       	pushq  $0x33
    1b8b:	e9 b0 fc ff ff       	jmpq   1840 <.plt>

0000000000001b90 <open@plt>:
    1b90:	ff 25 ba b3 22 00    	jmpq   *0x22b3ba(%rip)        # 22cf50 <open@GLIBC_2.2.5>
    1b96:	68 34 00 00 00       	pushq  $0x34
    1b9b:	e9 a0 fc ff ff       	jmpq   1840 <.plt>

0000000000001ba0 <fseeko@plt>:
    1ba0:	ff 25 b2 b3 22 00    	jmpq   *0x22b3b2(%rip)        # 22cf58 <fseeko@GLIBC_2.2.5>
    1ba6:	68 35 00 00 00       	pushq  $0x35
    1bab:	e9 90 fc ff ff       	jmpq   1840 <.plt>

0000000000001bb0 <fopen@plt>:
    1bb0:	ff 25 aa b3 22 00    	jmpq   *0x22b3aa(%rip)        # 22cf60 <fopen@GLIBC_2.2.5>
    1bb6:	68 36 00 00 00       	pushq  $0x36
    1bbb:	e9 80 fc ff ff       	jmpq   1840 <.plt>

0000000000001bc0 <__dprintf_chk@plt>:
    1bc0:	ff 25 a2 b3 22 00    	jmpq   *0x22b3a2(%rip)        # 22cf68 <__dprintf_chk@GLIBC_2.8>
    1bc6:	68 37 00 00 00       	pushq  $0x37
    1bcb:	e9 70 fc ff ff       	jmpq   1840 <.plt>

0000000000001bd0 <shmat@plt>:
    1bd0:	ff 25 9a b3 22 00    	jmpq   *0x22b39a(%rip)        # 22cf70 <shmat@GLIBC_2.2.5>
    1bd6:	68 38 00 00 00       	pushq  $0x38
    1bdb:	e9 60 fc ff ff       	jmpq   1840 <.plt>

0000000000001be0 <__cxa_atexit@plt>:
    1be0:	ff 25 92 b3 22 00    	jmpq   *0x22b392(%rip)        # 22cf78 <__cxa_atexit@GLIBC_2.2.5>
    1be6:	68 39 00 00 00       	pushq  $0x39
    1beb:	e9 50 fc ff ff       	jmpq   1840 <.plt>

0000000000001bf0 <atoi@plt>:
    1bf0:	ff 25 8a b3 22 00    	jmpq   *0x22b38a(%rip)        # 22cf80 <atoi@GLIBC_2.2.5>
    1bf6:	68 3a 00 00 00       	pushq  $0x3a
    1bfb:	e9 40 fc ff ff       	jmpq   1840 <.plt>

0000000000001c00 <exit@plt>:
    1c00:	ff 25 82 b3 22 00    	jmpq   *0x22b382(%rip)        # 22cf88 <exit@GLIBC_2.2.5>
    1c06:	68 3b 00 00 00       	pushq  $0x3b
    1c0b:	e9 30 fc ff ff       	jmpq   1840 <.plt>

0000000000001c10 <fwrite@plt>:
    1c10:	ff 25 7a b3 22 00    	jmpq   *0x22b37a(%rip)        # 22cf90 <fwrite@GLIBC_2.2.5>
    1c16:	68 3c 00 00 00       	pushq  $0x3c
    1c1b:	e9 20 fc ff ff       	jmpq   1840 <.plt>

0000000000001c20 <__fprintf_chk@plt>:
    1c20:	ff 25 72 b3 22 00    	jmpq   *0x22b372(%rip)        # 22cf98 <__fprintf_chk@GLIBC_2.3.4>
    1c26:	68 3d 00 00 00       	pushq  $0x3d
    1c2b:	e9 10 fc ff ff       	jmpq   1840 <.plt>

0000000000001c30 <mbsinit@plt>:
    1c30:	ff 25 6a b3 22 00    	jmpq   *0x22b36a(%rip)        # 22cfa0 <mbsinit@GLIBC_2.2.5>
    1c36:	68 3e 00 00 00       	pushq  $0x3e
    1c3b:	e9 00 fc ff ff       	jmpq   1840 <.plt>

0000000000001c40 <iswprint@plt>:
    1c40:	ff 25 62 b3 22 00    	jmpq   *0x22b362(%rip)        # 22cfa8 <iswprint@GLIBC_2.2.5>
    1c46:	68 3f 00 00 00       	pushq  $0x3f
    1c4b:	e9 f0 fb ff ff       	jmpq   1840 <.plt>

0000000000001c50 <fork@plt>:
    1c50:	ff 25 5a b3 22 00    	jmpq   *0x22b35a(%rip)        # 22cfb0 <fork@GLIBC_2.2.5>
    1c56:	68 40 00 00 00       	pushq  $0x40
    1c5b:	e9 e0 fb ff ff       	jmpq   1840 <.plt>

0000000000001c60 <__ctype_b_loc@plt>:
    1c60:	ff 25 52 b3 22 00    	jmpq   *0x22b352(%rip)        # 22cfb8 <__ctype_b_loc@GLIBC_2.3>
    1c66:	68 41 00 00 00       	pushq  $0x41
    1c6b:	e9 d0 fb ff ff       	jmpq   1840 <.plt>

Disassembly of section .plt.got:

0000000000001c70 <__cxa_finalize@plt>:
    1c70:	ff 25 6a b3 22 00    	jmpq   *0x22b36a(%rip)        # 22cfe0 <__cxa_finalize@GLIBC_2.2.5>
    1c76:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000001c80 <main>:
    1c80:	48 89 05 59 bf 5f 00 	mov    %rax,0x5fbf59(%rip)        # 5fdbe0 <tmpquadrax>
    1c87:	48 89 3d 72 1c 75 00 	mov    %rdi,0x751c72(%rip)        # 753900 <tmpquadrdi>
    1c8e:	48 89 35 8b bf 5f 00 	mov    %rsi,0x5fbf8b(%rip)        # 5fdc20 <tmpquadrsi>
    1c95:	e8 ae 0b 00 00       	callq  2848 <__afl_setup_first>
    1c9a:	3c 7f                	cmp    $0x7f,%al
    1c9c:	75 48                	jne    1ce6 <runSUT>
    1c9e:	48 8d 3d ee 0f 00 00 	lea    0xfee(%rip),%rdi        # 2c93 <.serverSetupError>
    1ca5:	48 31 c0             	xor    %rax,%rax
    1ca8:	e8 e3 fc ff ff       	callq  1990 <printf@plt>
    1cad:	48 c7 c7 00 00 10 00 	mov    $0x100000,%rdi
    1cb4:	e8 f7 fd ff ff       	callq  1ab0 <malloc@plt>
    1cb9:	48 89 05 48 1c 75 00 	mov    %rax,0x751c48(%rip)        # 753908 <shmptr_edge>
    1cc0:	48 c7 c7 00 00 10 00 	mov    $0x100000,%rdi
    1cc7:	e8 e4 fd ff ff       	callq  1ab0 <malloc@plt>
    1ccc:	48 89 05 5d 1c 75 00 	mov    %rax,0x751c5d(%rip)        # 753930 <shmptr_cmp>
    1cd3:	48 c7 c7 40 00 00 00 	mov    $0x40,%rdi
    1cda:	e8 d1 fd ff ff       	callq  1ab0 <malloc@plt>
    1cdf:	48 89 05 52 1c 75 00 	mov    %rax,0x751c52(%rip)        # 753938 <shmptr_gcnt>

0000000000001ce6 <runSUT>:
    1ce6:	48 8b 05 f3 be 5f 00 	mov    0x5fbef3(%rip),%rax        # 5fdbe0 <tmpquadrax>
    1ced:	48 8b 35 2c bf 5f 00 	mov    0x5fbf2c(%rip),%rsi        # 5fdc20 <tmpquadrsi>
  while (!feof (in));
}

int
main (int argc, char **argv)
{
    1cf4:	41 57                	push   %r15
    1cf6:	41 56                	push   %r14
    1cf8:	41 55                	push   %r13
    1cfa:	41 54                	push   %r12
  int opt;
  FILE *input_fh;
  const char *infile;
  
  /* True if --decode has been given and we should decode data. */
  bool decode = false;
    1cfc:	45 31 ed             	xor    %r13d,%r13d
{
    1cff:	55                   	push   %rbp
    1d00:	53                   	push   %rbx
    1d01:	89 fd                	mov    %edi,%ebp
    1d03:	48 89 f3             	mov    %rsi,%rbx
  /* True if we should ignore non-base64-alphabetic characters. */
  bool ignore_garbage = false;
    1d06:	45 31 e4             	xor    %r12d,%r12d
{
    1d09:	48 83 ec 18          	sub    $0x18,%rsp
  /* Wrap encoded base64 data around the 76:th column, by default. */
  uintmax_t wrap_column = 76;
  

  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
    1d0d:	48 8b 3e             	mov    (%rsi),%rdi
{
    1d10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1d17:	00 00 
    1d19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1d1e:	31 c0                	xor    %eax,%eax
  uintmax_t wrap_column = 76;
    1d20:	48 c7 04 24 4c 00 00 	movq   $0x4c,(%rsp)
    1d27:	00 
      case 'd':
        decode = true;
        break;

      case 'w':
        if (xstrtoumax (optarg, NULL, 0, &wrap_column, NULL) != LONGINT_OK)
    1d28:	49 89 e6             	mov    %rsp,%r14
  set_program_name (argv[0]);
    1d2b:	e8 90 05 01 00       	callq  122c0 <set_program_name>
  setlocale (LC_ALL, "");
    1d30:	48 8d 35 e2 80 02 00 	lea    0x280e2(%rip),%rsi        # 29e19 <quoting_style_vals+0x79>
    1d37:	bf 06 00 00 00       	mov    $0x6,%edi
    1d3c:	e8 ff fd ff ff       	callq  1b40 <setlocale@plt>
  bindtextdomain (PACKAGE, LOCALEDIR);
    1d41:	48 8d 35 f0 76 02 00 	lea    0x276f0(%rip),%rsi        # 29438 <_IO_stdin_used+0xb8>
    1d48:	48 8d 3d db 76 02 00 	lea    0x276db(%rip),%rdi        # 2942a <_IO_stdin_used+0xaa>
    1d4f:	e8 bc fb ff ff       	callq  1910 <bindtextdomain@plt>
  textdomain (PACKAGE);
    1d54:	48 8d 3d cf 76 02 00 	lea    0x276cf(%rip),%rdi        # 2942a <_IO_stdin_used+0xaa>
    1d5b:	e8 90 fb ff ff       	callq  18f0 <textdomain@plt>
  atexit (close_stdout);
    1d60:	48 8d 3d a9 02 01 00 	lea    0x102a9(%rip),%rdi        # 12010 <close_stdout>
    1d67:	e8 f4 75 02 00       	callq  29360 <atexit>
    1d6c:	50                   	push   %rax
    1d6d:	48 b8 ab 94 bb 96 00 	movabs $0x96bb94ab,%rax
    1d74:	00 00 00 
    1d77:	48 89 05 c2 1b 75 00 	mov    %rax,0x751bc2(%rip)        # 753940 <edgeId>
    1d7e:	58                   	pop    %rax
    1d7f:	e8 45 08 00 00       	callq  25c9 <_storeEdge>
  while ((opt = getopt_long (argc, argv, "diw:", long_options, NULL)) != -1)
    1d84:	48 8d 0d f5 ac 22 00 	lea    0x22acf5(%rip),%rcx        # 22ca80 <long_options>
    1d8b:	48 8d 15 e4 76 02 00 	lea    0x276e4(%rip),%rdx        # 29476 <_IO_stdin_used+0xf6>
    1d92:	45 31 c0             	xor    %r8d,%r8d
    1d95:	48 89 de             	mov    %rbx,%rsi
    1d98:	89 ef                	mov    %ebp,%edi
    1d9a:	e8 c1 fb ff ff       	callq  1960 <getopt_long@plt>
    1d9f:	48 89 15 72 1b 75 00 	mov    %rdx,0x751b72(%rip)        # 753918 <tmpquadone>
    1da6:	48 89 0d 83 be 5f 00 	mov    %rcx,0x5fbe83(%rip)        # 5fdc30 <tmpquadtwo>
    1dad:	48 8d 15 3c be 5f 00 	lea    0x5fbe3c(%rip),%rdx        # 5fdbf0 <funcinptr>
    1db4:	48 c7 02 52 15 00 00 	movq   $0x1552,(%rdx)
    1dbb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    1dc2:	00 
    1dc3:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    1dca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    1dce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    1dd5:	00 
    1dd6:	48 89 c1             	mov    %rax,%rcx
    1dd9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    1ddd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    1de4:	00 
    1de5:	ff 32                	pushq  (%rdx)
    1de7:	48 8b 15 2a 1b 75 00 	mov    0x751b2a(%rip),%rdx        # 753918 <tmpquadone>
    1dee:	48 8b 0d 3b be 5f 00 	mov    0x5fbe3b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    1df5:	48 c7 05 50 1b 75 00 	movq   $0x1,0x751b50(%rip)        # 753950 <cmpPassed>
    1dfc:	01 00 00 00 
    1e00:	e8 5b 08 00 00       	callq  2660 <_storeDataFn>
    1e05:	83 f8 ff             	cmp    $0xffffffff,%eax
    1e08:	0f 84 52 03 00 00    	je     2160 <runSUT+0x47a>
    1e0e:	50                   	push   %rax
    1e0f:	48 b8 e5 ae 25 cd 00 	movabs $0xcd25aee5,%rax
    1e16:	00 00 00 
    1e19:	48 89 05 20 1b 75 00 	mov    %rax,0x751b20(%rip)        # 753940 <edgeId>
    1e20:	58                   	pop    %rax
    1e21:	e8 a3 07 00 00       	callq  25c9 <_storeEdge>
    switch (opt)
    1e26:	48 89 15 eb 1a 75 00 	mov    %rdx,0x751aeb(%rip)        # 753918 <tmpquadone>
    1e2d:	48 89 0d fc bd 5f 00 	mov    %rcx,0x5fbdfc(%rip)        # 5fdc30 <tmpquadtwo>
    1e34:	48 8d 15 b5 bd 5f 00 	lea    0x5fbdb5(%rip),%rdx        # 5fdbf0 <funcinptr>
    1e3b:	48 c7 02 53 15 00 00 	movq   $0x1553,(%rdx)
    1e42:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    1e49:	00 
    1e4a:	48 c7 c1 64 00 00 00 	mov    $0x64,%rcx
    1e51:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    1e55:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    1e5c:	00 
    1e5d:	48 89 c1             	mov    %rax,%rcx
    1e60:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    1e64:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    1e6b:	00 
    1e6c:	ff 32                	pushq  (%rdx)
    1e6e:	48 8b 15 a3 1a 75 00 	mov    0x751aa3(%rip),%rdx        # 753918 <tmpquadone>
    1e75:	48 8b 0d b4 bd 5f 00 	mov    0x5fbdb4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    1e7c:	48 c7 05 c9 1a 75 00 	movq   $0x1,0x751ac9(%rip)        # 753950 <cmpPassed>
    1e83:	01 00 00 00 
    1e87:	e8 d4 07 00 00       	callq  2660 <_storeDataFn>
    1e8c:	83 f8 64             	cmp    $0x64,%eax
    1e8f:	0f 84 8b 02 00 00    	je     2120 <runSUT+0x43a>
    1e95:	50                   	push   %rax
    1e96:	48 b8 dc b5 a4 b9 00 	movabs $0xb9a4b5dc,%rax
    1e9d:	00 00 00 
    1ea0:	48 89 05 99 1a 75 00 	mov    %rax,0x751a99(%rip)        # 753940 <edgeId>
    1ea7:	58                   	pop    %rax
    1ea8:	e8 1c 07 00 00       	callq  25c9 <_storeEdge>
    1ead:	0f 8e 95 01 00 00    	jle    2048 <runSUT+0x362>
    1eb3:	50                   	push   %rax
    1eb4:	48 c7 c0 ee 5a d2 5c 	mov    $0x5cd25aee,%rax
    1ebb:	48 89 05 7e 1a 75 00 	mov    %rax,0x751a7e(%rip)        # 753940 <edgeId>
    1ec2:	58                   	pop    %rax
    1ec3:	e8 01 07 00 00       	callq  25c9 <_storeEdge>
    1ec8:	48 89 15 49 1a 75 00 	mov    %rdx,0x751a49(%rip)        # 753918 <tmpquadone>
    1ecf:	48 89 0d 5a bd 5f 00 	mov    %rcx,0x5fbd5a(%rip)        # 5fdc30 <tmpquadtwo>
    1ed6:	48 8d 15 13 bd 5f 00 	lea    0x5fbd13(%rip),%rdx        # 5fdbf0 <funcinptr>
    1edd:	48 c7 02 54 15 00 00 	movq   $0x1554,(%rdx)
    1ee4:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    1eeb:	00 
    1eec:	48 c7 c1 69 00 00 00 	mov    $0x69,%rcx
    1ef3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    1ef7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    1efe:	00 
    1eff:	48 89 c1             	mov    %rax,%rcx
    1f02:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    1f06:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    1f0d:	00 
    1f0e:	ff 32                	pushq  (%rdx)
    1f10:	48 8b 15 01 1a 75 00 	mov    0x751a01(%rip),%rdx        # 753918 <tmpquadone>
    1f17:	48 8b 0d 12 bd 5f 00 	mov    0x5fbd12(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    1f1e:	48 c7 05 27 1a 75 00 	movq   $0x1,0x751a27(%rip)        # 753950 <cmpPassed>
    1f25:	01 00 00 00 
    1f29:	e8 32 07 00 00       	callq  2660 <_storeDataFn>
    1f2e:	83 f8 69             	cmp    $0x69,%eax
    1f31:	0f 84 09 02 00 00    	je     2140 <runSUT+0x45a>
    1f37:	50                   	push   %rax
    1f38:	48 c7 c0 bb 96 34 17 	mov    $0x173496bb,%rax
    1f3f:	48 89 05 fa 19 75 00 	mov    %rax,0x7519fa(%rip)        # 753940 <edgeId>
    1f46:	58                   	pop    %rax
    1f47:	e8 7d 06 00 00       	callq  25c9 <_storeEdge>
    1f4c:	48 89 15 c5 19 75 00 	mov    %rdx,0x7519c5(%rip)        # 753918 <tmpquadone>
    1f53:	48 89 0d d6 bc 5f 00 	mov    %rcx,0x5fbcd6(%rip)        # 5fdc30 <tmpquadtwo>
    1f5a:	48 8d 15 8f bc 5f 00 	lea    0x5fbc8f(%rip),%rdx        # 5fdbf0 <funcinptr>
    1f61:	48 c7 02 55 15 00 00 	movq   $0x1555,(%rdx)
    1f68:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    1f6f:	00 
    1f70:	48 c7 c1 77 00 00 00 	mov    $0x77,%rcx
    1f77:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    1f7b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    1f82:	00 
    1f83:	48 89 c1             	mov    %rax,%rcx
    1f86:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    1f8a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    1f91:	00 
    1f92:	ff 32                	pushq  (%rdx)
    1f94:	48 8b 15 7d 19 75 00 	mov    0x75197d(%rip),%rdx        # 753918 <tmpquadone>
    1f9b:	48 8b 0d 8e bc 5f 00 	mov    0x5fbc8e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    1fa2:	48 c7 05 a3 19 75 00 	movq   $0x1,0x7519a3(%rip)        # 753950 <cmpPassed>
    1fa9:	01 00 00 00 
    1fad:	e8 ae 06 00 00       	callq  2660 <_storeDataFn>
    1fb2:	83 f8 77             	cmp    $0x77,%eax
    1fb5:	0f 85 cf 05 00 00    	jne    258a <runSUT+0x8a4>
    1fbb:	50                   	push   %rax
    1fbc:	48 b8 ae 25 cd 85 00 	movabs $0x85cd25ae,%rax
    1fc3:	00 00 00 
    1fc6:	48 89 05 73 19 75 00 	mov    %rax,0x751973(%rip)        # 753940 <edgeId>
    1fcd:	58                   	pop    %rax
    1fce:	e8 f6 05 00 00       	callq  25c9 <_storeEdge>
        if (xstrtoumax (optarg, NULL, 0, &wrap_column, NULL) != LONGINT_OK)
    1fd3:	48 8b 3d c6 b0 22 00 	mov    0x22b0c6(%rip),%rdi        # 22d0a0 <optarg@@GLIBC_2.2.5>
    1fda:	45 31 c0             	xor    %r8d,%r8d
    1fdd:	31 d2                	xor    %edx,%edx
    1fdf:	31 f6                	xor    %esi,%esi
    1fe1:	4c 89 f1             	mov    %r14,%rcx
    1fe4:	e8 67 1d 02 00       	callq  23d50 <xstrtoumax>
    1fe9:	85 c0                	test   %eax,%eax
    1feb:	0f 84 7b fd ff ff    	je     1d6c <runSUT+0x86>
    1ff1:	50                   	push   %rax
    1ff2:	48 b8 49 73 a1 b8 00 	movabs $0xb8a17349,%rax
    1ff9:	00 00 00 
    1ffc:	48 89 05 3d 19 75 00 	mov    %rax,0x75193d(%rip)        # 753940 <edgeId>
    2003:	58                   	pop    %rax
    2004:	e8 c0 05 00 00       	callq  25c9 <_storeEdge>
          error (EXIT_FAILURE, 0, _("invalid wrap size: %s"),
    2009:	48 8b 3d 90 b0 22 00 	mov    0x22b090(%rip),%rdi        # 22d0a0 <optarg@@GLIBC_2.2.5>
    2010:	e8 0b 9c 01 00       	callq  1bc20 <quotearg>
    2015:	48 8d 35 34 74 02 00 	lea    0x27434(%rip),%rsi        # 29450 <_IO_stdin_used+0xd0>
    201c:	49 89 c7             	mov    %rax,%r15
    201f:	31 ff                	xor    %edi,%edi
    2021:	ba 05 00 00 00       	mov    $0x5,%edx
    2026:	e8 f5 f8 ff ff       	callq  1920 <dcgettext@plt>
    202b:	4c 89 f9             	mov    %r15,%rcx
    202e:	48 89 c2             	mov    %rax,%rdx
    2031:	31 f6                	xor    %esi,%esi
    2033:	bf 01 00 00 00       	mov    $0x1,%edi
    2038:	31 c0                	xor    %eax,%eax
    203a:	e8 31 fb ff ff       	callq  1b70 <error@plt>
    203f:	e9 28 fd ff ff       	jmpq   1d6c <runSUT+0x86>
    2044:	0f 1f 40 00          	nopl   0x0(%rax)
    2048:	50                   	push   %rax
    2049:	48 b8 e2 e6 81 ed 00 	movabs $0xed81e6e2,%rax
    2050:	00 00 00 
    2053:	48 89 05 e6 18 75 00 	mov    %rax,0x7518e6(%rip)        # 753940 <edgeId>
    205a:	58                   	pop    %rax
    205b:	e8 69 05 00 00       	callq  25c9 <_storeEdge>
    switch (opt)
    2060:	48 89 15 b1 18 75 00 	mov    %rdx,0x7518b1(%rip)        # 753918 <tmpquadone>
    2067:	48 89 0d c2 bb 5f 00 	mov    %rcx,0x5fbbc2(%rip)        # 5fdc30 <tmpquadtwo>
    206e:	48 8d 15 7b bb 5f 00 	lea    0x5fbb7b(%rip),%rdx        # 5fdbf0 <funcinptr>
    2075:	48 c7 02 56 15 00 00 	movq   $0x1556,(%rdx)
    207c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    2083:	00 
    2084:	48 c7 c1 7d ff ff ff 	mov    $0xffffffffffffff7d,%rcx
    208b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    208f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    2096:	00 
    2097:	48 89 c1             	mov    %rax,%rcx
    209a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    209e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    20a5:	00 
    20a6:	ff 32                	pushq  (%rdx)
    20a8:	48 8b 15 69 18 75 00 	mov    0x751869(%rip),%rdx        # 753918 <tmpquadone>
    20af:	48 8b 0d 7a bb 5f 00 	mov    0x5fbb7a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    20b6:	48 c7 05 8f 18 75 00 	movq   $0x1,0x75188f(%rip)        # 753950 <cmpPassed>
    20bd:	01 00 00 00 
    20c1:	e8 9a 05 00 00       	callq  2660 <_storeDataFn>
    20c6:	3d 7d ff ff ff       	cmp    $0xffffff7d,%eax
    20cb:	0f 85 d0 03 00 00    	jne    24a1 <runSUT+0x7bb>
    20d1:	50                   	push   %rax
    20d2:	48 b8 dc 3c b0 dd 00 	movabs $0xddb03cdc,%rax
    20d9:	00 00 00 
    20dc:	48 89 05 5d 18 75 00 	mov    %rax,0x75185d(%rip)        # 753940 <edgeId>
    20e3:	58                   	pop    %rax
    20e4:	e8 e0 04 00 00       	callq  25c9 <_storeEdge>
        ignore_garbage = true;
        break;

      case_GETOPT_HELP_CHAR;

      case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
    20e9:	48 8b 3d 98 af 22 00 	mov    0x22af98(%rip),%rdi        # 22d088 <stdout@@GLIBC_2.2.5>
    20f0:	48 8b 0d 19 af 22 00 	mov    0x22af19(%rip),%rcx        # 22d010 <Version>
    20f7:	4c 8d 05 68 73 02 00 	lea    0x27368(%rip),%r8        # 29466 <_IO_stdin_used+0xe6>
    20fe:	48 8d 15 21 73 02 00 	lea    0x27321(%rip),%rdx        # 29426 <_IO_stdin_used+0xa6>
    2105:	48 8d 35 9d 72 02 00 	lea    0x2729d(%rip),%rsi        # 293a9 <_IO_stdin_used+0x29>
    210c:	45 31 c9             	xor    %r9d,%r9d
    210f:	31 c0                	xor    %eax,%eax
    2111:	e8 7a 08 02 00       	callq  22990 <version_etc>
    2116:	31 ff                	xor    %edi,%edi
    2118:	e8 e3 fa ff ff       	callq  1c00 <exit@plt>
    211d:	0f 1f 00             	nopl   (%rax)
    2120:	50                   	push   %rax
    2121:	48 c7 c0 d8 6e f7 6b 	mov    $0x6bf76ed8,%rax
    2128:	48 89 05 11 18 75 00 	mov    %rax,0x751811(%rip)        # 753940 <edgeId>
    212f:	58                   	pop    %rax
    2130:	e8 94 04 00 00       	callq  25c9 <_storeEdge>
        decode = true;
    2135:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    213b:	e9 2c fc ff ff       	jmpq   1d6c <runSUT+0x86>
    2140:	50                   	push   %rax
    2141:	48 c7 c0 bb dd af 5d 	mov    $0x5dafddbb,%rax
    2148:	48 89 05 f1 17 75 00 	mov    %rax,0x7517f1(%rip)        # 753940 <edgeId>
    214f:	58                   	pop    %rax
    2150:	e8 74 04 00 00       	callq  25c9 <_storeEdge>
        ignore_garbage = true;
    2155:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    215b:	e9 0c fc ff ff       	jmpq   1d6c <runSUT+0x86>
    2160:	50                   	push   %rax
    2161:	48 b8 db fd da 95 00 	movabs $0x95dafddb,%rax
    2168:	00 00 00 
    216b:	48 89 05 ce 17 75 00 	mov    %rax,0x7517ce(%rip)        # 753940 <edgeId>
    2172:	58                   	pop    %rax
    2173:	e8 51 04 00 00       	callq  25c9 <_storeEdge>
      default:
        usage (EXIT_FAILURE);
        break;
      }

  if (argc - optind > 1)
    2178:	48 63 05 19 af 22 00 	movslq 0x22af19(%rip),%rax        # 22d098 <optind@@GLIBC_2.2.5>
    217f:	89 ea                	mov    %ebp,%edx
    2181:	29 c2                	sub    %eax,%edx
    2183:	83 ea 01             	sub    $0x1,%edx
    2186:	0f 8f b6 03 00 00    	jg     2542 <runSUT+0x85c>
    218c:	50                   	push   %rax
    218d:	48 b8 fb b5 2b f5 00 	movabs $0xf52bb5fb,%rax
    2194:	00 00 00 
    2197:	48 89 05 a2 17 75 00 	mov    %rax,0x7517a2(%rip)        # 753940 <edgeId>
    219e:	58                   	pop    %rax
    219f:	e8 25 04 00 00       	callq  25c9 <_storeEdge>
    {
      error (0, 0, _("extra operand %s"), quote (argv[optind]));
      usage (EXIT_FAILURE);
    }

  if (optind < argc)
    21a4:	48 89 15 6d 17 75 00 	mov    %rdx,0x75176d(%rip)        # 753918 <tmpquadone>
    21ab:	48 89 0d 7e ba 5f 00 	mov    %rcx,0x5fba7e(%rip)        # 5fdc30 <tmpquadtwo>
    21b2:	48 8d 15 37 ba 5f 00 	lea    0x5fba37(%rip),%rdx        # 5fdbf0 <funcinptr>
    21b9:	48 c7 02 57 15 00 00 	movq   $0x1557,(%rdx)
    21c0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    21c7:	00 
    21c8:	48 89 e9             	mov    %rbp,%rcx
    21cb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    21cf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    21d6:	00 
    21d7:	48 89 c1             	mov    %rax,%rcx
    21da:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    21de:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    21e5:	00 
    21e6:	ff 32                	pushq  (%rdx)
    21e8:	48 8b 15 29 17 75 00 	mov    0x751729(%rip),%rdx        # 753918 <tmpquadone>
    21ef:	48 8b 0d 3a ba 5f 00 	mov    0x5fba3a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    21f6:	48 c7 05 4f 17 75 00 	movq   $0x1,0x75174f(%rip)        # 753950 <cmpPassed>
    21fd:	01 00 00 00 
    2201:	e8 5a 04 00 00       	callq  2660 <_storeDataFn>
    2206:	39 e8                	cmp    %ebp,%eax
    2208:	0f 8d 99 00 00 00    	jge    22a7 <runSUT+0x5c1>
    220e:	50                   	push   %rax
    220f:	48 b8 bf 76 a5 de 00 	movabs $0xdea576bf,%rax
    2216:	00 00 00 
    2219:	48 89 05 20 17 75 00 	mov    %rax,0x751720(%rip)        # 753940 <edgeId>
    2220:	58                   	pop    %rax
    2221:	e8 a3 03 00 00       	callq  25c9 <_storeEdge>
    infile = argv[optind];
    2226:	48 8b 2c c3          	mov    (%rbx,%rax,8),%rbp
  else
    infile = "-";

  if (STREQ (infile, "-"))
    222a:	48 8d 35 b9 78 02 00 	lea    0x278b9(%rip),%rsi        # 29aea <b64c+0x8a>
    2231:	48 89 ef             	mov    %rbp,%rdi
    2234:	e8 47 f8 ff ff       	callq  1a80 <strcmp@plt>
    2239:	85 c0                	test   %eax,%eax
    223b:	0f 84 82 00 00 00    	je     22c3 <runSUT+0x5dd>
    2241:	50                   	push   %rax
    2242:	48 b8 5d a9 77 a7 00 	movabs $0xa777a95d,%rax
    2249:	00 00 00 
    224c:	48 89 05 ed 16 75 00 	mov    %rax,0x7516ed(%rip)        # 753940 <edgeId>
    2253:	58                   	pop    %rax
    2254:	e8 70 03 00 00       	callq  25c9 <_storeEdge>
        xfreopen (NULL, "rb", stdin);
      input_fh = stdin;
    }
  else
    {
      input_fh = fopen (infile, "rb");
    2259:	48 8d 35 2c 72 02 00 	lea    0x2722c(%rip),%rsi        # 2948c <_IO_stdin_used+0x10c>
    2260:	48 89 ef             	mov    %rbp,%rdi
    2263:	e8 48 f9 ff ff       	callq  1bb0 <fopen@plt>
      if (input_fh == NULL)
    2268:	48 85 c0             	test   %rax,%rax
      input_fh = fopen (infile, "rb");
    226b:	48 89 c3             	mov    %rax,%rbx
      if (input_fh == NULL)
    226e:	75 6f                	jne    22df <runSUT+0x5f9>
    2270:	50                   	push   %rax
    2271:	48 b8 7a 77 1a a2 00 	movabs $0xa21a777a,%rax
    2278:	00 00 00 
    227b:	48 89 05 be 16 75 00 	mov    %rax,0x7516be(%rip)        # 753940 <edgeId>
    2282:	58                   	pop    %rax
    2283:	e8 41 03 00 00       	callq  25c9 <_storeEdge>
        error (EXIT_FAILURE, errno, "%s", infile);
    2288:	e8 03 f6 ff ff       	callq  1890 <__errno_location@plt>
    228d:	8b 30                	mov    (%rax),%esi
    228f:	48 8d 15 cd 71 02 00 	lea    0x271cd(%rip),%rdx        # 29463 <_IO_stdin_used+0xe3>
    2296:	48 89 e9             	mov    %rbp,%rcx
    2299:	bf 01 00 00 00       	mov    $0x1,%edi
    229e:	31 c0                	xor    %eax,%eax
    22a0:	e8 cb f8 ff ff       	callq  1b70 <error@plt>
    22a5:	eb 38                	jmp    22df <runSUT+0x5f9>
    22a7:	50                   	push   %rax
    22a8:	48 c7 c0 d3 10 1d 3a 	mov    $0x3a1d10d3,%rax
    22af:	48 89 05 8a 16 75 00 	mov    %rax,0x75168a(%rip)        # 753940 <edgeId>
    22b6:	58                   	pop    %rax
    22b7:	e8 0d 03 00 00       	callq  25c9 <_storeEdge>
    infile = "-";
    22bc:	48 8d 2d 27 78 02 00 	lea    0x27827(%rip),%rbp        # 29aea <b64c+0x8a>
    22c3:	50                   	push   %rax
    22c4:	48 c7 c0 0d d1 a1 73 	mov    $0x73a1d10d,%rax
    22cb:	48 89 05 6e 16 75 00 	mov    %rax,0x75166e(%rip)        # 753940 <edgeId>
    22d2:	58                   	pop    %rax
    22d3:	e8 f1 02 00 00       	callq  25c9 <_storeEdge>
      input_fh = stdin;
    22d8:	48 8b 1d b1 ad 22 00 	mov    0x22adb1(%rip),%rbx        # 22d090 <stdin@@GLIBC_2.2.5>
    22df:	50                   	push   %rax
    22e0:	48 b8 10 1d 3a e7 00 	movabs $0xe73a1d10,%rax
    22e7:	00 00 00 
    22ea:	48 89 05 4f 16 75 00 	mov    %rax,0x75164f(%rip)        # 753940 <edgeId>
    22f1:	58                   	pop    %rax
    22f2:	e8 d2 02 00 00       	callq  25c9 <_storeEdge>
    }

  fadvise (input_fh, FADVISE_SEQUENTIAL);
    22f7:	be 02 00 00 00       	mov    $0x2,%esi
    22fc:	48 89 df             	mov    %rbx,%rdi
    22ff:	e8 6c ff 00 00       	callq  12270 <fadvise>
  if (decode)
    2304:	45 84 ed             	test   %r13b,%r13b
    2307:	0f 84 b8 00 00 00    	je     23c5 <runSUT+0x6df>
    230d:	50                   	push   %rax
    230e:	48 c7 c0 1d 3a e7 4b 	mov    $0x4be73a1d,%rax
    2315:	48 89 05 24 16 75 00 	mov    %rax,0x751624(%rip)        # 753940 <edgeId>
    231c:	58                   	pop    %rax
    231d:	e8 a7 02 00 00       	callq  25c9 <_storeEdge>
    do_decode (input_fh, stdout, ignore_garbage);
    2322:	48 8b 35 5f ad 22 00 	mov    0x22ad5f(%rip),%rsi        # 22d088 <stdout@@GLIBC_2.2.5>
    2329:	41 0f b6 d4          	movzbl %r12b,%edx
    232d:	48 89 df             	mov    %rbx,%rdi
    2330:	e8 fb 96 00 00       	callq  ba30 <do_decode>
    2335:	50                   	push   %rax
    2336:	48 b8 74 ce 97 a4 00 	movabs $0xa497ce74,%rax
    233d:	00 00 00 
    2340:	48 89 05 f9 15 75 00 	mov    %rax,0x7515f9(%rip)        # 753940 <edgeId>
    2347:	58                   	pop    %rax
    2348:	e8 7c 02 00 00       	callq  25c9 <_storeEdge>
  else
    do_encode (input_fh, stdout, wrap_column);

  if (fclose (input_fh) == EOF)
    234d:	48 89 df             	mov    %rbx,%rdi
    2350:	e8 5b 29 02 00       	callq  24cb0 <rpl_fclose>
    2355:	83 c0 01             	add    $0x1,%eax
    2358:	0f 84 97 00 00 00    	je     23f5 <runSUT+0x70f>
    235e:	50                   	push   %rax
    235f:	48 b8 39 5f 92 ca 00 	movabs $0xca925f39,%rax
    2366:	00 00 00 
    2369:	48 89 05 d0 15 75 00 	mov    %rax,0x7515d0(%rip)        # 753940 <edgeId>
    2370:	58                   	pop    %rax
    2371:	e8 53 02 00 00       	callq  25c9 <_storeEdge>
    2376:	50                   	push   %rax
    2377:	48 c7 c0 9c 2f 49 65 	mov    $0x65492f9c,%rax
    237e:	48 89 05 bb 15 75 00 	mov    %rax,0x7515bb(%rip)        # 753940 <edgeId>
    2385:	58                   	pop    %rax
    2386:	e8 3e 02 00 00       	callq  25c9 <_storeEdge>
      else
        error (EXIT_FAILURE, errno, "%s", infile);
    }

  return EXIT_SUCCESS;
}
    238b:	31 c0                	xor    %eax,%eax
    238d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    2392:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2399:	00 00 
    239b:	0f 85 0b 02 00 00    	jne    25ac <runSUT+0x8c6>
    23a1:	50                   	push   %rax
    23a2:	48 c7 c0 7c 49 2a 03 	mov    $0x32a497c,%rax
    23a9:	48 89 05 90 15 75 00 	mov    %rax,0x751590(%rip)        # 753940 <edgeId>
    23b0:	58                   	pop    %rax
    23b1:	e8 13 02 00 00       	callq  25c9 <_storeEdge>
    23b6:	48 83 c4 18          	add    $0x18,%rsp
    23ba:	5b                   	pop    %rbx
    23bb:	5d                   	pop    %rbp
    23bc:	41 5c                	pop    %r12
    23be:	41 5d                	pop    %r13
    23c0:	41 5e                	pop    %r14
    23c2:	41 5f                	pop    %r15
    23c4:	c3                   	retq   
    23c5:	50                   	push   %rax
    23c6:	48 b8 32 10 02 a4 00 	movabs $0xa4021032,%rax
    23cd:	00 00 00 
    23d0:	48 89 05 69 15 75 00 	mov    %rax,0x751569(%rip)        # 753940 <edgeId>
    23d7:	58                   	pop    %rax
    23d8:	e8 ec 01 00 00       	callq  25c9 <_storeEdge>
    do_encode (input_fh, stdout, wrap_column);
    23dd:	48 8b 14 24          	mov    (%rsp),%rdx
    23e1:	48 8b 35 a0 ac 22 00 	mov    0x22aca0(%rip),%rsi        # 22d088 <stdout@@GLIBC_2.2.5>
    23e8:	48 89 df             	mov    %rbx,%rdi
    23eb:	e8 e0 8a 00 00       	callq  aed0 <do_encode>
    23f0:	e9 40 ff ff ff       	jmpq   2335 <runSUT+0x64f>
    23f5:	50                   	push   %rax
    23f6:	48 b8 08 01 52 8d 00 	movabs $0x8d520108,%rax
    23fd:	00 00 00 
    2400:	48 89 05 39 15 75 00 	mov    %rax,0x751539(%rip)        # 753940 <edgeId>
    2407:	58                   	pop    %rax
    2408:	e8 bc 01 00 00       	callq  25c9 <_storeEdge>
      if (STREQ (infile, "-"))
    240d:	48 8d 35 d6 76 02 00 	lea    0x276d6(%rip),%rsi        # 29aea <b64c+0x8a>
    2414:	48 89 ef             	mov    %rbp,%rdi
    2417:	e8 64 f6 ff ff       	callq  1a80 <strcmp@plt>
    241c:	41 89 c5             	mov    %eax,%r13d
    241f:	e8 6c f4 ff ff       	callq  1890 <__errno_location@plt>
    2424:	45 85 ed             	test   %r13d,%r13d
    2427:	49 89 c4             	mov    %rax,%r12
    242a:	74 32                	je     245e <runSUT+0x778>
    242c:	50                   	push   %rax
    242d:	48 c7 c0 40 aa 11 78 	mov    $0x7811aa40,%rax
    2434:	48 89 05 05 15 75 00 	mov    %rax,0x751505(%rip)        # 753940 <edgeId>
    243b:	58                   	pop    %rax
    243c:	e8 88 01 00 00       	callq  25c9 <_storeEdge>
        error (EXIT_FAILURE, errno, "%s", infile);
    2441:	8b 30                	mov    (%rax),%esi
    2443:	48 8d 15 19 70 02 00 	lea    0x27019(%rip),%rdx        # 29463 <_IO_stdin_used+0xe3>
    244a:	48 89 e9             	mov    %rbp,%rcx
    244d:	bf 01 00 00 00       	mov    $0x1,%edi
    2452:	31 c0                	xor    %eax,%eax
    2454:	e8 17 f7 ff ff       	callq  1b70 <error@plt>
    2459:	e9 18 ff ff ff       	jmpq   2376 <runSUT+0x690>
    245e:	50                   	push   %rax
    245f:	48 b8 6a 04 9e a1 00 	movabs $0xa19e046a,%rax
    2466:	00 00 00 
    2469:	48 89 05 d0 14 75 00 	mov    %rax,0x7514d0(%rip)        # 753940 <edgeId>
    2470:	58                   	pop    %rax
    2471:	e8 53 01 00 00       	callq  25c9 <_storeEdge>
        error (EXIT_FAILURE, errno, _("closing standard input"));
    2476:	48 8d 35 12 70 02 00 	lea    0x27012(%rip),%rsi        # 2948f <_IO_stdin_used+0x10f>
    247d:	31 ff                	xor    %edi,%edi
    247f:	ba 05 00 00 00       	mov    $0x5,%edx
    2484:	e8 97 f4 ff ff       	callq  1920 <dcgettext@plt>
    2489:	41 8b 34 24          	mov    (%r12),%esi
    248d:	48 89 c2             	mov    %rax,%rdx
    2490:	bf 01 00 00 00       	mov    $0x1,%edi
    2495:	31 c0                	xor    %eax,%eax
    2497:	e8 d4 f6 ff ff       	callq  1b70 <error@plt>
    249c:	e9 d5 fe ff ff       	jmpq   2376 <runSUT+0x690>
    24a1:	50                   	push   %rax
    24a2:	48 c7 c0 3c 43 75 4a 	mov    $0x4a75433c,%rax
    24a9:	48 89 05 90 14 75 00 	mov    %rax,0x751490(%rip)        # 753940 <edgeId>
    24b0:	58                   	pop    %rax
    24b1:	e8 13 01 00 00       	callq  25c9 <_storeEdge>
    switch (opt)
    24b6:	48 89 15 5b 14 75 00 	mov    %rdx,0x75145b(%rip)        # 753918 <tmpquadone>
    24bd:	48 89 0d 6c b7 5f 00 	mov    %rcx,0x5fb76c(%rip)        # 5fdc30 <tmpquadtwo>
    24c4:	48 8d 15 25 b7 5f 00 	lea    0x5fb725(%rip),%rdx        # 5fdbf0 <funcinptr>
    24cb:	48 c7 02 58 15 00 00 	movq   $0x1558,(%rdx)
    24d2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    24d9:	00 
    24da:	48 c7 c1 7e ff ff ff 	mov    $0xffffffffffffff7e,%rcx
    24e1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    24e5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    24ec:	00 
    24ed:	48 89 c1             	mov    %rax,%rcx
    24f0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    24f4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    24fb:	00 
    24fc:	ff 32                	pushq  (%rdx)
    24fe:	48 8b 15 13 14 75 00 	mov    0x751413(%rip),%rdx        # 753918 <tmpquadone>
    2505:	48 8b 0d 24 b7 5f 00 	mov    0x5fb724(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    250c:	48 c7 05 39 14 75 00 	movq   $0x1,0x751439(%rip)        # 753950 <cmpPassed>
    2513:	01 00 00 00 
    2517:	e8 44 01 00 00       	callq  2660 <_storeDataFn>
    251c:	3d 7e ff ff ff       	cmp    $0xffffff7e,%eax
    2521:	75 67                	jne    258a <runSUT+0x8a4>
    2523:	50                   	push   %rax
    2524:	48 b8 67 a8 4e e9 00 	movabs $0xe94ea867,%rax
    252b:	00 00 00 
    252e:	48 89 05 0b 14 75 00 	mov    %rax,0x75140b(%rip)        # 753940 <edgeId>
    2535:	58                   	pop    %rax
    2536:	e8 8e 00 00 00       	callq  25c9 <_storeEdge>
      case_GETOPT_HELP_CHAR;
    253b:	31 ff                	xor    %edi,%edi
    253d:	e8 ae aa 00 00       	callq  cff0 <usage>
    2542:	50                   	push   %rax
    2543:	48 b8 43 75 4a 97 00 	movabs $0x974a7543,%rax
    254a:	00 00 00 
    254d:	48 89 05 ec 13 75 00 	mov    %rax,0x7513ec(%rip)        # 753940 <edgeId>
    2554:	58                   	pop    %rax
    2555:	e8 6f 00 00 00       	callq  25c9 <_storeEdge>
      error (0, 0, _("extra operand %s"), quote (argv[optind]));
    255a:	48 8b 3c c3          	mov    (%rbx,%rax,8),%rdi
    255e:	e8 7d e2 01 00       	callq  207e0 <quote>
    2563:	48 8d 35 11 6f 02 00 	lea    0x26f11(%rip),%rsi        # 2947b <_IO_stdin_used+0xfb>
    256a:	49 89 c6             	mov    %rax,%r14
    256d:	ba 05 00 00 00       	mov    $0x5,%edx
    2572:	31 ff                	xor    %edi,%edi
    2574:	e8 a7 f3 ff ff       	callq  1920 <dcgettext@plt>
    2579:	4c 89 f1             	mov    %r14,%rcx
    257c:	48 89 c2             	mov    %rax,%rdx
    257f:	31 f6                	xor    %esi,%esi
    2581:	31 ff                	xor    %edi,%edi
    2583:	31 c0                	xor    %eax,%eax
    2585:	e8 e6 f5 ff ff       	callq  1b70 <error@plt>
    258a:	50                   	push   %rax
    258b:	48 b8 d2 e5 98 ad 00 	movabs $0xad98e5d2,%rax
    2592:	00 00 00 
    2595:	48 89 05 a4 13 75 00 	mov    %rax,0x7513a4(%rip)        # 753940 <edgeId>
    259c:	58                   	pop    %rax
    259d:	e8 27 00 00 00       	callq  25c9 <_storeEdge>
      usage (EXIT_FAILURE);
    25a2:	bf 01 00 00 00       	mov    $0x1,%edi
    25a7:	e8 44 aa 00 00       	callq  cff0 <usage>
    25ac:	50                   	push   %rax
    25ad:	48 b8 2e c7 6c 95 00 	movabs $0x956cc72e,%rax
    25b4:	00 00 00 
    25b7:	48 89 05 82 13 75 00 	mov    %rax,0x751382(%rip)        # 753940 <edgeId>
    25be:	58                   	pop    %rax
    25bf:	e8 05 00 00 00       	callq  25c9 <_storeEdge>
}
    25c4:	e8 87 f3 ff ff       	callq  1950 <__stack_chk_fail@plt>

00000000000025c9 <_storeEdge>:
    25c9:	50                   	push   %rax
    25ca:	53                   	push   %rbx
    25cb:	51                   	push   %rcx
    25cc:	52                   	push   %rdx
    25cd:	48 83 3d 7b 13 75 00 	cmpq   $0x1,0x75137b(%rip)        # 753950 <cmpPassed>
    25d4:	01 
    25d5:	75 3c                	jne    2613 <_caledgehash>
    25d7:	48 c7 05 6e 13 75 00 	movq   $0x0,0x75136e(%rip)        # 753950 <cmpPassed>
    25de:	00 00 00 00 
    25e2:	48 8b 05 3f b6 5f 00 	mov    0x5fb63f(%rip),%rax        # 5fdc28 <edgeCnt>
    25e9:	48 c1 e0 03          	shl    $0x3,%rax
    25ed:	48 3b 05 f4 b5 5f 00 	cmp    0x5fb5f4(%rip),%rax        # 5fdbe8 <shmSize2>
    25f4:	77 55                	ja     264b <_shm2Full>
    25f6:	48 8b 1d 13 13 75 00 	mov    0x751313(%rip),%rbx        # 753910 <edgehash>
    25fd:	48 8b 15 04 13 75 00 	mov    0x751304(%rip),%rdx        # 753908 <shmptr_edge>
    2604:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    2608:	48 89 19             	mov    %rbx,(%rcx)
    260b:	48 83 05 15 b6 5f 00 	addq   $0x1,0x5fb615(%rip)        # 5fdc28 <edgeCnt>
    2612:	01 

0000000000002613 <_caledgehash>:
    2613:	48 8b 15 f6 12 75 00 	mov    0x7512f6(%rip),%rdx        # 753910 <edgehash>
    261a:	48 89 d0             	mov    %rdx,%rax
    261d:	48 c1 e0 05          	shl    $0x5,%rax
    2621:	48 01 c2             	add    %rax,%rdx
    2624:	48 8b 05 15 13 75 00 	mov    0x751315(%rip),%rax        # 753940 <edgeId>
    262b:	48 01 d0             	add    %rdx,%rax
    262e:	48 89 05 db 12 75 00 	mov    %rax,0x7512db(%rip)        # 753910 <edgehash>
    2635:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    263c:	00 00 00 
    263f:	48 21 05 ca 12 75 00 	and    %rax,0x7512ca(%rip)        # 753910 <edgehash>
    2646:	5a                   	pop    %rdx
    2647:	59                   	pop    %rcx
    2648:	5b                   	pop    %rbx
    2649:	58                   	pop    %rax
    264a:	c3                   	retq   

000000000000264b <_shm2Full>:
    264b:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    2652:	5a                   	pop    %rdx
    2653:	59                   	pop    %rcx
    2654:	5b                   	pop    %rbx
    2655:	58                   	pop    %rax
    2656:	e8 55 f2 ff ff       	callq  18b0 <_exit@plt>
    265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002660 <_storeDataFn>:
    2660:	55                   	push   %rbp
    2661:	48 89 e5             	mov    %rsp,%rbp
    2664:	50                   	push   %rax
    2665:	53                   	push   %rbx
    2666:	41 50                	push   %r8
    2668:	41 51                	push   %r9
    266a:	41 52                	push   %r10
    266c:	48 8b 05 c5 12 75 00 	mov    0x7512c5(%rip),%rax        # 753938 <shmptr_gcnt>
    2673:	48 8b 00             	mov    (%rax),%rax
    2676:	48 c1 e0 03          	shl    $0x3,%rax
    267a:	48 83 c0 30          	add    $0x30,%rax
    267e:	48 3b 05 c3 12 75 00 	cmp    0x7512c3(%rip),%rax        # 753948 <shmSize>
    2685:	0f 83 8f 01 00 00    	jae    281a <_shmFull>
    268b:	48 83 3d 9d 12 75 00 	cmpq   $0x0,0x75129d(%rip)        # 753930 <shmptr_cmp>
    2692:	00 
    2693:	0f 84 99 01 00 00    	je     2832 <_shmUninitialize>
    2699:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    26a0:	48 83 e8 30          	sub    $0x30,%rax
    26a4:	48 c1 e8 03          	shr    $0x3,%rax

00000000000026a8 <_storeloop>:
    26a8:	49 89 c2             	mov    %rax,%r10
    26ab:	49 c1 e2 03          	shl    $0x3,%r10
    26af:	4c 03 15 7a 12 75 00 	add    0x75127a(%rip),%r10        # 753930 <shmptr_cmp>
    26b6:	49 89 d9             	mov    %rbx,%r9
    26b9:	49 c1 e1 03          	shl    $0x3,%r9
    26bd:	4c 8d 05 2c b5 5f 00 	lea    0x5fb52c(%rip),%r8        # 5fdbf0 <funcinptr>
    26c4:	4d 01 c1             	add    %r8,%r9
    26c7:	4d 8b 01             	mov    (%r9),%r8
    26ca:	4d 89 02             	mov    %r8,(%r10)
    26cd:	48 83 fb 00          	cmp    $0x0,%rbx
    26d1:	75 07                	jne    26da <_no_get_cmpid>
    26d3:	4c 89 05 4e 12 75 00 	mov    %r8,0x75124e(%rip)        # 753928 <cmpid>

00000000000026da <_no_get_cmpid>:
    26da:	48 ff c0             	inc    %rax
    26dd:	48 ff c3             	inc    %rbx
    26e0:	48 83 fb 06          	cmp    $0x6,%rbx
    26e4:	75 c2                	jne    26a8 <_storeloop>
    26e6:	48 8b 1d 4b 12 75 00 	mov    0x75124b(%rip),%rbx        # 753938 <shmptr_gcnt>
    26ed:	48 89 03             	mov    %rax,(%rbx)
    26f0:	48 8b 05 31 12 75 00 	mov    0x751231(%rip),%rax        # 753928 <cmpid>
    26f7:	48 c1 e0 04          	shl    $0x4,%rax
    26fb:	48 89 c3             	mov    %rax,%rbx
    26fe:	48 83 c3 08          	add    $0x8,%rbx
    2702:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    2709:	0f 83 17 01 00 00    	jae    2826 <_cmpdictFull>
    270f:	48 8d 1d 2a b5 5f 00 	lea    0x5fb52a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    2716:	48 01 d8             	add    %rbx,%rax
    2719:	48 83 38 00          	cmpq   $0x0,(%rax)
    271d:	0f 84 db 00 00 00    	je     27fe <_insert_entry>
    2723:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000272a <_remove_repeated_cycle>:
    272a:	4d 89 c1             	mov    %r8,%r9
    272d:	4d 89 ca             	mov    %r9,%r10
    2730:	49 c1 e1 02          	shl    $0x2,%r9
    2734:	4d 01 d1             	add    %r10,%r9
    2737:	4d 01 d1             	add    %r10,%r9
    273a:	4c 8b 15 f7 11 75 00 	mov    0x7511f7(%rip),%r10        # 753938 <shmptr_gcnt>
    2741:	4d 8b 12             	mov    (%r10),%r10
    2744:	4c 2b 10             	sub    (%rax),%r10
    2747:	4c 3b 10             	cmp    (%rax),%r10
    274a:	0f 87 9f 00 00 00    	ja     27ef <_no_remove_cycle>
    2750:	4d 39 ca             	cmp    %r9,%r10
    2753:	76 67                	jbe    27bc <_remove_cycle>
    2755:	4d 89 c1             	mov    %r8,%r9
    2758:	49 83 c1 01          	add    $0x1,%r9
    275c:	4d 89 ca             	mov    %r9,%r10
    275f:	49 c1 e1 02          	shl    $0x2,%r9
    2763:	4d 01 d1             	add    %r10,%r9
    2766:	4d 01 d1             	add    %r10,%r9
    2769:	4c 8b 15 c8 11 75 00 	mov    0x7511c8(%rip),%r10        # 753938 <shmptr_gcnt>
    2770:	4d 8b 12             	mov    (%r10),%r10
    2773:	4d 29 ca             	sub    %r9,%r10
    2776:	49 c1 e2 03          	shl    $0x3,%r10
    277a:	4c 8b 0d af 11 75 00 	mov    0x7511af(%rip),%r9        # 753930 <shmptr_cmp>
    2781:	4d 01 d1             	add    %r10,%r9
    2784:	49 8b 19             	mov    (%r9),%rbx
    2787:	4d 89 c1             	mov    %r8,%r9
    278a:	49 83 c1 01          	add    $0x1,%r9
    278e:	4d 89 ca             	mov    %r9,%r10
    2791:	49 c1 e1 02          	shl    $0x2,%r9
    2795:	4d 01 d1             	add    %r10,%r9
    2798:	4d 01 d1             	add    %r10,%r9
    279b:	4c 8b 10             	mov    (%rax),%r10
    279e:	4d 29 ca             	sub    %r9,%r10
    27a1:	49 c1 e2 03          	shl    $0x3,%r10
    27a5:	4c 8b 0d 84 11 75 00 	mov    0x751184(%rip),%r9        # 753930 <shmptr_cmp>
    27ac:	4d 01 d1             	add    %r10,%r9
    27af:	49 3b 19             	cmp    (%r9),%rbx
    27b2:	75 3b                	jne    27ef <_no_remove_cycle>
    27b4:	49 ff c0             	inc    %r8
    27b7:	e9 6e ff ff ff       	jmpq   272a <_remove_repeated_cycle>

00000000000027bc <_remove_cycle>:
    27bc:	48 89 15 55 11 75 00 	mov    %rdx,0x751155(%rip)        # 753918 <tmpquadone>
    27c3:	48 8b 10             	mov    (%rax),%rdx
    27c6:	48 8b 05 6b 11 75 00 	mov    0x75116b(%rip),%rax        # 753938 <shmptr_gcnt>
    27cd:	48 89 10             	mov    %rdx,(%rax)
    27d0:	89 d0                	mov    %edx,%eax
    27d2:	48 c1 ea 20          	shr    $0x20,%rdx
    27d6:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    27dd:	49 f7 f0             	div    %r8
    27e0:	89 05 42 b4 5f 00    	mov    %eax,0x5fb442(%rip)        # 5fdc28 <edgeCnt>
    27e6:	48 8b 15 2b 11 75 00 	mov    0x75112b(%rip),%rdx        # 753918 <tmpquadone>
    27ed:	eb 1c                	jmp    280b <_skipstoredata>

00000000000027ef <_no_remove_cycle>:
    27ef:	48 8b 1d 42 11 75 00 	mov    0x751142(%rip),%rbx        # 753938 <shmptr_gcnt>
    27f6:	48 8b 1b             	mov    (%rbx),%rbx
    27f9:	48 89 18             	mov    %rbx,(%rax)
    27fc:	eb 0d                	jmp    280b <_skipstoredata>

00000000000027fe <_insert_entry>:
    27fe:	48 8b 1d 33 11 75 00 	mov    0x751133(%rip),%rbx        # 753938 <shmptr_gcnt>
    2805:	48 8b 1b             	mov    (%rbx),%rbx
    2808:	48 89 18             	mov    %rbx,(%rax)

000000000000280b <_skipstoredata>:
    280b:	41 5a                	pop    %r10
    280d:	41 59                	pop    %r9
    280f:	41 58                	pop    %r8
    2811:	5b                   	pop    %rbx
    2812:	58                   	pop    %rax
    2813:	48 89 ec             	mov    %rbp,%rsp
    2816:	5d                   	pop    %rbp
    2817:	c2 08 00             	retq   $0x8

000000000000281a <_shmFull>:
    281a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    2821:	e8 8a f0 ff ff       	callq  18b0 <_exit@plt>

0000000000002826 <_cmpdictFull>:
    2826:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    282d:	e8 7e f0 ff ff       	callq  18b0 <_exit@plt>

0000000000002832 <_shmUninitialize>:
    2832:	48 89 ec             	mov    %rbp,%rsp
    2835:	5d                   	pop    %rbp
    2836:	48 31 c0             	xor    %rax,%rax
    2839:	c2 08 00             	retq   $0x8
    283c:	0f 1f 40 00          	nopl   0x0(%rax)
    2840:	9f                   	lahf   
    2841:	0f 90 c0             	seto   %al
    2844:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002848 <__afl_setup_first>:
    2848:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    284f:	ff 
    2850:	48 89 04 24          	mov    %rax,(%rsp)
    2854:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    2859:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    285e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    2863:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    2868:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    286d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    2872:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    2877:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    287d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    2883:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    288a:	00 00 
    288c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    2893:	00 00 
    2895:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    289c:	00 00 
    289e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    28a5:	00 00 
    28a7:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    28ae:	00 00 
    28b0:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    28b7:	00 00 
    28b9:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    28c0:	00 00 00 
    28c3:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    28ca:	00 00 00 
    28cd:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    28d4:	01 00 00 
    28d7:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    28de:	01 00 00 
    28e1:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    28e8:	01 00 00 
    28eb:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    28f2:	01 00 00 
    28f5:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    28fc:	01 00 00 
    28ff:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    2906:	01 00 00 
    2909:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    2910:	00 
    2911:	41 54                	push   %r12
    2913:	49 89 e4             	mov    %rsp,%r12
    2916:	48 83 ec 10          	sub    $0x10,%rsp
    291a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    291e:	48 c7 05 1f 10 75 00 	movq   $0x100000,0x75101f(%rip)        # 753948 <shmSize>
    2925:	00 00 10 00 
    2929:	48 c7 05 b4 b2 5f 00 	movq   $0x100000,0x5fb2b4(%rip)        # 5fdbe8 <shmSize2>
    2930:	00 00 10 00 
    2934:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 2c86 <.SHM_ENV_GCNT>
    293b:	e8 20 ef ff ff       	callq  1860 <getenv@plt>
    2940:	48 85 c0             	test   %rax,%rax
    2943:	0f 84 6a 01 00 00    	je     2ab3 <__afl_setup_abort>
    2949:	48 89 c7             	mov    %rax,%rdi
    294c:	e8 9f f2 ff ff       	callq  1bf0 <atoi@plt>
    2951:	48 31 d2             	xor    %rdx,%rdx
    2954:	48 31 f6             	xor    %rsi,%rsi
    2957:	48 89 c7             	mov    %rax,%rdi
    295a:	e8 71 f2 ff ff       	callq  1bd0 <shmat@plt>
    295f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    2963:	0f 84 4a 01 00 00    	je     2ab3 <__afl_setup_abort>
    2969:	48 89 05 c8 0f 75 00 	mov    %rax,0x750fc8(%rip)        # 753938 <shmptr_gcnt>
    2970:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 2c6d <.SHM_ENV_CMP>
    2977:	e8 e4 ee ff ff       	callq  1860 <getenv@plt>
    297c:	48 85 c0             	test   %rax,%rax
    297f:	0f 84 2e 01 00 00    	je     2ab3 <__afl_setup_abort>
    2985:	48 89 c7             	mov    %rax,%rdi
    2988:	e8 63 f2 ff ff       	callq  1bf0 <atoi@plt>
    298d:	48 31 d2             	xor    %rdx,%rdx
    2990:	48 31 f6             	xor    %rsi,%rsi
    2993:	48 89 c7             	mov    %rax,%rdi
    2996:	e8 35 f2 ff ff       	callq  1bd0 <shmat@plt>
    299b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    299f:	0f 84 0e 01 00 00    	je     2ab3 <__afl_setup_abort>
    29a5:	48 89 05 84 0f 75 00 	mov    %rax,0x750f84(%rip)        # 753930 <shmptr_cmp>
    29ac:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 2c79 <.SHM_ENV_EDGE>
    29b3:	e8 a8 ee ff ff       	callq  1860 <getenv@plt>
    29b8:	48 85 c0             	test   %rax,%rax
    29bb:	0f 84 f2 00 00 00    	je     2ab3 <__afl_setup_abort>
    29c1:	48 89 c7             	mov    %rax,%rdi
    29c4:	e8 27 f2 ff ff       	callq  1bf0 <atoi@plt>
    29c9:	48 31 d2             	xor    %rdx,%rdx
    29cc:	48 31 f6             	xor    %rsi,%rsi
    29cf:	48 89 c7             	mov    %rax,%rdi
    29d2:	e8 f9 f1 ff ff       	callq  1bd0 <shmat@plt>
    29d7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    29db:	0f 84 d2 00 00 00    	je     2ab3 <__afl_setup_abort>
    29e1:	48 89 05 20 0f 75 00 	mov    %rax,0x750f20(%rip)        # 753908 <shmptr_edge>

00000000000029e8 <__afl_forkserver>:
    29e8:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    29ef:	48 8d 35 ee af 5f 00 	lea    0x5fafee(%rip),%rsi        # 5fd9e4 <__afl_temp>
    29f6:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    29fd:	e8 ce ee ff ff       	callq  18d0 <write@plt>
    2a02:	48 83 f8 04          	cmp    $0x4,%rax
    2a06:	0f 85 78 01 00 00    	jne    2b84 <__afl_fork_resume>

0000000000002a0c <__afl_fork_wait_loop>:
    2a0c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    2a13:	48 8d 35 ca af 5f 00 	lea    0x5fafca(%rip),%rsi        # 5fd9e4 <__afl_temp>
    2a1a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    2a21:	e8 1a f0 ff ff       	callq  1a40 <read@plt>
    2a26:	48 83 f8 04          	cmp    $0x4,%rax
    2a2a:	75 70                	jne    2a9c <__afl_die>
    2a2c:	e8 1f f2 ff ff       	callq  1c50 <fork@plt>
    2a31:	48 83 f8 00          	cmp    $0x0,%rax
    2a35:	7c 65                	jl     2a9c <__afl_die>
    2a37:	0f 84 47 01 00 00    	je     2b84 <__afl_fork_resume>
    2a3d:	89 05 9d af 5f 00    	mov    %eax,0x5faf9d(%rip)        # 5fd9e0 <__afl_fork_pid>
    2a43:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    2a4a:	48 8d 35 8f af 5f 00 	lea    0x5faf8f(%rip),%rsi        # 5fd9e0 <__afl_fork_pid>
    2a51:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    2a58:	e8 73 ee ff ff       	callq  18d0 <write@plt>
    2a5d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    2a64:	48 8d 35 79 af 5f 00 	lea    0x5faf79(%rip),%rsi        # 5fd9e4 <__afl_temp>
    2a6b:	48 8b 3d 6e af 5f 00 	mov    0x5faf6e(%rip),%rdi        # 5fd9e0 <__afl_fork_pid>
    2a72:	e8 09 f1 ff ff       	callq  1b80 <waitpid@plt>
    2a77:	48 83 f8 00          	cmp    $0x0,%rax
    2a7b:	7e 1f                	jle    2a9c <__afl_die>
    2a7d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    2a84:	48 8d 35 59 af 5f 00 	lea    0x5faf59(%rip),%rsi        # 5fd9e4 <__afl_temp>
    2a8b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    2a92:	e8 39 ee ff ff       	callq  18d0 <write@plt>
    2a97:	e9 70 ff ff ff       	jmpq   2a0c <__afl_fork_wait_loop>

0000000000002a9c <__afl_die>:
    2a9c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 2cca <.serverDied>
    2aa3:	48 31 c0             	xor    %rax,%rax
    2aa6:	e8 e5 ee ff ff       	callq  1990 <printf@plt>
    2aab:	48 31 c0             	xor    %rax,%rax
    2aae:	e8 fd ed ff ff       	callq  18b0 <_exit@plt>

0000000000002ab3 <__afl_setup_abort>:
    2ab3:	4c 89 e4             	mov    %r12,%rsp
    2ab6:	41 5c                	pop    %r12
    2ab8:	48 8b 04 24          	mov    (%rsp),%rax
    2abc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    2ac1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    2ac6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    2acb:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    2ad0:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    2ad5:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    2ada:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    2adf:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    2ae5:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    2aeb:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    2af2:	00 00 
    2af4:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    2afb:	00 00 
    2afd:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    2b04:	00 00 
    2b06:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    2b0d:	00 00 
    2b0f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    2b16:	00 00 
    2b18:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    2b1f:	00 00 
    2b21:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    2b28:	00 00 00 
    2b2b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    2b32:	00 00 00 
    2b35:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    2b3c:	01 00 00 
    2b3f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    2b46:	01 00 00 
    2b49:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    2b50:	01 00 00 
    2b53:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    2b5a:	01 00 00 
    2b5d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    2b64:	01 00 00 
    2b67:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    2b6e:	01 00 00 
    2b71:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    2b78:	00 
    2b79:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    2b80:	00 
    2b81:	b0 7f                	mov    $0x7f,%al
    2b83:	c3                   	retq   

0000000000002b84 <__afl_fork_resume>:
    2b84:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    2b8b:	e8 80 ee ff ff       	callq  1a10 <close@plt>
    2b90:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    2b97:	e8 74 ee ff ff       	callq  1a10 <close@plt>
    2b9c:	4c 89 e4             	mov    %r12,%rsp
    2b9f:	41 5c                	pop    %r12
    2ba1:	48 8b 04 24          	mov    (%rsp),%rax
    2ba5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    2baa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    2baf:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    2bb4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    2bb9:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    2bbe:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    2bc3:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    2bc8:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    2bce:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    2bd4:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    2bdb:	00 00 
    2bdd:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    2be4:	00 00 
    2be6:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    2bed:	00 00 
    2bef:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    2bf6:	00 00 
    2bf8:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    2bff:	00 00 
    2c01:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    2c08:	00 00 
    2c0a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    2c11:	00 00 00 
    2c14:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    2c1b:	00 00 00 
    2c1e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    2c25:	01 00 00 
    2c28:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    2c2f:	01 00 00 
    2c32:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    2c39:	01 00 00 
    2c3c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    2c43:	01 00 00 
    2c46:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    2c4d:	01 00 00 
    2c50:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    2c57:	01 00 00 
    2c5a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    2c61:	00 
    2c62:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    2c69:	00 
    2c6a:	b0 00                	mov    $0x0,%al
    2c6c:	c3                   	retq   

0000000000002c6d <.SHM_ENV_CMP>:
    2c6d:	53                   	push   %rbx
    2c6e:	48                   	rex.W
    2c6f:	4d 5f                	rex.WRB pop %r15
    2c71:	45                   	rex.RB
    2c72:	4e 56                	rex.WRX push %rsi
    2c74:	5f                   	pop    %rdi
    2c75:	43                   	rex.XB
    2c76:	4d 50                	rex.WRB push %r8
	...

0000000000002c79 <.SHM_ENV_EDGE>:
    2c79:	53                   	push   %rbx
    2c7a:	48                   	rex.W
    2c7b:	4d 5f                	rex.WRB pop %r15
    2c7d:	45                   	rex.RB
    2c7e:	4e 56                	rex.WRX push %rsi
    2c80:	5f                   	pop    %rdi
    2c81:	45                   	rex.RB
    2c82:	44                   	rex.R
    2c83:	47                   	rex.RXB
    2c84:	45                   	rex.RB
	...

0000000000002c86 <.SHM_ENV_GCNT>:
    2c86:	53                   	push   %rbx
    2c87:	48                   	rex.W
    2c88:	4d 5f                	rex.WRB pop %r15
    2c8a:	45                   	rex.RB
    2c8b:	4e 56                	rex.WRX push %rsi
    2c8d:	5f                   	pop    %rdi
    2c8e:	47                   	rex.RXB
    2c8f:	43                   	rex.XB
    2c90:	4e 54                	rex.WRX push %rsp
	...

0000000000002c93 <.serverSetupError>:
    2c93:	20 53 65             	and    %dl,0x65(%rbx)
    2c96:	72 76                	jb     2d0e <_storeEdge+0x1e>
    2c98:	65 72 20             	gs jb  2cbb <.serverSetupError+0x28>
    2c9b:	53                   	push   %rbx
    2c9c:	65 74 75             	gs je  2d14 <_storeEdge+0x24>
    2c9f:	70 20                	jo     2cc1 <.serverSetupError+0x2e>
    2ca1:	45 72 72             	rex.RB jb 2d16 <_storeEdge+0x26>
    2ca4:	6f                   	outsl  %ds:(%rsi),(%dx)
    2ca5:	72 2c                	jb     2cd3 <.serverDied+0x9>
    2ca7:	20 63 6f             	and    %ah,0x6f(%rbx)
    2caa:	6e                   	outsb  %ds:(%rsi),(%dx)
    2cab:	74 69                	je     2d16 <_storeEdge+0x26>
    2cad:	6e                   	outsb  %ds:(%rsi),(%dx)
    2cae:	75 65                	jne    2d15 <_storeEdge+0x25>
    2cb0:	20 72 75             	and    %dh,0x75(%rdx)
    2cb3:	6e                   	outsb  %ds:(%rsi),(%dx)
    2cb4:	6e                   	outsb  %ds:(%rsi),(%dx)
    2cb5:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    2cbc:	6f                   	outsl  %ds:(%rsi),(%dx)
    2cbd:	75 74                	jne    2d33 <_storeEdge+0x43>
    2cbf:	20 73 65             	and    %dh,0x65(%rbx)
    2cc2:	72 76                	jb     2d3a <_caledgehash>
    2cc4:	65 72 20             	gs jb  2ce7 <.debug+0xa>
    2cc7:	0a 20                	or     (%rax),%ah
	...

0000000000002cca <.serverDied>:
    2cca:	20 53 65             	and    %dl,0x65(%rbx)
    2ccd:	72 76                	jb     2d45 <_caledgehash+0xb>
    2ccf:	65 72 20             	gs jb  2cf2 <_storeEdge+0x2>
    2cd2:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    2cd9:	20 0a                	and    %cl,(%rdx)
    2cdb:	20 00                	and    %al,(%rax)

0000000000002cdd <.debug>:
    2cdd:	64 65 62             	fs gs (bad) 
    2ce0:	75 67                	jne    2d49 <_caledgehash+0xf>
    2ce2:	20 6d 65             	and    %ch,0x65(%rbp)
    2ce5:	73 73                	jae    2d5a <_caledgehash+0x20>
    2ce7:	61                   	(bad)  
    2ce8:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    2cec:	0a 20                	or     (%rax),%ah
    2cee:	00                   	.byte 0x0
    2cef:	90                   	nop

0000000000002cf0 <_storeEdge>:
    2cf0:	50                   	push   %rax
    2cf1:	53                   	push   %rbx
    2cf2:	51                   	push   %rcx
    2cf3:	52                   	push   %rdx
    2cf4:	48 83 3d 54 0c 75 00 	cmpq   $0x1,0x750c54(%rip)        # 753950 <cmpPassed>
    2cfb:	01 
    2cfc:	75 3c                	jne    2d3a <_caledgehash>
    2cfe:	48 c7 05 47 0c 75 00 	movq   $0x0,0x750c47(%rip)        # 753950 <cmpPassed>
    2d05:	00 00 00 00 
    2d09:	48 8b 05 18 af 5f 00 	mov    0x5faf18(%rip),%rax        # 5fdc28 <edgeCnt>
    2d10:	48 c1 e0 03          	shl    $0x3,%rax
    2d14:	48 3b 05 cd ae 5f 00 	cmp    0x5faecd(%rip),%rax        # 5fdbe8 <shmSize2>
    2d1b:	77 55                	ja     2d72 <_shm2Full>
    2d1d:	48 8b 1d ec 0b 75 00 	mov    0x750bec(%rip),%rbx        # 753910 <edgehash>
    2d24:	48 8b 15 dd 0b 75 00 	mov    0x750bdd(%rip),%rdx        # 753908 <shmptr_edge>
    2d2b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    2d2f:	48 89 19             	mov    %rbx,(%rcx)
    2d32:	48 83 05 ee ae 5f 00 	addq   $0x1,0x5faeee(%rip)        # 5fdc28 <edgeCnt>
    2d39:	01 

0000000000002d3a <_caledgehash>:
    2d3a:	48 8b 15 cf 0b 75 00 	mov    0x750bcf(%rip),%rdx        # 753910 <edgehash>
    2d41:	48 89 d0             	mov    %rdx,%rax
    2d44:	48 c1 e0 05          	shl    $0x5,%rax
    2d48:	48 01 c2             	add    %rax,%rdx
    2d4b:	48 8b 05 ee 0b 75 00 	mov    0x750bee(%rip),%rax        # 753940 <edgeId>
    2d52:	48 01 d0             	add    %rdx,%rax
    2d55:	48 89 05 b4 0b 75 00 	mov    %rax,0x750bb4(%rip)        # 753910 <edgehash>
    2d5c:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    2d63:	00 00 00 
    2d66:	48 21 05 a3 0b 75 00 	and    %rax,0x750ba3(%rip)        # 753910 <edgehash>
    2d6d:	5a                   	pop    %rdx
    2d6e:	59                   	pop    %rcx
    2d6f:	5b                   	pop    %rbx
    2d70:	58                   	pop    %rax
    2d71:	c3                   	retq   

0000000000002d72 <_shm2Full>:
    2d72:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    2d79:	5a                   	pop    %rdx
    2d7a:	59                   	pop    %rcx
    2d7b:	5b                   	pop    %rbx
    2d7c:	58                   	pop    %rax
    2d7d:	e8 2e eb ff ff       	callq  18b0 <_exit@plt>
    2d82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002d88 <_storeDataFn>:
    2d88:	55                   	push   %rbp
    2d89:	48 89 e5             	mov    %rsp,%rbp
    2d8c:	50                   	push   %rax
    2d8d:	53                   	push   %rbx
    2d8e:	41 50                	push   %r8
    2d90:	41 51                	push   %r9
    2d92:	41 52                	push   %r10
    2d94:	48 8b 05 9d 0b 75 00 	mov    0x750b9d(%rip),%rax        # 753938 <shmptr_gcnt>
    2d9b:	48 8b 00             	mov    (%rax),%rax
    2d9e:	48 c1 e0 03          	shl    $0x3,%rax
    2da2:	48 83 c0 30          	add    $0x30,%rax
    2da6:	48 3b 05 9b 0b 75 00 	cmp    0x750b9b(%rip),%rax        # 753948 <shmSize>
    2dad:	0f 83 8f 01 00 00    	jae    2f42 <_shmFull>
    2db3:	48 83 3d 75 0b 75 00 	cmpq   $0x0,0x750b75(%rip)        # 753930 <shmptr_cmp>
    2dba:	00 
    2dbb:	0f 84 99 01 00 00    	je     2f5a <_shmUninitialize>
    2dc1:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    2dc8:	48 83 e8 30          	sub    $0x30,%rax
    2dcc:	48 c1 e8 03          	shr    $0x3,%rax

0000000000002dd0 <_storeloop>:
    2dd0:	49 89 c2             	mov    %rax,%r10
    2dd3:	49 c1 e2 03          	shl    $0x3,%r10
    2dd7:	4c 03 15 52 0b 75 00 	add    0x750b52(%rip),%r10        # 753930 <shmptr_cmp>
    2dde:	49 89 d9             	mov    %rbx,%r9
    2de1:	49 c1 e1 03          	shl    $0x3,%r9
    2de5:	4c 8d 05 04 ae 5f 00 	lea    0x5fae04(%rip),%r8        # 5fdbf0 <funcinptr>
    2dec:	4d 01 c1             	add    %r8,%r9
    2def:	4d 8b 01             	mov    (%r9),%r8
    2df2:	4d 89 02             	mov    %r8,(%r10)
    2df5:	48 83 fb 00          	cmp    $0x0,%rbx
    2df9:	75 07                	jne    2e02 <_no_get_cmpid>
    2dfb:	4c 89 05 26 0b 75 00 	mov    %r8,0x750b26(%rip)        # 753928 <cmpid>

0000000000002e02 <_no_get_cmpid>:
    2e02:	48 ff c0             	inc    %rax
    2e05:	48 ff c3             	inc    %rbx
    2e08:	48 83 fb 06          	cmp    $0x6,%rbx
    2e0c:	75 c2                	jne    2dd0 <_storeloop>
    2e0e:	48 8b 1d 23 0b 75 00 	mov    0x750b23(%rip),%rbx        # 753938 <shmptr_gcnt>
    2e15:	48 89 03             	mov    %rax,(%rbx)
    2e18:	48 8b 05 09 0b 75 00 	mov    0x750b09(%rip),%rax        # 753928 <cmpid>
    2e1f:	48 c1 e0 04          	shl    $0x4,%rax
    2e23:	48 89 c3             	mov    %rax,%rbx
    2e26:	48 83 c3 08          	add    $0x8,%rbx
    2e2a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    2e31:	0f 83 17 01 00 00    	jae    2f4e <_cmpdictFull>
    2e37:	48 8d 1d 02 ae 5f 00 	lea    0x5fae02(%rip),%rbx        # 5fdc40 <cmpid_dict>
    2e3e:	48 01 d8             	add    %rbx,%rax
    2e41:	48 83 38 00          	cmpq   $0x0,(%rax)
    2e45:	0f 84 db 00 00 00    	je     2f26 <_insert_entry>
    2e4b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000002e52 <_remove_repeated_cycle>:
    2e52:	4d 89 c1             	mov    %r8,%r9
    2e55:	4d 89 ca             	mov    %r9,%r10
    2e58:	49 c1 e1 02          	shl    $0x2,%r9
    2e5c:	4d 01 d1             	add    %r10,%r9
    2e5f:	4d 01 d1             	add    %r10,%r9
    2e62:	4c 8b 15 cf 0a 75 00 	mov    0x750acf(%rip),%r10        # 753938 <shmptr_gcnt>
    2e69:	4d 8b 12             	mov    (%r10),%r10
    2e6c:	4c 2b 10             	sub    (%rax),%r10
    2e6f:	4c 3b 10             	cmp    (%rax),%r10
    2e72:	0f 87 9f 00 00 00    	ja     2f17 <_no_remove_cycle>
    2e78:	4d 39 ca             	cmp    %r9,%r10
    2e7b:	76 67                	jbe    2ee4 <_remove_cycle>
    2e7d:	4d 89 c1             	mov    %r8,%r9
    2e80:	49 83 c1 01          	add    $0x1,%r9
    2e84:	4d 89 ca             	mov    %r9,%r10
    2e87:	49 c1 e1 02          	shl    $0x2,%r9
    2e8b:	4d 01 d1             	add    %r10,%r9
    2e8e:	4d 01 d1             	add    %r10,%r9
    2e91:	4c 8b 15 a0 0a 75 00 	mov    0x750aa0(%rip),%r10        # 753938 <shmptr_gcnt>
    2e98:	4d 8b 12             	mov    (%r10),%r10
    2e9b:	4d 29 ca             	sub    %r9,%r10
    2e9e:	49 c1 e2 03          	shl    $0x3,%r10
    2ea2:	4c 8b 0d 87 0a 75 00 	mov    0x750a87(%rip),%r9        # 753930 <shmptr_cmp>
    2ea9:	4d 01 d1             	add    %r10,%r9
    2eac:	49 8b 19             	mov    (%r9),%rbx
    2eaf:	4d 89 c1             	mov    %r8,%r9
    2eb2:	49 83 c1 01          	add    $0x1,%r9
    2eb6:	4d 89 ca             	mov    %r9,%r10
    2eb9:	49 c1 e1 02          	shl    $0x2,%r9
    2ebd:	4d 01 d1             	add    %r10,%r9
    2ec0:	4d 01 d1             	add    %r10,%r9
    2ec3:	4c 8b 10             	mov    (%rax),%r10
    2ec6:	4d 29 ca             	sub    %r9,%r10
    2ec9:	49 c1 e2 03          	shl    $0x3,%r10
    2ecd:	4c 8b 0d 5c 0a 75 00 	mov    0x750a5c(%rip),%r9        # 753930 <shmptr_cmp>
    2ed4:	4d 01 d1             	add    %r10,%r9
    2ed7:	49 3b 19             	cmp    (%r9),%rbx
    2eda:	75 3b                	jne    2f17 <_no_remove_cycle>
    2edc:	49 ff c0             	inc    %r8
    2edf:	e9 6e ff ff ff       	jmpq   2e52 <_remove_repeated_cycle>

0000000000002ee4 <_remove_cycle>:
    2ee4:	48 89 15 2d 0a 75 00 	mov    %rdx,0x750a2d(%rip)        # 753918 <tmpquadone>
    2eeb:	48 8b 10             	mov    (%rax),%rdx
    2eee:	48 8b 05 43 0a 75 00 	mov    0x750a43(%rip),%rax        # 753938 <shmptr_gcnt>
    2ef5:	48 89 10             	mov    %rdx,(%rax)
    2ef8:	89 d0                	mov    %edx,%eax
    2efa:	48 c1 ea 20          	shr    $0x20,%rdx
    2efe:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    2f05:	49 f7 f0             	div    %r8
    2f08:	89 05 1a ad 5f 00    	mov    %eax,0x5fad1a(%rip)        # 5fdc28 <edgeCnt>
    2f0e:	48 8b 15 03 0a 75 00 	mov    0x750a03(%rip),%rdx        # 753918 <tmpquadone>
    2f15:	eb 1c                	jmp    2f33 <_skipstoredata>

0000000000002f17 <_no_remove_cycle>:
    2f17:	48 8b 1d 1a 0a 75 00 	mov    0x750a1a(%rip),%rbx        # 753938 <shmptr_gcnt>
    2f1e:	48 8b 1b             	mov    (%rbx),%rbx
    2f21:	48 89 18             	mov    %rbx,(%rax)
    2f24:	eb 0d                	jmp    2f33 <_skipstoredata>

0000000000002f26 <_insert_entry>:
    2f26:	48 8b 1d 0b 0a 75 00 	mov    0x750a0b(%rip),%rbx        # 753938 <shmptr_gcnt>
    2f2d:	48 8b 1b             	mov    (%rbx),%rbx
    2f30:	48 89 18             	mov    %rbx,(%rax)

0000000000002f33 <_skipstoredata>:
    2f33:	41 5a                	pop    %r10
    2f35:	41 59                	pop    %r9
    2f37:	41 58                	pop    %r8
    2f39:	5b                   	pop    %rbx
    2f3a:	58                   	pop    %rax
    2f3b:	48 89 ec             	mov    %rbp,%rsp
    2f3e:	5d                   	pop    %rbp
    2f3f:	c2 08 00             	retq   $0x8

0000000000002f42 <_shmFull>:
    2f42:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    2f49:	e8 62 e9 ff ff       	callq  18b0 <_exit@plt>

0000000000002f4e <_cmpdictFull>:
    2f4e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    2f55:	e8 56 e9 ff ff       	callq  18b0 <_exit@plt>

0000000000002f5a <_shmUninitialize>:
    2f5a:	48 89 ec             	mov    %rbp,%rsp
    2f5d:	5d                   	pop    %rbp
    2f5e:	48 31 c0             	xor    %rax,%rax
    2f61:	c2 08 00             	retq   $0x8
    2f64:	0f 1f 40 00          	nopl   0x0(%rax)
    2f68:	9f                   	lahf   
    2f69:	0f 90 c0             	seto   %al
    2f6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002f70 <__afl_setup_first>:
    2f70:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    2f77:	ff 
    2f78:	48 89 04 24          	mov    %rax,(%rsp)
    2f7c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    2f81:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    2f86:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    2f8b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    2f90:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    2f95:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    2f9a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    2f9f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    2fa5:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    2fab:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    2fb2:	00 00 
    2fb4:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    2fbb:	00 00 
    2fbd:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    2fc4:	00 00 
    2fc6:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    2fcd:	00 00 
    2fcf:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    2fd6:	00 00 
    2fd8:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    2fdf:	00 00 
    2fe1:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    2fe8:	00 00 00 
    2feb:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    2ff2:	00 00 00 
    2ff5:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    2ffc:	01 00 00 
    2fff:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    3006:	01 00 00 
    3009:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    3010:	01 00 00 
    3013:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    301a:	01 00 00 
    301d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    3024:	01 00 00 
    3027:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    302e:	01 00 00 
    3031:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    3038:	00 
    3039:	41 54                	push   %r12
    303b:	49 89 e4             	mov    %rsp,%r12
    303e:	48 83 ec 10          	sub    $0x10,%rsp
    3042:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    3046:	48 c7 05 f7 08 75 00 	movq   $0x100000,0x7508f7(%rip)        # 753948 <shmSize>
    304d:	00 00 10 00 
    3051:	48 c7 05 8c ab 5f 00 	movq   $0x100000,0x5fab8c(%rip)        # 5fdbe8 <shmSize2>
    3058:	00 00 10 00 
    305c:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 33ae <.SHM_ENV_GCNT>
    3063:	e8 f8 e7 ff ff       	callq  1860 <getenv@plt>
    3068:	48 85 c0             	test   %rax,%rax
    306b:	0f 84 6a 01 00 00    	je     31db <__afl_setup_abort>
    3071:	48 89 c7             	mov    %rax,%rdi
    3074:	e8 77 eb ff ff       	callq  1bf0 <atoi@plt>
    3079:	48 31 d2             	xor    %rdx,%rdx
    307c:	48 31 f6             	xor    %rsi,%rsi
    307f:	48 89 c7             	mov    %rax,%rdi
    3082:	e8 49 eb ff ff       	callq  1bd0 <shmat@plt>
    3087:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    308b:	0f 84 4a 01 00 00    	je     31db <__afl_setup_abort>
    3091:	48 89 05 a0 08 75 00 	mov    %rax,0x7508a0(%rip)        # 753938 <shmptr_gcnt>
    3098:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 3395 <.SHM_ENV_CMP>
    309f:	e8 bc e7 ff ff       	callq  1860 <getenv@plt>
    30a4:	48 85 c0             	test   %rax,%rax
    30a7:	0f 84 2e 01 00 00    	je     31db <__afl_setup_abort>
    30ad:	48 89 c7             	mov    %rax,%rdi
    30b0:	e8 3b eb ff ff       	callq  1bf0 <atoi@plt>
    30b5:	48 31 d2             	xor    %rdx,%rdx
    30b8:	48 31 f6             	xor    %rsi,%rsi
    30bb:	48 89 c7             	mov    %rax,%rdi
    30be:	e8 0d eb ff ff       	callq  1bd0 <shmat@plt>
    30c3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    30c7:	0f 84 0e 01 00 00    	je     31db <__afl_setup_abort>
    30cd:	48 89 05 5c 08 75 00 	mov    %rax,0x75085c(%rip)        # 753930 <shmptr_cmp>
    30d4:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 33a1 <.SHM_ENV_EDGE>
    30db:	e8 80 e7 ff ff       	callq  1860 <getenv@plt>
    30e0:	48 85 c0             	test   %rax,%rax
    30e3:	0f 84 f2 00 00 00    	je     31db <__afl_setup_abort>
    30e9:	48 89 c7             	mov    %rax,%rdi
    30ec:	e8 ff ea ff ff       	callq  1bf0 <atoi@plt>
    30f1:	48 31 d2             	xor    %rdx,%rdx
    30f4:	48 31 f6             	xor    %rsi,%rsi
    30f7:	48 89 c7             	mov    %rax,%rdi
    30fa:	e8 d1 ea ff ff       	callq  1bd0 <shmat@plt>
    30ff:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    3103:	0f 84 d2 00 00 00    	je     31db <__afl_setup_abort>
    3109:	48 89 05 f8 07 75 00 	mov    %rax,0x7507f8(%rip)        # 753908 <shmptr_edge>

0000000000003110 <__afl_forkserver>:
    3110:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3117:	48 8d 35 ce a8 5f 00 	lea    0x5fa8ce(%rip),%rsi        # 5fd9ec <__afl_temp>
    311e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    3125:	e8 a6 e7 ff ff       	callq  18d0 <write@plt>
    312a:	48 83 f8 04          	cmp    $0x4,%rax
    312e:	0f 85 78 01 00 00    	jne    32ac <__afl_fork_resume>

0000000000003134 <__afl_fork_wait_loop>:
    3134:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    313b:	48 8d 35 aa a8 5f 00 	lea    0x5fa8aa(%rip),%rsi        # 5fd9ec <__afl_temp>
    3142:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    3149:	e8 f2 e8 ff ff       	callq  1a40 <read@plt>
    314e:	48 83 f8 04          	cmp    $0x4,%rax
    3152:	75 70                	jne    31c4 <__afl_die>
    3154:	e8 f7 ea ff ff       	callq  1c50 <fork@plt>
    3159:	48 83 f8 00          	cmp    $0x0,%rax
    315d:	7c 65                	jl     31c4 <__afl_die>
    315f:	0f 84 47 01 00 00    	je     32ac <__afl_fork_resume>
    3165:	89 05 7d a8 5f 00    	mov    %eax,0x5fa87d(%rip)        # 5fd9e8 <__afl_fork_pid>
    316b:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3172:	48 8d 35 6f a8 5f 00 	lea    0x5fa86f(%rip),%rsi        # 5fd9e8 <__afl_fork_pid>
    3179:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    3180:	e8 4b e7 ff ff       	callq  18d0 <write@plt>
    3185:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    318c:	48 8d 35 59 a8 5f 00 	lea    0x5fa859(%rip),%rsi        # 5fd9ec <__afl_temp>
    3193:	48 8b 3d 4e a8 5f 00 	mov    0x5fa84e(%rip),%rdi        # 5fd9e8 <__afl_fork_pid>
    319a:	e8 e1 e9 ff ff       	callq  1b80 <waitpid@plt>
    319f:	48 83 f8 00          	cmp    $0x0,%rax
    31a3:	7e 1f                	jle    31c4 <__afl_die>
    31a5:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    31ac:	48 8d 35 39 a8 5f 00 	lea    0x5fa839(%rip),%rsi        # 5fd9ec <__afl_temp>
    31b3:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    31ba:	e8 11 e7 ff ff       	callq  18d0 <write@plt>
    31bf:	e9 70 ff ff ff       	jmpq   3134 <__afl_fork_wait_loop>

00000000000031c4 <__afl_die>:
    31c4:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 33f2 <.serverDied>
    31cb:	48 31 c0             	xor    %rax,%rax
    31ce:	e8 bd e7 ff ff       	callq  1990 <printf@plt>
    31d3:	48 31 c0             	xor    %rax,%rax
    31d6:	e8 d5 e6 ff ff       	callq  18b0 <_exit@plt>

00000000000031db <__afl_setup_abort>:
    31db:	4c 89 e4             	mov    %r12,%rsp
    31de:	41 5c                	pop    %r12
    31e0:	48 8b 04 24          	mov    (%rsp),%rax
    31e4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    31e9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    31ee:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    31f3:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    31f8:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    31fd:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    3202:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    3207:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    320d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    3213:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    321a:	00 00 
    321c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    3223:	00 00 
    3225:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    322c:	00 00 
    322e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    3235:	00 00 
    3237:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    323e:	00 00 
    3240:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    3247:	00 00 
    3249:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    3250:	00 00 00 
    3253:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    325a:	00 00 00 
    325d:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    3264:	01 00 00 
    3267:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    326e:	01 00 00 
    3271:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    3278:	01 00 00 
    327b:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    3282:	01 00 00 
    3285:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    328c:	01 00 00 
    328f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    3296:	01 00 00 
    3299:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    32a0:	00 
    32a1:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    32a8:	00 
    32a9:	b0 7f                	mov    $0x7f,%al
    32ab:	c3                   	retq   

00000000000032ac <__afl_fork_resume>:
    32ac:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    32b3:	e8 58 e7 ff ff       	callq  1a10 <close@plt>
    32b8:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    32bf:	e8 4c e7 ff ff       	callq  1a10 <close@plt>
    32c4:	4c 89 e4             	mov    %r12,%rsp
    32c7:	41 5c                	pop    %r12
    32c9:	48 8b 04 24          	mov    (%rsp),%rax
    32cd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    32d2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    32d7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    32dc:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    32e1:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    32e6:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    32eb:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    32f0:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    32f6:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    32fc:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    3303:	00 00 
    3305:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    330c:	00 00 
    330e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    3315:	00 00 
    3317:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    331e:	00 00 
    3320:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    3327:	00 00 
    3329:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    3330:	00 00 
    3332:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    3339:	00 00 00 
    333c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    3343:	00 00 00 
    3346:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    334d:	01 00 00 
    3350:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    3357:	01 00 00 
    335a:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    3361:	01 00 00 
    3364:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    336b:	01 00 00 
    336e:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    3375:	01 00 00 
    3378:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    337f:	01 00 00 
    3382:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    3389:	00 
    338a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    3391:	00 
    3392:	b0 00                	mov    $0x0,%al
    3394:	c3                   	retq   

0000000000003395 <.SHM_ENV_CMP>:
    3395:	53                   	push   %rbx
    3396:	48                   	rex.W
    3397:	4d 5f                	rex.WRB pop %r15
    3399:	45                   	rex.RB
    339a:	4e 56                	rex.WRX push %rsi
    339c:	5f                   	pop    %rdi
    339d:	43                   	rex.XB
    339e:	4d 50                	rex.WRB push %r8
	...

00000000000033a1 <.SHM_ENV_EDGE>:
    33a1:	53                   	push   %rbx
    33a2:	48                   	rex.W
    33a3:	4d 5f                	rex.WRB pop %r15
    33a5:	45                   	rex.RB
    33a6:	4e 56                	rex.WRX push %rsi
    33a8:	5f                   	pop    %rdi
    33a9:	45                   	rex.RB
    33aa:	44                   	rex.R
    33ab:	47                   	rex.RXB
    33ac:	45                   	rex.RB
	...

00000000000033ae <.SHM_ENV_GCNT>:
    33ae:	53                   	push   %rbx
    33af:	48                   	rex.W
    33b0:	4d 5f                	rex.WRB pop %r15
    33b2:	45                   	rex.RB
    33b3:	4e 56                	rex.WRX push %rsi
    33b5:	5f                   	pop    %rdi
    33b6:	47                   	rex.RXB
    33b7:	43                   	rex.XB
    33b8:	4e 54                	rex.WRX push %rsp
	...

00000000000033bb <.serverSetupError>:
    33bb:	20 53 65             	and    %dl,0x65(%rbx)
    33be:	72 76                	jb     3436 <_storeEdge+0x1e>
    33c0:	65 72 20             	gs jb  33e3 <.serverSetupError+0x28>
    33c3:	53                   	push   %rbx
    33c4:	65 74 75             	gs je  343c <_storeEdge+0x24>
    33c7:	70 20                	jo     33e9 <.serverSetupError+0x2e>
    33c9:	45 72 72             	rex.RB jb 343e <_storeEdge+0x26>
    33cc:	6f                   	outsl  %ds:(%rsi),(%dx)
    33cd:	72 2c                	jb     33fb <.serverDied+0x9>
    33cf:	20 63 6f             	and    %ah,0x6f(%rbx)
    33d2:	6e                   	outsb  %ds:(%rsi),(%dx)
    33d3:	74 69                	je     343e <_storeEdge+0x26>
    33d5:	6e                   	outsb  %ds:(%rsi),(%dx)
    33d6:	75 65                	jne    343d <_storeEdge+0x25>
    33d8:	20 72 75             	and    %dh,0x75(%rdx)
    33db:	6e                   	outsb  %ds:(%rsi),(%dx)
    33dc:	6e                   	outsb  %ds:(%rsi),(%dx)
    33dd:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    33e4:	6f                   	outsl  %ds:(%rsi),(%dx)
    33e5:	75 74                	jne    345b <_storeEdge+0x43>
    33e7:	20 73 65             	and    %dh,0x65(%rbx)
    33ea:	72 76                	jb     3462 <_caledgehash>
    33ec:	65 72 20             	gs jb  340f <.debug+0xa>
    33ef:	0a 20                	or     (%rax),%ah
	...

00000000000033f2 <.serverDied>:
    33f2:	20 53 65             	and    %dl,0x65(%rbx)
    33f5:	72 76                	jb     346d <_caledgehash+0xb>
    33f7:	65 72 20             	gs jb  341a <_storeEdge+0x2>
    33fa:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    3401:	20 0a                	and    %cl,(%rdx)
    3403:	20 00                	and    %al,(%rax)

0000000000003405 <.debug>:
    3405:	64 65 62             	fs gs (bad) 
    3408:	75 67                	jne    3471 <_caledgehash+0xf>
    340a:	20 6d 65             	and    %ch,0x65(%rbp)
    340d:	73 73                	jae    3482 <_caledgehash+0x20>
    340f:	61                   	(bad)  
    3410:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    3414:	0a 20                	or     (%rax),%ah
    3416:	00                   	.byte 0x0
    3417:	90                   	nop

0000000000003418 <_storeEdge>:
    3418:	50                   	push   %rax
    3419:	53                   	push   %rbx
    341a:	51                   	push   %rcx
    341b:	52                   	push   %rdx
    341c:	48 83 3d 2c 05 75 00 	cmpq   $0x1,0x75052c(%rip)        # 753950 <cmpPassed>
    3423:	01 
    3424:	75 3c                	jne    3462 <_caledgehash>
    3426:	48 c7 05 1f 05 75 00 	movq   $0x0,0x75051f(%rip)        # 753950 <cmpPassed>
    342d:	00 00 00 00 
    3431:	48 8b 05 f0 a7 5f 00 	mov    0x5fa7f0(%rip),%rax        # 5fdc28 <edgeCnt>
    3438:	48 c1 e0 03          	shl    $0x3,%rax
    343c:	48 3b 05 a5 a7 5f 00 	cmp    0x5fa7a5(%rip),%rax        # 5fdbe8 <shmSize2>
    3443:	77 55                	ja     349a <_shm2Full>
    3445:	48 8b 1d c4 04 75 00 	mov    0x7504c4(%rip),%rbx        # 753910 <edgehash>
    344c:	48 8b 15 b5 04 75 00 	mov    0x7504b5(%rip),%rdx        # 753908 <shmptr_edge>
    3453:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    3457:	48 89 19             	mov    %rbx,(%rcx)
    345a:	48 83 05 c6 a7 5f 00 	addq   $0x1,0x5fa7c6(%rip)        # 5fdc28 <edgeCnt>
    3461:	01 

0000000000003462 <_caledgehash>:
    3462:	48 8b 15 a7 04 75 00 	mov    0x7504a7(%rip),%rdx        # 753910 <edgehash>
    3469:	48 89 d0             	mov    %rdx,%rax
    346c:	48 c1 e0 05          	shl    $0x5,%rax
    3470:	48 01 c2             	add    %rax,%rdx
    3473:	48 8b 05 c6 04 75 00 	mov    0x7504c6(%rip),%rax        # 753940 <edgeId>
    347a:	48 01 d0             	add    %rdx,%rax
    347d:	48 89 05 8c 04 75 00 	mov    %rax,0x75048c(%rip)        # 753910 <edgehash>
    3484:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    348b:	00 00 00 
    348e:	48 21 05 7b 04 75 00 	and    %rax,0x75047b(%rip)        # 753910 <edgehash>
    3495:	5a                   	pop    %rdx
    3496:	59                   	pop    %rcx
    3497:	5b                   	pop    %rbx
    3498:	58                   	pop    %rax
    3499:	c3                   	retq   

000000000000349a <_shm2Full>:
    349a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    34a1:	5a                   	pop    %rdx
    34a2:	59                   	pop    %rcx
    34a3:	5b                   	pop    %rbx
    34a4:	58                   	pop    %rax
    34a5:	e8 06 e4 ff ff       	callq  18b0 <_exit@plt>
    34aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000034b0 <_storeDataFn>:
    34b0:	55                   	push   %rbp
    34b1:	48 89 e5             	mov    %rsp,%rbp
    34b4:	50                   	push   %rax
    34b5:	53                   	push   %rbx
    34b6:	41 50                	push   %r8
    34b8:	41 51                	push   %r9
    34ba:	41 52                	push   %r10
    34bc:	48 8b 05 75 04 75 00 	mov    0x750475(%rip),%rax        # 753938 <shmptr_gcnt>
    34c3:	48 8b 00             	mov    (%rax),%rax
    34c6:	48 c1 e0 03          	shl    $0x3,%rax
    34ca:	48 83 c0 30          	add    $0x30,%rax
    34ce:	48 3b 05 73 04 75 00 	cmp    0x750473(%rip),%rax        # 753948 <shmSize>
    34d5:	0f 83 8f 01 00 00    	jae    366a <_shmFull>
    34db:	48 83 3d 4d 04 75 00 	cmpq   $0x0,0x75044d(%rip)        # 753930 <shmptr_cmp>
    34e2:	00 
    34e3:	0f 84 99 01 00 00    	je     3682 <_shmUninitialize>
    34e9:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    34f0:	48 83 e8 30          	sub    $0x30,%rax
    34f4:	48 c1 e8 03          	shr    $0x3,%rax

00000000000034f8 <_storeloop>:
    34f8:	49 89 c2             	mov    %rax,%r10
    34fb:	49 c1 e2 03          	shl    $0x3,%r10
    34ff:	4c 03 15 2a 04 75 00 	add    0x75042a(%rip),%r10        # 753930 <shmptr_cmp>
    3506:	49 89 d9             	mov    %rbx,%r9
    3509:	49 c1 e1 03          	shl    $0x3,%r9
    350d:	4c 8d 05 dc a6 5f 00 	lea    0x5fa6dc(%rip),%r8        # 5fdbf0 <funcinptr>
    3514:	4d 01 c1             	add    %r8,%r9
    3517:	4d 8b 01             	mov    (%r9),%r8
    351a:	4d 89 02             	mov    %r8,(%r10)
    351d:	48 83 fb 00          	cmp    $0x0,%rbx
    3521:	75 07                	jne    352a <_no_get_cmpid>
    3523:	4c 89 05 fe 03 75 00 	mov    %r8,0x7503fe(%rip)        # 753928 <cmpid>

000000000000352a <_no_get_cmpid>:
    352a:	48 ff c0             	inc    %rax
    352d:	48 ff c3             	inc    %rbx
    3530:	48 83 fb 06          	cmp    $0x6,%rbx
    3534:	75 c2                	jne    34f8 <_storeloop>
    3536:	48 8b 1d fb 03 75 00 	mov    0x7503fb(%rip),%rbx        # 753938 <shmptr_gcnt>
    353d:	48 89 03             	mov    %rax,(%rbx)
    3540:	48 8b 05 e1 03 75 00 	mov    0x7503e1(%rip),%rax        # 753928 <cmpid>
    3547:	48 c1 e0 04          	shl    $0x4,%rax
    354b:	48 89 c3             	mov    %rax,%rbx
    354e:	48 83 c3 08          	add    $0x8,%rbx
    3552:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    3559:	0f 83 17 01 00 00    	jae    3676 <_cmpdictFull>
    355f:	48 8d 1d da a6 5f 00 	lea    0x5fa6da(%rip),%rbx        # 5fdc40 <cmpid_dict>
    3566:	48 01 d8             	add    %rbx,%rax
    3569:	48 83 38 00          	cmpq   $0x0,(%rax)
    356d:	0f 84 db 00 00 00    	je     364e <_insert_entry>
    3573:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000357a <_remove_repeated_cycle>:
    357a:	4d 89 c1             	mov    %r8,%r9
    357d:	4d 89 ca             	mov    %r9,%r10
    3580:	49 c1 e1 02          	shl    $0x2,%r9
    3584:	4d 01 d1             	add    %r10,%r9
    3587:	4d 01 d1             	add    %r10,%r9
    358a:	4c 8b 15 a7 03 75 00 	mov    0x7503a7(%rip),%r10        # 753938 <shmptr_gcnt>
    3591:	4d 8b 12             	mov    (%r10),%r10
    3594:	4c 2b 10             	sub    (%rax),%r10
    3597:	4c 3b 10             	cmp    (%rax),%r10
    359a:	0f 87 9f 00 00 00    	ja     363f <_no_remove_cycle>
    35a0:	4d 39 ca             	cmp    %r9,%r10
    35a3:	76 67                	jbe    360c <_remove_cycle>
    35a5:	4d 89 c1             	mov    %r8,%r9
    35a8:	49 83 c1 01          	add    $0x1,%r9
    35ac:	4d 89 ca             	mov    %r9,%r10
    35af:	49 c1 e1 02          	shl    $0x2,%r9
    35b3:	4d 01 d1             	add    %r10,%r9
    35b6:	4d 01 d1             	add    %r10,%r9
    35b9:	4c 8b 15 78 03 75 00 	mov    0x750378(%rip),%r10        # 753938 <shmptr_gcnt>
    35c0:	4d 8b 12             	mov    (%r10),%r10
    35c3:	4d 29 ca             	sub    %r9,%r10
    35c6:	49 c1 e2 03          	shl    $0x3,%r10
    35ca:	4c 8b 0d 5f 03 75 00 	mov    0x75035f(%rip),%r9        # 753930 <shmptr_cmp>
    35d1:	4d 01 d1             	add    %r10,%r9
    35d4:	49 8b 19             	mov    (%r9),%rbx
    35d7:	4d 89 c1             	mov    %r8,%r9
    35da:	49 83 c1 01          	add    $0x1,%r9
    35de:	4d 89 ca             	mov    %r9,%r10
    35e1:	49 c1 e1 02          	shl    $0x2,%r9
    35e5:	4d 01 d1             	add    %r10,%r9
    35e8:	4d 01 d1             	add    %r10,%r9
    35eb:	4c 8b 10             	mov    (%rax),%r10
    35ee:	4d 29 ca             	sub    %r9,%r10
    35f1:	49 c1 e2 03          	shl    $0x3,%r10
    35f5:	4c 8b 0d 34 03 75 00 	mov    0x750334(%rip),%r9        # 753930 <shmptr_cmp>
    35fc:	4d 01 d1             	add    %r10,%r9
    35ff:	49 3b 19             	cmp    (%r9),%rbx
    3602:	75 3b                	jne    363f <_no_remove_cycle>
    3604:	49 ff c0             	inc    %r8
    3607:	e9 6e ff ff ff       	jmpq   357a <_remove_repeated_cycle>

000000000000360c <_remove_cycle>:
    360c:	48 89 15 05 03 75 00 	mov    %rdx,0x750305(%rip)        # 753918 <tmpquadone>
    3613:	48 8b 10             	mov    (%rax),%rdx
    3616:	48 8b 05 1b 03 75 00 	mov    0x75031b(%rip),%rax        # 753938 <shmptr_gcnt>
    361d:	48 89 10             	mov    %rdx,(%rax)
    3620:	89 d0                	mov    %edx,%eax
    3622:	48 c1 ea 20          	shr    $0x20,%rdx
    3626:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    362d:	49 f7 f0             	div    %r8
    3630:	89 05 f2 a5 5f 00    	mov    %eax,0x5fa5f2(%rip)        # 5fdc28 <edgeCnt>
    3636:	48 8b 15 db 02 75 00 	mov    0x7502db(%rip),%rdx        # 753918 <tmpquadone>
    363d:	eb 1c                	jmp    365b <_skipstoredata>

000000000000363f <_no_remove_cycle>:
    363f:	48 8b 1d f2 02 75 00 	mov    0x7502f2(%rip),%rbx        # 753938 <shmptr_gcnt>
    3646:	48 8b 1b             	mov    (%rbx),%rbx
    3649:	48 89 18             	mov    %rbx,(%rax)
    364c:	eb 0d                	jmp    365b <_skipstoredata>

000000000000364e <_insert_entry>:
    364e:	48 8b 1d e3 02 75 00 	mov    0x7502e3(%rip),%rbx        # 753938 <shmptr_gcnt>
    3655:	48 8b 1b             	mov    (%rbx),%rbx
    3658:	48 89 18             	mov    %rbx,(%rax)

000000000000365b <_skipstoredata>:
    365b:	41 5a                	pop    %r10
    365d:	41 59                	pop    %r9
    365f:	41 58                	pop    %r8
    3661:	5b                   	pop    %rbx
    3662:	58                   	pop    %rax
    3663:	48 89 ec             	mov    %rbp,%rsp
    3666:	5d                   	pop    %rbp
    3667:	c2 08 00             	retq   $0x8

000000000000366a <_shmFull>:
    366a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    3671:	e8 3a e2 ff ff       	callq  18b0 <_exit@plt>

0000000000003676 <_cmpdictFull>:
    3676:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    367d:	e8 2e e2 ff ff       	callq  18b0 <_exit@plt>

0000000000003682 <_shmUninitialize>:
    3682:	48 89 ec             	mov    %rbp,%rsp
    3685:	5d                   	pop    %rbp
    3686:	48 31 c0             	xor    %rax,%rax
    3689:	c2 08 00             	retq   $0x8
    368c:	0f 1f 40 00          	nopl   0x0(%rax)
    3690:	9f                   	lahf   
    3691:	0f 90 c0             	seto   %al
    3694:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003698 <__afl_setup_first>:
    3698:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    369f:	ff 
    36a0:	48 89 04 24          	mov    %rax,(%rsp)
    36a4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    36a9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    36ae:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    36b3:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    36b8:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    36bd:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    36c2:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    36c7:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    36cd:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    36d3:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    36da:	00 00 
    36dc:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    36e3:	00 00 
    36e5:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    36ec:	00 00 
    36ee:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    36f5:	00 00 
    36f7:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    36fe:	00 00 
    3700:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    3707:	00 00 
    3709:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    3710:	00 00 00 
    3713:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    371a:	00 00 00 
    371d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    3724:	01 00 00 
    3727:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    372e:	01 00 00 
    3731:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    3738:	01 00 00 
    373b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    3742:	01 00 00 
    3745:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    374c:	01 00 00 
    374f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    3756:	01 00 00 
    3759:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    3760:	00 
    3761:	41 54                	push   %r12
    3763:	49 89 e4             	mov    %rsp,%r12
    3766:	48 83 ec 10          	sub    $0x10,%rsp
    376a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    376e:	48 c7 05 cf 01 75 00 	movq   $0x100000,0x7501cf(%rip)        # 753948 <shmSize>
    3775:	00 00 10 00 
    3779:	48 c7 05 64 a4 5f 00 	movq   $0x100000,0x5fa464(%rip)        # 5fdbe8 <shmSize2>
    3780:	00 00 10 00 
    3784:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 3ad6 <.SHM_ENV_GCNT>
    378b:	e8 d0 e0 ff ff       	callq  1860 <getenv@plt>
    3790:	48 85 c0             	test   %rax,%rax
    3793:	0f 84 6a 01 00 00    	je     3903 <__afl_setup_abort>
    3799:	48 89 c7             	mov    %rax,%rdi
    379c:	e8 4f e4 ff ff       	callq  1bf0 <atoi@plt>
    37a1:	48 31 d2             	xor    %rdx,%rdx
    37a4:	48 31 f6             	xor    %rsi,%rsi
    37a7:	48 89 c7             	mov    %rax,%rdi
    37aa:	e8 21 e4 ff ff       	callq  1bd0 <shmat@plt>
    37af:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    37b3:	0f 84 4a 01 00 00    	je     3903 <__afl_setup_abort>
    37b9:	48 89 05 78 01 75 00 	mov    %rax,0x750178(%rip)        # 753938 <shmptr_gcnt>
    37c0:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 3abd <.SHM_ENV_CMP>
    37c7:	e8 94 e0 ff ff       	callq  1860 <getenv@plt>
    37cc:	48 85 c0             	test   %rax,%rax
    37cf:	0f 84 2e 01 00 00    	je     3903 <__afl_setup_abort>
    37d5:	48 89 c7             	mov    %rax,%rdi
    37d8:	e8 13 e4 ff ff       	callq  1bf0 <atoi@plt>
    37dd:	48 31 d2             	xor    %rdx,%rdx
    37e0:	48 31 f6             	xor    %rsi,%rsi
    37e3:	48 89 c7             	mov    %rax,%rdi
    37e6:	e8 e5 e3 ff ff       	callq  1bd0 <shmat@plt>
    37eb:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    37ef:	0f 84 0e 01 00 00    	je     3903 <__afl_setup_abort>
    37f5:	48 89 05 34 01 75 00 	mov    %rax,0x750134(%rip)        # 753930 <shmptr_cmp>
    37fc:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 3ac9 <.SHM_ENV_EDGE>
    3803:	e8 58 e0 ff ff       	callq  1860 <getenv@plt>
    3808:	48 85 c0             	test   %rax,%rax
    380b:	0f 84 f2 00 00 00    	je     3903 <__afl_setup_abort>
    3811:	48 89 c7             	mov    %rax,%rdi
    3814:	e8 d7 e3 ff ff       	callq  1bf0 <atoi@plt>
    3819:	48 31 d2             	xor    %rdx,%rdx
    381c:	48 31 f6             	xor    %rsi,%rsi
    381f:	48 89 c7             	mov    %rax,%rdi
    3822:	e8 a9 e3 ff ff       	callq  1bd0 <shmat@plt>
    3827:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    382b:	0f 84 d2 00 00 00    	je     3903 <__afl_setup_abort>
    3831:	48 89 05 d0 00 75 00 	mov    %rax,0x7500d0(%rip)        # 753908 <shmptr_edge>

0000000000003838 <__afl_forkserver>:
    3838:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    383f:	48 8d 35 ae a1 5f 00 	lea    0x5fa1ae(%rip),%rsi        # 5fd9f4 <__afl_temp>
    3846:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    384d:	e8 7e e0 ff ff       	callq  18d0 <write@plt>
    3852:	48 83 f8 04          	cmp    $0x4,%rax
    3856:	0f 85 78 01 00 00    	jne    39d4 <__afl_fork_resume>

000000000000385c <__afl_fork_wait_loop>:
    385c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3863:	48 8d 35 8a a1 5f 00 	lea    0x5fa18a(%rip),%rsi        # 5fd9f4 <__afl_temp>
    386a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    3871:	e8 ca e1 ff ff       	callq  1a40 <read@plt>
    3876:	48 83 f8 04          	cmp    $0x4,%rax
    387a:	75 70                	jne    38ec <__afl_die>
    387c:	e8 cf e3 ff ff       	callq  1c50 <fork@plt>
    3881:	48 83 f8 00          	cmp    $0x0,%rax
    3885:	7c 65                	jl     38ec <__afl_die>
    3887:	0f 84 47 01 00 00    	je     39d4 <__afl_fork_resume>
    388d:	89 05 5d a1 5f 00    	mov    %eax,0x5fa15d(%rip)        # 5fd9f0 <__afl_fork_pid>
    3893:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    389a:	48 8d 35 4f a1 5f 00 	lea    0x5fa14f(%rip),%rsi        # 5fd9f0 <__afl_fork_pid>
    38a1:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    38a8:	e8 23 e0 ff ff       	callq  18d0 <write@plt>
    38ad:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    38b4:	48 8d 35 39 a1 5f 00 	lea    0x5fa139(%rip),%rsi        # 5fd9f4 <__afl_temp>
    38bb:	48 8b 3d 2e a1 5f 00 	mov    0x5fa12e(%rip),%rdi        # 5fd9f0 <__afl_fork_pid>
    38c2:	e8 b9 e2 ff ff       	callq  1b80 <waitpid@plt>
    38c7:	48 83 f8 00          	cmp    $0x0,%rax
    38cb:	7e 1f                	jle    38ec <__afl_die>
    38cd:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    38d4:	48 8d 35 19 a1 5f 00 	lea    0x5fa119(%rip),%rsi        # 5fd9f4 <__afl_temp>
    38db:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    38e2:	e8 e9 df ff ff       	callq  18d0 <write@plt>
    38e7:	e9 70 ff ff ff       	jmpq   385c <__afl_fork_wait_loop>

00000000000038ec <__afl_die>:
    38ec:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 3b1a <.serverDied>
    38f3:	48 31 c0             	xor    %rax,%rax
    38f6:	e8 95 e0 ff ff       	callq  1990 <printf@plt>
    38fb:	48 31 c0             	xor    %rax,%rax
    38fe:	e8 ad df ff ff       	callq  18b0 <_exit@plt>

0000000000003903 <__afl_setup_abort>:
    3903:	4c 89 e4             	mov    %r12,%rsp
    3906:	41 5c                	pop    %r12
    3908:	48 8b 04 24          	mov    (%rsp),%rax
    390c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    3911:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    3916:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    391b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    3920:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    3925:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    392a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    392f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    3935:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    393b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    3942:	00 00 
    3944:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    394b:	00 00 
    394d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    3954:	00 00 
    3956:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    395d:	00 00 
    395f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    3966:	00 00 
    3968:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    396f:	00 00 
    3971:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    3978:	00 00 00 
    397b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    3982:	00 00 00 
    3985:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    398c:	01 00 00 
    398f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    3996:	01 00 00 
    3999:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    39a0:	01 00 00 
    39a3:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    39aa:	01 00 00 
    39ad:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    39b4:	01 00 00 
    39b7:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    39be:	01 00 00 
    39c1:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    39c8:	00 
    39c9:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    39d0:	00 
    39d1:	b0 7f                	mov    $0x7f,%al
    39d3:	c3                   	retq   

00000000000039d4 <__afl_fork_resume>:
    39d4:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    39db:	e8 30 e0 ff ff       	callq  1a10 <close@plt>
    39e0:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    39e7:	e8 24 e0 ff ff       	callq  1a10 <close@plt>
    39ec:	4c 89 e4             	mov    %r12,%rsp
    39ef:	41 5c                	pop    %r12
    39f1:	48 8b 04 24          	mov    (%rsp),%rax
    39f5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    39fa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    39ff:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    3a04:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    3a09:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    3a0e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    3a13:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    3a18:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    3a1e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    3a24:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    3a2b:	00 00 
    3a2d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    3a34:	00 00 
    3a36:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    3a3d:	00 00 
    3a3f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    3a46:	00 00 
    3a48:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    3a4f:	00 00 
    3a51:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    3a58:	00 00 
    3a5a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    3a61:	00 00 00 
    3a64:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    3a6b:	00 00 00 
    3a6e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    3a75:	01 00 00 
    3a78:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    3a7f:	01 00 00 
    3a82:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    3a89:	01 00 00 
    3a8c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    3a93:	01 00 00 
    3a96:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    3a9d:	01 00 00 
    3aa0:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    3aa7:	01 00 00 
    3aaa:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    3ab1:	00 
    3ab2:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    3ab9:	00 
    3aba:	b0 00                	mov    $0x0,%al
    3abc:	c3                   	retq   

0000000000003abd <.SHM_ENV_CMP>:
    3abd:	53                   	push   %rbx
    3abe:	48                   	rex.W
    3abf:	4d 5f                	rex.WRB pop %r15
    3ac1:	45                   	rex.RB
    3ac2:	4e 56                	rex.WRX push %rsi
    3ac4:	5f                   	pop    %rdi
    3ac5:	43                   	rex.XB
    3ac6:	4d 50                	rex.WRB push %r8
	...

0000000000003ac9 <.SHM_ENV_EDGE>:
    3ac9:	53                   	push   %rbx
    3aca:	48                   	rex.W
    3acb:	4d 5f                	rex.WRB pop %r15
    3acd:	45                   	rex.RB
    3ace:	4e 56                	rex.WRX push %rsi
    3ad0:	5f                   	pop    %rdi
    3ad1:	45                   	rex.RB
    3ad2:	44                   	rex.R
    3ad3:	47                   	rex.RXB
    3ad4:	45                   	rex.RB
	...

0000000000003ad6 <.SHM_ENV_GCNT>:
    3ad6:	53                   	push   %rbx
    3ad7:	48                   	rex.W
    3ad8:	4d 5f                	rex.WRB pop %r15
    3ada:	45                   	rex.RB
    3adb:	4e 56                	rex.WRX push %rsi
    3add:	5f                   	pop    %rdi
    3ade:	47                   	rex.RXB
    3adf:	43                   	rex.XB
    3ae0:	4e 54                	rex.WRX push %rsp
	...

0000000000003ae3 <.serverSetupError>:
    3ae3:	20 53 65             	and    %dl,0x65(%rbx)
    3ae6:	72 76                	jb     3b5e <_storeEdge+0x1e>
    3ae8:	65 72 20             	gs jb  3b0b <.serverSetupError+0x28>
    3aeb:	53                   	push   %rbx
    3aec:	65 74 75             	gs je  3b64 <_storeEdge+0x24>
    3aef:	70 20                	jo     3b11 <.serverSetupError+0x2e>
    3af1:	45 72 72             	rex.RB jb 3b66 <_storeEdge+0x26>
    3af4:	6f                   	outsl  %ds:(%rsi),(%dx)
    3af5:	72 2c                	jb     3b23 <.serverDied+0x9>
    3af7:	20 63 6f             	and    %ah,0x6f(%rbx)
    3afa:	6e                   	outsb  %ds:(%rsi),(%dx)
    3afb:	74 69                	je     3b66 <_storeEdge+0x26>
    3afd:	6e                   	outsb  %ds:(%rsi),(%dx)
    3afe:	75 65                	jne    3b65 <_storeEdge+0x25>
    3b00:	20 72 75             	and    %dh,0x75(%rdx)
    3b03:	6e                   	outsb  %ds:(%rsi),(%dx)
    3b04:	6e                   	outsb  %ds:(%rsi),(%dx)
    3b05:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    3b0c:	6f                   	outsl  %ds:(%rsi),(%dx)
    3b0d:	75 74                	jne    3b83 <_storeEdge+0x43>
    3b0f:	20 73 65             	and    %dh,0x65(%rbx)
    3b12:	72 76                	jb     3b8a <_caledgehash>
    3b14:	65 72 20             	gs jb  3b37 <.debug+0xa>
    3b17:	0a 20                	or     (%rax),%ah
	...

0000000000003b1a <.serverDied>:
    3b1a:	20 53 65             	and    %dl,0x65(%rbx)
    3b1d:	72 76                	jb     3b95 <_caledgehash+0xb>
    3b1f:	65 72 20             	gs jb  3b42 <_storeEdge+0x2>
    3b22:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    3b29:	20 0a                	and    %cl,(%rdx)
    3b2b:	20 00                	and    %al,(%rax)

0000000000003b2d <.debug>:
    3b2d:	64 65 62             	fs gs (bad) 
    3b30:	75 67                	jne    3b99 <_caledgehash+0xf>
    3b32:	20 6d 65             	and    %ch,0x65(%rbp)
    3b35:	73 73                	jae    3baa <_caledgehash+0x20>
    3b37:	61                   	(bad)  
    3b38:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    3b3c:	0a 20                	or     (%rax),%ah
    3b3e:	00                   	.byte 0x0
    3b3f:	90                   	nop

0000000000003b40 <_storeEdge>:
    3b40:	50                   	push   %rax
    3b41:	53                   	push   %rbx
    3b42:	51                   	push   %rcx
    3b43:	52                   	push   %rdx
    3b44:	48 83 3d 04 fe 74 00 	cmpq   $0x1,0x74fe04(%rip)        # 753950 <cmpPassed>
    3b4b:	01 
    3b4c:	75 3c                	jne    3b8a <_caledgehash>
    3b4e:	48 c7 05 f7 fd 74 00 	movq   $0x0,0x74fdf7(%rip)        # 753950 <cmpPassed>
    3b55:	00 00 00 00 
    3b59:	48 8b 05 c8 a0 5f 00 	mov    0x5fa0c8(%rip),%rax        # 5fdc28 <edgeCnt>
    3b60:	48 c1 e0 03          	shl    $0x3,%rax
    3b64:	48 3b 05 7d a0 5f 00 	cmp    0x5fa07d(%rip),%rax        # 5fdbe8 <shmSize2>
    3b6b:	77 55                	ja     3bc2 <_shm2Full>
    3b6d:	48 8b 1d 9c fd 74 00 	mov    0x74fd9c(%rip),%rbx        # 753910 <edgehash>
    3b74:	48 8b 15 8d fd 74 00 	mov    0x74fd8d(%rip),%rdx        # 753908 <shmptr_edge>
    3b7b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    3b7f:	48 89 19             	mov    %rbx,(%rcx)
    3b82:	48 83 05 9e a0 5f 00 	addq   $0x1,0x5fa09e(%rip)        # 5fdc28 <edgeCnt>
    3b89:	01 

0000000000003b8a <_caledgehash>:
    3b8a:	48 8b 15 7f fd 74 00 	mov    0x74fd7f(%rip),%rdx        # 753910 <edgehash>
    3b91:	48 89 d0             	mov    %rdx,%rax
    3b94:	48 c1 e0 05          	shl    $0x5,%rax
    3b98:	48 01 c2             	add    %rax,%rdx
    3b9b:	48 8b 05 9e fd 74 00 	mov    0x74fd9e(%rip),%rax        # 753940 <edgeId>
    3ba2:	48 01 d0             	add    %rdx,%rax
    3ba5:	48 89 05 64 fd 74 00 	mov    %rax,0x74fd64(%rip)        # 753910 <edgehash>
    3bac:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    3bb3:	00 00 00 
    3bb6:	48 21 05 53 fd 74 00 	and    %rax,0x74fd53(%rip)        # 753910 <edgehash>
    3bbd:	5a                   	pop    %rdx
    3bbe:	59                   	pop    %rcx
    3bbf:	5b                   	pop    %rbx
    3bc0:	58                   	pop    %rax
    3bc1:	c3                   	retq   

0000000000003bc2 <_shm2Full>:
    3bc2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    3bc9:	5a                   	pop    %rdx
    3bca:	59                   	pop    %rcx
    3bcb:	5b                   	pop    %rbx
    3bcc:	58                   	pop    %rax
    3bcd:	e8 de dc ff ff       	callq  18b0 <_exit@plt>
    3bd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003bd8 <_storeDataFn>:
    3bd8:	55                   	push   %rbp
    3bd9:	48 89 e5             	mov    %rsp,%rbp
    3bdc:	50                   	push   %rax
    3bdd:	53                   	push   %rbx
    3bde:	41 50                	push   %r8
    3be0:	41 51                	push   %r9
    3be2:	41 52                	push   %r10
    3be4:	48 8b 05 4d fd 74 00 	mov    0x74fd4d(%rip),%rax        # 753938 <shmptr_gcnt>
    3beb:	48 8b 00             	mov    (%rax),%rax
    3bee:	48 c1 e0 03          	shl    $0x3,%rax
    3bf2:	48 83 c0 30          	add    $0x30,%rax
    3bf6:	48 3b 05 4b fd 74 00 	cmp    0x74fd4b(%rip),%rax        # 753948 <shmSize>
    3bfd:	0f 83 8f 01 00 00    	jae    3d92 <_shmFull>
    3c03:	48 83 3d 25 fd 74 00 	cmpq   $0x0,0x74fd25(%rip)        # 753930 <shmptr_cmp>
    3c0a:	00 
    3c0b:	0f 84 99 01 00 00    	je     3daa <_shmUninitialize>
    3c11:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    3c18:	48 83 e8 30          	sub    $0x30,%rax
    3c1c:	48 c1 e8 03          	shr    $0x3,%rax

0000000000003c20 <_storeloop>:
    3c20:	49 89 c2             	mov    %rax,%r10
    3c23:	49 c1 e2 03          	shl    $0x3,%r10
    3c27:	4c 03 15 02 fd 74 00 	add    0x74fd02(%rip),%r10        # 753930 <shmptr_cmp>
    3c2e:	49 89 d9             	mov    %rbx,%r9
    3c31:	49 c1 e1 03          	shl    $0x3,%r9
    3c35:	4c 8d 05 b4 9f 5f 00 	lea    0x5f9fb4(%rip),%r8        # 5fdbf0 <funcinptr>
    3c3c:	4d 01 c1             	add    %r8,%r9
    3c3f:	4d 8b 01             	mov    (%r9),%r8
    3c42:	4d 89 02             	mov    %r8,(%r10)
    3c45:	48 83 fb 00          	cmp    $0x0,%rbx
    3c49:	75 07                	jne    3c52 <_no_get_cmpid>
    3c4b:	4c 89 05 d6 fc 74 00 	mov    %r8,0x74fcd6(%rip)        # 753928 <cmpid>

0000000000003c52 <_no_get_cmpid>:
    3c52:	48 ff c0             	inc    %rax
    3c55:	48 ff c3             	inc    %rbx
    3c58:	48 83 fb 06          	cmp    $0x6,%rbx
    3c5c:	75 c2                	jne    3c20 <_storeloop>
    3c5e:	48 8b 1d d3 fc 74 00 	mov    0x74fcd3(%rip),%rbx        # 753938 <shmptr_gcnt>
    3c65:	48 89 03             	mov    %rax,(%rbx)
    3c68:	48 8b 05 b9 fc 74 00 	mov    0x74fcb9(%rip),%rax        # 753928 <cmpid>
    3c6f:	48 c1 e0 04          	shl    $0x4,%rax
    3c73:	48 89 c3             	mov    %rax,%rbx
    3c76:	48 83 c3 08          	add    $0x8,%rbx
    3c7a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    3c81:	0f 83 17 01 00 00    	jae    3d9e <_cmpdictFull>
    3c87:	48 8d 1d b2 9f 5f 00 	lea    0x5f9fb2(%rip),%rbx        # 5fdc40 <cmpid_dict>
    3c8e:	48 01 d8             	add    %rbx,%rax
    3c91:	48 83 38 00          	cmpq   $0x0,(%rax)
    3c95:	0f 84 db 00 00 00    	je     3d76 <_insert_entry>
    3c9b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000003ca2 <_remove_repeated_cycle>:
    3ca2:	4d 89 c1             	mov    %r8,%r9
    3ca5:	4d 89 ca             	mov    %r9,%r10
    3ca8:	49 c1 e1 02          	shl    $0x2,%r9
    3cac:	4d 01 d1             	add    %r10,%r9
    3caf:	4d 01 d1             	add    %r10,%r9
    3cb2:	4c 8b 15 7f fc 74 00 	mov    0x74fc7f(%rip),%r10        # 753938 <shmptr_gcnt>
    3cb9:	4d 8b 12             	mov    (%r10),%r10
    3cbc:	4c 2b 10             	sub    (%rax),%r10
    3cbf:	4c 3b 10             	cmp    (%rax),%r10
    3cc2:	0f 87 9f 00 00 00    	ja     3d67 <_no_remove_cycle>
    3cc8:	4d 39 ca             	cmp    %r9,%r10
    3ccb:	76 67                	jbe    3d34 <_remove_cycle>
    3ccd:	4d 89 c1             	mov    %r8,%r9
    3cd0:	49 83 c1 01          	add    $0x1,%r9
    3cd4:	4d 89 ca             	mov    %r9,%r10
    3cd7:	49 c1 e1 02          	shl    $0x2,%r9
    3cdb:	4d 01 d1             	add    %r10,%r9
    3cde:	4d 01 d1             	add    %r10,%r9
    3ce1:	4c 8b 15 50 fc 74 00 	mov    0x74fc50(%rip),%r10        # 753938 <shmptr_gcnt>
    3ce8:	4d 8b 12             	mov    (%r10),%r10
    3ceb:	4d 29 ca             	sub    %r9,%r10
    3cee:	49 c1 e2 03          	shl    $0x3,%r10
    3cf2:	4c 8b 0d 37 fc 74 00 	mov    0x74fc37(%rip),%r9        # 753930 <shmptr_cmp>
    3cf9:	4d 01 d1             	add    %r10,%r9
    3cfc:	49 8b 19             	mov    (%r9),%rbx
    3cff:	4d 89 c1             	mov    %r8,%r9
    3d02:	49 83 c1 01          	add    $0x1,%r9
    3d06:	4d 89 ca             	mov    %r9,%r10
    3d09:	49 c1 e1 02          	shl    $0x2,%r9
    3d0d:	4d 01 d1             	add    %r10,%r9
    3d10:	4d 01 d1             	add    %r10,%r9
    3d13:	4c 8b 10             	mov    (%rax),%r10
    3d16:	4d 29 ca             	sub    %r9,%r10
    3d19:	49 c1 e2 03          	shl    $0x3,%r10
    3d1d:	4c 8b 0d 0c fc 74 00 	mov    0x74fc0c(%rip),%r9        # 753930 <shmptr_cmp>
    3d24:	4d 01 d1             	add    %r10,%r9
    3d27:	49 3b 19             	cmp    (%r9),%rbx
    3d2a:	75 3b                	jne    3d67 <_no_remove_cycle>
    3d2c:	49 ff c0             	inc    %r8
    3d2f:	e9 6e ff ff ff       	jmpq   3ca2 <_remove_repeated_cycle>

0000000000003d34 <_remove_cycle>:
    3d34:	48 89 15 dd fb 74 00 	mov    %rdx,0x74fbdd(%rip)        # 753918 <tmpquadone>
    3d3b:	48 8b 10             	mov    (%rax),%rdx
    3d3e:	48 8b 05 f3 fb 74 00 	mov    0x74fbf3(%rip),%rax        # 753938 <shmptr_gcnt>
    3d45:	48 89 10             	mov    %rdx,(%rax)
    3d48:	89 d0                	mov    %edx,%eax
    3d4a:	48 c1 ea 20          	shr    $0x20,%rdx
    3d4e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    3d55:	49 f7 f0             	div    %r8
    3d58:	89 05 ca 9e 5f 00    	mov    %eax,0x5f9eca(%rip)        # 5fdc28 <edgeCnt>
    3d5e:	48 8b 15 b3 fb 74 00 	mov    0x74fbb3(%rip),%rdx        # 753918 <tmpquadone>
    3d65:	eb 1c                	jmp    3d83 <_skipstoredata>

0000000000003d67 <_no_remove_cycle>:
    3d67:	48 8b 1d ca fb 74 00 	mov    0x74fbca(%rip),%rbx        # 753938 <shmptr_gcnt>
    3d6e:	48 8b 1b             	mov    (%rbx),%rbx
    3d71:	48 89 18             	mov    %rbx,(%rax)
    3d74:	eb 0d                	jmp    3d83 <_skipstoredata>

0000000000003d76 <_insert_entry>:
    3d76:	48 8b 1d bb fb 74 00 	mov    0x74fbbb(%rip),%rbx        # 753938 <shmptr_gcnt>
    3d7d:	48 8b 1b             	mov    (%rbx),%rbx
    3d80:	48 89 18             	mov    %rbx,(%rax)

0000000000003d83 <_skipstoredata>:
    3d83:	41 5a                	pop    %r10
    3d85:	41 59                	pop    %r9
    3d87:	41 58                	pop    %r8
    3d89:	5b                   	pop    %rbx
    3d8a:	58                   	pop    %rax
    3d8b:	48 89 ec             	mov    %rbp,%rsp
    3d8e:	5d                   	pop    %rbp
    3d8f:	c2 08 00             	retq   $0x8

0000000000003d92 <_shmFull>:
    3d92:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    3d99:	e8 12 db ff ff       	callq  18b0 <_exit@plt>

0000000000003d9e <_cmpdictFull>:
    3d9e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    3da5:	e8 06 db ff ff       	callq  18b0 <_exit@plt>

0000000000003daa <_shmUninitialize>:
    3daa:	48 89 ec             	mov    %rbp,%rsp
    3dad:	5d                   	pop    %rbp
    3dae:	48 31 c0             	xor    %rax,%rax
    3db1:	c2 08 00             	retq   $0x8
    3db4:	0f 1f 40 00          	nopl   0x0(%rax)
    3db8:	9f                   	lahf   
    3db9:	0f 90 c0             	seto   %al
    3dbc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003dc0 <__afl_setup_first>:
    3dc0:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    3dc7:	ff 
    3dc8:	48 89 04 24          	mov    %rax,(%rsp)
    3dcc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    3dd1:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    3dd6:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    3ddb:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    3de0:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    3de5:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    3dea:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    3def:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    3df5:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    3dfb:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    3e02:	00 00 
    3e04:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    3e0b:	00 00 
    3e0d:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    3e14:	00 00 
    3e16:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    3e1d:	00 00 
    3e1f:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    3e26:	00 00 
    3e28:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    3e2f:	00 00 
    3e31:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    3e38:	00 00 00 
    3e3b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    3e42:	00 00 00 
    3e45:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    3e4c:	01 00 00 
    3e4f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    3e56:	01 00 00 
    3e59:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    3e60:	01 00 00 
    3e63:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    3e6a:	01 00 00 
    3e6d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    3e74:	01 00 00 
    3e77:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    3e7e:	01 00 00 
    3e81:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    3e88:	00 
    3e89:	41 54                	push   %r12
    3e8b:	49 89 e4             	mov    %rsp,%r12
    3e8e:	48 83 ec 10          	sub    $0x10,%rsp
    3e92:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    3e96:	48 c7 05 a7 fa 74 00 	movq   $0x100000,0x74faa7(%rip)        # 753948 <shmSize>
    3e9d:	00 00 10 00 
    3ea1:	48 c7 05 3c 9d 5f 00 	movq   $0x100000,0x5f9d3c(%rip)        # 5fdbe8 <shmSize2>
    3ea8:	00 00 10 00 
    3eac:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 41fe <.SHM_ENV_GCNT>
    3eb3:	e8 a8 d9 ff ff       	callq  1860 <getenv@plt>
    3eb8:	48 85 c0             	test   %rax,%rax
    3ebb:	0f 84 6a 01 00 00    	je     402b <__afl_setup_abort>
    3ec1:	48 89 c7             	mov    %rax,%rdi
    3ec4:	e8 27 dd ff ff       	callq  1bf0 <atoi@plt>
    3ec9:	48 31 d2             	xor    %rdx,%rdx
    3ecc:	48 31 f6             	xor    %rsi,%rsi
    3ecf:	48 89 c7             	mov    %rax,%rdi
    3ed2:	e8 f9 dc ff ff       	callq  1bd0 <shmat@plt>
    3ed7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    3edb:	0f 84 4a 01 00 00    	je     402b <__afl_setup_abort>
    3ee1:	48 89 05 50 fa 74 00 	mov    %rax,0x74fa50(%rip)        # 753938 <shmptr_gcnt>
    3ee8:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 41e5 <.SHM_ENV_CMP>
    3eef:	e8 6c d9 ff ff       	callq  1860 <getenv@plt>
    3ef4:	48 85 c0             	test   %rax,%rax
    3ef7:	0f 84 2e 01 00 00    	je     402b <__afl_setup_abort>
    3efd:	48 89 c7             	mov    %rax,%rdi
    3f00:	e8 eb dc ff ff       	callq  1bf0 <atoi@plt>
    3f05:	48 31 d2             	xor    %rdx,%rdx
    3f08:	48 31 f6             	xor    %rsi,%rsi
    3f0b:	48 89 c7             	mov    %rax,%rdi
    3f0e:	e8 bd dc ff ff       	callq  1bd0 <shmat@plt>
    3f13:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    3f17:	0f 84 0e 01 00 00    	je     402b <__afl_setup_abort>
    3f1d:	48 89 05 0c fa 74 00 	mov    %rax,0x74fa0c(%rip)        # 753930 <shmptr_cmp>
    3f24:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 41f1 <.SHM_ENV_EDGE>
    3f2b:	e8 30 d9 ff ff       	callq  1860 <getenv@plt>
    3f30:	48 85 c0             	test   %rax,%rax
    3f33:	0f 84 f2 00 00 00    	je     402b <__afl_setup_abort>
    3f39:	48 89 c7             	mov    %rax,%rdi
    3f3c:	e8 af dc ff ff       	callq  1bf0 <atoi@plt>
    3f41:	48 31 d2             	xor    %rdx,%rdx
    3f44:	48 31 f6             	xor    %rsi,%rsi
    3f47:	48 89 c7             	mov    %rax,%rdi
    3f4a:	e8 81 dc ff ff       	callq  1bd0 <shmat@plt>
    3f4f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    3f53:	0f 84 d2 00 00 00    	je     402b <__afl_setup_abort>
    3f59:	48 89 05 a8 f9 74 00 	mov    %rax,0x74f9a8(%rip)        # 753908 <shmptr_edge>

0000000000003f60 <__afl_forkserver>:
    3f60:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3f67:	48 8d 35 9e 9a 5f 00 	lea    0x5f9a9e(%rip),%rsi        # 5fda0c <__afl_temp>
    3f6e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    3f75:	e8 56 d9 ff ff       	callq  18d0 <write@plt>
    3f7a:	48 83 f8 04          	cmp    $0x4,%rax
    3f7e:	0f 85 78 01 00 00    	jne    40fc <__afl_fork_resume>

0000000000003f84 <__afl_fork_wait_loop>:
    3f84:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3f8b:	48 8d 35 7a 9a 5f 00 	lea    0x5f9a7a(%rip),%rsi        # 5fda0c <__afl_temp>
    3f92:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    3f99:	e8 a2 da ff ff       	callq  1a40 <read@plt>
    3f9e:	48 83 f8 04          	cmp    $0x4,%rax
    3fa2:	75 70                	jne    4014 <__afl_die>
    3fa4:	e8 a7 dc ff ff       	callq  1c50 <fork@plt>
    3fa9:	48 83 f8 00          	cmp    $0x0,%rax
    3fad:	7c 65                	jl     4014 <__afl_die>
    3faf:	0f 84 47 01 00 00    	je     40fc <__afl_fork_resume>
    3fb5:	89 05 4d 9a 5f 00    	mov    %eax,0x5f9a4d(%rip)        # 5fda08 <__afl_fork_pid>
    3fbb:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3fc2:	48 8d 35 3f 9a 5f 00 	lea    0x5f9a3f(%rip),%rsi        # 5fda08 <__afl_fork_pid>
    3fc9:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    3fd0:	e8 fb d8 ff ff       	callq  18d0 <write@plt>
    3fd5:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    3fdc:	48 8d 35 29 9a 5f 00 	lea    0x5f9a29(%rip),%rsi        # 5fda0c <__afl_temp>
    3fe3:	48 8b 3d 1e 9a 5f 00 	mov    0x5f9a1e(%rip),%rdi        # 5fda08 <__afl_fork_pid>
    3fea:	e8 91 db ff ff       	callq  1b80 <waitpid@plt>
    3fef:	48 83 f8 00          	cmp    $0x0,%rax
    3ff3:	7e 1f                	jle    4014 <__afl_die>
    3ff5:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    3ffc:	48 8d 35 09 9a 5f 00 	lea    0x5f9a09(%rip),%rsi        # 5fda0c <__afl_temp>
    4003:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    400a:	e8 c1 d8 ff ff       	callq  18d0 <write@plt>
    400f:	e9 70 ff ff ff       	jmpq   3f84 <__afl_fork_wait_loop>

0000000000004014 <__afl_die>:
    4014:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 4242 <.serverDied>
    401b:	48 31 c0             	xor    %rax,%rax
    401e:	e8 6d d9 ff ff       	callq  1990 <printf@plt>
    4023:	48 31 c0             	xor    %rax,%rax
    4026:	e8 85 d8 ff ff       	callq  18b0 <_exit@plt>

000000000000402b <__afl_setup_abort>:
    402b:	4c 89 e4             	mov    %r12,%rsp
    402e:	41 5c                	pop    %r12
    4030:	48 8b 04 24          	mov    (%rsp),%rax
    4034:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4039:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    403e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    4043:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4048:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    404d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    4052:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    4057:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    405d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    4063:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    406a:	00 00 
    406c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    4073:	00 00 
    4075:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    407c:	00 00 
    407e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    4085:	00 00 
    4087:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    408e:	00 00 
    4090:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    4097:	00 00 
    4099:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    40a0:	00 00 00 
    40a3:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    40aa:	00 00 00 
    40ad:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    40b4:	01 00 00 
    40b7:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    40be:	01 00 00 
    40c1:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    40c8:	01 00 00 
    40cb:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    40d2:	01 00 00 
    40d5:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    40dc:	01 00 00 
    40df:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    40e6:	01 00 00 
    40e9:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    40f0:	00 
    40f1:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    40f8:	00 
    40f9:	b0 7f                	mov    $0x7f,%al
    40fb:	c3                   	retq   

00000000000040fc <__afl_fork_resume>:
    40fc:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    4103:	e8 08 d9 ff ff       	callq  1a10 <close@plt>
    4108:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    410f:	e8 fc d8 ff ff       	callq  1a10 <close@plt>
    4114:	4c 89 e4             	mov    %r12,%rsp
    4117:	41 5c                	pop    %r12
    4119:	48 8b 04 24          	mov    (%rsp),%rax
    411d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4122:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4127:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    412c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4131:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    4136:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    413b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    4140:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    4146:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    414c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    4153:	00 00 
    4155:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    415c:	00 00 
    415e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    4165:	00 00 
    4167:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    416e:	00 00 
    4170:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    4177:	00 00 
    4179:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    4180:	00 00 
    4182:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    4189:	00 00 00 
    418c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    4193:	00 00 00 
    4196:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    419d:	01 00 00 
    41a0:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    41a7:	01 00 00 
    41aa:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    41b1:	01 00 00 
    41b4:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    41bb:	01 00 00 
    41be:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    41c5:	01 00 00 
    41c8:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    41cf:	01 00 00 
    41d2:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    41d9:	00 
    41da:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    41e1:	00 
    41e2:	b0 00                	mov    $0x0,%al
    41e4:	c3                   	retq   

00000000000041e5 <.SHM_ENV_CMP>:
    41e5:	53                   	push   %rbx
    41e6:	48                   	rex.W
    41e7:	4d 5f                	rex.WRB pop %r15
    41e9:	45                   	rex.RB
    41ea:	4e 56                	rex.WRX push %rsi
    41ec:	5f                   	pop    %rdi
    41ed:	43                   	rex.XB
    41ee:	4d 50                	rex.WRB push %r8
	...

00000000000041f1 <.SHM_ENV_EDGE>:
    41f1:	53                   	push   %rbx
    41f2:	48                   	rex.W
    41f3:	4d 5f                	rex.WRB pop %r15
    41f5:	45                   	rex.RB
    41f6:	4e 56                	rex.WRX push %rsi
    41f8:	5f                   	pop    %rdi
    41f9:	45                   	rex.RB
    41fa:	44                   	rex.R
    41fb:	47                   	rex.RXB
    41fc:	45                   	rex.RB
	...

00000000000041fe <.SHM_ENV_GCNT>:
    41fe:	53                   	push   %rbx
    41ff:	48                   	rex.W
    4200:	4d 5f                	rex.WRB pop %r15
    4202:	45                   	rex.RB
    4203:	4e 56                	rex.WRX push %rsi
    4205:	5f                   	pop    %rdi
    4206:	47                   	rex.RXB
    4207:	43                   	rex.XB
    4208:	4e 54                	rex.WRX push %rsp
	...

000000000000420b <.serverSetupError>:
    420b:	20 53 65             	and    %dl,0x65(%rbx)
    420e:	72 76                	jb     4286 <_storeEdge+0x1e>
    4210:	65 72 20             	gs jb  4233 <.serverSetupError+0x28>
    4213:	53                   	push   %rbx
    4214:	65 74 75             	gs je  428c <_storeEdge+0x24>
    4217:	70 20                	jo     4239 <.serverSetupError+0x2e>
    4219:	45 72 72             	rex.RB jb 428e <_storeEdge+0x26>
    421c:	6f                   	outsl  %ds:(%rsi),(%dx)
    421d:	72 2c                	jb     424b <.serverDied+0x9>
    421f:	20 63 6f             	and    %ah,0x6f(%rbx)
    4222:	6e                   	outsb  %ds:(%rsi),(%dx)
    4223:	74 69                	je     428e <_storeEdge+0x26>
    4225:	6e                   	outsb  %ds:(%rsi),(%dx)
    4226:	75 65                	jne    428d <_storeEdge+0x25>
    4228:	20 72 75             	and    %dh,0x75(%rdx)
    422b:	6e                   	outsb  %ds:(%rsi),(%dx)
    422c:	6e                   	outsb  %ds:(%rsi),(%dx)
    422d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    4234:	6f                   	outsl  %ds:(%rsi),(%dx)
    4235:	75 74                	jne    42ab <_storeEdge+0x43>
    4237:	20 73 65             	and    %dh,0x65(%rbx)
    423a:	72 76                	jb     42b2 <_caledgehash>
    423c:	65 72 20             	gs jb  425f <.debug+0xa>
    423f:	0a 20                	or     (%rax),%ah
	...

0000000000004242 <.serverDied>:
    4242:	20 53 65             	and    %dl,0x65(%rbx)
    4245:	72 76                	jb     42bd <_caledgehash+0xb>
    4247:	65 72 20             	gs jb  426a <_storeEdge+0x2>
    424a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    4251:	20 0a                	and    %cl,(%rdx)
    4253:	20 00                	and    %al,(%rax)

0000000000004255 <.debug>:
    4255:	64 65 62             	fs gs (bad) 
    4258:	75 67                	jne    42c1 <_caledgehash+0xf>
    425a:	20 6d 65             	and    %ch,0x65(%rbp)
    425d:	73 73                	jae    42d2 <_caledgehash+0x20>
    425f:	61                   	(bad)  
    4260:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    4264:	0a 20                	or     (%rax),%ah
    4266:	00                   	.byte 0x0
    4267:	90                   	nop

0000000000004268 <_storeEdge>:
    4268:	50                   	push   %rax
    4269:	53                   	push   %rbx
    426a:	51                   	push   %rcx
    426b:	52                   	push   %rdx
    426c:	48 83 3d dc f6 74 00 	cmpq   $0x1,0x74f6dc(%rip)        # 753950 <cmpPassed>
    4273:	01 
    4274:	75 3c                	jne    42b2 <_caledgehash>
    4276:	48 c7 05 cf f6 74 00 	movq   $0x0,0x74f6cf(%rip)        # 753950 <cmpPassed>
    427d:	00 00 00 00 
    4281:	48 8b 05 a0 99 5f 00 	mov    0x5f99a0(%rip),%rax        # 5fdc28 <edgeCnt>
    4288:	48 c1 e0 03          	shl    $0x3,%rax
    428c:	48 3b 05 55 99 5f 00 	cmp    0x5f9955(%rip),%rax        # 5fdbe8 <shmSize2>
    4293:	77 55                	ja     42ea <_shm2Full>
    4295:	48 8b 1d 74 f6 74 00 	mov    0x74f674(%rip),%rbx        # 753910 <edgehash>
    429c:	48 8b 15 65 f6 74 00 	mov    0x74f665(%rip),%rdx        # 753908 <shmptr_edge>
    42a3:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    42a7:	48 89 19             	mov    %rbx,(%rcx)
    42aa:	48 83 05 76 99 5f 00 	addq   $0x1,0x5f9976(%rip)        # 5fdc28 <edgeCnt>
    42b1:	01 

00000000000042b2 <_caledgehash>:
    42b2:	48 8b 15 57 f6 74 00 	mov    0x74f657(%rip),%rdx        # 753910 <edgehash>
    42b9:	48 89 d0             	mov    %rdx,%rax
    42bc:	48 c1 e0 05          	shl    $0x5,%rax
    42c0:	48 01 c2             	add    %rax,%rdx
    42c3:	48 8b 05 76 f6 74 00 	mov    0x74f676(%rip),%rax        # 753940 <edgeId>
    42ca:	48 01 d0             	add    %rdx,%rax
    42cd:	48 89 05 3c f6 74 00 	mov    %rax,0x74f63c(%rip)        # 753910 <edgehash>
    42d4:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    42db:	00 00 00 
    42de:	48 21 05 2b f6 74 00 	and    %rax,0x74f62b(%rip)        # 753910 <edgehash>
    42e5:	5a                   	pop    %rdx
    42e6:	59                   	pop    %rcx
    42e7:	5b                   	pop    %rbx
    42e8:	58                   	pop    %rax
    42e9:	c3                   	retq   

00000000000042ea <_shm2Full>:
    42ea:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    42f1:	5a                   	pop    %rdx
    42f2:	59                   	pop    %rcx
    42f3:	5b                   	pop    %rbx
    42f4:	58                   	pop    %rax
    42f5:	e8 b6 d5 ff ff       	callq  18b0 <_exit@plt>
    42fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004300 <_storeDataFn>:
    4300:	55                   	push   %rbp
    4301:	48 89 e5             	mov    %rsp,%rbp
    4304:	50                   	push   %rax
    4305:	53                   	push   %rbx
    4306:	41 50                	push   %r8
    4308:	41 51                	push   %r9
    430a:	41 52                	push   %r10
    430c:	48 8b 05 25 f6 74 00 	mov    0x74f625(%rip),%rax        # 753938 <shmptr_gcnt>
    4313:	48 8b 00             	mov    (%rax),%rax
    4316:	48 c1 e0 03          	shl    $0x3,%rax
    431a:	48 83 c0 30          	add    $0x30,%rax
    431e:	48 3b 05 23 f6 74 00 	cmp    0x74f623(%rip),%rax        # 753948 <shmSize>
    4325:	0f 83 8f 01 00 00    	jae    44ba <_shmFull>
    432b:	48 83 3d fd f5 74 00 	cmpq   $0x0,0x74f5fd(%rip)        # 753930 <shmptr_cmp>
    4332:	00 
    4333:	0f 84 99 01 00 00    	je     44d2 <_shmUninitialize>
    4339:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    4340:	48 83 e8 30          	sub    $0x30,%rax
    4344:	48 c1 e8 03          	shr    $0x3,%rax

0000000000004348 <_storeloop>:
    4348:	49 89 c2             	mov    %rax,%r10
    434b:	49 c1 e2 03          	shl    $0x3,%r10
    434f:	4c 03 15 da f5 74 00 	add    0x74f5da(%rip),%r10        # 753930 <shmptr_cmp>
    4356:	49 89 d9             	mov    %rbx,%r9
    4359:	49 c1 e1 03          	shl    $0x3,%r9
    435d:	4c 8d 05 8c 98 5f 00 	lea    0x5f988c(%rip),%r8        # 5fdbf0 <funcinptr>
    4364:	4d 01 c1             	add    %r8,%r9
    4367:	4d 8b 01             	mov    (%r9),%r8
    436a:	4d 89 02             	mov    %r8,(%r10)
    436d:	48 83 fb 00          	cmp    $0x0,%rbx
    4371:	75 07                	jne    437a <_no_get_cmpid>
    4373:	4c 89 05 ae f5 74 00 	mov    %r8,0x74f5ae(%rip)        # 753928 <cmpid>

000000000000437a <_no_get_cmpid>:
    437a:	48 ff c0             	inc    %rax
    437d:	48 ff c3             	inc    %rbx
    4380:	48 83 fb 06          	cmp    $0x6,%rbx
    4384:	75 c2                	jne    4348 <_storeloop>
    4386:	48 8b 1d ab f5 74 00 	mov    0x74f5ab(%rip),%rbx        # 753938 <shmptr_gcnt>
    438d:	48 89 03             	mov    %rax,(%rbx)
    4390:	48 8b 05 91 f5 74 00 	mov    0x74f591(%rip),%rax        # 753928 <cmpid>
    4397:	48 c1 e0 04          	shl    $0x4,%rax
    439b:	48 89 c3             	mov    %rax,%rbx
    439e:	48 83 c3 08          	add    $0x8,%rbx
    43a2:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    43a9:	0f 83 17 01 00 00    	jae    44c6 <_cmpdictFull>
    43af:	48 8d 1d 8a 98 5f 00 	lea    0x5f988a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    43b6:	48 01 d8             	add    %rbx,%rax
    43b9:	48 83 38 00          	cmpq   $0x0,(%rax)
    43bd:	0f 84 db 00 00 00    	je     449e <_insert_entry>
    43c3:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

00000000000043ca <_remove_repeated_cycle>:
    43ca:	4d 89 c1             	mov    %r8,%r9
    43cd:	4d 89 ca             	mov    %r9,%r10
    43d0:	49 c1 e1 02          	shl    $0x2,%r9
    43d4:	4d 01 d1             	add    %r10,%r9
    43d7:	4d 01 d1             	add    %r10,%r9
    43da:	4c 8b 15 57 f5 74 00 	mov    0x74f557(%rip),%r10        # 753938 <shmptr_gcnt>
    43e1:	4d 8b 12             	mov    (%r10),%r10
    43e4:	4c 2b 10             	sub    (%rax),%r10
    43e7:	4c 3b 10             	cmp    (%rax),%r10
    43ea:	0f 87 9f 00 00 00    	ja     448f <_no_remove_cycle>
    43f0:	4d 39 ca             	cmp    %r9,%r10
    43f3:	76 67                	jbe    445c <_remove_cycle>
    43f5:	4d 89 c1             	mov    %r8,%r9
    43f8:	49 83 c1 01          	add    $0x1,%r9
    43fc:	4d 89 ca             	mov    %r9,%r10
    43ff:	49 c1 e1 02          	shl    $0x2,%r9
    4403:	4d 01 d1             	add    %r10,%r9
    4406:	4d 01 d1             	add    %r10,%r9
    4409:	4c 8b 15 28 f5 74 00 	mov    0x74f528(%rip),%r10        # 753938 <shmptr_gcnt>
    4410:	4d 8b 12             	mov    (%r10),%r10
    4413:	4d 29 ca             	sub    %r9,%r10
    4416:	49 c1 e2 03          	shl    $0x3,%r10
    441a:	4c 8b 0d 0f f5 74 00 	mov    0x74f50f(%rip),%r9        # 753930 <shmptr_cmp>
    4421:	4d 01 d1             	add    %r10,%r9
    4424:	49 8b 19             	mov    (%r9),%rbx
    4427:	4d 89 c1             	mov    %r8,%r9
    442a:	49 83 c1 01          	add    $0x1,%r9
    442e:	4d 89 ca             	mov    %r9,%r10
    4431:	49 c1 e1 02          	shl    $0x2,%r9
    4435:	4d 01 d1             	add    %r10,%r9
    4438:	4d 01 d1             	add    %r10,%r9
    443b:	4c 8b 10             	mov    (%rax),%r10
    443e:	4d 29 ca             	sub    %r9,%r10
    4441:	49 c1 e2 03          	shl    $0x3,%r10
    4445:	4c 8b 0d e4 f4 74 00 	mov    0x74f4e4(%rip),%r9        # 753930 <shmptr_cmp>
    444c:	4d 01 d1             	add    %r10,%r9
    444f:	49 3b 19             	cmp    (%r9),%rbx
    4452:	75 3b                	jne    448f <_no_remove_cycle>
    4454:	49 ff c0             	inc    %r8
    4457:	e9 6e ff ff ff       	jmpq   43ca <_remove_repeated_cycle>

000000000000445c <_remove_cycle>:
    445c:	48 89 15 b5 f4 74 00 	mov    %rdx,0x74f4b5(%rip)        # 753918 <tmpquadone>
    4463:	48 8b 10             	mov    (%rax),%rdx
    4466:	48 8b 05 cb f4 74 00 	mov    0x74f4cb(%rip),%rax        # 753938 <shmptr_gcnt>
    446d:	48 89 10             	mov    %rdx,(%rax)
    4470:	89 d0                	mov    %edx,%eax
    4472:	48 c1 ea 20          	shr    $0x20,%rdx
    4476:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    447d:	49 f7 f0             	div    %r8
    4480:	89 05 a2 97 5f 00    	mov    %eax,0x5f97a2(%rip)        # 5fdc28 <edgeCnt>
    4486:	48 8b 15 8b f4 74 00 	mov    0x74f48b(%rip),%rdx        # 753918 <tmpquadone>
    448d:	eb 1c                	jmp    44ab <_skipstoredata>

000000000000448f <_no_remove_cycle>:
    448f:	48 8b 1d a2 f4 74 00 	mov    0x74f4a2(%rip),%rbx        # 753938 <shmptr_gcnt>
    4496:	48 8b 1b             	mov    (%rbx),%rbx
    4499:	48 89 18             	mov    %rbx,(%rax)
    449c:	eb 0d                	jmp    44ab <_skipstoredata>

000000000000449e <_insert_entry>:
    449e:	48 8b 1d 93 f4 74 00 	mov    0x74f493(%rip),%rbx        # 753938 <shmptr_gcnt>
    44a5:	48 8b 1b             	mov    (%rbx),%rbx
    44a8:	48 89 18             	mov    %rbx,(%rax)

00000000000044ab <_skipstoredata>:
    44ab:	41 5a                	pop    %r10
    44ad:	41 59                	pop    %r9
    44af:	41 58                	pop    %r8
    44b1:	5b                   	pop    %rbx
    44b2:	58                   	pop    %rax
    44b3:	48 89 ec             	mov    %rbp,%rsp
    44b6:	5d                   	pop    %rbp
    44b7:	c2 08 00             	retq   $0x8

00000000000044ba <_shmFull>:
    44ba:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    44c1:	e8 ea d3 ff ff       	callq  18b0 <_exit@plt>

00000000000044c6 <_cmpdictFull>:
    44c6:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    44cd:	e8 de d3 ff ff       	callq  18b0 <_exit@plt>

00000000000044d2 <_shmUninitialize>:
    44d2:	48 89 ec             	mov    %rbp,%rsp
    44d5:	5d                   	pop    %rbp
    44d6:	48 31 c0             	xor    %rax,%rax
    44d9:	c2 08 00             	retq   $0x8
    44dc:	0f 1f 40 00          	nopl   0x0(%rax)
    44e0:	9f                   	lahf   
    44e1:	0f 90 c0             	seto   %al
    44e4:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000044e8 <__afl_setup_first>:
    44e8:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    44ef:	ff 
    44f0:	48 89 04 24          	mov    %rax,(%rsp)
    44f4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    44f9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    44fe:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    4503:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    4508:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    450d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    4512:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    4517:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    451d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    4523:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    452a:	00 00 
    452c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    4533:	00 00 
    4535:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    453c:	00 00 
    453e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    4545:	00 00 
    4547:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    454e:	00 00 
    4550:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    4557:	00 00 
    4559:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    4560:	00 00 00 
    4563:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    456a:	00 00 00 
    456d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    4574:	01 00 00 
    4577:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    457e:	01 00 00 
    4581:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    4588:	01 00 00 
    458b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    4592:	01 00 00 
    4595:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    459c:	01 00 00 
    459f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    45a6:	01 00 00 
    45a9:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    45b0:	00 
    45b1:	41 54                	push   %r12
    45b3:	49 89 e4             	mov    %rsp,%r12
    45b6:	48 83 ec 10          	sub    $0x10,%rsp
    45ba:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    45be:	48 c7 05 7f f3 74 00 	movq   $0x100000,0x74f37f(%rip)        # 753948 <shmSize>
    45c5:	00 00 10 00 
    45c9:	48 c7 05 14 96 5f 00 	movq   $0x100000,0x5f9614(%rip)        # 5fdbe8 <shmSize2>
    45d0:	00 00 10 00 
    45d4:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 4926 <.SHM_ENV_GCNT>
    45db:	e8 80 d2 ff ff       	callq  1860 <getenv@plt>
    45e0:	48 85 c0             	test   %rax,%rax
    45e3:	0f 84 6a 01 00 00    	je     4753 <__afl_setup_abort>
    45e9:	48 89 c7             	mov    %rax,%rdi
    45ec:	e8 ff d5 ff ff       	callq  1bf0 <atoi@plt>
    45f1:	48 31 d2             	xor    %rdx,%rdx
    45f4:	48 31 f6             	xor    %rsi,%rsi
    45f7:	48 89 c7             	mov    %rax,%rdi
    45fa:	e8 d1 d5 ff ff       	callq  1bd0 <shmat@plt>
    45ff:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    4603:	0f 84 4a 01 00 00    	je     4753 <__afl_setup_abort>
    4609:	48 89 05 28 f3 74 00 	mov    %rax,0x74f328(%rip)        # 753938 <shmptr_gcnt>
    4610:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 490d <.SHM_ENV_CMP>
    4617:	e8 44 d2 ff ff       	callq  1860 <getenv@plt>
    461c:	48 85 c0             	test   %rax,%rax
    461f:	0f 84 2e 01 00 00    	je     4753 <__afl_setup_abort>
    4625:	48 89 c7             	mov    %rax,%rdi
    4628:	e8 c3 d5 ff ff       	callq  1bf0 <atoi@plt>
    462d:	48 31 d2             	xor    %rdx,%rdx
    4630:	48 31 f6             	xor    %rsi,%rsi
    4633:	48 89 c7             	mov    %rax,%rdi
    4636:	e8 95 d5 ff ff       	callq  1bd0 <shmat@plt>
    463b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    463f:	0f 84 0e 01 00 00    	je     4753 <__afl_setup_abort>
    4645:	48 89 05 e4 f2 74 00 	mov    %rax,0x74f2e4(%rip)        # 753930 <shmptr_cmp>
    464c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 4919 <.SHM_ENV_EDGE>
    4653:	e8 08 d2 ff ff       	callq  1860 <getenv@plt>
    4658:	48 85 c0             	test   %rax,%rax
    465b:	0f 84 f2 00 00 00    	je     4753 <__afl_setup_abort>
    4661:	48 89 c7             	mov    %rax,%rdi
    4664:	e8 87 d5 ff ff       	callq  1bf0 <atoi@plt>
    4669:	48 31 d2             	xor    %rdx,%rdx
    466c:	48 31 f6             	xor    %rsi,%rsi
    466f:	48 89 c7             	mov    %rax,%rdi
    4672:	e8 59 d5 ff ff       	callq  1bd0 <shmat@plt>
    4677:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    467b:	0f 84 d2 00 00 00    	je     4753 <__afl_setup_abort>
    4681:	48 89 05 80 f2 74 00 	mov    %rax,0x74f280(%rip)        # 753908 <shmptr_edge>

0000000000004688 <__afl_forkserver>:
    4688:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    468f:	48 8d 35 7e 93 5f 00 	lea    0x5f937e(%rip),%rsi        # 5fda14 <__afl_temp>
    4696:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    469d:	e8 2e d2 ff ff       	callq  18d0 <write@plt>
    46a2:	48 83 f8 04          	cmp    $0x4,%rax
    46a6:	0f 85 78 01 00 00    	jne    4824 <__afl_fork_resume>

00000000000046ac <__afl_fork_wait_loop>:
    46ac:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    46b3:	48 8d 35 5a 93 5f 00 	lea    0x5f935a(%rip),%rsi        # 5fda14 <__afl_temp>
    46ba:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    46c1:	e8 7a d3 ff ff       	callq  1a40 <read@plt>
    46c6:	48 83 f8 04          	cmp    $0x4,%rax
    46ca:	75 70                	jne    473c <__afl_die>
    46cc:	e8 7f d5 ff ff       	callq  1c50 <fork@plt>
    46d1:	48 83 f8 00          	cmp    $0x0,%rax
    46d5:	7c 65                	jl     473c <__afl_die>
    46d7:	0f 84 47 01 00 00    	je     4824 <__afl_fork_resume>
    46dd:	89 05 2d 93 5f 00    	mov    %eax,0x5f932d(%rip)        # 5fda10 <__afl_fork_pid>
    46e3:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    46ea:	48 8d 35 1f 93 5f 00 	lea    0x5f931f(%rip),%rsi        # 5fda10 <__afl_fork_pid>
    46f1:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    46f8:	e8 d3 d1 ff ff       	callq  18d0 <write@plt>
    46fd:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    4704:	48 8d 35 09 93 5f 00 	lea    0x5f9309(%rip),%rsi        # 5fda14 <__afl_temp>
    470b:	48 8b 3d fe 92 5f 00 	mov    0x5f92fe(%rip),%rdi        # 5fda10 <__afl_fork_pid>
    4712:	e8 69 d4 ff ff       	callq  1b80 <waitpid@plt>
    4717:	48 83 f8 00          	cmp    $0x0,%rax
    471b:	7e 1f                	jle    473c <__afl_die>
    471d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    4724:	48 8d 35 e9 92 5f 00 	lea    0x5f92e9(%rip),%rsi        # 5fda14 <__afl_temp>
    472b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4732:	e8 99 d1 ff ff       	callq  18d0 <write@plt>
    4737:	e9 70 ff ff ff       	jmpq   46ac <__afl_fork_wait_loop>

000000000000473c <__afl_die>:
    473c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 496a <.serverDied>
    4743:	48 31 c0             	xor    %rax,%rax
    4746:	e8 45 d2 ff ff       	callq  1990 <printf@plt>
    474b:	48 31 c0             	xor    %rax,%rax
    474e:	e8 5d d1 ff ff       	callq  18b0 <_exit@plt>

0000000000004753 <__afl_setup_abort>:
    4753:	4c 89 e4             	mov    %r12,%rsp
    4756:	41 5c                	pop    %r12
    4758:	48 8b 04 24          	mov    (%rsp),%rax
    475c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4761:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4766:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    476b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4770:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    4775:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    477a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    477f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    4785:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    478b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    4792:	00 00 
    4794:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    479b:	00 00 
    479d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    47a4:	00 00 
    47a6:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    47ad:	00 00 
    47af:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    47b6:	00 00 
    47b8:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    47bf:	00 00 
    47c1:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    47c8:	00 00 00 
    47cb:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    47d2:	00 00 00 
    47d5:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    47dc:	01 00 00 
    47df:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    47e6:	01 00 00 
    47e9:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    47f0:	01 00 00 
    47f3:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    47fa:	01 00 00 
    47fd:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    4804:	01 00 00 
    4807:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    480e:	01 00 00 
    4811:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    4818:	00 
    4819:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    4820:	00 
    4821:	b0 7f                	mov    $0x7f,%al
    4823:	c3                   	retq   

0000000000004824 <__afl_fork_resume>:
    4824:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    482b:	e8 e0 d1 ff ff       	callq  1a10 <close@plt>
    4830:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4837:	e8 d4 d1 ff ff       	callq  1a10 <close@plt>
    483c:	4c 89 e4             	mov    %r12,%rsp
    483f:	41 5c                	pop    %r12
    4841:	48 8b 04 24          	mov    (%rsp),%rax
    4845:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    484a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    484f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    4854:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4859:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    485e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    4863:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    4868:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    486e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    4874:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    487b:	00 00 
    487d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    4884:	00 00 
    4886:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    488d:	00 00 
    488f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    4896:	00 00 
    4898:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    489f:	00 00 
    48a1:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    48a8:	00 00 
    48aa:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    48b1:	00 00 00 
    48b4:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    48bb:	00 00 00 
    48be:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    48c5:	01 00 00 
    48c8:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    48cf:	01 00 00 
    48d2:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    48d9:	01 00 00 
    48dc:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    48e3:	01 00 00 
    48e6:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    48ed:	01 00 00 
    48f0:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    48f7:	01 00 00 
    48fa:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    4901:	00 
    4902:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    4909:	00 
    490a:	b0 00                	mov    $0x0,%al
    490c:	c3                   	retq   

000000000000490d <.SHM_ENV_CMP>:
    490d:	53                   	push   %rbx
    490e:	48                   	rex.W
    490f:	4d 5f                	rex.WRB pop %r15
    4911:	45                   	rex.RB
    4912:	4e 56                	rex.WRX push %rsi
    4914:	5f                   	pop    %rdi
    4915:	43                   	rex.XB
    4916:	4d 50                	rex.WRB push %r8
	...

0000000000004919 <.SHM_ENV_EDGE>:
    4919:	53                   	push   %rbx
    491a:	48                   	rex.W
    491b:	4d 5f                	rex.WRB pop %r15
    491d:	45                   	rex.RB
    491e:	4e 56                	rex.WRX push %rsi
    4920:	5f                   	pop    %rdi
    4921:	45                   	rex.RB
    4922:	44                   	rex.R
    4923:	47                   	rex.RXB
    4924:	45                   	rex.RB
	...

0000000000004926 <.SHM_ENV_GCNT>:
    4926:	53                   	push   %rbx
    4927:	48                   	rex.W
    4928:	4d 5f                	rex.WRB pop %r15
    492a:	45                   	rex.RB
    492b:	4e 56                	rex.WRX push %rsi
    492d:	5f                   	pop    %rdi
    492e:	47                   	rex.RXB
    492f:	43                   	rex.XB
    4930:	4e 54                	rex.WRX push %rsp
	...

0000000000004933 <.serverSetupError>:
    4933:	20 53 65             	and    %dl,0x65(%rbx)
    4936:	72 76                	jb     49ae <_storeEdge+0x1e>
    4938:	65 72 20             	gs jb  495b <.serverSetupError+0x28>
    493b:	53                   	push   %rbx
    493c:	65 74 75             	gs je  49b4 <_storeEdge+0x24>
    493f:	70 20                	jo     4961 <.serverSetupError+0x2e>
    4941:	45 72 72             	rex.RB jb 49b6 <_storeEdge+0x26>
    4944:	6f                   	outsl  %ds:(%rsi),(%dx)
    4945:	72 2c                	jb     4973 <.serverDied+0x9>
    4947:	20 63 6f             	and    %ah,0x6f(%rbx)
    494a:	6e                   	outsb  %ds:(%rsi),(%dx)
    494b:	74 69                	je     49b6 <_storeEdge+0x26>
    494d:	6e                   	outsb  %ds:(%rsi),(%dx)
    494e:	75 65                	jne    49b5 <_storeEdge+0x25>
    4950:	20 72 75             	and    %dh,0x75(%rdx)
    4953:	6e                   	outsb  %ds:(%rsi),(%dx)
    4954:	6e                   	outsb  %ds:(%rsi),(%dx)
    4955:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    495c:	6f                   	outsl  %ds:(%rsi),(%dx)
    495d:	75 74                	jne    49d3 <_storeEdge+0x43>
    495f:	20 73 65             	and    %dh,0x65(%rbx)
    4962:	72 76                	jb     49da <_caledgehash>
    4964:	65 72 20             	gs jb  4987 <.debug+0xa>
    4967:	0a 20                	or     (%rax),%ah
	...

000000000000496a <.serverDied>:
    496a:	20 53 65             	and    %dl,0x65(%rbx)
    496d:	72 76                	jb     49e5 <_caledgehash+0xb>
    496f:	65 72 20             	gs jb  4992 <_storeEdge+0x2>
    4972:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    4979:	20 0a                	and    %cl,(%rdx)
    497b:	20 00                	and    %al,(%rax)

000000000000497d <.debug>:
    497d:	64 65 62             	fs gs (bad) 
    4980:	75 67                	jne    49e9 <_caledgehash+0xf>
    4982:	20 6d 65             	and    %ch,0x65(%rbp)
    4985:	73 73                	jae    49fa <_caledgehash+0x20>
    4987:	61                   	(bad)  
    4988:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    498c:	0a 20                	or     (%rax),%ah
    498e:	00                   	.byte 0x0
    498f:	90                   	nop

0000000000004990 <_storeEdge>:
    4990:	50                   	push   %rax
    4991:	53                   	push   %rbx
    4992:	51                   	push   %rcx
    4993:	52                   	push   %rdx
    4994:	48 83 3d b4 ef 74 00 	cmpq   $0x1,0x74efb4(%rip)        # 753950 <cmpPassed>
    499b:	01 
    499c:	75 3c                	jne    49da <_caledgehash>
    499e:	48 c7 05 a7 ef 74 00 	movq   $0x0,0x74efa7(%rip)        # 753950 <cmpPassed>
    49a5:	00 00 00 00 
    49a9:	48 8b 05 78 92 5f 00 	mov    0x5f9278(%rip),%rax        # 5fdc28 <edgeCnt>
    49b0:	48 c1 e0 03          	shl    $0x3,%rax
    49b4:	48 3b 05 2d 92 5f 00 	cmp    0x5f922d(%rip),%rax        # 5fdbe8 <shmSize2>
    49bb:	77 55                	ja     4a12 <_shm2Full>
    49bd:	48 8b 1d 4c ef 74 00 	mov    0x74ef4c(%rip),%rbx        # 753910 <edgehash>
    49c4:	48 8b 15 3d ef 74 00 	mov    0x74ef3d(%rip),%rdx        # 753908 <shmptr_edge>
    49cb:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    49cf:	48 89 19             	mov    %rbx,(%rcx)
    49d2:	48 83 05 4e 92 5f 00 	addq   $0x1,0x5f924e(%rip)        # 5fdc28 <edgeCnt>
    49d9:	01 

00000000000049da <_caledgehash>:
    49da:	48 8b 15 2f ef 74 00 	mov    0x74ef2f(%rip),%rdx        # 753910 <edgehash>
    49e1:	48 89 d0             	mov    %rdx,%rax
    49e4:	48 c1 e0 05          	shl    $0x5,%rax
    49e8:	48 01 c2             	add    %rax,%rdx
    49eb:	48 8b 05 4e ef 74 00 	mov    0x74ef4e(%rip),%rax        # 753940 <edgeId>
    49f2:	48 01 d0             	add    %rdx,%rax
    49f5:	48 89 05 14 ef 74 00 	mov    %rax,0x74ef14(%rip)        # 753910 <edgehash>
    49fc:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    4a03:	00 00 00 
    4a06:	48 21 05 03 ef 74 00 	and    %rax,0x74ef03(%rip)        # 753910 <edgehash>
    4a0d:	5a                   	pop    %rdx
    4a0e:	59                   	pop    %rcx
    4a0f:	5b                   	pop    %rbx
    4a10:	58                   	pop    %rax
    4a11:	c3                   	retq   

0000000000004a12 <_shm2Full>:
    4a12:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    4a19:	5a                   	pop    %rdx
    4a1a:	59                   	pop    %rcx
    4a1b:	5b                   	pop    %rbx
    4a1c:	58                   	pop    %rax
    4a1d:	e8 8e ce ff ff       	callq  18b0 <_exit@plt>
    4a22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004a28 <_storeDataFn>:
    4a28:	55                   	push   %rbp
    4a29:	48 89 e5             	mov    %rsp,%rbp
    4a2c:	50                   	push   %rax
    4a2d:	53                   	push   %rbx
    4a2e:	41 50                	push   %r8
    4a30:	41 51                	push   %r9
    4a32:	41 52                	push   %r10
    4a34:	48 8b 05 fd ee 74 00 	mov    0x74eefd(%rip),%rax        # 753938 <shmptr_gcnt>
    4a3b:	48 8b 00             	mov    (%rax),%rax
    4a3e:	48 c1 e0 03          	shl    $0x3,%rax
    4a42:	48 83 c0 30          	add    $0x30,%rax
    4a46:	48 3b 05 fb ee 74 00 	cmp    0x74eefb(%rip),%rax        # 753948 <shmSize>
    4a4d:	0f 83 8f 01 00 00    	jae    4be2 <_shmFull>
    4a53:	48 83 3d d5 ee 74 00 	cmpq   $0x0,0x74eed5(%rip)        # 753930 <shmptr_cmp>
    4a5a:	00 
    4a5b:	0f 84 99 01 00 00    	je     4bfa <_shmUninitialize>
    4a61:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    4a68:	48 83 e8 30          	sub    $0x30,%rax
    4a6c:	48 c1 e8 03          	shr    $0x3,%rax

0000000000004a70 <_storeloop>:
    4a70:	49 89 c2             	mov    %rax,%r10
    4a73:	49 c1 e2 03          	shl    $0x3,%r10
    4a77:	4c 03 15 b2 ee 74 00 	add    0x74eeb2(%rip),%r10        # 753930 <shmptr_cmp>
    4a7e:	49 89 d9             	mov    %rbx,%r9
    4a81:	49 c1 e1 03          	shl    $0x3,%r9
    4a85:	4c 8d 05 64 91 5f 00 	lea    0x5f9164(%rip),%r8        # 5fdbf0 <funcinptr>
    4a8c:	4d 01 c1             	add    %r8,%r9
    4a8f:	4d 8b 01             	mov    (%r9),%r8
    4a92:	4d 89 02             	mov    %r8,(%r10)
    4a95:	48 83 fb 00          	cmp    $0x0,%rbx
    4a99:	75 07                	jne    4aa2 <_no_get_cmpid>
    4a9b:	4c 89 05 86 ee 74 00 	mov    %r8,0x74ee86(%rip)        # 753928 <cmpid>

0000000000004aa2 <_no_get_cmpid>:
    4aa2:	48 ff c0             	inc    %rax
    4aa5:	48 ff c3             	inc    %rbx
    4aa8:	48 83 fb 06          	cmp    $0x6,%rbx
    4aac:	75 c2                	jne    4a70 <_storeloop>
    4aae:	48 8b 1d 83 ee 74 00 	mov    0x74ee83(%rip),%rbx        # 753938 <shmptr_gcnt>
    4ab5:	48 89 03             	mov    %rax,(%rbx)
    4ab8:	48 8b 05 69 ee 74 00 	mov    0x74ee69(%rip),%rax        # 753928 <cmpid>
    4abf:	48 c1 e0 04          	shl    $0x4,%rax
    4ac3:	48 89 c3             	mov    %rax,%rbx
    4ac6:	48 83 c3 08          	add    $0x8,%rbx
    4aca:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    4ad1:	0f 83 17 01 00 00    	jae    4bee <_cmpdictFull>
    4ad7:	48 8d 1d 62 91 5f 00 	lea    0x5f9162(%rip),%rbx        # 5fdc40 <cmpid_dict>
    4ade:	48 01 d8             	add    %rbx,%rax
    4ae1:	48 83 38 00          	cmpq   $0x0,(%rax)
    4ae5:	0f 84 db 00 00 00    	je     4bc6 <_insert_entry>
    4aeb:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000004af2 <_remove_repeated_cycle>:
    4af2:	4d 89 c1             	mov    %r8,%r9
    4af5:	4d 89 ca             	mov    %r9,%r10
    4af8:	49 c1 e1 02          	shl    $0x2,%r9
    4afc:	4d 01 d1             	add    %r10,%r9
    4aff:	4d 01 d1             	add    %r10,%r9
    4b02:	4c 8b 15 2f ee 74 00 	mov    0x74ee2f(%rip),%r10        # 753938 <shmptr_gcnt>
    4b09:	4d 8b 12             	mov    (%r10),%r10
    4b0c:	4c 2b 10             	sub    (%rax),%r10
    4b0f:	4c 3b 10             	cmp    (%rax),%r10
    4b12:	0f 87 9f 00 00 00    	ja     4bb7 <_no_remove_cycle>
    4b18:	4d 39 ca             	cmp    %r9,%r10
    4b1b:	76 67                	jbe    4b84 <_remove_cycle>
    4b1d:	4d 89 c1             	mov    %r8,%r9
    4b20:	49 83 c1 01          	add    $0x1,%r9
    4b24:	4d 89 ca             	mov    %r9,%r10
    4b27:	49 c1 e1 02          	shl    $0x2,%r9
    4b2b:	4d 01 d1             	add    %r10,%r9
    4b2e:	4d 01 d1             	add    %r10,%r9
    4b31:	4c 8b 15 00 ee 74 00 	mov    0x74ee00(%rip),%r10        # 753938 <shmptr_gcnt>
    4b38:	4d 8b 12             	mov    (%r10),%r10
    4b3b:	4d 29 ca             	sub    %r9,%r10
    4b3e:	49 c1 e2 03          	shl    $0x3,%r10
    4b42:	4c 8b 0d e7 ed 74 00 	mov    0x74ede7(%rip),%r9        # 753930 <shmptr_cmp>
    4b49:	4d 01 d1             	add    %r10,%r9
    4b4c:	49 8b 19             	mov    (%r9),%rbx
    4b4f:	4d 89 c1             	mov    %r8,%r9
    4b52:	49 83 c1 01          	add    $0x1,%r9
    4b56:	4d 89 ca             	mov    %r9,%r10
    4b59:	49 c1 e1 02          	shl    $0x2,%r9
    4b5d:	4d 01 d1             	add    %r10,%r9
    4b60:	4d 01 d1             	add    %r10,%r9
    4b63:	4c 8b 10             	mov    (%rax),%r10
    4b66:	4d 29 ca             	sub    %r9,%r10
    4b69:	49 c1 e2 03          	shl    $0x3,%r10
    4b6d:	4c 8b 0d bc ed 74 00 	mov    0x74edbc(%rip),%r9        # 753930 <shmptr_cmp>
    4b74:	4d 01 d1             	add    %r10,%r9
    4b77:	49 3b 19             	cmp    (%r9),%rbx
    4b7a:	75 3b                	jne    4bb7 <_no_remove_cycle>
    4b7c:	49 ff c0             	inc    %r8
    4b7f:	e9 6e ff ff ff       	jmpq   4af2 <_remove_repeated_cycle>

0000000000004b84 <_remove_cycle>:
    4b84:	48 89 15 8d ed 74 00 	mov    %rdx,0x74ed8d(%rip)        # 753918 <tmpquadone>
    4b8b:	48 8b 10             	mov    (%rax),%rdx
    4b8e:	48 8b 05 a3 ed 74 00 	mov    0x74eda3(%rip),%rax        # 753938 <shmptr_gcnt>
    4b95:	48 89 10             	mov    %rdx,(%rax)
    4b98:	89 d0                	mov    %edx,%eax
    4b9a:	48 c1 ea 20          	shr    $0x20,%rdx
    4b9e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    4ba5:	49 f7 f0             	div    %r8
    4ba8:	89 05 7a 90 5f 00    	mov    %eax,0x5f907a(%rip)        # 5fdc28 <edgeCnt>
    4bae:	48 8b 15 63 ed 74 00 	mov    0x74ed63(%rip),%rdx        # 753918 <tmpquadone>
    4bb5:	eb 1c                	jmp    4bd3 <_skipstoredata>

0000000000004bb7 <_no_remove_cycle>:
    4bb7:	48 8b 1d 7a ed 74 00 	mov    0x74ed7a(%rip),%rbx        # 753938 <shmptr_gcnt>
    4bbe:	48 8b 1b             	mov    (%rbx),%rbx
    4bc1:	48 89 18             	mov    %rbx,(%rax)
    4bc4:	eb 0d                	jmp    4bd3 <_skipstoredata>

0000000000004bc6 <_insert_entry>:
    4bc6:	48 8b 1d 6b ed 74 00 	mov    0x74ed6b(%rip),%rbx        # 753938 <shmptr_gcnt>
    4bcd:	48 8b 1b             	mov    (%rbx),%rbx
    4bd0:	48 89 18             	mov    %rbx,(%rax)

0000000000004bd3 <_skipstoredata>:
    4bd3:	41 5a                	pop    %r10
    4bd5:	41 59                	pop    %r9
    4bd7:	41 58                	pop    %r8
    4bd9:	5b                   	pop    %rbx
    4bda:	58                   	pop    %rax
    4bdb:	48 89 ec             	mov    %rbp,%rsp
    4bde:	5d                   	pop    %rbp
    4bdf:	c2 08 00             	retq   $0x8

0000000000004be2 <_shmFull>:
    4be2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    4be9:	e8 c2 cc ff ff       	callq  18b0 <_exit@plt>

0000000000004bee <_cmpdictFull>:
    4bee:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    4bf5:	e8 b6 cc ff ff       	callq  18b0 <_exit@plt>

0000000000004bfa <_shmUninitialize>:
    4bfa:	48 89 ec             	mov    %rbp,%rsp
    4bfd:	5d                   	pop    %rbp
    4bfe:	48 31 c0             	xor    %rax,%rax
    4c01:	c2 08 00             	retq   $0x8
    4c04:	0f 1f 40 00          	nopl   0x0(%rax)
    4c08:	9f                   	lahf   
    4c09:	0f 90 c0             	seto   %al
    4c0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004c10 <__afl_setup_first>:
    4c10:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    4c17:	ff 
    4c18:	48 89 04 24          	mov    %rax,(%rsp)
    4c1c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    4c21:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    4c26:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    4c2b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    4c30:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    4c35:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    4c3a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    4c3f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    4c45:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    4c4b:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    4c52:	00 00 
    4c54:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    4c5b:	00 00 
    4c5d:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    4c64:	00 00 
    4c66:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    4c6d:	00 00 
    4c6f:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    4c76:	00 00 
    4c78:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    4c7f:	00 00 
    4c81:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    4c88:	00 00 00 
    4c8b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    4c92:	00 00 00 
    4c95:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    4c9c:	01 00 00 
    4c9f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    4ca6:	01 00 00 
    4ca9:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    4cb0:	01 00 00 
    4cb3:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    4cba:	01 00 00 
    4cbd:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    4cc4:	01 00 00 
    4cc7:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    4cce:	01 00 00 
    4cd1:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    4cd8:	00 
    4cd9:	41 54                	push   %r12
    4cdb:	49 89 e4             	mov    %rsp,%r12
    4cde:	48 83 ec 10          	sub    $0x10,%rsp
    4ce2:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    4ce6:	48 c7 05 57 ec 74 00 	movq   $0x100000,0x74ec57(%rip)        # 753948 <shmSize>
    4ced:	00 00 10 00 
    4cf1:	48 c7 05 ec 8e 5f 00 	movq   $0x100000,0x5f8eec(%rip)        # 5fdbe8 <shmSize2>
    4cf8:	00 00 10 00 
    4cfc:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 504e <.SHM_ENV_GCNT>
    4d03:	e8 58 cb ff ff       	callq  1860 <getenv@plt>
    4d08:	48 85 c0             	test   %rax,%rax
    4d0b:	0f 84 6a 01 00 00    	je     4e7b <__afl_setup_abort>
    4d11:	48 89 c7             	mov    %rax,%rdi
    4d14:	e8 d7 ce ff ff       	callq  1bf0 <atoi@plt>
    4d19:	48 31 d2             	xor    %rdx,%rdx
    4d1c:	48 31 f6             	xor    %rsi,%rsi
    4d1f:	48 89 c7             	mov    %rax,%rdi
    4d22:	e8 a9 ce ff ff       	callq  1bd0 <shmat@plt>
    4d27:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    4d2b:	0f 84 4a 01 00 00    	je     4e7b <__afl_setup_abort>
    4d31:	48 89 05 00 ec 74 00 	mov    %rax,0x74ec00(%rip)        # 753938 <shmptr_gcnt>
    4d38:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 5035 <.SHM_ENV_CMP>
    4d3f:	e8 1c cb ff ff       	callq  1860 <getenv@plt>
    4d44:	48 85 c0             	test   %rax,%rax
    4d47:	0f 84 2e 01 00 00    	je     4e7b <__afl_setup_abort>
    4d4d:	48 89 c7             	mov    %rax,%rdi
    4d50:	e8 9b ce ff ff       	callq  1bf0 <atoi@plt>
    4d55:	48 31 d2             	xor    %rdx,%rdx
    4d58:	48 31 f6             	xor    %rsi,%rsi
    4d5b:	48 89 c7             	mov    %rax,%rdi
    4d5e:	e8 6d ce ff ff       	callq  1bd0 <shmat@plt>
    4d63:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    4d67:	0f 84 0e 01 00 00    	je     4e7b <__afl_setup_abort>
    4d6d:	48 89 05 bc eb 74 00 	mov    %rax,0x74ebbc(%rip)        # 753930 <shmptr_cmp>
    4d74:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 5041 <.SHM_ENV_EDGE>
    4d7b:	e8 e0 ca ff ff       	callq  1860 <getenv@plt>
    4d80:	48 85 c0             	test   %rax,%rax
    4d83:	0f 84 f2 00 00 00    	je     4e7b <__afl_setup_abort>
    4d89:	48 89 c7             	mov    %rax,%rdi
    4d8c:	e8 5f ce ff ff       	callq  1bf0 <atoi@plt>
    4d91:	48 31 d2             	xor    %rdx,%rdx
    4d94:	48 31 f6             	xor    %rsi,%rsi
    4d97:	48 89 c7             	mov    %rax,%rdi
    4d9a:	e8 31 ce ff ff       	callq  1bd0 <shmat@plt>
    4d9f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    4da3:	0f 84 d2 00 00 00    	je     4e7b <__afl_setup_abort>
    4da9:	48 89 05 58 eb 74 00 	mov    %rax,0x74eb58(%rip)        # 753908 <shmptr_edge>

0000000000004db0 <__afl_forkserver>:
    4db0:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    4db7:	48 8d 35 5e 8c 5f 00 	lea    0x5f8c5e(%rip),%rsi        # 5fda1c <__afl_temp>
    4dbe:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4dc5:	e8 06 cb ff ff       	callq  18d0 <write@plt>
    4dca:	48 83 f8 04          	cmp    $0x4,%rax
    4dce:	0f 85 78 01 00 00    	jne    4f4c <__afl_fork_resume>

0000000000004dd4 <__afl_fork_wait_loop>:
    4dd4:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    4ddb:	48 8d 35 3a 8c 5f 00 	lea    0x5f8c3a(%rip),%rsi        # 5fda1c <__afl_temp>
    4de2:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    4de9:	e8 52 cc ff ff       	callq  1a40 <read@plt>
    4dee:	48 83 f8 04          	cmp    $0x4,%rax
    4df2:	75 70                	jne    4e64 <__afl_die>
    4df4:	e8 57 ce ff ff       	callq  1c50 <fork@plt>
    4df9:	48 83 f8 00          	cmp    $0x0,%rax
    4dfd:	7c 65                	jl     4e64 <__afl_die>
    4dff:	0f 84 47 01 00 00    	je     4f4c <__afl_fork_resume>
    4e05:	89 05 0d 8c 5f 00    	mov    %eax,0x5f8c0d(%rip)        # 5fda18 <__afl_fork_pid>
    4e0b:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    4e12:	48 8d 35 ff 8b 5f 00 	lea    0x5f8bff(%rip),%rsi        # 5fda18 <__afl_fork_pid>
    4e19:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4e20:	e8 ab ca ff ff       	callq  18d0 <write@plt>
    4e25:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    4e2c:	48 8d 35 e9 8b 5f 00 	lea    0x5f8be9(%rip),%rsi        # 5fda1c <__afl_temp>
    4e33:	48 8b 3d de 8b 5f 00 	mov    0x5f8bde(%rip),%rdi        # 5fda18 <__afl_fork_pid>
    4e3a:	e8 41 cd ff ff       	callq  1b80 <waitpid@plt>
    4e3f:	48 83 f8 00          	cmp    $0x0,%rax
    4e43:	7e 1f                	jle    4e64 <__afl_die>
    4e45:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    4e4c:	48 8d 35 c9 8b 5f 00 	lea    0x5f8bc9(%rip),%rsi        # 5fda1c <__afl_temp>
    4e53:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4e5a:	e8 71 ca ff ff       	callq  18d0 <write@plt>
    4e5f:	e9 70 ff ff ff       	jmpq   4dd4 <__afl_fork_wait_loop>

0000000000004e64 <__afl_die>:
    4e64:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 5092 <.serverDied>
    4e6b:	48 31 c0             	xor    %rax,%rax
    4e6e:	e8 1d cb ff ff       	callq  1990 <printf@plt>
    4e73:	48 31 c0             	xor    %rax,%rax
    4e76:	e8 35 ca ff ff       	callq  18b0 <_exit@plt>

0000000000004e7b <__afl_setup_abort>:
    4e7b:	4c 89 e4             	mov    %r12,%rsp
    4e7e:	41 5c                	pop    %r12
    4e80:	48 8b 04 24          	mov    (%rsp),%rax
    4e84:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4e89:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4e8e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    4e93:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4e98:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    4e9d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    4ea2:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    4ea7:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    4ead:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    4eb3:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    4eba:	00 00 
    4ebc:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    4ec3:	00 00 
    4ec5:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    4ecc:	00 00 
    4ece:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    4ed5:	00 00 
    4ed7:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    4ede:	00 00 
    4ee0:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    4ee7:	00 00 
    4ee9:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    4ef0:	00 00 00 
    4ef3:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    4efa:	00 00 00 
    4efd:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    4f04:	01 00 00 
    4f07:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    4f0e:	01 00 00 
    4f11:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    4f18:	01 00 00 
    4f1b:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    4f22:	01 00 00 
    4f25:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    4f2c:	01 00 00 
    4f2f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    4f36:	01 00 00 
    4f39:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    4f40:	00 
    4f41:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    4f48:	00 
    4f49:	b0 7f                	mov    $0x7f,%al
    4f4b:	c3                   	retq   

0000000000004f4c <__afl_fork_resume>:
    4f4c:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    4f53:	e8 b8 ca ff ff       	callq  1a10 <close@plt>
    4f58:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    4f5f:	e8 ac ca ff ff       	callq  1a10 <close@plt>
    4f64:	4c 89 e4             	mov    %r12,%rsp
    4f67:	41 5c                	pop    %r12
    4f69:	48 8b 04 24          	mov    (%rsp),%rax
    4f6d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4f72:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4f77:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    4f7c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    4f81:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    4f86:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    4f8b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    4f90:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    4f96:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    4f9c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    4fa3:	00 00 
    4fa5:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    4fac:	00 00 
    4fae:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    4fb5:	00 00 
    4fb7:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    4fbe:	00 00 
    4fc0:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    4fc7:	00 00 
    4fc9:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    4fd0:	00 00 
    4fd2:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    4fd9:	00 00 00 
    4fdc:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    4fe3:	00 00 00 
    4fe6:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    4fed:	01 00 00 
    4ff0:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    4ff7:	01 00 00 
    4ffa:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    5001:	01 00 00 
    5004:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    500b:	01 00 00 
    500e:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    5015:	01 00 00 
    5018:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    501f:	01 00 00 
    5022:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    5029:	00 
    502a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    5031:	00 
    5032:	b0 00                	mov    $0x0,%al
    5034:	c3                   	retq   

0000000000005035 <.SHM_ENV_CMP>:
    5035:	53                   	push   %rbx
    5036:	48                   	rex.W
    5037:	4d 5f                	rex.WRB pop %r15
    5039:	45                   	rex.RB
    503a:	4e 56                	rex.WRX push %rsi
    503c:	5f                   	pop    %rdi
    503d:	43                   	rex.XB
    503e:	4d 50                	rex.WRB push %r8
	...

0000000000005041 <.SHM_ENV_EDGE>:
    5041:	53                   	push   %rbx
    5042:	48                   	rex.W
    5043:	4d 5f                	rex.WRB pop %r15
    5045:	45                   	rex.RB
    5046:	4e 56                	rex.WRX push %rsi
    5048:	5f                   	pop    %rdi
    5049:	45                   	rex.RB
    504a:	44                   	rex.R
    504b:	47                   	rex.RXB
    504c:	45                   	rex.RB
	...

000000000000504e <.SHM_ENV_GCNT>:
    504e:	53                   	push   %rbx
    504f:	48                   	rex.W
    5050:	4d 5f                	rex.WRB pop %r15
    5052:	45                   	rex.RB
    5053:	4e 56                	rex.WRX push %rsi
    5055:	5f                   	pop    %rdi
    5056:	47                   	rex.RXB
    5057:	43                   	rex.XB
    5058:	4e 54                	rex.WRX push %rsp
	...

000000000000505b <.serverSetupError>:
    505b:	20 53 65             	and    %dl,0x65(%rbx)
    505e:	72 76                	jb     50d6 <_storeEdge+0x1e>
    5060:	65 72 20             	gs jb  5083 <.serverSetupError+0x28>
    5063:	53                   	push   %rbx
    5064:	65 74 75             	gs je  50dc <_storeEdge+0x24>
    5067:	70 20                	jo     5089 <.serverSetupError+0x2e>
    5069:	45 72 72             	rex.RB jb 50de <_storeEdge+0x26>
    506c:	6f                   	outsl  %ds:(%rsi),(%dx)
    506d:	72 2c                	jb     509b <.serverDied+0x9>
    506f:	20 63 6f             	and    %ah,0x6f(%rbx)
    5072:	6e                   	outsb  %ds:(%rsi),(%dx)
    5073:	74 69                	je     50de <_storeEdge+0x26>
    5075:	6e                   	outsb  %ds:(%rsi),(%dx)
    5076:	75 65                	jne    50dd <_storeEdge+0x25>
    5078:	20 72 75             	and    %dh,0x75(%rdx)
    507b:	6e                   	outsb  %ds:(%rsi),(%dx)
    507c:	6e                   	outsb  %ds:(%rsi),(%dx)
    507d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    5084:	6f                   	outsl  %ds:(%rsi),(%dx)
    5085:	75 74                	jne    50fb <_storeEdge+0x43>
    5087:	20 73 65             	and    %dh,0x65(%rbx)
    508a:	72 76                	jb     5102 <_caledgehash>
    508c:	65 72 20             	gs jb  50af <.debug+0xa>
    508f:	0a 20                	or     (%rax),%ah
	...

0000000000005092 <.serverDied>:
    5092:	20 53 65             	and    %dl,0x65(%rbx)
    5095:	72 76                	jb     510d <_caledgehash+0xb>
    5097:	65 72 20             	gs jb  50ba <_storeEdge+0x2>
    509a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    50a1:	20 0a                	and    %cl,(%rdx)
    50a3:	20 00                	and    %al,(%rax)

00000000000050a5 <.debug>:
    50a5:	64 65 62             	fs gs (bad) 
    50a8:	75 67                	jne    5111 <_caledgehash+0xf>
    50aa:	20 6d 65             	and    %ch,0x65(%rbp)
    50ad:	73 73                	jae    5122 <_caledgehash+0x20>
    50af:	61                   	(bad)  
    50b0:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    50b4:	0a 20                	or     (%rax),%ah
    50b6:	00                   	.byte 0x0
    50b7:	90                   	nop

00000000000050b8 <_storeEdge>:
    50b8:	50                   	push   %rax
    50b9:	53                   	push   %rbx
    50ba:	51                   	push   %rcx
    50bb:	52                   	push   %rdx
    50bc:	48 83 3d 8c e8 74 00 	cmpq   $0x1,0x74e88c(%rip)        # 753950 <cmpPassed>
    50c3:	01 
    50c4:	75 3c                	jne    5102 <_caledgehash>
    50c6:	48 c7 05 7f e8 74 00 	movq   $0x0,0x74e87f(%rip)        # 753950 <cmpPassed>
    50cd:	00 00 00 00 
    50d1:	48 8b 05 50 8b 5f 00 	mov    0x5f8b50(%rip),%rax        # 5fdc28 <edgeCnt>
    50d8:	48 c1 e0 03          	shl    $0x3,%rax
    50dc:	48 3b 05 05 8b 5f 00 	cmp    0x5f8b05(%rip),%rax        # 5fdbe8 <shmSize2>
    50e3:	77 55                	ja     513a <_shm2Full>
    50e5:	48 8b 1d 24 e8 74 00 	mov    0x74e824(%rip),%rbx        # 753910 <edgehash>
    50ec:	48 8b 15 15 e8 74 00 	mov    0x74e815(%rip),%rdx        # 753908 <shmptr_edge>
    50f3:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    50f7:	48 89 19             	mov    %rbx,(%rcx)
    50fa:	48 83 05 26 8b 5f 00 	addq   $0x1,0x5f8b26(%rip)        # 5fdc28 <edgeCnt>
    5101:	01 

0000000000005102 <_caledgehash>:
    5102:	48 8b 15 07 e8 74 00 	mov    0x74e807(%rip),%rdx        # 753910 <edgehash>
    5109:	48 89 d0             	mov    %rdx,%rax
    510c:	48 c1 e0 05          	shl    $0x5,%rax
    5110:	48 01 c2             	add    %rax,%rdx
    5113:	48 8b 05 26 e8 74 00 	mov    0x74e826(%rip),%rax        # 753940 <edgeId>
    511a:	48 01 d0             	add    %rdx,%rax
    511d:	48 89 05 ec e7 74 00 	mov    %rax,0x74e7ec(%rip)        # 753910 <edgehash>
    5124:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    512b:	00 00 00 
    512e:	48 21 05 db e7 74 00 	and    %rax,0x74e7db(%rip)        # 753910 <edgehash>
    5135:	5a                   	pop    %rdx
    5136:	59                   	pop    %rcx
    5137:	5b                   	pop    %rbx
    5138:	58                   	pop    %rax
    5139:	c3                   	retq   

000000000000513a <_shm2Full>:
    513a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    5141:	5a                   	pop    %rdx
    5142:	59                   	pop    %rcx
    5143:	5b                   	pop    %rbx
    5144:	58                   	pop    %rax
    5145:	e8 66 c7 ff ff       	callq  18b0 <_exit@plt>
    514a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005150 <_storeDataFn>:
    5150:	55                   	push   %rbp
    5151:	48 89 e5             	mov    %rsp,%rbp
    5154:	50                   	push   %rax
    5155:	53                   	push   %rbx
    5156:	41 50                	push   %r8
    5158:	41 51                	push   %r9
    515a:	41 52                	push   %r10
    515c:	48 8b 05 d5 e7 74 00 	mov    0x74e7d5(%rip),%rax        # 753938 <shmptr_gcnt>
    5163:	48 8b 00             	mov    (%rax),%rax
    5166:	48 c1 e0 03          	shl    $0x3,%rax
    516a:	48 83 c0 30          	add    $0x30,%rax
    516e:	48 3b 05 d3 e7 74 00 	cmp    0x74e7d3(%rip),%rax        # 753948 <shmSize>
    5175:	0f 83 8f 01 00 00    	jae    530a <_shmFull>
    517b:	48 83 3d ad e7 74 00 	cmpq   $0x0,0x74e7ad(%rip)        # 753930 <shmptr_cmp>
    5182:	00 
    5183:	0f 84 99 01 00 00    	je     5322 <_shmUninitialize>
    5189:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    5190:	48 83 e8 30          	sub    $0x30,%rax
    5194:	48 c1 e8 03          	shr    $0x3,%rax

0000000000005198 <_storeloop>:
    5198:	49 89 c2             	mov    %rax,%r10
    519b:	49 c1 e2 03          	shl    $0x3,%r10
    519f:	4c 03 15 8a e7 74 00 	add    0x74e78a(%rip),%r10        # 753930 <shmptr_cmp>
    51a6:	49 89 d9             	mov    %rbx,%r9
    51a9:	49 c1 e1 03          	shl    $0x3,%r9
    51ad:	4c 8d 05 3c 8a 5f 00 	lea    0x5f8a3c(%rip),%r8        # 5fdbf0 <funcinptr>
    51b4:	4d 01 c1             	add    %r8,%r9
    51b7:	4d 8b 01             	mov    (%r9),%r8
    51ba:	4d 89 02             	mov    %r8,(%r10)
    51bd:	48 83 fb 00          	cmp    $0x0,%rbx
    51c1:	75 07                	jne    51ca <_no_get_cmpid>
    51c3:	4c 89 05 5e e7 74 00 	mov    %r8,0x74e75e(%rip)        # 753928 <cmpid>

00000000000051ca <_no_get_cmpid>:
    51ca:	48 ff c0             	inc    %rax
    51cd:	48 ff c3             	inc    %rbx
    51d0:	48 83 fb 06          	cmp    $0x6,%rbx
    51d4:	75 c2                	jne    5198 <_storeloop>
    51d6:	48 8b 1d 5b e7 74 00 	mov    0x74e75b(%rip),%rbx        # 753938 <shmptr_gcnt>
    51dd:	48 89 03             	mov    %rax,(%rbx)
    51e0:	48 8b 05 41 e7 74 00 	mov    0x74e741(%rip),%rax        # 753928 <cmpid>
    51e7:	48 c1 e0 04          	shl    $0x4,%rax
    51eb:	48 89 c3             	mov    %rax,%rbx
    51ee:	48 83 c3 08          	add    $0x8,%rbx
    51f2:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    51f9:	0f 83 17 01 00 00    	jae    5316 <_cmpdictFull>
    51ff:	48 8d 1d 3a 8a 5f 00 	lea    0x5f8a3a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    5206:	48 01 d8             	add    %rbx,%rax
    5209:	48 83 38 00          	cmpq   $0x0,(%rax)
    520d:	0f 84 db 00 00 00    	je     52ee <_insert_entry>
    5213:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000521a <_remove_repeated_cycle>:
    521a:	4d 89 c1             	mov    %r8,%r9
    521d:	4d 89 ca             	mov    %r9,%r10
    5220:	49 c1 e1 02          	shl    $0x2,%r9
    5224:	4d 01 d1             	add    %r10,%r9
    5227:	4d 01 d1             	add    %r10,%r9
    522a:	4c 8b 15 07 e7 74 00 	mov    0x74e707(%rip),%r10        # 753938 <shmptr_gcnt>
    5231:	4d 8b 12             	mov    (%r10),%r10
    5234:	4c 2b 10             	sub    (%rax),%r10
    5237:	4c 3b 10             	cmp    (%rax),%r10
    523a:	0f 87 9f 00 00 00    	ja     52df <_no_remove_cycle>
    5240:	4d 39 ca             	cmp    %r9,%r10
    5243:	76 67                	jbe    52ac <_remove_cycle>
    5245:	4d 89 c1             	mov    %r8,%r9
    5248:	49 83 c1 01          	add    $0x1,%r9
    524c:	4d 89 ca             	mov    %r9,%r10
    524f:	49 c1 e1 02          	shl    $0x2,%r9
    5253:	4d 01 d1             	add    %r10,%r9
    5256:	4d 01 d1             	add    %r10,%r9
    5259:	4c 8b 15 d8 e6 74 00 	mov    0x74e6d8(%rip),%r10        # 753938 <shmptr_gcnt>
    5260:	4d 8b 12             	mov    (%r10),%r10
    5263:	4d 29 ca             	sub    %r9,%r10
    5266:	49 c1 e2 03          	shl    $0x3,%r10
    526a:	4c 8b 0d bf e6 74 00 	mov    0x74e6bf(%rip),%r9        # 753930 <shmptr_cmp>
    5271:	4d 01 d1             	add    %r10,%r9
    5274:	49 8b 19             	mov    (%r9),%rbx
    5277:	4d 89 c1             	mov    %r8,%r9
    527a:	49 83 c1 01          	add    $0x1,%r9
    527e:	4d 89 ca             	mov    %r9,%r10
    5281:	49 c1 e1 02          	shl    $0x2,%r9
    5285:	4d 01 d1             	add    %r10,%r9
    5288:	4d 01 d1             	add    %r10,%r9
    528b:	4c 8b 10             	mov    (%rax),%r10
    528e:	4d 29 ca             	sub    %r9,%r10
    5291:	49 c1 e2 03          	shl    $0x3,%r10
    5295:	4c 8b 0d 94 e6 74 00 	mov    0x74e694(%rip),%r9        # 753930 <shmptr_cmp>
    529c:	4d 01 d1             	add    %r10,%r9
    529f:	49 3b 19             	cmp    (%r9),%rbx
    52a2:	75 3b                	jne    52df <_no_remove_cycle>
    52a4:	49 ff c0             	inc    %r8
    52a7:	e9 6e ff ff ff       	jmpq   521a <_remove_repeated_cycle>

00000000000052ac <_remove_cycle>:
    52ac:	48 89 15 65 e6 74 00 	mov    %rdx,0x74e665(%rip)        # 753918 <tmpquadone>
    52b3:	48 8b 10             	mov    (%rax),%rdx
    52b6:	48 8b 05 7b e6 74 00 	mov    0x74e67b(%rip),%rax        # 753938 <shmptr_gcnt>
    52bd:	48 89 10             	mov    %rdx,(%rax)
    52c0:	89 d0                	mov    %edx,%eax
    52c2:	48 c1 ea 20          	shr    $0x20,%rdx
    52c6:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    52cd:	49 f7 f0             	div    %r8
    52d0:	89 05 52 89 5f 00    	mov    %eax,0x5f8952(%rip)        # 5fdc28 <edgeCnt>
    52d6:	48 8b 15 3b e6 74 00 	mov    0x74e63b(%rip),%rdx        # 753918 <tmpquadone>
    52dd:	eb 1c                	jmp    52fb <_skipstoredata>

00000000000052df <_no_remove_cycle>:
    52df:	48 8b 1d 52 e6 74 00 	mov    0x74e652(%rip),%rbx        # 753938 <shmptr_gcnt>
    52e6:	48 8b 1b             	mov    (%rbx),%rbx
    52e9:	48 89 18             	mov    %rbx,(%rax)
    52ec:	eb 0d                	jmp    52fb <_skipstoredata>

00000000000052ee <_insert_entry>:
    52ee:	48 8b 1d 43 e6 74 00 	mov    0x74e643(%rip),%rbx        # 753938 <shmptr_gcnt>
    52f5:	48 8b 1b             	mov    (%rbx),%rbx
    52f8:	48 89 18             	mov    %rbx,(%rax)

00000000000052fb <_skipstoredata>:
    52fb:	41 5a                	pop    %r10
    52fd:	41 59                	pop    %r9
    52ff:	41 58                	pop    %r8
    5301:	5b                   	pop    %rbx
    5302:	58                   	pop    %rax
    5303:	48 89 ec             	mov    %rbp,%rsp
    5306:	5d                   	pop    %rbp
    5307:	c2 08 00             	retq   $0x8

000000000000530a <_shmFull>:
    530a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    5311:	e8 9a c5 ff ff       	callq  18b0 <_exit@plt>

0000000000005316 <_cmpdictFull>:
    5316:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    531d:	e8 8e c5 ff ff       	callq  18b0 <_exit@plt>

0000000000005322 <_shmUninitialize>:
    5322:	48 89 ec             	mov    %rbp,%rsp
    5325:	5d                   	pop    %rbp
    5326:	48 31 c0             	xor    %rax,%rax
    5329:	c2 08 00             	retq   $0x8
    532c:	0f 1f 40 00          	nopl   0x0(%rax)
    5330:	9f                   	lahf   
    5331:	0f 90 c0             	seto   %al
    5334:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005338 <__afl_setup_first>:
    5338:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    533f:	ff 
    5340:	48 89 04 24          	mov    %rax,(%rsp)
    5344:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5349:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    534e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    5353:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    5358:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    535d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    5362:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    5367:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    536d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    5373:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    537a:	00 00 
    537c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    5383:	00 00 
    5385:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    538c:	00 00 
    538e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    5395:	00 00 
    5397:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    539e:	00 00 
    53a0:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    53a7:	00 00 
    53a9:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    53b0:	00 00 00 
    53b3:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    53ba:	00 00 00 
    53bd:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    53c4:	01 00 00 
    53c7:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    53ce:	01 00 00 
    53d1:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    53d8:	01 00 00 
    53db:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    53e2:	01 00 00 
    53e5:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    53ec:	01 00 00 
    53ef:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    53f6:	01 00 00 
    53f9:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    5400:	00 
    5401:	41 54                	push   %r12
    5403:	49 89 e4             	mov    %rsp,%r12
    5406:	48 83 ec 10          	sub    $0x10,%rsp
    540a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    540e:	48 c7 05 2f e5 74 00 	movq   $0x100000,0x74e52f(%rip)        # 753948 <shmSize>
    5415:	00 00 10 00 
    5419:	48 c7 05 c4 87 5f 00 	movq   $0x100000,0x5f87c4(%rip)        # 5fdbe8 <shmSize2>
    5420:	00 00 10 00 
    5424:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 5776 <.SHM_ENV_GCNT>
    542b:	e8 30 c4 ff ff       	callq  1860 <getenv@plt>
    5430:	48 85 c0             	test   %rax,%rax
    5433:	0f 84 6a 01 00 00    	je     55a3 <__afl_setup_abort>
    5439:	48 89 c7             	mov    %rax,%rdi
    543c:	e8 af c7 ff ff       	callq  1bf0 <atoi@plt>
    5441:	48 31 d2             	xor    %rdx,%rdx
    5444:	48 31 f6             	xor    %rsi,%rsi
    5447:	48 89 c7             	mov    %rax,%rdi
    544a:	e8 81 c7 ff ff       	callq  1bd0 <shmat@plt>
    544f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    5453:	0f 84 4a 01 00 00    	je     55a3 <__afl_setup_abort>
    5459:	48 89 05 d8 e4 74 00 	mov    %rax,0x74e4d8(%rip)        # 753938 <shmptr_gcnt>
    5460:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 575d <.SHM_ENV_CMP>
    5467:	e8 f4 c3 ff ff       	callq  1860 <getenv@plt>
    546c:	48 85 c0             	test   %rax,%rax
    546f:	0f 84 2e 01 00 00    	je     55a3 <__afl_setup_abort>
    5475:	48 89 c7             	mov    %rax,%rdi
    5478:	e8 73 c7 ff ff       	callq  1bf0 <atoi@plt>
    547d:	48 31 d2             	xor    %rdx,%rdx
    5480:	48 31 f6             	xor    %rsi,%rsi
    5483:	48 89 c7             	mov    %rax,%rdi
    5486:	e8 45 c7 ff ff       	callq  1bd0 <shmat@plt>
    548b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    548f:	0f 84 0e 01 00 00    	je     55a3 <__afl_setup_abort>
    5495:	48 89 05 94 e4 74 00 	mov    %rax,0x74e494(%rip)        # 753930 <shmptr_cmp>
    549c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 5769 <.SHM_ENV_EDGE>
    54a3:	e8 b8 c3 ff ff       	callq  1860 <getenv@plt>
    54a8:	48 85 c0             	test   %rax,%rax
    54ab:	0f 84 f2 00 00 00    	je     55a3 <__afl_setup_abort>
    54b1:	48 89 c7             	mov    %rax,%rdi
    54b4:	e8 37 c7 ff ff       	callq  1bf0 <atoi@plt>
    54b9:	48 31 d2             	xor    %rdx,%rdx
    54bc:	48 31 f6             	xor    %rsi,%rsi
    54bf:	48 89 c7             	mov    %rax,%rdi
    54c2:	e8 09 c7 ff ff       	callq  1bd0 <shmat@plt>
    54c7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    54cb:	0f 84 d2 00 00 00    	je     55a3 <__afl_setup_abort>
    54d1:	48 89 05 30 e4 74 00 	mov    %rax,0x74e430(%rip)        # 753908 <shmptr_edge>

00000000000054d8 <__afl_forkserver>:
    54d8:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    54df:	48 8d 35 46 85 5f 00 	lea    0x5f8546(%rip),%rsi        # 5fda2c <__afl_temp>
    54e6:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    54ed:	e8 de c3 ff ff       	callq  18d0 <write@plt>
    54f2:	48 83 f8 04          	cmp    $0x4,%rax
    54f6:	0f 85 78 01 00 00    	jne    5674 <__afl_fork_resume>

00000000000054fc <__afl_fork_wait_loop>:
    54fc:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5503:	48 8d 35 22 85 5f 00 	lea    0x5f8522(%rip),%rsi        # 5fda2c <__afl_temp>
    550a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    5511:	e8 2a c5 ff ff       	callq  1a40 <read@plt>
    5516:	48 83 f8 04          	cmp    $0x4,%rax
    551a:	75 70                	jne    558c <__afl_die>
    551c:	e8 2f c7 ff ff       	callq  1c50 <fork@plt>
    5521:	48 83 f8 00          	cmp    $0x0,%rax
    5525:	7c 65                	jl     558c <__afl_die>
    5527:	0f 84 47 01 00 00    	je     5674 <__afl_fork_resume>
    552d:	89 05 f5 84 5f 00    	mov    %eax,0x5f84f5(%rip)        # 5fda28 <__afl_fork_pid>
    5533:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    553a:	48 8d 35 e7 84 5f 00 	lea    0x5f84e7(%rip),%rsi        # 5fda28 <__afl_fork_pid>
    5541:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5548:	e8 83 c3 ff ff       	callq  18d0 <write@plt>
    554d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5554:	48 8d 35 d1 84 5f 00 	lea    0x5f84d1(%rip),%rsi        # 5fda2c <__afl_temp>
    555b:	48 8b 3d c6 84 5f 00 	mov    0x5f84c6(%rip),%rdi        # 5fda28 <__afl_fork_pid>
    5562:	e8 19 c6 ff ff       	callq  1b80 <waitpid@plt>
    5567:	48 83 f8 00          	cmp    $0x0,%rax
    556b:	7e 1f                	jle    558c <__afl_die>
    556d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5574:	48 8d 35 b1 84 5f 00 	lea    0x5f84b1(%rip),%rsi        # 5fda2c <__afl_temp>
    557b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5582:	e8 49 c3 ff ff       	callq  18d0 <write@plt>
    5587:	e9 70 ff ff ff       	jmpq   54fc <__afl_fork_wait_loop>

000000000000558c <__afl_die>:
    558c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 57ba <.serverDied>
    5593:	48 31 c0             	xor    %rax,%rax
    5596:	e8 f5 c3 ff ff       	callq  1990 <printf@plt>
    559b:	48 31 c0             	xor    %rax,%rax
    559e:	e8 0d c3 ff ff       	callq  18b0 <_exit@plt>

00000000000055a3 <__afl_setup_abort>:
    55a3:	4c 89 e4             	mov    %r12,%rsp
    55a6:	41 5c                	pop    %r12
    55a8:	48 8b 04 24          	mov    (%rsp),%rax
    55ac:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    55b1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    55b6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    55bb:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    55c0:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    55c5:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    55ca:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    55cf:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    55d5:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    55db:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    55e2:	00 00 
    55e4:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    55eb:	00 00 
    55ed:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    55f4:	00 00 
    55f6:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    55fd:	00 00 
    55ff:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    5606:	00 00 
    5608:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    560f:	00 00 
    5611:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    5618:	00 00 00 
    561b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    5622:	00 00 00 
    5625:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    562c:	01 00 00 
    562f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    5636:	01 00 00 
    5639:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    5640:	01 00 00 
    5643:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    564a:	01 00 00 
    564d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    5654:	01 00 00 
    5657:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    565e:	01 00 00 
    5661:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    5668:	00 
    5669:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    5670:	00 
    5671:	b0 7f                	mov    $0x7f,%al
    5673:	c3                   	retq   

0000000000005674 <__afl_fork_resume>:
    5674:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    567b:	e8 90 c3 ff ff       	callq  1a10 <close@plt>
    5680:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5687:	e8 84 c3 ff ff       	callq  1a10 <close@plt>
    568c:	4c 89 e4             	mov    %r12,%rsp
    568f:	41 5c                	pop    %r12
    5691:	48 8b 04 24          	mov    (%rsp),%rax
    5695:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    569a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    569f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    56a4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    56a9:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    56ae:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    56b3:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    56b8:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    56be:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    56c4:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    56cb:	00 00 
    56cd:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    56d4:	00 00 
    56d6:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    56dd:	00 00 
    56df:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    56e6:	00 00 
    56e8:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    56ef:	00 00 
    56f1:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    56f8:	00 00 
    56fa:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    5701:	00 00 00 
    5704:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    570b:	00 00 00 
    570e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    5715:	01 00 00 
    5718:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    571f:	01 00 00 
    5722:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    5729:	01 00 00 
    572c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    5733:	01 00 00 
    5736:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    573d:	01 00 00 
    5740:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    5747:	01 00 00 
    574a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    5751:	00 
    5752:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    5759:	00 
    575a:	b0 00                	mov    $0x0,%al
    575c:	c3                   	retq   

000000000000575d <.SHM_ENV_CMP>:
    575d:	53                   	push   %rbx
    575e:	48                   	rex.W
    575f:	4d 5f                	rex.WRB pop %r15
    5761:	45                   	rex.RB
    5762:	4e 56                	rex.WRX push %rsi
    5764:	5f                   	pop    %rdi
    5765:	43                   	rex.XB
    5766:	4d 50                	rex.WRB push %r8
	...

0000000000005769 <.SHM_ENV_EDGE>:
    5769:	53                   	push   %rbx
    576a:	48                   	rex.W
    576b:	4d 5f                	rex.WRB pop %r15
    576d:	45                   	rex.RB
    576e:	4e 56                	rex.WRX push %rsi
    5770:	5f                   	pop    %rdi
    5771:	45                   	rex.RB
    5772:	44                   	rex.R
    5773:	47                   	rex.RXB
    5774:	45                   	rex.RB
	...

0000000000005776 <.SHM_ENV_GCNT>:
    5776:	53                   	push   %rbx
    5777:	48                   	rex.W
    5778:	4d 5f                	rex.WRB pop %r15
    577a:	45                   	rex.RB
    577b:	4e 56                	rex.WRX push %rsi
    577d:	5f                   	pop    %rdi
    577e:	47                   	rex.RXB
    577f:	43                   	rex.XB
    5780:	4e 54                	rex.WRX push %rsp
	...

0000000000005783 <.serverSetupError>:
    5783:	20 53 65             	and    %dl,0x65(%rbx)
    5786:	72 76                	jb     57fe <_storeEdge+0x1e>
    5788:	65 72 20             	gs jb  57ab <.serverSetupError+0x28>
    578b:	53                   	push   %rbx
    578c:	65 74 75             	gs je  5804 <_storeEdge+0x24>
    578f:	70 20                	jo     57b1 <.serverSetupError+0x2e>
    5791:	45 72 72             	rex.RB jb 5806 <_storeEdge+0x26>
    5794:	6f                   	outsl  %ds:(%rsi),(%dx)
    5795:	72 2c                	jb     57c3 <.serverDied+0x9>
    5797:	20 63 6f             	and    %ah,0x6f(%rbx)
    579a:	6e                   	outsb  %ds:(%rsi),(%dx)
    579b:	74 69                	je     5806 <_storeEdge+0x26>
    579d:	6e                   	outsb  %ds:(%rsi),(%dx)
    579e:	75 65                	jne    5805 <_storeEdge+0x25>
    57a0:	20 72 75             	and    %dh,0x75(%rdx)
    57a3:	6e                   	outsb  %ds:(%rsi),(%dx)
    57a4:	6e                   	outsb  %ds:(%rsi),(%dx)
    57a5:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    57ac:	6f                   	outsl  %ds:(%rsi),(%dx)
    57ad:	75 74                	jne    5823 <_storeEdge+0x43>
    57af:	20 73 65             	and    %dh,0x65(%rbx)
    57b2:	72 76                	jb     582a <_caledgehash>
    57b4:	65 72 20             	gs jb  57d7 <.debug+0xa>
    57b7:	0a 20                	or     (%rax),%ah
	...

00000000000057ba <.serverDied>:
    57ba:	20 53 65             	and    %dl,0x65(%rbx)
    57bd:	72 76                	jb     5835 <_caledgehash+0xb>
    57bf:	65 72 20             	gs jb  57e2 <_storeEdge+0x2>
    57c2:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    57c9:	20 0a                	and    %cl,(%rdx)
    57cb:	20 00                	and    %al,(%rax)

00000000000057cd <.debug>:
    57cd:	64 65 62             	fs gs (bad) 
    57d0:	75 67                	jne    5839 <_caledgehash+0xf>
    57d2:	20 6d 65             	and    %ch,0x65(%rbp)
    57d5:	73 73                	jae    584a <_caledgehash+0x20>
    57d7:	61                   	(bad)  
    57d8:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    57dc:	0a 20                	or     (%rax),%ah
    57de:	00                   	.byte 0x0
    57df:	90                   	nop

00000000000057e0 <_storeEdge>:
    57e0:	50                   	push   %rax
    57e1:	53                   	push   %rbx
    57e2:	51                   	push   %rcx
    57e3:	52                   	push   %rdx
    57e4:	48 83 3d 64 e1 74 00 	cmpq   $0x1,0x74e164(%rip)        # 753950 <cmpPassed>
    57eb:	01 
    57ec:	75 3c                	jne    582a <_caledgehash>
    57ee:	48 c7 05 57 e1 74 00 	movq   $0x0,0x74e157(%rip)        # 753950 <cmpPassed>
    57f5:	00 00 00 00 
    57f9:	48 8b 05 28 84 5f 00 	mov    0x5f8428(%rip),%rax        # 5fdc28 <edgeCnt>
    5800:	48 c1 e0 03          	shl    $0x3,%rax
    5804:	48 3b 05 dd 83 5f 00 	cmp    0x5f83dd(%rip),%rax        # 5fdbe8 <shmSize2>
    580b:	77 55                	ja     5862 <_shm2Full>
    580d:	48 8b 1d fc e0 74 00 	mov    0x74e0fc(%rip),%rbx        # 753910 <edgehash>
    5814:	48 8b 15 ed e0 74 00 	mov    0x74e0ed(%rip),%rdx        # 753908 <shmptr_edge>
    581b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    581f:	48 89 19             	mov    %rbx,(%rcx)
    5822:	48 83 05 fe 83 5f 00 	addq   $0x1,0x5f83fe(%rip)        # 5fdc28 <edgeCnt>
    5829:	01 

000000000000582a <_caledgehash>:
    582a:	48 8b 15 df e0 74 00 	mov    0x74e0df(%rip),%rdx        # 753910 <edgehash>
    5831:	48 89 d0             	mov    %rdx,%rax
    5834:	48 c1 e0 05          	shl    $0x5,%rax
    5838:	48 01 c2             	add    %rax,%rdx
    583b:	48 8b 05 fe e0 74 00 	mov    0x74e0fe(%rip),%rax        # 753940 <edgeId>
    5842:	48 01 d0             	add    %rdx,%rax
    5845:	48 89 05 c4 e0 74 00 	mov    %rax,0x74e0c4(%rip)        # 753910 <edgehash>
    584c:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    5853:	00 00 00 
    5856:	48 21 05 b3 e0 74 00 	and    %rax,0x74e0b3(%rip)        # 753910 <edgehash>
    585d:	5a                   	pop    %rdx
    585e:	59                   	pop    %rcx
    585f:	5b                   	pop    %rbx
    5860:	58                   	pop    %rax
    5861:	c3                   	retq   

0000000000005862 <_shm2Full>:
    5862:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    5869:	5a                   	pop    %rdx
    586a:	59                   	pop    %rcx
    586b:	5b                   	pop    %rbx
    586c:	58                   	pop    %rax
    586d:	e8 3e c0 ff ff       	callq  18b0 <_exit@plt>
    5872:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005878 <_storeDataFn>:
    5878:	55                   	push   %rbp
    5879:	48 89 e5             	mov    %rsp,%rbp
    587c:	50                   	push   %rax
    587d:	53                   	push   %rbx
    587e:	41 50                	push   %r8
    5880:	41 51                	push   %r9
    5882:	41 52                	push   %r10
    5884:	48 8b 05 ad e0 74 00 	mov    0x74e0ad(%rip),%rax        # 753938 <shmptr_gcnt>
    588b:	48 8b 00             	mov    (%rax),%rax
    588e:	48 c1 e0 03          	shl    $0x3,%rax
    5892:	48 83 c0 30          	add    $0x30,%rax
    5896:	48 3b 05 ab e0 74 00 	cmp    0x74e0ab(%rip),%rax        # 753948 <shmSize>
    589d:	0f 83 8f 01 00 00    	jae    5a32 <_shmFull>
    58a3:	48 83 3d 85 e0 74 00 	cmpq   $0x0,0x74e085(%rip)        # 753930 <shmptr_cmp>
    58aa:	00 
    58ab:	0f 84 99 01 00 00    	je     5a4a <_shmUninitialize>
    58b1:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    58b8:	48 83 e8 30          	sub    $0x30,%rax
    58bc:	48 c1 e8 03          	shr    $0x3,%rax

00000000000058c0 <_storeloop>:
    58c0:	49 89 c2             	mov    %rax,%r10
    58c3:	49 c1 e2 03          	shl    $0x3,%r10
    58c7:	4c 03 15 62 e0 74 00 	add    0x74e062(%rip),%r10        # 753930 <shmptr_cmp>
    58ce:	49 89 d9             	mov    %rbx,%r9
    58d1:	49 c1 e1 03          	shl    $0x3,%r9
    58d5:	4c 8d 05 14 83 5f 00 	lea    0x5f8314(%rip),%r8        # 5fdbf0 <funcinptr>
    58dc:	4d 01 c1             	add    %r8,%r9
    58df:	4d 8b 01             	mov    (%r9),%r8
    58e2:	4d 89 02             	mov    %r8,(%r10)
    58e5:	48 83 fb 00          	cmp    $0x0,%rbx
    58e9:	75 07                	jne    58f2 <_no_get_cmpid>
    58eb:	4c 89 05 36 e0 74 00 	mov    %r8,0x74e036(%rip)        # 753928 <cmpid>

00000000000058f2 <_no_get_cmpid>:
    58f2:	48 ff c0             	inc    %rax
    58f5:	48 ff c3             	inc    %rbx
    58f8:	48 83 fb 06          	cmp    $0x6,%rbx
    58fc:	75 c2                	jne    58c0 <_storeloop>
    58fe:	48 8b 1d 33 e0 74 00 	mov    0x74e033(%rip),%rbx        # 753938 <shmptr_gcnt>
    5905:	48 89 03             	mov    %rax,(%rbx)
    5908:	48 8b 05 19 e0 74 00 	mov    0x74e019(%rip),%rax        # 753928 <cmpid>
    590f:	48 c1 e0 04          	shl    $0x4,%rax
    5913:	48 89 c3             	mov    %rax,%rbx
    5916:	48 83 c3 08          	add    $0x8,%rbx
    591a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    5921:	0f 83 17 01 00 00    	jae    5a3e <_cmpdictFull>
    5927:	48 8d 1d 12 83 5f 00 	lea    0x5f8312(%rip),%rbx        # 5fdc40 <cmpid_dict>
    592e:	48 01 d8             	add    %rbx,%rax
    5931:	48 83 38 00          	cmpq   $0x0,(%rax)
    5935:	0f 84 db 00 00 00    	je     5a16 <_insert_entry>
    593b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000005942 <_remove_repeated_cycle>:
    5942:	4d 89 c1             	mov    %r8,%r9
    5945:	4d 89 ca             	mov    %r9,%r10
    5948:	49 c1 e1 02          	shl    $0x2,%r9
    594c:	4d 01 d1             	add    %r10,%r9
    594f:	4d 01 d1             	add    %r10,%r9
    5952:	4c 8b 15 df df 74 00 	mov    0x74dfdf(%rip),%r10        # 753938 <shmptr_gcnt>
    5959:	4d 8b 12             	mov    (%r10),%r10
    595c:	4c 2b 10             	sub    (%rax),%r10
    595f:	4c 3b 10             	cmp    (%rax),%r10
    5962:	0f 87 9f 00 00 00    	ja     5a07 <_no_remove_cycle>
    5968:	4d 39 ca             	cmp    %r9,%r10
    596b:	76 67                	jbe    59d4 <_remove_cycle>
    596d:	4d 89 c1             	mov    %r8,%r9
    5970:	49 83 c1 01          	add    $0x1,%r9
    5974:	4d 89 ca             	mov    %r9,%r10
    5977:	49 c1 e1 02          	shl    $0x2,%r9
    597b:	4d 01 d1             	add    %r10,%r9
    597e:	4d 01 d1             	add    %r10,%r9
    5981:	4c 8b 15 b0 df 74 00 	mov    0x74dfb0(%rip),%r10        # 753938 <shmptr_gcnt>
    5988:	4d 8b 12             	mov    (%r10),%r10
    598b:	4d 29 ca             	sub    %r9,%r10
    598e:	49 c1 e2 03          	shl    $0x3,%r10
    5992:	4c 8b 0d 97 df 74 00 	mov    0x74df97(%rip),%r9        # 753930 <shmptr_cmp>
    5999:	4d 01 d1             	add    %r10,%r9
    599c:	49 8b 19             	mov    (%r9),%rbx
    599f:	4d 89 c1             	mov    %r8,%r9
    59a2:	49 83 c1 01          	add    $0x1,%r9
    59a6:	4d 89 ca             	mov    %r9,%r10
    59a9:	49 c1 e1 02          	shl    $0x2,%r9
    59ad:	4d 01 d1             	add    %r10,%r9
    59b0:	4d 01 d1             	add    %r10,%r9
    59b3:	4c 8b 10             	mov    (%rax),%r10
    59b6:	4d 29 ca             	sub    %r9,%r10
    59b9:	49 c1 e2 03          	shl    $0x3,%r10
    59bd:	4c 8b 0d 6c df 74 00 	mov    0x74df6c(%rip),%r9        # 753930 <shmptr_cmp>
    59c4:	4d 01 d1             	add    %r10,%r9
    59c7:	49 3b 19             	cmp    (%r9),%rbx
    59ca:	75 3b                	jne    5a07 <_no_remove_cycle>
    59cc:	49 ff c0             	inc    %r8
    59cf:	e9 6e ff ff ff       	jmpq   5942 <_remove_repeated_cycle>

00000000000059d4 <_remove_cycle>:
    59d4:	48 89 15 3d df 74 00 	mov    %rdx,0x74df3d(%rip)        # 753918 <tmpquadone>
    59db:	48 8b 10             	mov    (%rax),%rdx
    59de:	48 8b 05 53 df 74 00 	mov    0x74df53(%rip),%rax        # 753938 <shmptr_gcnt>
    59e5:	48 89 10             	mov    %rdx,(%rax)
    59e8:	89 d0                	mov    %edx,%eax
    59ea:	48 c1 ea 20          	shr    $0x20,%rdx
    59ee:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    59f5:	49 f7 f0             	div    %r8
    59f8:	89 05 2a 82 5f 00    	mov    %eax,0x5f822a(%rip)        # 5fdc28 <edgeCnt>
    59fe:	48 8b 15 13 df 74 00 	mov    0x74df13(%rip),%rdx        # 753918 <tmpquadone>
    5a05:	eb 1c                	jmp    5a23 <_skipstoredata>

0000000000005a07 <_no_remove_cycle>:
    5a07:	48 8b 1d 2a df 74 00 	mov    0x74df2a(%rip),%rbx        # 753938 <shmptr_gcnt>
    5a0e:	48 8b 1b             	mov    (%rbx),%rbx
    5a11:	48 89 18             	mov    %rbx,(%rax)
    5a14:	eb 0d                	jmp    5a23 <_skipstoredata>

0000000000005a16 <_insert_entry>:
    5a16:	48 8b 1d 1b df 74 00 	mov    0x74df1b(%rip),%rbx        # 753938 <shmptr_gcnt>
    5a1d:	48 8b 1b             	mov    (%rbx),%rbx
    5a20:	48 89 18             	mov    %rbx,(%rax)

0000000000005a23 <_skipstoredata>:
    5a23:	41 5a                	pop    %r10
    5a25:	41 59                	pop    %r9
    5a27:	41 58                	pop    %r8
    5a29:	5b                   	pop    %rbx
    5a2a:	58                   	pop    %rax
    5a2b:	48 89 ec             	mov    %rbp,%rsp
    5a2e:	5d                   	pop    %rbp
    5a2f:	c2 08 00             	retq   $0x8

0000000000005a32 <_shmFull>:
    5a32:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    5a39:	e8 72 be ff ff       	callq  18b0 <_exit@plt>

0000000000005a3e <_cmpdictFull>:
    5a3e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    5a45:	e8 66 be ff ff       	callq  18b0 <_exit@plt>

0000000000005a4a <_shmUninitialize>:
    5a4a:	48 89 ec             	mov    %rbp,%rsp
    5a4d:	5d                   	pop    %rbp
    5a4e:	48 31 c0             	xor    %rax,%rax
    5a51:	c2 08 00             	retq   $0x8
    5a54:	0f 1f 40 00          	nopl   0x0(%rax)
    5a58:	9f                   	lahf   
    5a59:	0f 90 c0             	seto   %al
    5a5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005a60 <__afl_setup_first>:
    5a60:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    5a67:	ff 
    5a68:	48 89 04 24          	mov    %rax,(%rsp)
    5a6c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5a71:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    5a76:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    5a7b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    5a80:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    5a85:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    5a8a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    5a8f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    5a95:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    5a9b:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    5aa2:	00 00 
    5aa4:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    5aab:	00 00 
    5aad:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    5ab4:	00 00 
    5ab6:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    5abd:	00 00 
    5abf:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    5ac6:	00 00 
    5ac8:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    5acf:	00 00 
    5ad1:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    5ad8:	00 00 00 
    5adb:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    5ae2:	00 00 00 
    5ae5:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    5aec:	01 00 00 
    5aef:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    5af6:	01 00 00 
    5af9:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    5b00:	01 00 00 
    5b03:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    5b0a:	01 00 00 
    5b0d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    5b14:	01 00 00 
    5b17:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    5b1e:	01 00 00 
    5b21:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    5b28:	00 
    5b29:	41 54                	push   %r12
    5b2b:	49 89 e4             	mov    %rsp,%r12
    5b2e:	48 83 ec 10          	sub    $0x10,%rsp
    5b32:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    5b36:	48 c7 05 07 de 74 00 	movq   $0x100000,0x74de07(%rip)        # 753948 <shmSize>
    5b3d:	00 00 10 00 
    5b41:	48 c7 05 9c 80 5f 00 	movq   $0x100000,0x5f809c(%rip)        # 5fdbe8 <shmSize2>
    5b48:	00 00 10 00 
    5b4c:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 5e9e <.SHM_ENV_GCNT>
    5b53:	e8 08 bd ff ff       	callq  1860 <getenv@plt>
    5b58:	48 85 c0             	test   %rax,%rax
    5b5b:	0f 84 6a 01 00 00    	je     5ccb <__afl_setup_abort>
    5b61:	48 89 c7             	mov    %rax,%rdi
    5b64:	e8 87 c0 ff ff       	callq  1bf0 <atoi@plt>
    5b69:	48 31 d2             	xor    %rdx,%rdx
    5b6c:	48 31 f6             	xor    %rsi,%rsi
    5b6f:	48 89 c7             	mov    %rax,%rdi
    5b72:	e8 59 c0 ff ff       	callq  1bd0 <shmat@plt>
    5b77:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    5b7b:	0f 84 4a 01 00 00    	je     5ccb <__afl_setup_abort>
    5b81:	48 89 05 b0 dd 74 00 	mov    %rax,0x74ddb0(%rip)        # 753938 <shmptr_gcnt>
    5b88:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 5e85 <.SHM_ENV_CMP>
    5b8f:	e8 cc bc ff ff       	callq  1860 <getenv@plt>
    5b94:	48 85 c0             	test   %rax,%rax
    5b97:	0f 84 2e 01 00 00    	je     5ccb <__afl_setup_abort>
    5b9d:	48 89 c7             	mov    %rax,%rdi
    5ba0:	e8 4b c0 ff ff       	callq  1bf0 <atoi@plt>
    5ba5:	48 31 d2             	xor    %rdx,%rdx
    5ba8:	48 31 f6             	xor    %rsi,%rsi
    5bab:	48 89 c7             	mov    %rax,%rdi
    5bae:	e8 1d c0 ff ff       	callq  1bd0 <shmat@plt>
    5bb3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    5bb7:	0f 84 0e 01 00 00    	je     5ccb <__afl_setup_abort>
    5bbd:	48 89 05 6c dd 74 00 	mov    %rax,0x74dd6c(%rip)        # 753930 <shmptr_cmp>
    5bc4:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 5e91 <.SHM_ENV_EDGE>
    5bcb:	e8 90 bc ff ff       	callq  1860 <getenv@plt>
    5bd0:	48 85 c0             	test   %rax,%rax
    5bd3:	0f 84 f2 00 00 00    	je     5ccb <__afl_setup_abort>
    5bd9:	48 89 c7             	mov    %rax,%rdi
    5bdc:	e8 0f c0 ff ff       	callq  1bf0 <atoi@plt>
    5be1:	48 31 d2             	xor    %rdx,%rdx
    5be4:	48 31 f6             	xor    %rsi,%rsi
    5be7:	48 89 c7             	mov    %rax,%rdi
    5bea:	e8 e1 bf ff ff       	callq  1bd0 <shmat@plt>
    5bef:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    5bf3:	0f 84 d2 00 00 00    	je     5ccb <__afl_setup_abort>
    5bf9:	48 89 05 08 dd 74 00 	mov    %rax,0x74dd08(%rip)        # 753908 <shmptr_edge>

0000000000005c00 <__afl_forkserver>:
    5c00:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5c07:	48 8d 35 6e 7f 5f 00 	lea    0x5f7f6e(%rip),%rsi        # 5fdb7c <__afl_temp>
    5c0e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5c15:	e8 b6 bc ff ff       	callq  18d0 <write@plt>
    5c1a:	48 83 f8 04          	cmp    $0x4,%rax
    5c1e:	0f 85 78 01 00 00    	jne    5d9c <__afl_fork_resume>

0000000000005c24 <__afl_fork_wait_loop>:
    5c24:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5c2b:	48 8d 35 4a 7f 5f 00 	lea    0x5f7f4a(%rip),%rsi        # 5fdb7c <__afl_temp>
    5c32:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    5c39:	e8 02 be ff ff       	callq  1a40 <read@plt>
    5c3e:	48 83 f8 04          	cmp    $0x4,%rax
    5c42:	75 70                	jne    5cb4 <__afl_die>
    5c44:	e8 07 c0 ff ff       	callq  1c50 <fork@plt>
    5c49:	48 83 f8 00          	cmp    $0x0,%rax
    5c4d:	7c 65                	jl     5cb4 <__afl_die>
    5c4f:	0f 84 47 01 00 00    	je     5d9c <__afl_fork_resume>
    5c55:	89 05 1d 7f 5f 00    	mov    %eax,0x5f7f1d(%rip)        # 5fdb78 <__afl_fork_pid>
    5c5b:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5c62:	48 8d 35 0f 7f 5f 00 	lea    0x5f7f0f(%rip),%rsi        # 5fdb78 <__afl_fork_pid>
    5c69:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5c70:	e8 5b bc ff ff       	callq  18d0 <write@plt>
    5c75:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5c7c:	48 8d 35 f9 7e 5f 00 	lea    0x5f7ef9(%rip),%rsi        # 5fdb7c <__afl_temp>
    5c83:	48 8b 3d ee 7e 5f 00 	mov    0x5f7eee(%rip),%rdi        # 5fdb78 <__afl_fork_pid>
    5c8a:	e8 f1 be ff ff       	callq  1b80 <waitpid@plt>
    5c8f:	48 83 f8 00          	cmp    $0x0,%rax
    5c93:	7e 1f                	jle    5cb4 <__afl_die>
    5c95:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    5c9c:	48 8d 35 d9 7e 5f 00 	lea    0x5f7ed9(%rip),%rsi        # 5fdb7c <__afl_temp>
    5ca3:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5caa:	e8 21 bc ff ff       	callq  18d0 <write@plt>
    5caf:	e9 70 ff ff ff       	jmpq   5c24 <__afl_fork_wait_loop>

0000000000005cb4 <__afl_die>:
    5cb4:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 5ee2 <.serverDied>
    5cbb:	48 31 c0             	xor    %rax,%rax
    5cbe:	e8 cd bc ff ff       	callq  1990 <printf@plt>
    5cc3:	48 31 c0             	xor    %rax,%rax
    5cc6:	e8 e5 bb ff ff       	callq  18b0 <_exit@plt>

0000000000005ccb <__afl_setup_abort>:
    5ccb:	4c 89 e4             	mov    %r12,%rsp
    5cce:	41 5c                	pop    %r12
    5cd0:	48 8b 04 24          	mov    (%rsp),%rax
    5cd4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    5cd9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    5cde:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    5ce3:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    5ce8:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    5ced:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    5cf2:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    5cf7:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    5cfd:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    5d03:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    5d0a:	00 00 
    5d0c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    5d13:	00 00 
    5d15:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    5d1c:	00 00 
    5d1e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    5d25:	00 00 
    5d27:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    5d2e:	00 00 
    5d30:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    5d37:	00 00 
    5d39:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    5d40:	00 00 00 
    5d43:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    5d4a:	00 00 00 
    5d4d:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    5d54:	01 00 00 
    5d57:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    5d5e:	01 00 00 
    5d61:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    5d68:	01 00 00 
    5d6b:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    5d72:	01 00 00 
    5d75:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    5d7c:	01 00 00 
    5d7f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    5d86:	01 00 00 
    5d89:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    5d90:	00 
    5d91:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    5d98:	00 
    5d99:	b0 7f                	mov    $0x7f,%al
    5d9b:	c3                   	retq   

0000000000005d9c <__afl_fork_resume>:
    5d9c:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    5da3:	e8 68 bc ff ff       	callq  1a10 <close@plt>
    5da8:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    5daf:	e8 5c bc ff ff       	callq  1a10 <close@plt>
    5db4:	4c 89 e4             	mov    %r12,%rsp
    5db7:	41 5c                	pop    %r12
    5db9:	48 8b 04 24          	mov    (%rsp),%rax
    5dbd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    5dc2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    5dc7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    5dcc:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    5dd1:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    5dd6:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    5ddb:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    5de0:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    5de6:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    5dec:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    5df3:	00 00 
    5df5:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    5dfc:	00 00 
    5dfe:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    5e05:	00 00 
    5e07:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    5e0e:	00 00 
    5e10:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    5e17:	00 00 
    5e19:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    5e20:	00 00 
    5e22:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    5e29:	00 00 00 
    5e2c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    5e33:	00 00 00 
    5e36:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    5e3d:	01 00 00 
    5e40:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    5e47:	01 00 00 
    5e4a:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    5e51:	01 00 00 
    5e54:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    5e5b:	01 00 00 
    5e5e:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    5e65:	01 00 00 
    5e68:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    5e6f:	01 00 00 
    5e72:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    5e79:	00 
    5e7a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    5e81:	00 
    5e82:	b0 00                	mov    $0x0,%al
    5e84:	c3                   	retq   

0000000000005e85 <.SHM_ENV_CMP>:
    5e85:	53                   	push   %rbx
    5e86:	48                   	rex.W
    5e87:	4d 5f                	rex.WRB pop %r15
    5e89:	45                   	rex.RB
    5e8a:	4e 56                	rex.WRX push %rsi
    5e8c:	5f                   	pop    %rdi
    5e8d:	43                   	rex.XB
    5e8e:	4d 50                	rex.WRB push %r8
	...

0000000000005e91 <.SHM_ENV_EDGE>:
    5e91:	53                   	push   %rbx
    5e92:	48                   	rex.W
    5e93:	4d 5f                	rex.WRB pop %r15
    5e95:	45                   	rex.RB
    5e96:	4e 56                	rex.WRX push %rsi
    5e98:	5f                   	pop    %rdi
    5e99:	45                   	rex.RB
    5e9a:	44                   	rex.R
    5e9b:	47                   	rex.RXB
    5e9c:	45                   	rex.RB
	...

0000000000005e9e <.SHM_ENV_GCNT>:
    5e9e:	53                   	push   %rbx
    5e9f:	48                   	rex.W
    5ea0:	4d 5f                	rex.WRB pop %r15
    5ea2:	45                   	rex.RB
    5ea3:	4e 56                	rex.WRX push %rsi
    5ea5:	5f                   	pop    %rdi
    5ea6:	47                   	rex.RXB
    5ea7:	43                   	rex.XB
    5ea8:	4e 54                	rex.WRX push %rsp
	...

0000000000005eab <.serverSetupError>:
    5eab:	20 53 65             	and    %dl,0x65(%rbx)
    5eae:	72 76                	jb     5f26 <_storeEdge+0x1e>
    5eb0:	65 72 20             	gs jb  5ed3 <.serverSetupError+0x28>
    5eb3:	53                   	push   %rbx
    5eb4:	65 74 75             	gs je  5f2c <_storeEdge+0x24>
    5eb7:	70 20                	jo     5ed9 <.serverSetupError+0x2e>
    5eb9:	45 72 72             	rex.RB jb 5f2e <_storeEdge+0x26>
    5ebc:	6f                   	outsl  %ds:(%rsi),(%dx)
    5ebd:	72 2c                	jb     5eeb <.serverDied+0x9>
    5ebf:	20 63 6f             	and    %ah,0x6f(%rbx)
    5ec2:	6e                   	outsb  %ds:(%rsi),(%dx)
    5ec3:	74 69                	je     5f2e <_storeEdge+0x26>
    5ec5:	6e                   	outsb  %ds:(%rsi),(%dx)
    5ec6:	75 65                	jne    5f2d <_storeEdge+0x25>
    5ec8:	20 72 75             	and    %dh,0x75(%rdx)
    5ecb:	6e                   	outsb  %ds:(%rsi),(%dx)
    5ecc:	6e                   	outsb  %ds:(%rsi),(%dx)
    5ecd:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    5ed4:	6f                   	outsl  %ds:(%rsi),(%dx)
    5ed5:	75 74                	jne    5f4b <_storeEdge+0x43>
    5ed7:	20 73 65             	and    %dh,0x65(%rbx)
    5eda:	72 76                	jb     5f52 <_caledgehash>
    5edc:	65 72 20             	gs jb  5eff <.debug+0xa>
    5edf:	0a 20                	or     (%rax),%ah
	...

0000000000005ee2 <.serverDied>:
    5ee2:	20 53 65             	and    %dl,0x65(%rbx)
    5ee5:	72 76                	jb     5f5d <_caledgehash+0xb>
    5ee7:	65 72 20             	gs jb  5f0a <_storeEdge+0x2>
    5eea:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    5ef1:	20 0a                	and    %cl,(%rdx)
    5ef3:	20 00                	and    %al,(%rax)

0000000000005ef5 <.debug>:
    5ef5:	64 65 62             	fs gs (bad) 
    5ef8:	75 67                	jne    5f61 <_caledgehash+0xf>
    5efa:	20 6d 65             	and    %ch,0x65(%rbp)
    5efd:	73 73                	jae    5f72 <_caledgehash+0x20>
    5eff:	61                   	(bad)  
    5f00:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    5f04:	0a 20                	or     (%rax),%ah
    5f06:	00                   	.byte 0x0
    5f07:	90                   	nop

0000000000005f08 <_storeEdge>:
    5f08:	50                   	push   %rax
    5f09:	53                   	push   %rbx
    5f0a:	51                   	push   %rcx
    5f0b:	52                   	push   %rdx
    5f0c:	48 83 3d 3c da 74 00 	cmpq   $0x1,0x74da3c(%rip)        # 753950 <cmpPassed>
    5f13:	01 
    5f14:	75 3c                	jne    5f52 <_caledgehash>
    5f16:	48 c7 05 2f da 74 00 	movq   $0x0,0x74da2f(%rip)        # 753950 <cmpPassed>
    5f1d:	00 00 00 00 
    5f21:	48 8b 05 00 7d 5f 00 	mov    0x5f7d00(%rip),%rax        # 5fdc28 <edgeCnt>
    5f28:	48 c1 e0 03          	shl    $0x3,%rax
    5f2c:	48 3b 05 b5 7c 5f 00 	cmp    0x5f7cb5(%rip),%rax        # 5fdbe8 <shmSize2>
    5f33:	77 55                	ja     5f8a <_shm2Full>
    5f35:	48 8b 1d d4 d9 74 00 	mov    0x74d9d4(%rip),%rbx        # 753910 <edgehash>
    5f3c:	48 8b 15 c5 d9 74 00 	mov    0x74d9c5(%rip),%rdx        # 753908 <shmptr_edge>
    5f43:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    5f47:	48 89 19             	mov    %rbx,(%rcx)
    5f4a:	48 83 05 d6 7c 5f 00 	addq   $0x1,0x5f7cd6(%rip)        # 5fdc28 <edgeCnt>
    5f51:	01 

0000000000005f52 <_caledgehash>:
    5f52:	48 8b 15 b7 d9 74 00 	mov    0x74d9b7(%rip),%rdx        # 753910 <edgehash>
    5f59:	48 89 d0             	mov    %rdx,%rax
    5f5c:	48 c1 e0 05          	shl    $0x5,%rax
    5f60:	48 01 c2             	add    %rax,%rdx
    5f63:	48 8b 05 d6 d9 74 00 	mov    0x74d9d6(%rip),%rax        # 753940 <edgeId>
    5f6a:	48 01 d0             	add    %rdx,%rax
    5f6d:	48 89 05 9c d9 74 00 	mov    %rax,0x74d99c(%rip)        # 753910 <edgehash>
    5f74:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    5f7b:	00 00 00 
    5f7e:	48 21 05 8b d9 74 00 	and    %rax,0x74d98b(%rip)        # 753910 <edgehash>
    5f85:	5a                   	pop    %rdx
    5f86:	59                   	pop    %rcx
    5f87:	5b                   	pop    %rbx
    5f88:	58                   	pop    %rax
    5f89:	c3                   	retq   

0000000000005f8a <_shm2Full>:
    5f8a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    5f91:	5a                   	pop    %rdx
    5f92:	59                   	pop    %rcx
    5f93:	5b                   	pop    %rbx
    5f94:	58                   	pop    %rax
    5f95:	e8 16 b9 ff ff       	callq  18b0 <_exit@plt>
    5f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005fa0 <_storeDataFn>:
    5fa0:	55                   	push   %rbp
    5fa1:	48 89 e5             	mov    %rsp,%rbp
    5fa4:	50                   	push   %rax
    5fa5:	53                   	push   %rbx
    5fa6:	41 50                	push   %r8
    5fa8:	41 51                	push   %r9
    5faa:	41 52                	push   %r10
    5fac:	48 8b 05 85 d9 74 00 	mov    0x74d985(%rip),%rax        # 753938 <shmptr_gcnt>
    5fb3:	48 8b 00             	mov    (%rax),%rax
    5fb6:	48 c1 e0 03          	shl    $0x3,%rax
    5fba:	48 83 c0 30          	add    $0x30,%rax
    5fbe:	48 3b 05 83 d9 74 00 	cmp    0x74d983(%rip),%rax        # 753948 <shmSize>
    5fc5:	0f 83 8f 01 00 00    	jae    615a <_shmFull>
    5fcb:	48 83 3d 5d d9 74 00 	cmpq   $0x0,0x74d95d(%rip)        # 753930 <shmptr_cmp>
    5fd2:	00 
    5fd3:	0f 84 99 01 00 00    	je     6172 <_shmUninitialize>
    5fd9:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    5fe0:	48 83 e8 30          	sub    $0x30,%rax
    5fe4:	48 c1 e8 03          	shr    $0x3,%rax

0000000000005fe8 <_storeloop>:
    5fe8:	49 89 c2             	mov    %rax,%r10
    5feb:	49 c1 e2 03          	shl    $0x3,%r10
    5fef:	4c 03 15 3a d9 74 00 	add    0x74d93a(%rip),%r10        # 753930 <shmptr_cmp>
    5ff6:	49 89 d9             	mov    %rbx,%r9
    5ff9:	49 c1 e1 03          	shl    $0x3,%r9
    5ffd:	4c 8d 05 ec 7b 5f 00 	lea    0x5f7bec(%rip),%r8        # 5fdbf0 <funcinptr>
    6004:	4d 01 c1             	add    %r8,%r9
    6007:	4d 8b 01             	mov    (%r9),%r8
    600a:	4d 89 02             	mov    %r8,(%r10)
    600d:	48 83 fb 00          	cmp    $0x0,%rbx
    6011:	75 07                	jne    601a <_no_get_cmpid>
    6013:	4c 89 05 0e d9 74 00 	mov    %r8,0x74d90e(%rip)        # 753928 <cmpid>

000000000000601a <_no_get_cmpid>:
    601a:	48 ff c0             	inc    %rax
    601d:	48 ff c3             	inc    %rbx
    6020:	48 83 fb 06          	cmp    $0x6,%rbx
    6024:	75 c2                	jne    5fe8 <_storeloop>
    6026:	48 8b 1d 0b d9 74 00 	mov    0x74d90b(%rip),%rbx        # 753938 <shmptr_gcnt>
    602d:	48 89 03             	mov    %rax,(%rbx)
    6030:	48 8b 05 f1 d8 74 00 	mov    0x74d8f1(%rip),%rax        # 753928 <cmpid>
    6037:	48 c1 e0 04          	shl    $0x4,%rax
    603b:	48 89 c3             	mov    %rax,%rbx
    603e:	48 83 c3 08          	add    $0x8,%rbx
    6042:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    6049:	0f 83 17 01 00 00    	jae    6166 <_cmpdictFull>
    604f:	48 8d 1d ea 7b 5f 00 	lea    0x5f7bea(%rip),%rbx        # 5fdc40 <cmpid_dict>
    6056:	48 01 d8             	add    %rbx,%rax
    6059:	48 83 38 00          	cmpq   $0x0,(%rax)
    605d:	0f 84 db 00 00 00    	je     613e <_insert_entry>
    6063:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000606a <_remove_repeated_cycle>:
    606a:	4d 89 c1             	mov    %r8,%r9
    606d:	4d 89 ca             	mov    %r9,%r10
    6070:	49 c1 e1 02          	shl    $0x2,%r9
    6074:	4d 01 d1             	add    %r10,%r9
    6077:	4d 01 d1             	add    %r10,%r9
    607a:	4c 8b 15 b7 d8 74 00 	mov    0x74d8b7(%rip),%r10        # 753938 <shmptr_gcnt>
    6081:	4d 8b 12             	mov    (%r10),%r10
    6084:	4c 2b 10             	sub    (%rax),%r10
    6087:	4c 3b 10             	cmp    (%rax),%r10
    608a:	0f 87 9f 00 00 00    	ja     612f <_no_remove_cycle>
    6090:	4d 39 ca             	cmp    %r9,%r10
    6093:	76 67                	jbe    60fc <_remove_cycle>
    6095:	4d 89 c1             	mov    %r8,%r9
    6098:	49 83 c1 01          	add    $0x1,%r9
    609c:	4d 89 ca             	mov    %r9,%r10
    609f:	49 c1 e1 02          	shl    $0x2,%r9
    60a3:	4d 01 d1             	add    %r10,%r9
    60a6:	4d 01 d1             	add    %r10,%r9
    60a9:	4c 8b 15 88 d8 74 00 	mov    0x74d888(%rip),%r10        # 753938 <shmptr_gcnt>
    60b0:	4d 8b 12             	mov    (%r10),%r10
    60b3:	4d 29 ca             	sub    %r9,%r10
    60b6:	49 c1 e2 03          	shl    $0x3,%r10
    60ba:	4c 8b 0d 6f d8 74 00 	mov    0x74d86f(%rip),%r9        # 753930 <shmptr_cmp>
    60c1:	4d 01 d1             	add    %r10,%r9
    60c4:	49 8b 19             	mov    (%r9),%rbx
    60c7:	4d 89 c1             	mov    %r8,%r9
    60ca:	49 83 c1 01          	add    $0x1,%r9
    60ce:	4d 89 ca             	mov    %r9,%r10
    60d1:	49 c1 e1 02          	shl    $0x2,%r9
    60d5:	4d 01 d1             	add    %r10,%r9
    60d8:	4d 01 d1             	add    %r10,%r9
    60db:	4c 8b 10             	mov    (%rax),%r10
    60de:	4d 29 ca             	sub    %r9,%r10
    60e1:	49 c1 e2 03          	shl    $0x3,%r10
    60e5:	4c 8b 0d 44 d8 74 00 	mov    0x74d844(%rip),%r9        # 753930 <shmptr_cmp>
    60ec:	4d 01 d1             	add    %r10,%r9
    60ef:	49 3b 19             	cmp    (%r9),%rbx
    60f2:	75 3b                	jne    612f <_no_remove_cycle>
    60f4:	49 ff c0             	inc    %r8
    60f7:	e9 6e ff ff ff       	jmpq   606a <_remove_repeated_cycle>

00000000000060fc <_remove_cycle>:
    60fc:	48 89 15 15 d8 74 00 	mov    %rdx,0x74d815(%rip)        # 753918 <tmpquadone>
    6103:	48 8b 10             	mov    (%rax),%rdx
    6106:	48 8b 05 2b d8 74 00 	mov    0x74d82b(%rip),%rax        # 753938 <shmptr_gcnt>
    610d:	48 89 10             	mov    %rdx,(%rax)
    6110:	89 d0                	mov    %edx,%eax
    6112:	48 c1 ea 20          	shr    $0x20,%rdx
    6116:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    611d:	49 f7 f0             	div    %r8
    6120:	89 05 02 7b 5f 00    	mov    %eax,0x5f7b02(%rip)        # 5fdc28 <edgeCnt>
    6126:	48 8b 15 eb d7 74 00 	mov    0x74d7eb(%rip),%rdx        # 753918 <tmpquadone>
    612d:	eb 1c                	jmp    614b <_skipstoredata>

000000000000612f <_no_remove_cycle>:
    612f:	48 8b 1d 02 d8 74 00 	mov    0x74d802(%rip),%rbx        # 753938 <shmptr_gcnt>
    6136:	48 8b 1b             	mov    (%rbx),%rbx
    6139:	48 89 18             	mov    %rbx,(%rax)
    613c:	eb 0d                	jmp    614b <_skipstoredata>

000000000000613e <_insert_entry>:
    613e:	48 8b 1d f3 d7 74 00 	mov    0x74d7f3(%rip),%rbx        # 753938 <shmptr_gcnt>
    6145:	48 8b 1b             	mov    (%rbx),%rbx
    6148:	48 89 18             	mov    %rbx,(%rax)

000000000000614b <_skipstoredata>:
    614b:	41 5a                	pop    %r10
    614d:	41 59                	pop    %r9
    614f:	41 58                	pop    %r8
    6151:	5b                   	pop    %rbx
    6152:	58                   	pop    %rax
    6153:	48 89 ec             	mov    %rbp,%rsp
    6156:	5d                   	pop    %rbp
    6157:	c2 08 00             	retq   $0x8

000000000000615a <_shmFull>:
    615a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    6161:	e8 4a b7 ff ff       	callq  18b0 <_exit@plt>

0000000000006166 <_cmpdictFull>:
    6166:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    616d:	e8 3e b7 ff ff       	callq  18b0 <_exit@plt>

0000000000006172 <_shmUninitialize>:
    6172:	48 89 ec             	mov    %rbp,%rsp
    6175:	5d                   	pop    %rbp
    6176:	48 31 c0             	xor    %rax,%rax
    6179:	c2 08 00             	retq   $0x8
    617c:	0f 1f 40 00          	nopl   0x0(%rax)
    6180:	9f                   	lahf   
    6181:	0f 90 c0             	seto   %al
    6184:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006188 <__afl_setup_first>:
    6188:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    618f:	ff 
    6190:	48 89 04 24          	mov    %rax,(%rsp)
    6194:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    6199:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    619e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    61a3:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    61a8:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    61ad:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    61b2:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    61b7:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    61bd:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    61c3:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    61ca:	00 00 
    61cc:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    61d3:	00 00 
    61d5:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    61dc:	00 00 
    61de:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    61e5:	00 00 
    61e7:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    61ee:	00 00 
    61f0:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    61f7:	00 00 
    61f9:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    6200:	00 00 00 
    6203:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    620a:	00 00 00 
    620d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    6214:	01 00 00 
    6217:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    621e:	01 00 00 
    6221:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    6228:	01 00 00 
    622b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    6232:	01 00 00 
    6235:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    623c:	01 00 00 
    623f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    6246:	01 00 00 
    6249:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    6250:	00 
    6251:	41 54                	push   %r12
    6253:	49 89 e4             	mov    %rsp,%r12
    6256:	48 83 ec 10          	sub    $0x10,%rsp
    625a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    625e:	48 c7 05 df d6 74 00 	movq   $0x100000,0x74d6df(%rip)        # 753948 <shmSize>
    6265:	00 00 10 00 
    6269:	48 c7 05 74 79 5f 00 	movq   $0x100000,0x5f7974(%rip)        # 5fdbe8 <shmSize2>
    6270:	00 00 10 00 
    6274:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 65c6 <.SHM_ENV_GCNT>
    627b:	e8 e0 b5 ff ff       	callq  1860 <getenv@plt>
    6280:	48 85 c0             	test   %rax,%rax
    6283:	0f 84 6a 01 00 00    	je     63f3 <__afl_setup_abort>
    6289:	48 89 c7             	mov    %rax,%rdi
    628c:	e8 5f b9 ff ff       	callq  1bf0 <atoi@plt>
    6291:	48 31 d2             	xor    %rdx,%rdx
    6294:	48 31 f6             	xor    %rsi,%rsi
    6297:	48 89 c7             	mov    %rax,%rdi
    629a:	e8 31 b9 ff ff       	callq  1bd0 <shmat@plt>
    629f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    62a3:	0f 84 4a 01 00 00    	je     63f3 <__afl_setup_abort>
    62a9:	48 89 05 88 d6 74 00 	mov    %rax,0x74d688(%rip)        # 753938 <shmptr_gcnt>
    62b0:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 65ad <.SHM_ENV_CMP>
    62b7:	e8 a4 b5 ff ff       	callq  1860 <getenv@plt>
    62bc:	48 85 c0             	test   %rax,%rax
    62bf:	0f 84 2e 01 00 00    	je     63f3 <__afl_setup_abort>
    62c5:	48 89 c7             	mov    %rax,%rdi
    62c8:	e8 23 b9 ff ff       	callq  1bf0 <atoi@plt>
    62cd:	48 31 d2             	xor    %rdx,%rdx
    62d0:	48 31 f6             	xor    %rsi,%rsi
    62d3:	48 89 c7             	mov    %rax,%rdi
    62d6:	e8 f5 b8 ff ff       	callq  1bd0 <shmat@plt>
    62db:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    62df:	0f 84 0e 01 00 00    	je     63f3 <__afl_setup_abort>
    62e5:	48 89 05 44 d6 74 00 	mov    %rax,0x74d644(%rip)        # 753930 <shmptr_cmp>
    62ec:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 65b9 <.SHM_ENV_EDGE>
    62f3:	e8 68 b5 ff ff       	callq  1860 <getenv@plt>
    62f8:	48 85 c0             	test   %rax,%rax
    62fb:	0f 84 f2 00 00 00    	je     63f3 <__afl_setup_abort>
    6301:	48 89 c7             	mov    %rax,%rdi
    6304:	e8 e7 b8 ff ff       	callq  1bf0 <atoi@plt>
    6309:	48 31 d2             	xor    %rdx,%rdx
    630c:	48 31 f6             	xor    %rsi,%rsi
    630f:	48 89 c7             	mov    %rax,%rdi
    6312:	e8 b9 b8 ff ff       	callq  1bd0 <shmat@plt>
    6317:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    631b:	0f 84 d2 00 00 00    	je     63f3 <__afl_setup_abort>
    6321:	48 89 05 e0 d5 74 00 	mov    %rax,0x74d5e0(%rip)        # 753908 <shmptr_edge>

0000000000006328 <__afl_forkserver>:
    6328:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    632f:	48 8d 35 4e 78 5f 00 	lea    0x5f784e(%rip),%rsi        # 5fdb84 <__afl_temp>
    6336:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    633d:	e8 8e b5 ff ff       	callq  18d0 <write@plt>
    6342:	48 83 f8 04          	cmp    $0x4,%rax
    6346:	0f 85 78 01 00 00    	jne    64c4 <__afl_fork_resume>

000000000000634c <__afl_fork_wait_loop>:
    634c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    6353:	48 8d 35 2a 78 5f 00 	lea    0x5f782a(%rip),%rsi        # 5fdb84 <__afl_temp>
    635a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    6361:	e8 da b6 ff ff       	callq  1a40 <read@plt>
    6366:	48 83 f8 04          	cmp    $0x4,%rax
    636a:	75 70                	jne    63dc <__afl_die>
    636c:	e8 df b8 ff ff       	callq  1c50 <fork@plt>
    6371:	48 83 f8 00          	cmp    $0x0,%rax
    6375:	7c 65                	jl     63dc <__afl_die>
    6377:	0f 84 47 01 00 00    	je     64c4 <__afl_fork_resume>
    637d:	89 05 fd 77 5f 00    	mov    %eax,0x5f77fd(%rip)        # 5fdb80 <__afl_fork_pid>
    6383:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    638a:	48 8d 35 ef 77 5f 00 	lea    0x5f77ef(%rip),%rsi        # 5fdb80 <__afl_fork_pid>
    6391:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    6398:	e8 33 b5 ff ff       	callq  18d0 <write@plt>
    639d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    63a4:	48 8d 35 d9 77 5f 00 	lea    0x5f77d9(%rip),%rsi        # 5fdb84 <__afl_temp>
    63ab:	48 8b 3d ce 77 5f 00 	mov    0x5f77ce(%rip),%rdi        # 5fdb80 <__afl_fork_pid>
    63b2:	e8 c9 b7 ff ff       	callq  1b80 <waitpid@plt>
    63b7:	48 83 f8 00          	cmp    $0x0,%rax
    63bb:	7e 1f                	jle    63dc <__afl_die>
    63bd:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    63c4:	48 8d 35 b9 77 5f 00 	lea    0x5f77b9(%rip),%rsi        # 5fdb84 <__afl_temp>
    63cb:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    63d2:	e8 f9 b4 ff ff       	callq  18d0 <write@plt>
    63d7:	e9 70 ff ff ff       	jmpq   634c <__afl_fork_wait_loop>

00000000000063dc <__afl_die>:
    63dc:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 660a <.serverDied>
    63e3:	48 31 c0             	xor    %rax,%rax
    63e6:	e8 a5 b5 ff ff       	callq  1990 <printf@plt>
    63eb:	48 31 c0             	xor    %rax,%rax
    63ee:	e8 bd b4 ff ff       	callq  18b0 <_exit@plt>

00000000000063f3 <__afl_setup_abort>:
    63f3:	4c 89 e4             	mov    %r12,%rsp
    63f6:	41 5c                	pop    %r12
    63f8:	48 8b 04 24          	mov    (%rsp),%rax
    63fc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    6401:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    6406:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    640b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    6410:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    6415:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    641a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    641f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    6425:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    642b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    6432:	00 00 
    6434:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    643b:	00 00 
    643d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    6444:	00 00 
    6446:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    644d:	00 00 
    644f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    6456:	00 00 
    6458:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    645f:	00 00 
    6461:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    6468:	00 00 00 
    646b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    6472:	00 00 00 
    6475:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    647c:	01 00 00 
    647f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    6486:	01 00 00 
    6489:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    6490:	01 00 00 
    6493:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    649a:	01 00 00 
    649d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    64a4:	01 00 00 
    64a7:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    64ae:	01 00 00 
    64b1:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    64b8:	00 
    64b9:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    64c0:	00 
    64c1:	b0 7f                	mov    $0x7f,%al
    64c3:	c3                   	retq   

00000000000064c4 <__afl_fork_resume>:
    64c4:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    64cb:	e8 40 b5 ff ff       	callq  1a10 <close@plt>
    64d0:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    64d7:	e8 34 b5 ff ff       	callq  1a10 <close@plt>
    64dc:	4c 89 e4             	mov    %r12,%rsp
    64df:	41 5c                	pop    %r12
    64e1:	48 8b 04 24          	mov    (%rsp),%rax
    64e5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    64ea:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    64ef:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    64f4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    64f9:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    64fe:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    6503:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    6508:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    650e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    6514:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    651b:	00 00 
    651d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    6524:	00 00 
    6526:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    652d:	00 00 
    652f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    6536:	00 00 
    6538:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    653f:	00 00 
    6541:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    6548:	00 00 
    654a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    6551:	00 00 00 
    6554:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    655b:	00 00 00 
    655e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    6565:	01 00 00 
    6568:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    656f:	01 00 00 
    6572:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    6579:	01 00 00 
    657c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    6583:	01 00 00 
    6586:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    658d:	01 00 00 
    6590:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    6597:	01 00 00 
    659a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    65a1:	00 
    65a2:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    65a9:	00 
    65aa:	b0 00                	mov    $0x0,%al
    65ac:	c3                   	retq   

00000000000065ad <.SHM_ENV_CMP>:
    65ad:	53                   	push   %rbx
    65ae:	48                   	rex.W
    65af:	4d 5f                	rex.WRB pop %r15
    65b1:	45                   	rex.RB
    65b2:	4e 56                	rex.WRX push %rsi
    65b4:	5f                   	pop    %rdi
    65b5:	43                   	rex.XB
    65b6:	4d 50                	rex.WRB push %r8
	...

00000000000065b9 <.SHM_ENV_EDGE>:
    65b9:	53                   	push   %rbx
    65ba:	48                   	rex.W
    65bb:	4d 5f                	rex.WRB pop %r15
    65bd:	45                   	rex.RB
    65be:	4e 56                	rex.WRX push %rsi
    65c0:	5f                   	pop    %rdi
    65c1:	45                   	rex.RB
    65c2:	44                   	rex.R
    65c3:	47                   	rex.RXB
    65c4:	45                   	rex.RB
	...

00000000000065c6 <.SHM_ENV_GCNT>:
    65c6:	53                   	push   %rbx
    65c7:	48                   	rex.W
    65c8:	4d 5f                	rex.WRB pop %r15
    65ca:	45                   	rex.RB
    65cb:	4e 56                	rex.WRX push %rsi
    65cd:	5f                   	pop    %rdi
    65ce:	47                   	rex.RXB
    65cf:	43                   	rex.XB
    65d0:	4e 54                	rex.WRX push %rsp
	...

00000000000065d3 <.serverSetupError>:
    65d3:	20 53 65             	and    %dl,0x65(%rbx)
    65d6:	72 76                	jb     664e <_storeEdge+0x1e>
    65d8:	65 72 20             	gs jb  65fb <.serverSetupError+0x28>
    65db:	53                   	push   %rbx
    65dc:	65 74 75             	gs je  6654 <_storeEdge+0x24>
    65df:	70 20                	jo     6601 <.serverSetupError+0x2e>
    65e1:	45 72 72             	rex.RB jb 6656 <_storeEdge+0x26>
    65e4:	6f                   	outsl  %ds:(%rsi),(%dx)
    65e5:	72 2c                	jb     6613 <.serverDied+0x9>
    65e7:	20 63 6f             	and    %ah,0x6f(%rbx)
    65ea:	6e                   	outsb  %ds:(%rsi),(%dx)
    65eb:	74 69                	je     6656 <_storeEdge+0x26>
    65ed:	6e                   	outsb  %ds:(%rsi),(%dx)
    65ee:	75 65                	jne    6655 <_storeEdge+0x25>
    65f0:	20 72 75             	and    %dh,0x75(%rdx)
    65f3:	6e                   	outsb  %ds:(%rsi),(%dx)
    65f4:	6e                   	outsb  %ds:(%rsi),(%dx)
    65f5:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    65fc:	6f                   	outsl  %ds:(%rsi),(%dx)
    65fd:	75 74                	jne    6673 <_storeEdge+0x43>
    65ff:	20 73 65             	and    %dh,0x65(%rbx)
    6602:	72 76                	jb     667a <_caledgehash>
    6604:	65 72 20             	gs jb  6627 <.debug+0xa>
    6607:	0a 20                	or     (%rax),%ah
	...

000000000000660a <.serverDied>:
    660a:	20 53 65             	and    %dl,0x65(%rbx)
    660d:	72 76                	jb     6685 <_caledgehash+0xb>
    660f:	65 72 20             	gs jb  6632 <_storeEdge+0x2>
    6612:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    6619:	20 0a                	and    %cl,(%rdx)
    661b:	20 00                	and    %al,(%rax)

000000000000661d <.debug>:
    661d:	64 65 62             	fs gs (bad) 
    6620:	75 67                	jne    6689 <_caledgehash+0xf>
    6622:	20 6d 65             	and    %ch,0x65(%rbp)
    6625:	73 73                	jae    669a <_caledgehash+0x20>
    6627:	61                   	(bad)  
    6628:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    662c:	0a 20                	or     (%rax),%ah
    662e:	00                   	.byte 0x0
    662f:	90                   	nop

0000000000006630 <_storeEdge>:
    6630:	50                   	push   %rax
    6631:	53                   	push   %rbx
    6632:	51                   	push   %rcx
    6633:	52                   	push   %rdx
    6634:	48 83 3d 14 d3 74 00 	cmpq   $0x1,0x74d314(%rip)        # 753950 <cmpPassed>
    663b:	01 
    663c:	75 3c                	jne    667a <_caledgehash>
    663e:	48 c7 05 07 d3 74 00 	movq   $0x0,0x74d307(%rip)        # 753950 <cmpPassed>
    6645:	00 00 00 00 
    6649:	48 8b 05 d8 75 5f 00 	mov    0x5f75d8(%rip),%rax        # 5fdc28 <edgeCnt>
    6650:	48 c1 e0 03          	shl    $0x3,%rax
    6654:	48 3b 05 8d 75 5f 00 	cmp    0x5f758d(%rip),%rax        # 5fdbe8 <shmSize2>
    665b:	77 55                	ja     66b2 <_shm2Full>
    665d:	48 8b 1d ac d2 74 00 	mov    0x74d2ac(%rip),%rbx        # 753910 <edgehash>
    6664:	48 8b 15 9d d2 74 00 	mov    0x74d29d(%rip),%rdx        # 753908 <shmptr_edge>
    666b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    666f:	48 89 19             	mov    %rbx,(%rcx)
    6672:	48 83 05 ae 75 5f 00 	addq   $0x1,0x5f75ae(%rip)        # 5fdc28 <edgeCnt>
    6679:	01 

000000000000667a <_caledgehash>:
    667a:	48 8b 15 8f d2 74 00 	mov    0x74d28f(%rip),%rdx        # 753910 <edgehash>
    6681:	48 89 d0             	mov    %rdx,%rax
    6684:	48 c1 e0 05          	shl    $0x5,%rax
    6688:	48 01 c2             	add    %rax,%rdx
    668b:	48 8b 05 ae d2 74 00 	mov    0x74d2ae(%rip),%rax        # 753940 <edgeId>
    6692:	48 01 d0             	add    %rdx,%rax
    6695:	48 89 05 74 d2 74 00 	mov    %rax,0x74d274(%rip)        # 753910 <edgehash>
    669c:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    66a3:	00 00 00 
    66a6:	48 21 05 63 d2 74 00 	and    %rax,0x74d263(%rip)        # 753910 <edgehash>
    66ad:	5a                   	pop    %rdx
    66ae:	59                   	pop    %rcx
    66af:	5b                   	pop    %rbx
    66b0:	58                   	pop    %rax
    66b1:	c3                   	retq   

00000000000066b2 <_shm2Full>:
    66b2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    66b9:	5a                   	pop    %rdx
    66ba:	59                   	pop    %rcx
    66bb:	5b                   	pop    %rbx
    66bc:	58                   	pop    %rax
    66bd:	e8 ee b1 ff ff       	callq  18b0 <_exit@plt>
    66c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000066c8 <_storeDataFn>:
    66c8:	55                   	push   %rbp
    66c9:	48 89 e5             	mov    %rsp,%rbp
    66cc:	50                   	push   %rax
    66cd:	53                   	push   %rbx
    66ce:	41 50                	push   %r8
    66d0:	41 51                	push   %r9
    66d2:	41 52                	push   %r10
    66d4:	48 8b 05 5d d2 74 00 	mov    0x74d25d(%rip),%rax        # 753938 <shmptr_gcnt>
    66db:	48 8b 00             	mov    (%rax),%rax
    66de:	48 c1 e0 03          	shl    $0x3,%rax
    66e2:	48 83 c0 30          	add    $0x30,%rax
    66e6:	48 3b 05 5b d2 74 00 	cmp    0x74d25b(%rip),%rax        # 753948 <shmSize>
    66ed:	0f 83 8f 01 00 00    	jae    6882 <_shmFull>
    66f3:	48 83 3d 35 d2 74 00 	cmpq   $0x0,0x74d235(%rip)        # 753930 <shmptr_cmp>
    66fa:	00 
    66fb:	0f 84 99 01 00 00    	je     689a <_shmUninitialize>
    6701:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    6708:	48 83 e8 30          	sub    $0x30,%rax
    670c:	48 c1 e8 03          	shr    $0x3,%rax

0000000000006710 <_storeloop>:
    6710:	49 89 c2             	mov    %rax,%r10
    6713:	49 c1 e2 03          	shl    $0x3,%r10
    6717:	4c 03 15 12 d2 74 00 	add    0x74d212(%rip),%r10        # 753930 <shmptr_cmp>
    671e:	49 89 d9             	mov    %rbx,%r9
    6721:	49 c1 e1 03          	shl    $0x3,%r9
    6725:	4c 8d 05 c4 74 5f 00 	lea    0x5f74c4(%rip),%r8        # 5fdbf0 <funcinptr>
    672c:	4d 01 c1             	add    %r8,%r9
    672f:	4d 8b 01             	mov    (%r9),%r8
    6732:	4d 89 02             	mov    %r8,(%r10)
    6735:	48 83 fb 00          	cmp    $0x0,%rbx
    6739:	75 07                	jne    6742 <_no_get_cmpid>
    673b:	4c 89 05 e6 d1 74 00 	mov    %r8,0x74d1e6(%rip)        # 753928 <cmpid>

0000000000006742 <_no_get_cmpid>:
    6742:	48 ff c0             	inc    %rax
    6745:	48 ff c3             	inc    %rbx
    6748:	48 83 fb 06          	cmp    $0x6,%rbx
    674c:	75 c2                	jne    6710 <_storeloop>
    674e:	48 8b 1d e3 d1 74 00 	mov    0x74d1e3(%rip),%rbx        # 753938 <shmptr_gcnt>
    6755:	48 89 03             	mov    %rax,(%rbx)
    6758:	48 8b 05 c9 d1 74 00 	mov    0x74d1c9(%rip),%rax        # 753928 <cmpid>
    675f:	48 c1 e0 04          	shl    $0x4,%rax
    6763:	48 89 c3             	mov    %rax,%rbx
    6766:	48 83 c3 08          	add    $0x8,%rbx
    676a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    6771:	0f 83 17 01 00 00    	jae    688e <_cmpdictFull>
    6777:	48 8d 1d c2 74 5f 00 	lea    0x5f74c2(%rip),%rbx        # 5fdc40 <cmpid_dict>
    677e:	48 01 d8             	add    %rbx,%rax
    6781:	48 83 38 00          	cmpq   $0x0,(%rax)
    6785:	0f 84 db 00 00 00    	je     6866 <_insert_entry>
    678b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000006792 <_remove_repeated_cycle>:
    6792:	4d 89 c1             	mov    %r8,%r9
    6795:	4d 89 ca             	mov    %r9,%r10
    6798:	49 c1 e1 02          	shl    $0x2,%r9
    679c:	4d 01 d1             	add    %r10,%r9
    679f:	4d 01 d1             	add    %r10,%r9
    67a2:	4c 8b 15 8f d1 74 00 	mov    0x74d18f(%rip),%r10        # 753938 <shmptr_gcnt>
    67a9:	4d 8b 12             	mov    (%r10),%r10
    67ac:	4c 2b 10             	sub    (%rax),%r10
    67af:	4c 3b 10             	cmp    (%rax),%r10
    67b2:	0f 87 9f 00 00 00    	ja     6857 <_no_remove_cycle>
    67b8:	4d 39 ca             	cmp    %r9,%r10
    67bb:	76 67                	jbe    6824 <_remove_cycle>
    67bd:	4d 89 c1             	mov    %r8,%r9
    67c0:	49 83 c1 01          	add    $0x1,%r9
    67c4:	4d 89 ca             	mov    %r9,%r10
    67c7:	49 c1 e1 02          	shl    $0x2,%r9
    67cb:	4d 01 d1             	add    %r10,%r9
    67ce:	4d 01 d1             	add    %r10,%r9
    67d1:	4c 8b 15 60 d1 74 00 	mov    0x74d160(%rip),%r10        # 753938 <shmptr_gcnt>
    67d8:	4d 8b 12             	mov    (%r10),%r10
    67db:	4d 29 ca             	sub    %r9,%r10
    67de:	49 c1 e2 03          	shl    $0x3,%r10
    67e2:	4c 8b 0d 47 d1 74 00 	mov    0x74d147(%rip),%r9        # 753930 <shmptr_cmp>
    67e9:	4d 01 d1             	add    %r10,%r9
    67ec:	49 8b 19             	mov    (%r9),%rbx
    67ef:	4d 89 c1             	mov    %r8,%r9
    67f2:	49 83 c1 01          	add    $0x1,%r9
    67f6:	4d 89 ca             	mov    %r9,%r10
    67f9:	49 c1 e1 02          	shl    $0x2,%r9
    67fd:	4d 01 d1             	add    %r10,%r9
    6800:	4d 01 d1             	add    %r10,%r9
    6803:	4c 8b 10             	mov    (%rax),%r10
    6806:	4d 29 ca             	sub    %r9,%r10
    6809:	49 c1 e2 03          	shl    $0x3,%r10
    680d:	4c 8b 0d 1c d1 74 00 	mov    0x74d11c(%rip),%r9        # 753930 <shmptr_cmp>
    6814:	4d 01 d1             	add    %r10,%r9
    6817:	49 3b 19             	cmp    (%r9),%rbx
    681a:	75 3b                	jne    6857 <_no_remove_cycle>
    681c:	49 ff c0             	inc    %r8
    681f:	e9 6e ff ff ff       	jmpq   6792 <_remove_repeated_cycle>

0000000000006824 <_remove_cycle>:
    6824:	48 89 15 ed d0 74 00 	mov    %rdx,0x74d0ed(%rip)        # 753918 <tmpquadone>
    682b:	48 8b 10             	mov    (%rax),%rdx
    682e:	48 8b 05 03 d1 74 00 	mov    0x74d103(%rip),%rax        # 753938 <shmptr_gcnt>
    6835:	48 89 10             	mov    %rdx,(%rax)
    6838:	89 d0                	mov    %edx,%eax
    683a:	48 c1 ea 20          	shr    $0x20,%rdx
    683e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    6845:	49 f7 f0             	div    %r8
    6848:	89 05 da 73 5f 00    	mov    %eax,0x5f73da(%rip)        # 5fdc28 <edgeCnt>
    684e:	48 8b 15 c3 d0 74 00 	mov    0x74d0c3(%rip),%rdx        # 753918 <tmpquadone>
    6855:	eb 1c                	jmp    6873 <_skipstoredata>

0000000000006857 <_no_remove_cycle>:
    6857:	48 8b 1d da d0 74 00 	mov    0x74d0da(%rip),%rbx        # 753938 <shmptr_gcnt>
    685e:	48 8b 1b             	mov    (%rbx),%rbx
    6861:	48 89 18             	mov    %rbx,(%rax)
    6864:	eb 0d                	jmp    6873 <_skipstoredata>

0000000000006866 <_insert_entry>:
    6866:	48 8b 1d cb d0 74 00 	mov    0x74d0cb(%rip),%rbx        # 753938 <shmptr_gcnt>
    686d:	48 8b 1b             	mov    (%rbx),%rbx
    6870:	48 89 18             	mov    %rbx,(%rax)

0000000000006873 <_skipstoredata>:
    6873:	41 5a                	pop    %r10
    6875:	41 59                	pop    %r9
    6877:	41 58                	pop    %r8
    6879:	5b                   	pop    %rbx
    687a:	58                   	pop    %rax
    687b:	48 89 ec             	mov    %rbp,%rsp
    687e:	5d                   	pop    %rbp
    687f:	c2 08 00             	retq   $0x8

0000000000006882 <_shmFull>:
    6882:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    6889:	e8 22 b0 ff ff       	callq  18b0 <_exit@plt>

000000000000688e <_cmpdictFull>:
    688e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    6895:	e8 16 b0 ff ff       	callq  18b0 <_exit@plt>

000000000000689a <_shmUninitialize>:
    689a:	48 89 ec             	mov    %rbp,%rsp
    689d:	5d                   	pop    %rbp
    689e:	48 31 c0             	xor    %rax,%rax
    68a1:	c2 08 00             	retq   $0x8
    68a4:	0f 1f 40 00          	nopl   0x0(%rax)
    68a8:	9f                   	lahf   
    68a9:	0f 90 c0             	seto   %al
    68ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000068b0 <__afl_setup_first>:
    68b0:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    68b7:	ff 
    68b8:	48 89 04 24          	mov    %rax,(%rsp)
    68bc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    68c1:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    68c6:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    68cb:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    68d0:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    68d5:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    68da:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    68df:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    68e5:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    68eb:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    68f2:	00 00 
    68f4:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    68fb:	00 00 
    68fd:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    6904:	00 00 
    6906:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    690d:	00 00 
    690f:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    6916:	00 00 
    6918:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    691f:	00 00 
    6921:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    6928:	00 00 00 
    692b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    6932:	00 00 00 
    6935:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    693c:	01 00 00 
    693f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    6946:	01 00 00 
    6949:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    6950:	01 00 00 
    6953:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    695a:	01 00 00 
    695d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    6964:	01 00 00 
    6967:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    696e:	01 00 00 
    6971:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    6978:	00 
    6979:	41 54                	push   %r12
    697b:	49 89 e4             	mov    %rsp,%r12
    697e:	48 83 ec 10          	sub    $0x10,%rsp
    6982:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    6986:	48 c7 05 b7 cf 74 00 	movq   $0x100000,0x74cfb7(%rip)        # 753948 <shmSize>
    698d:	00 00 10 00 
    6991:	48 c7 05 4c 72 5f 00 	movq   $0x100000,0x5f724c(%rip)        # 5fdbe8 <shmSize2>
    6998:	00 00 10 00 
    699c:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 6cee <.SHM_ENV_GCNT>
    69a3:	e8 b8 ae ff ff       	callq  1860 <getenv@plt>
    69a8:	48 85 c0             	test   %rax,%rax
    69ab:	0f 84 6a 01 00 00    	je     6b1b <__afl_setup_abort>
    69b1:	48 89 c7             	mov    %rax,%rdi
    69b4:	e8 37 b2 ff ff       	callq  1bf0 <atoi@plt>
    69b9:	48 31 d2             	xor    %rdx,%rdx
    69bc:	48 31 f6             	xor    %rsi,%rsi
    69bf:	48 89 c7             	mov    %rax,%rdi
    69c2:	e8 09 b2 ff ff       	callq  1bd0 <shmat@plt>
    69c7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    69cb:	0f 84 4a 01 00 00    	je     6b1b <__afl_setup_abort>
    69d1:	48 89 05 60 cf 74 00 	mov    %rax,0x74cf60(%rip)        # 753938 <shmptr_gcnt>
    69d8:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 6cd5 <.SHM_ENV_CMP>
    69df:	e8 7c ae ff ff       	callq  1860 <getenv@plt>
    69e4:	48 85 c0             	test   %rax,%rax
    69e7:	0f 84 2e 01 00 00    	je     6b1b <__afl_setup_abort>
    69ed:	48 89 c7             	mov    %rax,%rdi
    69f0:	e8 fb b1 ff ff       	callq  1bf0 <atoi@plt>
    69f5:	48 31 d2             	xor    %rdx,%rdx
    69f8:	48 31 f6             	xor    %rsi,%rsi
    69fb:	48 89 c7             	mov    %rax,%rdi
    69fe:	e8 cd b1 ff ff       	callq  1bd0 <shmat@plt>
    6a03:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    6a07:	0f 84 0e 01 00 00    	je     6b1b <__afl_setup_abort>
    6a0d:	48 89 05 1c cf 74 00 	mov    %rax,0x74cf1c(%rip)        # 753930 <shmptr_cmp>
    6a14:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 6ce1 <.SHM_ENV_EDGE>
    6a1b:	e8 40 ae ff ff       	callq  1860 <getenv@plt>
    6a20:	48 85 c0             	test   %rax,%rax
    6a23:	0f 84 f2 00 00 00    	je     6b1b <__afl_setup_abort>
    6a29:	48 89 c7             	mov    %rax,%rdi
    6a2c:	e8 bf b1 ff ff       	callq  1bf0 <atoi@plt>
    6a31:	48 31 d2             	xor    %rdx,%rdx
    6a34:	48 31 f6             	xor    %rsi,%rsi
    6a37:	48 89 c7             	mov    %rax,%rdi
    6a3a:	e8 91 b1 ff ff       	callq  1bd0 <shmat@plt>
    6a3f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    6a43:	0f 84 d2 00 00 00    	je     6b1b <__afl_setup_abort>
    6a49:	48 89 05 b8 ce 74 00 	mov    %rax,0x74ceb8(%rip)        # 753908 <shmptr_edge>

0000000000006a50 <__afl_forkserver>:
    6a50:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    6a57:	48 8d 35 2e 71 5f 00 	lea    0x5f712e(%rip),%rsi        # 5fdb8c <__afl_temp>
    6a5e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    6a65:	e8 66 ae ff ff       	callq  18d0 <write@plt>
    6a6a:	48 83 f8 04          	cmp    $0x4,%rax
    6a6e:	0f 85 78 01 00 00    	jne    6bec <__afl_fork_resume>

0000000000006a74 <__afl_fork_wait_loop>:
    6a74:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    6a7b:	48 8d 35 0a 71 5f 00 	lea    0x5f710a(%rip),%rsi        # 5fdb8c <__afl_temp>
    6a82:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    6a89:	e8 b2 af ff ff       	callq  1a40 <read@plt>
    6a8e:	48 83 f8 04          	cmp    $0x4,%rax
    6a92:	75 70                	jne    6b04 <__afl_die>
    6a94:	e8 b7 b1 ff ff       	callq  1c50 <fork@plt>
    6a99:	48 83 f8 00          	cmp    $0x0,%rax
    6a9d:	7c 65                	jl     6b04 <__afl_die>
    6a9f:	0f 84 47 01 00 00    	je     6bec <__afl_fork_resume>
    6aa5:	89 05 dd 70 5f 00    	mov    %eax,0x5f70dd(%rip)        # 5fdb88 <__afl_fork_pid>
    6aab:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    6ab2:	48 8d 35 cf 70 5f 00 	lea    0x5f70cf(%rip),%rsi        # 5fdb88 <__afl_fork_pid>
    6ab9:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    6ac0:	e8 0b ae ff ff       	callq  18d0 <write@plt>
    6ac5:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    6acc:	48 8d 35 b9 70 5f 00 	lea    0x5f70b9(%rip),%rsi        # 5fdb8c <__afl_temp>
    6ad3:	48 8b 3d ae 70 5f 00 	mov    0x5f70ae(%rip),%rdi        # 5fdb88 <__afl_fork_pid>
    6ada:	e8 a1 b0 ff ff       	callq  1b80 <waitpid@plt>
    6adf:	48 83 f8 00          	cmp    $0x0,%rax
    6ae3:	7e 1f                	jle    6b04 <__afl_die>
    6ae5:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    6aec:	48 8d 35 99 70 5f 00 	lea    0x5f7099(%rip),%rsi        # 5fdb8c <__afl_temp>
    6af3:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    6afa:	e8 d1 ad ff ff       	callq  18d0 <write@plt>
    6aff:	e9 70 ff ff ff       	jmpq   6a74 <__afl_fork_wait_loop>

0000000000006b04 <__afl_die>:
    6b04:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 6d32 <.serverDied>
    6b0b:	48 31 c0             	xor    %rax,%rax
    6b0e:	e8 7d ae ff ff       	callq  1990 <printf@plt>
    6b13:	48 31 c0             	xor    %rax,%rax
    6b16:	e8 95 ad ff ff       	callq  18b0 <_exit@plt>

0000000000006b1b <__afl_setup_abort>:
    6b1b:	4c 89 e4             	mov    %r12,%rsp
    6b1e:	41 5c                	pop    %r12
    6b20:	48 8b 04 24          	mov    (%rsp),%rax
    6b24:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    6b29:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    6b2e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    6b33:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    6b38:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    6b3d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    6b42:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    6b47:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    6b4d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    6b53:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    6b5a:	00 00 
    6b5c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    6b63:	00 00 
    6b65:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    6b6c:	00 00 
    6b6e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    6b75:	00 00 
    6b77:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    6b7e:	00 00 
    6b80:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    6b87:	00 00 
    6b89:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    6b90:	00 00 00 
    6b93:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    6b9a:	00 00 00 
    6b9d:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    6ba4:	01 00 00 
    6ba7:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    6bae:	01 00 00 
    6bb1:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    6bb8:	01 00 00 
    6bbb:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    6bc2:	01 00 00 
    6bc5:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    6bcc:	01 00 00 
    6bcf:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    6bd6:	01 00 00 
    6bd9:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    6be0:	00 
    6be1:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    6be8:	00 
    6be9:	b0 7f                	mov    $0x7f,%al
    6beb:	c3                   	retq   

0000000000006bec <__afl_fork_resume>:
    6bec:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    6bf3:	e8 18 ae ff ff       	callq  1a10 <close@plt>
    6bf8:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    6bff:	e8 0c ae ff ff       	callq  1a10 <close@plt>
    6c04:	4c 89 e4             	mov    %r12,%rsp
    6c07:	41 5c                	pop    %r12
    6c09:	48 8b 04 24          	mov    (%rsp),%rax
    6c0d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    6c12:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    6c17:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    6c1c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    6c21:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    6c26:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    6c2b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    6c30:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    6c36:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    6c3c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    6c43:	00 00 
    6c45:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    6c4c:	00 00 
    6c4e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    6c55:	00 00 
    6c57:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    6c5e:	00 00 
    6c60:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    6c67:	00 00 
    6c69:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    6c70:	00 00 
    6c72:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    6c79:	00 00 00 
    6c7c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    6c83:	00 00 00 
    6c86:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    6c8d:	01 00 00 
    6c90:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    6c97:	01 00 00 
    6c9a:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    6ca1:	01 00 00 
    6ca4:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    6cab:	01 00 00 
    6cae:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    6cb5:	01 00 00 
    6cb8:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    6cbf:	01 00 00 
    6cc2:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    6cc9:	00 
    6cca:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    6cd1:	00 
    6cd2:	b0 00                	mov    $0x0,%al
    6cd4:	c3                   	retq   

0000000000006cd5 <.SHM_ENV_CMP>:
    6cd5:	53                   	push   %rbx
    6cd6:	48                   	rex.W
    6cd7:	4d 5f                	rex.WRB pop %r15
    6cd9:	45                   	rex.RB
    6cda:	4e 56                	rex.WRX push %rsi
    6cdc:	5f                   	pop    %rdi
    6cdd:	43                   	rex.XB
    6cde:	4d 50                	rex.WRB push %r8
	...

0000000000006ce1 <.SHM_ENV_EDGE>:
    6ce1:	53                   	push   %rbx
    6ce2:	48                   	rex.W
    6ce3:	4d 5f                	rex.WRB pop %r15
    6ce5:	45                   	rex.RB
    6ce6:	4e 56                	rex.WRX push %rsi
    6ce8:	5f                   	pop    %rdi
    6ce9:	45                   	rex.RB
    6cea:	44                   	rex.R
    6ceb:	47                   	rex.RXB
    6cec:	45                   	rex.RB
	...

0000000000006cee <.SHM_ENV_GCNT>:
    6cee:	53                   	push   %rbx
    6cef:	48                   	rex.W
    6cf0:	4d 5f                	rex.WRB pop %r15
    6cf2:	45                   	rex.RB
    6cf3:	4e 56                	rex.WRX push %rsi
    6cf5:	5f                   	pop    %rdi
    6cf6:	47                   	rex.RXB
    6cf7:	43                   	rex.XB
    6cf8:	4e 54                	rex.WRX push %rsp
	...

0000000000006cfb <.serverSetupError>:
    6cfb:	20 53 65             	and    %dl,0x65(%rbx)
    6cfe:	72 76                	jb     6d76 <_storeEdge+0x1e>
    6d00:	65 72 20             	gs jb  6d23 <.serverSetupError+0x28>
    6d03:	53                   	push   %rbx
    6d04:	65 74 75             	gs je  6d7c <_storeEdge+0x24>
    6d07:	70 20                	jo     6d29 <.serverSetupError+0x2e>
    6d09:	45 72 72             	rex.RB jb 6d7e <_storeEdge+0x26>
    6d0c:	6f                   	outsl  %ds:(%rsi),(%dx)
    6d0d:	72 2c                	jb     6d3b <.serverDied+0x9>
    6d0f:	20 63 6f             	and    %ah,0x6f(%rbx)
    6d12:	6e                   	outsb  %ds:(%rsi),(%dx)
    6d13:	74 69                	je     6d7e <_storeEdge+0x26>
    6d15:	6e                   	outsb  %ds:(%rsi),(%dx)
    6d16:	75 65                	jne    6d7d <_storeEdge+0x25>
    6d18:	20 72 75             	and    %dh,0x75(%rdx)
    6d1b:	6e                   	outsb  %ds:(%rsi),(%dx)
    6d1c:	6e                   	outsb  %ds:(%rsi),(%dx)
    6d1d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    6d24:	6f                   	outsl  %ds:(%rsi),(%dx)
    6d25:	75 74                	jne    6d9b <_storeEdge+0x43>
    6d27:	20 73 65             	and    %dh,0x65(%rbx)
    6d2a:	72 76                	jb     6da2 <_caledgehash>
    6d2c:	65 72 20             	gs jb  6d4f <.debug+0xa>
    6d2f:	0a 20                	or     (%rax),%ah
	...

0000000000006d32 <.serverDied>:
    6d32:	20 53 65             	and    %dl,0x65(%rbx)
    6d35:	72 76                	jb     6dad <_caledgehash+0xb>
    6d37:	65 72 20             	gs jb  6d5a <_storeEdge+0x2>
    6d3a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    6d41:	20 0a                	and    %cl,(%rdx)
    6d43:	20 00                	and    %al,(%rax)

0000000000006d45 <.debug>:
    6d45:	64 65 62             	fs gs (bad) 
    6d48:	75 67                	jne    6db1 <_caledgehash+0xf>
    6d4a:	20 6d 65             	and    %ch,0x65(%rbp)
    6d4d:	73 73                	jae    6dc2 <_caledgehash+0x20>
    6d4f:	61                   	(bad)  
    6d50:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    6d54:	0a 20                	or     (%rax),%ah
    6d56:	00                   	.byte 0x0
    6d57:	90                   	nop

0000000000006d58 <_storeEdge>:
    6d58:	50                   	push   %rax
    6d59:	53                   	push   %rbx
    6d5a:	51                   	push   %rcx
    6d5b:	52                   	push   %rdx
    6d5c:	48 83 3d ec cb 74 00 	cmpq   $0x1,0x74cbec(%rip)        # 753950 <cmpPassed>
    6d63:	01 
    6d64:	75 3c                	jne    6da2 <_caledgehash>
    6d66:	48 c7 05 df cb 74 00 	movq   $0x0,0x74cbdf(%rip)        # 753950 <cmpPassed>
    6d6d:	00 00 00 00 
    6d71:	48 8b 05 b0 6e 5f 00 	mov    0x5f6eb0(%rip),%rax        # 5fdc28 <edgeCnt>
    6d78:	48 c1 e0 03          	shl    $0x3,%rax
    6d7c:	48 3b 05 65 6e 5f 00 	cmp    0x5f6e65(%rip),%rax        # 5fdbe8 <shmSize2>
    6d83:	77 55                	ja     6dda <_shm2Full>
    6d85:	48 8b 1d 84 cb 74 00 	mov    0x74cb84(%rip),%rbx        # 753910 <edgehash>
    6d8c:	48 8b 15 75 cb 74 00 	mov    0x74cb75(%rip),%rdx        # 753908 <shmptr_edge>
    6d93:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    6d97:	48 89 19             	mov    %rbx,(%rcx)
    6d9a:	48 83 05 86 6e 5f 00 	addq   $0x1,0x5f6e86(%rip)        # 5fdc28 <edgeCnt>
    6da1:	01 

0000000000006da2 <_caledgehash>:
    6da2:	48 8b 15 67 cb 74 00 	mov    0x74cb67(%rip),%rdx        # 753910 <edgehash>
    6da9:	48 89 d0             	mov    %rdx,%rax
    6dac:	48 c1 e0 05          	shl    $0x5,%rax
    6db0:	48 01 c2             	add    %rax,%rdx
    6db3:	48 8b 05 86 cb 74 00 	mov    0x74cb86(%rip),%rax        # 753940 <edgeId>
    6dba:	48 01 d0             	add    %rdx,%rax
    6dbd:	48 89 05 4c cb 74 00 	mov    %rax,0x74cb4c(%rip)        # 753910 <edgehash>
    6dc4:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    6dcb:	00 00 00 
    6dce:	48 21 05 3b cb 74 00 	and    %rax,0x74cb3b(%rip)        # 753910 <edgehash>
    6dd5:	5a                   	pop    %rdx
    6dd6:	59                   	pop    %rcx
    6dd7:	5b                   	pop    %rbx
    6dd8:	58                   	pop    %rax
    6dd9:	c3                   	retq   

0000000000006dda <_shm2Full>:
    6dda:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    6de1:	5a                   	pop    %rdx
    6de2:	59                   	pop    %rcx
    6de3:	5b                   	pop    %rbx
    6de4:	58                   	pop    %rax
    6de5:	e8 c6 aa ff ff       	callq  18b0 <_exit@plt>
    6dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006df0 <_storeDataFn>:
    6df0:	55                   	push   %rbp
    6df1:	48 89 e5             	mov    %rsp,%rbp
    6df4:	50                   	push   %rax
    6df5:	53                   	push   %rbx
    6df6:	41 50                	push   %r8
    6df8:	41 51                	push   %r9
    6dfa:	41 52                	push   %r10
    6dfc:	48 8b 05 35 cb 74 00 	mov    0x74cb35(%rip),%rax        # 753938 <shmptr_gcnt>
    6e03:	48 8b 00             	mov    (%rax),%rax
    6e06:	48 c1 e0 03          	shl    $0x3,%rax
    6e0a:	48 83 c0 30          	add    $0x30,%rax
    6e0e:	48 3b 05 33 cb 74 00 	cmp    0x74cb33(%rip),%rax        # 753948 <shmSize>
    6e15:	0f 83 8f 01 00 00    	jae    6faa <_shmFull>
    6e1b:	48 83 3d 0d cb 74 00 	cmpq   $0x0,0x74cb0d(%rip)        # 753930 <shmptr_cmp>
    6e22:	00 
    6e23:	0f 84 99 01 00 00    	je     6fc2 <_shmUninitialize>
    6e29:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    6e30:	48 83 e8 30          	sub    $0x30,%rax
    6e34:	48 c1 e8 03          	shr    $0x3,%rax

0000000000006e38 <_storeloop>:
    6e38:	49 89 c2             	mov    %rax,%r10
    6e3b:	49 c1 e2 03          	shl    $0x3,%r10
    6e3f:	4c 03 15 ea ca 74 00 	add    0x74caea(%rip),%r10        # 753930 <shmptr_cmp>
    6e46:	49 89 d9             	mov    %rbx,%r9
    6e49:	49 c1 e1 03          	shl    $0x3,%r9
    6e4d:	4c 8d 05 9c 6d 5f 00 	lea    0x5f6d9c(%rip),%r8        # 5fdbf0 <funcinptr>
    6e54:	4d 01 c1             	add    %r8,%r9
    6e57:	4d 8b 01             	mov    (%r9),%r8
    6e5a:	4d 89 02             	mov    %r8,(%r10)
    6e5d:	48 83 fb 00          	cmp    $0x0,%rbx
    6e61:	75 07                	jne    6e6a <_no_get_cmpid>
    6e63:	4c 89 05 be ca 74 00 	mov    %r8,0x74cabe(%rip)        # 753928 <cmpid>

0000000000006e6a <_no_get_cmpid>:
    6e6a:	48 ff c0             	inc    %rax
    6e6d:	48 ff c3             	inc    %rbx
    6e70:	48 83 fb 06          	cmp    $0x6,%rbx
    6e74:	75 c2                	jne    6e38 <_storeloop>
    6e76:	48 8b 1d bb ca 74 00 	mov    0x74cabb(%rip),%rbx        # 753938 <shmptr_gcnt>
    6e7d:	48 89 03             	mov    %rax,(%rbx)
    6e80:	48 8b 05 a1 ca 74 00 	mov    0x74caa1(%rip),%rax        # 753928 <cmpid>
    6e87:	48 c1 e0 04          	shl    $0x4,%rax
    6e8b:	48 89 c3             	mov    %rax,%rbx
    6e8e:	48 83 c3 08          	add    $0x8,%rbx
    6e92:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    6e99:	0f 83 17 01 00 00    	jae    6fb6 <_cmpdictFull>
    6e9f:	48 8d 1d 9a 6d 5f 00 	lea    0x5f6d9a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    6ea6:	48 01 d8             	add    %rbx,%rax
    6ea9:	48 83 38 00          	cmpq   $0x0,(%rax)
    6ead:	0f 84 db 00 00 00    	je     6f8e <_insert_entry>
    6eb3:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000006eba <_remove_repeated_cycle>:
    6eba:	4d 89 c1             	mov    %r8,%r9
    6ebd:	4d 89 ca             	mov    %r9,%r10
    6ec0:	49 c1 e1 02          	shl    $0x2,%r9
    6ec4:	4d 01 d1             	add    %r10,%r9
    6ec7:	4d 01 d1             	add    %r10,%r9
    6eca:	4c 8b 15 67 ca 74 00 	mov    0x74ca67(%rip),%r10        # 753938 <shmptr_gcnt>
    6ed1:	4d 8b 12             	mov    (%r10),%r10
    6ed4:	4c 2b 10             	sub    (%rax),%r10
    6ed7:	4c 3b 10             	cmp    (%rax),%r10
    6eda:	0f 87 9f 00 00 00    	ja     6f7f <_no_remove_cycle>
    6ee0:	4d 39 ca             	cmp    %r9,%r10
    6ee3:	76 67                	jbe    6f4c <_remove_cycle>
    6ee5:	4d 89 c1             	mov    %r8,%r9
    6ee8:	49 83 c1 01          	add    $0x1,%r9
    6eec:	4d 89 ca             	mov    %r9,%r10
    6eef:	49 c1 e1 02          	shl    $0x2,%r9
    6ef3:	4d 01 d1             	add    %r10,%r9
    6ef6:	4d 01 d1             	add    %r10,%r9
    6ef9:	4c 8b 15 38 ca 74 00 	mov    0x74ca38(%rip),%r10        # 753938 <shmptr_gcnt>
    6f00:	4d 8b 12             	mov    (%r10),%r10
    6f03:	4d 29 ca             	sub    %r9,%r10
    6f06:	49 c1 e2 03          	shl    $0x3,%r10
    6f0a:	4c 8b 0d 1f ca 74 00 	mov    0x74ca1f(%rip),%r9        # 753930 <shmptr_cmp>
    6f11:	4d 01 d1             	add    %r10,%r9
    6f14:	49 8b 19             	mov    (%r9),%rbx
    6f17:	4d 89 c1             	mov    %r8,%r9
    6f1a:	49 83 c1 01          	add    $0x1,%r9
    6f1e:	4d 89 ca             	mov    %r9,%r10
    6f21:	49 c1 e1 02          	shl    $0x2,%r9
    6f25:	4d 01 d1             	add    %r10,%r9
    6f28:	4d 01 d1             	add    %r10,%r9
    6f2b:	4c 8b 10             	mov    (%rax),%r10
    6f2e:	4d 29 ca             	sub    %r9,%r10
    6f31:	49 c1 e2 03          	shl    $0x3,%r10
    6f35:	4c 8b 0d f4 c9 74 00 	mov    0x74c9f4(%rip),%r9        # 753930 <shmptr_cmp>
    6f3c:	4d 01 d1             	add    %r10,%r9
    6f3f:	49 3b 19             	cmp    (%r9),%rbx
    6f42:	75 3b                	jne    6f7f <_no_remove_cycle>
    6f44:	49 ff c0             	inc    %r8
    6f47:	e9 6e ff ff ff       	jmpq   6eba <_remove_repeated_cycle>

0000000000006f4c <_remove_cycle>:
    6f4c:	48 89 15 c5 c9 74 00 	mov    %rdx,0x74c9c5(%rip)        # 753918 <tmpquadone>
    6f53:	48 8b 10             	mov    (%rax),%rdx
    6f56:	48 8b 05 db c9 74 00 	mov    0x74c9db(%rip),%rax        # 753938 <shmptr_gcnt>
    6f5d:	48 89 10             	mov    %rdx,(%rax)
    6f60:	89 d0                	mov    %edx,%eax
    6f62:	48 c1 ea 20          	shr    $0x20,%rdx
    6f66:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    6f6d:	49 f7 f0             	div    %r8
    6f70:	89 05 b2 6c 5f 00    	mov    %eax,0x5f6cb2(%rip)        # 5fdc28 <edgeCnt>
    6f76:	48 8b 15 9b c9 74 00 	mov    0x74c99b(%rip),%rdx        # 753918 <tmpquadone>
    6f7d:	eb 1c                	jmp    6f9b <_skipstoredata>

0000000000006f7f <_no_remove_cycle>:
    6f7f:	48 8b 1d b2 c9 74 00 	mov    0x74c9b2(%rip),%rbx        # 753938 <shmptr_gcnt>
    6f86:	48 8b 1b             	mov    (%rbx),%rbx
    6f89:	48 89 18             	mov    %rbx,(%rax)
    6f8c:	eb 0d                	jmp    6f9b <_skipstoredata>

0000000000006f8e <_insert_entry>:
    6f8e:	48 8b 1d a3 c9 74 00 	mov    0x74c9a3(%rip),%rbx        # 753938 <shmptr_gcnt>
    6f95:	48 8b 1b             	mov    (%rbx),%rbx
    6f98:	48 89 18             	mov    %rbx,(%rax)

0000000000006f9b <_skipstoredata>:
    6f9b:	41 5a                	pop    %r10
    6f9d:	41 59                	pop    %r9
    6f9f:	41 58                	pop    %r8
    6fa1:	5b                   	pop    %rbx
    6fa2:	58                   	pop    %rax
    6fa3:	48 89 ec             	mov    %rbp,%rsp
    6fa6:	5d                   	pop    %rbp
    6fa7:	c2 08 00             	retq   $0x8

0000000000006faa <_shmFull>:
    6faa:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    6fb1:	e8 fa a8 ff ff       	callq  18b0 <_exit@plt>

0000000000006fb6 <_cmpdictFull>:
    6fb6:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    6fbd:	e8 ee a8 ff ff       	callq  18b0 <_exit@plt>

0000000000006fc2 <_shmUninitialize>:
    6fc2:	48 89 ec             	mov    %rbp,%rsp
    6fc5:	5d                   	pop    %rbp
    6fc6:	48 31 c0             	xor    %rax,%rax
    6fc9:	c2 08 00             	retq   $0x8
    6fcc:	0f 1f 40 00          	nopl   0x0(%rax)
    6fd0:	9f                   	lahf   
    6fd1:	0f 90 c0             	seto   %al
    6fd4:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006fd8 <__afl_setup_first>:
    6fd8:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    6fdf:	ff 
    6fe0:	48 89 04 24          	mov    %rax,(%rsp)
    6fe4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    6fe9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    6fee:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    6ff3:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    6ff8:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    6ffd:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    7002:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    7007:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    700d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    7013:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    701a:	00 00 
    701c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    7023:	00 00 
    7025:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    702c:	00 00 
    702e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    7035:	00 00 
    7037:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    703e:	00 00 
    7040:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    7047:	00 00 
    7049:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    7050:	00 00 00 
    7053:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    705a:	00 00 00 
    705d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    7064:	01 00 00 
    7067:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    706e:	01 00 00 
    7071:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    7078:	01 00 00 
    707b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    7082:	01 00 00 
    7085:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    708c:	01 00 00 
    708f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    7096:	01 00 00 
    7099:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    70a0:	00 
    70a1:	41 54                	push   %r12
    70a3:	49 89 e4             	mov    %rsp,%r12
    70a6:	48 83 ec 10          	sub    $0x10,%rsp
    70aa:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    70ae:	48 c7 05 8f c8 74 00 	movq   $0x100000,0x74c88f(%rip)        # 753948 <shmSize>
    70b5:	00 00 10 00 
    70b9:	48 c7 05 24 6b 5f 00 	movq   $0x100000,0x5f6b24(%rip)        # 5fdbe8 <shmSize2>
    70c0:	00 00 10 00 
    70c4:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 7416 <.SHM_ENV_GCNT>
    70cb:	e8 90 a7 ff ff       	callq  1860 <getenv@plt>
    70d0:	48 85 c0             	test   %rax,%rax
    70d3:	0f 84 6a 01 00 00    	je     7243 <__afl_setup_abort>
    70d9:	48 89 c7             	mov    %rax,%rdi
    70dc:	e8 0f ab ff ff       	callq  1bf0 <atoi@plt>
    70e1:	48 31 d2             	xor    %rdx,%rdx
    70e4:	48 31 f6             	xor    %rsi,%rsi
    70e7:	48 89 c7             	mov    %rax,%rdi
    70ea:	e8 e1 aa ff ff       	callq  1bd0 <shmat@plt>
    70ef:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    70f3:	0f 84 4a 01 00 00    	je     7243 <__afl_setup_abort>
    70f9:	48 89 05 38 c8 74 00 	mov    %rax,0x74c838(%rip)        # 753938 <shmptr_gcnt>
    7100:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 73fd <.SHM_ENV_CMP>
    7107:	e8 54 a7 ff ff       	callq  1860 <getenv@plt>
    710c:	48 85 c0             	test   %rax,%rax
    710f:	0f 84 2e 01 00 00    	je     7243 <__afl_setup_abort>
    7115:	48 89 c7             	mov    %rax,%rdi
    7118:	e8 d3 aa ff ff       	callq  1bf0 <atoi@plt>
    711d:	48 31 d2             	xor    %rdx,%rdx
    7120:	48 31 f6             	xor    %rsi,%rsi
    7123:	48 89 c7             	mov    %rax,%rdi
    7126:	e8 a5 aa ff ff       	callq  1bd0 <shmat@plt>
    712b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    712f:	0f 84 0e 01 00 00    	je     7243 <__afl_setup_abort>
    7135:	48 89 05 f4 c7 74 00 	mov    %rax,0x74c7f4(%rip)        # 753930 <shmptr_cmp>
    713c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 7409 <.SHM_ENV_EDGE>
    7143:	e8 18 a7 ff ff       	callq  1860 <getenv@plt>
    7148:	48 85 c0             	test   %rax,%rax
    714b:	0f 84 f2 00 00 00    	je     7243 <__afl_setup_abort>
    7151:	48 89 c7             	mov    %rax,%rdi
    7154:	e8 97 aa ff ff       	callq  1bf0 <atoi@plt>
    7159:	48 31 d2             	xor    %rdx,%rdx
    715c:	48 31 f6             	xor    %rsi,%rsi
    715f:	48 89 c7             	mov    %rax,%rdi
    7162:	e8 69 aa ff ff       	callq  1bd0 <shmat@plt>
    7167:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    716b:	0f 84 d2 00 00 00    	je     7243 <__afl_setup_abort>
    7171:	48 89 05 90 c7 74 00 	mov    %rax,0x74c790(%rip)        # 753908 <shmptr_edge>

0000000000007178 <__afl_forkserver>:
    7178:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    717f:	48 8d 35 0e 6a 5f 00 	lea    0x5f6a0e(%rip),%rsi        # 5fdb94 <__afl_temp>
    7186:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    718d:	e8 3e a7 ff ff       	callq  18d0 <write@plt>
    7192:	48 83 f8 04          	cmp    $0x4,%rax
    7196:	0f 85 78 01 00 00    	jne    7314 <__afl_fork_resume>

000000000000719c <__afl_fork_wait_loop>:
    719c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    71a3:	48 8d 35 ea 69 5f 00 	lea    0x5f69ea(%rip),%rsi        # 5fdb94 <__afl_temp>
    71aa:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    71b1:	e8 8a a8 ff ff       	callq  1a40 <read@plt>
    71b6:	48 83 f8 04          	cmp    $0x4,%rax
    71ba:	75 70                	jne    722c <__afl_die>
    71bc:	e8 8f aa ff ff       	callq  1c50 <fork@plt>
    71c1:	48 83 f8 00          	cmp    $0x0,%rax
    71c5:	7c 65                	jl     722c <__afl_die>
    71c7:	0f 84 47 01 00 00    	je     7314 <__afl_fork_resume>
    71cd:	89 05 bd 69 5f 00    	mov    %eax,0x5f69bd(%rip)        # 5fdb90 <__afl_fork_pid>
    71d3:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    71da:	48 8d 35 af 69 5f 00 	lea    0x5f69af(%rip),%rsi        # 5fdb90 <__afl_fork_pid>
    71e1:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    71e8:	e8 e3 a6 ff ff       	callq  18d0 <write@plt>
    71ed:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    71f4:	48 8d 35 99 69 5f 00 	lea    0x5f6999(%rip),%rsi        # 5fdb94 <__afl_temp>
    71fb:	48 8b 3d 8e 69 5f 00 	mov    0x5f698e(%rip),%rdi        # 5fdb90 <__afl_fork_pid>
    7202:	e8 79 a9 ff ff       	callq  1b80 <waitpid@plt>
    7207:	48 83 f8 00          	cmp    $0x0,%rax
    720b:	7e 1f                	jle    722c <__afl_die>
    720d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    7214:	48 8d 35 79 69 5f 00 	lea    0x5f6979(%rip),%rsi        # 5fdb94 <__afl_temp>
    721b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    7222:	e8 a9 a6 ff ff       	callq  18d0 <write@plt>
    7227:	e9 70 ff ff ff       	jmpq   719c <__afl_fork_wait_loop>

000000000000722c <__afl_die>:
    722c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 745a <.serverDied>
    7233:	48 31 c0             	xor    %rax,%rax
    7236:	e8 55 a7 ff ff       	callq  1990 <printf@plt>
    723b:	48 31 c0             	xor    %rax,%rax
    723e:	e8 6d a6 ff ff       	callq  18b0 <_exit@plt>

0000000000007243 <__afl_setup_abort>:
    7243:	4c 89 e4             	mov    %r12,%rsp
    7246:	41 5c                	pop    %r12
    7248:	48 8b 04 24          	mov    (%rsp),%rax
    724c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    7251:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    7256:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    725b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    7260:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    7265:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    726a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    726f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    7275:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    727b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    7282:	00 00 
    7284:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    728b:	00 00 
    728d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    7294:	00 00 
    7296:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    729d:	00 00 
    729f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    72a6:	00 00 
    72a8:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    72af:	00 00 
    72b1:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    72b8:	00 00 00 
    72bb:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    72c2:	00 00 00 
    72c5:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    72cc:	01 00 00 
    72cf:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    72d6:	01 00 00 
    72d9:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    72e0:	01 00 00 
    72e3:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    72ea:	01 00 00 
    72ed:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    72f4:	01 00 00 
    72f7:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    72fe:	01 00 00 
    7301:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    7308:	00 
    7309:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    7310:	00 
    7311:	b0 7f                	mov    $0x7f,%al
    7313:	c3                   	retq   

0000000000007314 <__afl_fork_resume>:
    7314:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    731b:	e8 f0 a6 ff ff       	callq  1a10 <close@plt>
    7320:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    7327:	e8 e4 a6 ff ff       	callq  1a10 <close@plt>
    732c:	4c 89 e4             	mov    %r12,%rsp
    732f:	41 5c                	pop    %r12
    7331:	48 8b 04 24          	mov    (%rsp),%rax
    7335:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    733a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    733f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    7344:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    7349:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    734e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    7353:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    7358:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    735e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    7364:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    736b:	00 00 
    736d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    7374:	00 00 
    7376:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    737d:	00 00 
    737f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    7386:	00 00 
    7388:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    738f:	00 00 
    7391:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    7398:	00 00 
    739a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    73a1:	00 00 00 
    73a4:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    73ab:	00 00 00 
    73ae:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    73b5:	01 00 00 
    73b8:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    73bf:	01 00 00 
    73c2:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    73c9:	01 00 00 
    73cc:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    73d3:	01 00 00 
    73d6:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    73dd:	01 00 00 
    73e0:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    73e7:	01 00 00 
    73ea:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    73f1:	00 
    73f2:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    73f9:	00 
    73fa:	b0 00                	mov    $0x0,%al
    73fc:	c3                   	retq   

00000000000073fd <.SHM_ENV_CMP>:
    73fd:	53                   	push   %rbx
    73fe:	48                   	rex.W
    73ff:	4d 5f                	rex.WRB pop %r15
    7401:	45                   	rex.RB
    7402:	4e 56                	rex.WRX push %rsi
    7404:	5f                   	pop    %rdi
    7405:	43                   	rex.XB
    7406:	4d 50                	rex.WRB push %r8
	...

0000000000007409 <.SHM_ENV_EDGE>:
    7409:	53                   	push   %rbx
    740a:	48                   	rex.W
    740b:	4d 5f                	rex.WRB pop %r15
    740d:	45                   	rex.RB
    740e:	4e 56                	rex.WRX push %rsi
    7410:	5f                   	pop    %rdi
    7411:	45                   	rex.RB
    7412:	44                   	rex.R
    7413:	47                   	rex.RXB
    7414:	45                   	rex.RB
	...

0000000000007416 <.SHM_ENV_GCNT>:
    7416:	53                   	push   %rbx
    7417:	48                   	rex.W
    7418:	4d 5f                	rex.WRB pop %r15
    741a:	45                   	rex.RB
    741b:	4e 56                	rex.WRX push %rsi
    741d:	5f                   	pop    %rdi
    741e:	47                   	rex.RXB
    741f:	43                   	rex.XB
    7420:	4e 54                	rex.WRX push %rsp
	...

0000000000007423 <.serverSetupError>:
    7423:	20 53 65             	and    %dl,0x65(%rbx)
    7426:	72 76                	jb     749e <_storeEdge+0x1e>
    7428:	65 72 20             	gs jb  744b <.serverSetupError+0x28>
    742b:	53                   	push   %rbx
    742c:	65 74 75             	gs je  74a4 <_storeEdge+0x24>
    742f:	70 20                	jo     7451 <.serverSetupError+0x2e>
    7431:	45 72 72             	rex.RB jb 74a6 <_storeEdge+0x26>
    7434:	6f                   	outsl  %ds:(%rsi),(%dx)
    7435:	72 2c                	jb     7463 <.serverDied+0x9>
    7437:	20 63 6f             	and    %ah,0x6f(%rbx)
    743a:	6e                   	outsb  %ds:(%rsi),(%dx)
    743b:	74 69                	je     74a6 <_storeEdge+0x26>
    743d:	6e                   	outsb  %ds:(%rsi),(%dx)
    743e:	75 65                	jne    74a5 <_storeEdge+0x25>
    7440:	20 72 75             	and    %dh,0x75(%rdx)
    7443:	6e                   	outsb  %ds:(%rsi),(%dx)
    7444:	6e                   	outsb  %ds:(%rsi),(%dx)
    7445:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    744c:	6f                   	outsl  %ds:(%rsi),(%dx)
    744d:	75 74                	jne    74c3 <_storeEdge+0x43>
    744f:	20 73 65             	and    %dh,0x65(%rbx)
    7452:	72 76                	jb     74ca <_caledgehash>
    7454:	65 72 20             	gs jb  7477 <.debug+0xa>
    7457:	0a 20                	or     (%rax),%ah
	...

000000000000745a <.serverDied>:
    745a:	20 53 65             	and    %dl,0x65(%rbx)
    745d:	72 76                	jb     74d5 <_caledgehash+0xb>
    745f:	65 72 20             	gs jb  7482 <_storeEdge+0x2>
    7462:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    7469:	20 0a                	and    %cl,(%rdx)
    746b:	20 00                	and    %al,(%rax)

000000000000746d <.debug>:
    746d:	64 65 62             	fs gs (bad) 
    7470:	75 67                	jne    74d9 <_caledgehash+0xf>
    7472:	20 6d 65             	and    %ch,0x65(%rbp)
    7475:	73 73                	jae    74ea <_caledgehash+0x20>
    7477:	61                   	(bad)  
    7478:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    747c:	0a 20                	or     (%rax),%ah
    747e:	00                   	.byte 0x0
    747f:	90                   	nop

0000000000007480 <_storeEdge>:
    7480:	50                   	push   %rax
    7481:	53                   	push   %rbx
    7482:	51                   	push   %rcx
    7483:	52                   	push   %rdx
    7484:	48 83 3d c4 c4 74 00 	cmpq   $0x1,0x74c4c4(%rip)        # 753950 <cmpPassed>
    748b:	01 
    748c:	75 3c                	jne    74ca <_caledgehash>
    748e:	48 c7 05 b7 c4 74 00 	movq   $0x0,0x74c4b7(%rip)        # 753950 <cmpPassed>
    7495:	00 00 00 00 
    7499:	48 8b 05 88 67 5f 00 	mov    0x5f6788(%rip),%rax        # 5fdc28 <edgeCnt>
    74a0:	48 c1 e0 03          	shl    $0x3,%rax
    74a4:	48 3b 05 3d 67 5f 00 	cmp    0x5f673d(%rip),%rax        # 5fdbe8 <shmSize2>
    74ab:	77 55                	ja     7502 <_shm2Full>
    74ad:	48 8b 1d 5c c4 74 00 	mov    0x74c45c(%rip),%rbx        # 753910 <edgehash>
    74b4:	48 8b 15 4d c4 74 00 	mov    0x74c44d(%rip),%rdx        # 753908 <shmptr_edge>
    74bb:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    74bf:	48 89 19             	mov    %rbx,(%rcx)
    74c2:	48 83 05 5e 67 5f 00 	addq   $0x1,0x5f675e(%rip)        # 5fdc28 <edgeCnt>
    74c9:	01 

00000000000074ca <_caledgehash>:
    74ca:	48 8b 15 3f c4 74 00 	mov    0x74c43f(%rip),%rdx        # 753910 <edgehash>
    74d1:	48 89 d0             	mov    %rdx,%rax
    74d4:	48 c1 e0 05          	shl    $0x5,%rax
    74d8:	48 01 c2             	add    %rax,%rdx
    74db:	48 8b 05 5e c4 74 00 	mov    0x74c45e(%rip),%rax        # 753940 <edgeId>
    74e2:	48 01 d0             	add    %rdx,%rax
    74e5:	48 89 05 24 c4 74 00 	mov    %rax,0x74c424(%rip)        # 753910 <edgehash>
    74ec:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    74f3:	00 00 00 
    74f6:	48 21 05 13 c4 74 00 	and    %rax,0x74c413(%rip)        # 753910 <edgehash>
    74fd:	5a                   	pop    %rdx
    74fe:	59                   	pop    %rcx
    74ff:	5b                   	pop    %rbx
    7500:	58                   	pop    %rax
    7501:	c3                   	retq   

0000000000007502 <_shm2Full>:
    7502:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    7509:	5a                   	pop    %rdx
    750a:	59                   	pop    %rcx
    750b:	5b                   	pop    %rbx
    750c:	58                   	pop    %rax
    750d:	e8 9e a3 ff ff       	callq  18b0 <_exit@plt>
    7512:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000007518 <_storeDataFn>:
    7518:	55                   	push   %rbp
    7519:	48 89 e5             	mov    %rsp,%rbp
    751c:	50                   	push   %rax
    751d:	53                   	push   %rbx
    751e:	41 50                	push   %r8
    7520:	41 51                	push   %r9
    7522:	41 52                	push   %r10
    7524:	48 8b 05 0d c4 74 00 	mov    0x74c40d(%rip),%rax        # 753938 <shmptr_gcnt>
    752b:	48 8b 00             	mov    (%rax),%rax
    752e:	48 c1 e0 03          	shl    $0x3,%rax
    7532:	48 83 c0 30          	add    $0x30,%rax
    7536:	48 3b 05 0b c4 74 00 	cmp    0x74c40b(%rip),%rax        # 753948 <shmSize>
    753d:	0f 83 8f 01 00 00    	jae    76d2 <_shmFull>
    7543:	48 83 3d e5 c3 74 00 	cmpq   $0x0,0x74c3e5(%rip)        # 753930 <shmptr_cmp>
    754a:	00 
    754b:	0f 84 99 01 00 00    	je     76ea <_shmUninitialize>
    7551:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    7558:	48 83 e8 30          	sub    $0x30,%rax
    755c:	48 c1 e8 03          	shr    $0x3,%rax

0000000000007560 <_storeloop>:
    7560:	49 89 c2             	mov    %rax,%r10
    7563:	49 c1 e2 03          	shl    $0x3,%r10
    7567:	4c 03 15 c2 c3 74 00 	add    0x74c3c2(%rip),%r10        # 753930 <shmptr_cmp>
    756e:	49 89 d9             	mov    %rbx,%r9
    7571:	49 c1 e1 03          	shl    $0x3,%r9
    7575:	4c 8d 05 74 66 5f 00 	lea    0x5f6674(%rip),%r8        # 5fdbf0 <funcinptr>
    757c:	4d 01 c1             	add    %r8,%r9
    757f:	4d 8b 01             	mov    (%r9),%r8
    7582:	4d 89 02             	mov    %r8,(%r10)
    7585:	48 83 fb 00          	cmp    $0x0,%rbx
    7589:	75 07                	jne    7592 <_no_get_cmpid>
    758b:	4c 89 05 96 c3 74 00 	mov    %r8,0x74c396(%rip)        # 753928 <cmpid>

0000000000007592 <_no_get_cmpid>:
    7592:	48 ff c0             	inc    %rax
    7595:	48 ff c3             	inc    %rbx
    7598:	48 83 fb 06          	cmp    $0x6,%rbx
    759c:	75 c2                	jne    7560 <_storeloop>
    759e:	48 8b 1d 93 c3 74 00 	mov    0x74c393(%rip),%rbx        # 753938 <shmptr_gcnt>
    75a5:	48 89 03             	mov    %rax,(%rbx)
    75a8:	48 8b 05 79 c3 74 00 	mov    0x74c379(%rip),%rax        # 753928 <cmpid>
    75af:	48 c1 e0 04          	shl    $0x4,%rax
    75b3:	48 89 c3             	mov    %rax,%rbx
    75b6:	48 83 c3 08          	add    $0x8,%rbx
    75ba:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    75c1:	0f 83 17 01 00 00    	jae    76de <_cmpdictFull>
    75c7:	48 8d 1d 72 66 5f 00 	lea    0x5f6672(%rip),%rbx        # 5fdc40 <cmpid_dict>
    75ce:	48 01 d8             	add    %rbx,%rax
    75d1:	48 83 38 00          	cmpq   $0x0,(%rax)
    75d5:	0f 84 db 00 00 00    	je     76b6 <_insert_entry>
    75db:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

00000000000075e2 <_remove_repeated_cycle>:
    75e2:	4d 89 c1             	mov    %r8,%r9
    75e5:	4d 89 ca             	mov    %r9,%r10
    75e8:	49 c1 e1 02          	shl    $0x2,%r9
    75ec:	4d 01 d1             	add    %r10,%r9
    75ef:	4d 01 d1             	add    %r10,%r9
    75f2:	4c 8b 15 3f c3 74 00 	mov    0x74c33f(%rip),%r10        # 753938 <shmptr_gcnt>
    75f9:	4d 8b 12             	mov    (%r10),%r10
    75fc:	4c 2b 10             	sub    (%rax),%r10
    75ff:	4c 3b 10             	cmp    (%rax),%r10
    7602:	0f 87 9f 00 00 00    	ja     76a7 <_no_remove_cycle>
    7608:	4d 39 ca             	cmp    %r9,%r10
    760b:	76 67                	jbe    7674 <_remove_cycle>
    760d:	4d 89 c1             	mov    %r8,%r9
    7610:	49 83 c1 01          	add    $0x1,%r9
    7614:	4d 89 ca             	mov    %r9,%r10
    7617:	49 c1 e1 02          	shl    $0x2,%r9
    761b:	4d 01 d1             	add    %r10,%r9
    761e:	4d 01 d1             	add    %r10,%r9
    7621:	4c 8b 15 10 c3 74 00 	mov    0x74c310(%rip),%r10        # 753938 <shmptr_gcnt>
    7628:	4d 8b 12             	mov    (%r10),%r10
    762b:	4d 29 ca             	sub    %r9,%r10
    762e:	49 c1 e2 03          	shl    $0x3,%r10
    7632:	4c 8b 0d f7 c2 74 00 	mov    0x74c2f7(%rip),%r9        # 753930 <shmptr_cmp>
    7639:	4d 01 d1             	add    %r10,%r9
    763c:	49 8b 19             	mov    (%r9),%rbx
    763f:	4d 89 c1             	mov    %r8,%r9
    7642:	49 83 c1 01          	add    $0x1,%r9
    7646:	4d 89 ca             	mov    %r9,%r10
    7649:	49 c1 e1 02          	shl    $0x2,%r9
    764d:	4d 01 d1             	add    %r10,%r9
    7650:	4d 01 d1             	add    %r10,%r9
    7653:	4c 8b 10             	mov    (%rax),%r10
    7656:	4d 29 ca             	sub    %r9,%r10
    7659:	49 c1 e2 03          	shl    $0x3,%r10
    765d:	4c 8b 0d cc c2 74 00 	mov    0x74c2cc(%rip),%r9        # 753930 <shmptr_cmp>
    7664:	4d 01 d1             	add    %r10,%r9
    7667:	49 3b 19             	cmp    (%r9),%rbx
    766a:	75 3b                	jne    76a7 <_no_remove_cycle>
    766c:	49 ff c0             	inc    %r8
    766f:	e9 6e ff ff ff       	jmpq   75e2 <_remove_repeated_cycle>

0000000000007674 <_remove_cycle>:
    7674:	48 89 15 9d c2 74 00 	mov    %rdx,0x74c29d(%rip)        # 753918 <tmpquadone>
    767b:	48 8b 10             	mov    (%rax),%rdx
    767e:	48 8b 05 b3 c2 74 00 	mov    0x74c2b3(%rip),%rax        # 753938 <shmptr_gcnt>
    7685:	48 89 10             	mov    %rdx,(%rax)
    7688:	89 d0                	mov    %edx,%eax
    768a:	48 c1 ea 20          	shr    $0x20,%rdx
    768e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    7695:	49 f7 f0             	div    %r8
    7698:	89 05 8a 65 5f 00    	mov    %eax,0x5f658a(%rip)        # 5fdc28 <edgeCnt>
    769e:	48 8b 15 73 c2 74 00 	mov    0x74c273(%rip),%rdx        # 753918 <tmpquadone>
    76a5:	eb 1c                	jmp    76c3 <_skipstoredata>

00000000000076a7 <_no_remove_cycle>:
    76a7:	48 8b 1d 8a c2 74 00 	mov    0x74c28a(%rip),%rbx        # 753938 <shmptr_gcnt>
    76ae:	48 8b 1b             	mov    (%rbx),%rbx
    76b1:	48 89 18             	mov    %rbx,(%rax)
    76b4:	eb 0d                	jmp    76c3 <_skipstoredata>

00000000000076b6 <_insert_entry>:
    76b6:	48 8b 1d 7b c2 74 00 	mov    0x74c27b(%rip),%rbx        # 753938 <shmptr_gcnt>
    76bd:	48 8b 1b             	mov    (%rbx),%rbx
    76c0:	48 89 18             	mov    %rbx,(%rax)

00000000000076c3 <_skipstoredata>:
    76c3:	41 5a                	pop    %r10
    76c5:	41 59                	pop    %r9
    76c7:	41 58                	pop    %r8
    76c9:	5b                   	pop    %rbx
    76ca:	58                   	pop    %rax
    76cb:	48 89 ec             	mov    %rbp,%rsp
    76ce:	5d                   	pop    %rbp
    76cf:	c2 08 00             	retq   $0x8

00000000000076d2 <_shmFull>:
    76d2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    76d9:	e8 d2 a1 ff ff       	callq  18b0 <_exit@plt>

00000000000076de <_cmpdictFull>:
    76de:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    76e5:	e8 c6 a1 ff ff       	callq  18b0 <_exit@plt>

00000000000076ea <_shmUninitialize>:
    76ea:	48 89 ec             	mov    %rbp,%rsp
    76ed:	5d                   	pop    %rbp
    76ee:	48 31 c0             	xor    %rax,%rax
    76f1:	c2 08 00             	retq   $0x8
    76f4:	0f 1f 40 00          	nopl   0x0(%rax)
    76f8:	9f                   	lahf   
    76f9:	0f 90 c0             	seto   %al
    76fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007700 <__afl_setup_first>:
    7700:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    7707:	ff 
    7708:	48 89 04 24          	mov    %rax,(%rsp)
    770c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7711:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    7716:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    771b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    7720:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    7725:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    772a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    772f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    7735:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    773b:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    7742:	00 00 
    7744:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    774b:	00 00 
    774d:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    7754:	00 00 
    7756:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    775d:	00 00 
    775f:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    7766:	00 00 
    7768:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    776f:	00 00 
    7771:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    7778:	00 00 00 
    777b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    7782:	00 00 00 
    7785:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    778c:	01 00 00 
    778f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    7796:	01 00 00 
    7799:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    77a0:	01 00 00 
    77a3:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    77aa:	01 00 00 
    77ad:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    77b4:	01 00 00 
    77b7:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    77be:	01 00 00 
    77c1:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    77c8:	00 
    77c9:	41 54                	push   %r12
    77cb:	49 89 e4             	mov    %rsp,%r12
    77ce:	48 83 ec 10          	sub    $0x10,%rsp
    77d2:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    77d6:	48 c7 05 67 c1 74 00 	movq   $0x100000,0x74c167(%rip)        # 753948 <shmSize>
    77dd:	00 00 10 00 
    77e1:	48 c7 05 fc 63 5f 00 	movq   $0x100000,0x5f63fc(%rip)        # 5fdbe8 <shmSize2>
    77e8:	00 00 10 00 
    77ec:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 7b3e <.SHM_ENV_GCNT>
    77f3:	e8 68 a0 ff ff       	callq  1860 <getenv@plt>
    77f8:	48 85 c0             	test   %rax,%rax
    77fb:	0f 84 6a 01 00 00    	je     796b <__afl_setup_abort>
    7801:	48 89 c7             	mov    %rax,%rdi
    7804:	e8 e7 a3 ff ff       	callq  1bf0 <atoi@plt>
    7809:	48 31 d2             	xor    %rdx,%rdx
    780c:	48 31 f6             	xor    %rsi,%rsi
    780f:	48 89 c7             	mov    %rax,%rdi
    7812:	e8 b9 a3 ff ff       	callq  1bd0 <shmat@plt>
    7817:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    781b:	0f 84 4a 01 00 00    	je     796b <__afl_setup_abort>
    7821:	48 89 05 10 c1 74 00 	mov    %rax,0x74c110(%rip)        # 753938 <shmptr_gcnt>
    7828:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 7b25 <.SHM_ENV_CMP>
    782f:	e8 2c a0 ff ff       	callq  1860 <getenv@plt>
    7834:	48 85 c0             	test   %rax,%rax
    7837:	0f 84 2e 01 00 00    	je     796b <__afl_setup_abort>
    783d:	48 89 c7             	mov    %rax,%rdi
    7840:	e8 ab a3 ff ff       	callq  1bf0 <atoi@plt>
    7845:	48 31 d2             	xor    %rdx,%rdx
    7848:	48 31 f6             	xor    %rsi,%rsi
    784b:	48 89 c7             	mov    %rax,%rdi
    784e:	e8 7d a3 ff ff       	callq  1bd0 <shmat@plt>
    7853:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    7857:	0f 84 0e 01 00 00    	je     796b <__afl_setup_abort>
    785d:	48 89 05 cc c0 74 00 	mov    %rax,0x74c0cc(%rip)        # 753930 <shmptr_cmp>
    7864:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 7b31 <.SHM_ENV_EDGE>
    786b:	e8 f0 9f ff ff       	callq  1860 <getenv@plt>
    7870:	48 85 c0             	test   %rax,%rax
    7873:	0f 84 f2 00 00 00    	je     796b <__afl_setup_abort>
    7879:	48 89 c7             	mov    %rax,%rdi
    787c:	e8 6f a3 ff ff       	callq  1bf0 <atoi@plt>
    7881:	48 31 d2             	xor    %rdx,%rdx
    7884:	48 31 f6             	xor    %rsi,%rsi
    7887:	48 89 c7             	mov    %rax,%rdi
    788a:	e8 41 a3 ff ff       	callq  1bd0 <shmat@plt>
    788f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    7893:	0f 84 d2 00 00 00    	je     796b <__afl_setup_abort>
    7899:	48 89 05 68 c0 74 00 	mov    %rax,0x74c068(%rip)        # 753908 <shmptr_edge>

00000000000078a0 <__afl_forkserver>:
    78a0:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    78a7:	48 8d 35 ee 62 5f 00 	lea    0x5f62ee(%rip),%rsi        # 5fdb9c <__afl_temp>
    78ae:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    78b5:	e8 16 a0 ff ff       	callq  18d0 <write@plt>
    78ba:	48 83 f8 04          	cmp    $0x4,%rax
    78be:	0f 85 78 01 00 00    	jne    7a3c <__afl_fork_resume>

00000000000078c4 <__afl_fork_wait_loop>:
    78c4:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    78cb:	48 8d 35 ca 62 5f 00 	lea    0x5f62ca(%rip),%rsi        # 5fdb9c <__afl_temp>
    78d2:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    78d9:	e8 62 a1 ff ff       	callq  1a40 <read@plt>
    78de:	48 83 f8 04          	cmp    $0x4,%rax
    78e2:	75 70                	jne    7954 <__afl_die>
    78e4:	e8 67 a3 ff ff       	callq  1c50 <fork@plt>
    78e9:	48 83 f8 00          	cmp    $0x0,%rax
    78ed:	7c 65                	jl     7954 <__afl_die>
    78ef:	0f 84 47 01 00 00    	je     7a3c <__afl_fork_resume>
    78f5:	89 05 9d 62 5f 00    	mov    %eax,0x5f629d(%rip)        # 5fdb98 <__afl_fork_pid>
    78fb:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    7902:	48 8d 35 8f 62 5f 00 	lea    0x5f628f(%rip),%rsi        # 5fdb98 <__afl_fork_pid>
    7909:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    7910:	e8 bb 9f ff ff       	callq  18d0 <write@plt>
    7915:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    791c:	48 8d 35 79 62 5f 00 	lea    0x5f6279(%rip),%rsi        # 5fdb9c <__afl_temp>
    7923:	48 8b 3d 6e 62 5f 00 	mov    0x5f626e(%rip),%rdi        # 5fdb98 <__afl_fork_pid>
    792a:	e8 51 a2 ff ff       	callq  1b80 <waitpid@plt>
    792f:	48 83 f8 00          	cmp    $0x0,%rax
    7933:	7e 1f                	jle    7954 <__afl_die>
    7935:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    793c:	48 8d 35 59 62 5f 00 	lea    0x5f6259(%rip),%rsi        # 5fdb9c <__afl_temp>
    7943:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    794a:	e8 81 9f ff ff       	callq  18d0 <write@plt>
    794f:	e9 70 ff ff ff       	jmpq   78c4 <__afl_fork_wait_loop>

0000000000007954 <__afl_die>:
    7954:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 7b82 <.serverDied>
    795b:	48 31 c0             	xor    %rax,%rax
    795e:	e8 2d a0 ff ff       	callq  1990 <printf@plt>
    7963:	48 31 c0             	xor    %rax,%rax
    7966:	e8 45 9f ff ff       	callq  18b0 <_exit@plt>

000000000000796b <__afl_setup_abort>:
    796b:	4c 89 e4             	mov    %r12,%rsp
    796e:	41 5c                	pop    %r12
    7970:	48 8b 04 24          	mov    (%rsp),%rax
    7974:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    7979:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    797e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    7983:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    7988:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    798d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    7992:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    7997:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    799d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    79a3:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    79aa:	00 00 
    79ac:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    79b3:	00 00 
    79b5:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    79bc:	00 00 
    79be:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    79c5:	00 00 
    79c7:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    79ce:	00 00 
    79d0:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    79d7:	00 00 
    79d9:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    79e0:	00 00 00 
    79e3:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    79ea:	00 00 00 
    79ed:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    79f4:	01 00 00 
    79f7:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    79fe:	01 00 00 
    7a01:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    7a08:	01 00 00 
    7a0b:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    7a12:	01 00 00 
    7a15:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    7a1c:	01 00 00 
    7a1f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    7a26:	01 00 00 
    7a29:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    7a30:	00 
    7a31:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    7a38:	00 
    7a39:	b0 7f                	mov    $0x7f,%al
    7a3b:	c3                   	retq   

0000000000007a3c <__afl_fork_resume>:
    7a3c:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    7a43:	e8 c8 9f ff ff       	callq  1a10 <close@plt>
    7a48:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    7a4f:	e8 bc 9f ff ff       	callq  1a10 <close@plt>
    7a54:	4c 89 e4             	mov    %r12,%rsp
    7a57:	41 5c                	pop    %r12
    7a59:	48 8b 04 24          	mov    (%rsp),%rax
    7a5d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    7a62:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    7a67:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    7a6c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    7a71:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    7a76:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    7a7b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    7a80:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    7a86:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    7a8c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    7a93:	00 00 
    7a95:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    7a9c:	00 00 
    7a9e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    7aa5:	00 00 
    7aa7:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    7aae:	00 00 
    7ab0:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    7ab7:	00 00 
    7ab9:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    7ac0:	00 00 
    7ac2:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    7ac9:	00 00 00 
    7acc:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    7ad3:	00 00 00 
    7ad6:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    7add:	01 00 00 
    7ae0:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    7ae7:	01 00 00 
    7aea:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    7af1:	01 00 00 
    7af4:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    7afb:	01 00 00 
    7afe:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    7b05:	01 00 00 
    7b08:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    7b0f:	01 00 00 
    7b12:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    7b19:	00 
    7b1a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    7b21:	00 
    7b22:	b0 00                	mov    $0x0,%al
    7b24:	c3                   	retq   

0000000000007b25 <.SHM_ENV_CMP>:
    7b25:	53                   	push   %rbx
    7b26:	48                   	rex.W
    7b27:	4d 5f                	rex.WRB pop %r15
    7b29:	45                   	rex.RB
    7b2a:	4e 56                	rex.WRX push %rsi
    7b2c:	5f                   	pop    %rdi
    7b2d:	43                   	rex.XB
    7b2e:	4d 50                	rex.WRB push %r8
	...

0000000000007b31 <.SHM_ENV_EDGE>:
    7b31:	53                   	push   %rbx
    7b32:	48                   	rex.W
    7b33:	4d 5f                	rex.WRB pop %r15
    7b35:	45                   	rex.RB
    7b36:	4e 56                	rex.WRX push %rsi
    7b38:	5f                   	pop    %rdi
    7b39:	45                   	rex.RB
    7b3a:	44                   	rex.R
    7b3b:	47                   	rex.RXB
    7b3c:	45                   	rex.RB
	...

0000000000007b3e <.SHM_ENV_GCNT>:
    7b3e:	53                   	push   %rbx
    7b3f:	48                   	rex.W
    7b40:	4d 5f                	rex.WRB pop %r15
    7b42:	45                   	rex.RB
    7b43:	4e 56                	rex.WRX push %rsi
    7b45:	5f                   	pop    %rdi
    7b46:	47                   	rex.RXB
    7b47:	43                   	rex.XB
    7b48:	4e 54                	rex.WRX push %rsp
	...

0000000000007b4b <.serverSetupError>:
    7b4b:	20 53 65             	and    %dl,0x65(%rbx)
    7b4e:	72 76                	jb     7bc6 <_storeEdge+0x1e>
    7b50:	65 72 20             	gs jb  7b73 <.serverSetupError+0x28>
    7b53:	53                   	push   %rbx
    7b54:	65 74 75             	gs je  7bcc <_storeEdge+0x24>
    7b57:	70 20                	jo     7b79 <.serverSetupError+0x2e>
    7b59:	45 72 72             	rex.RB jb 7bce <_storeEdge+0x26>
    7b5c:	6f                   	outsl  %ds:(%rsi),(%dx)
    7b5d:	72 2c                	jb     7b8b <.serverDied+0x9>
    7b5f:	20 63 6f             	and    %ah,0x6f(%rbx)
    7b62:	6e                   	outsb  %ds:(%rsi),(%dx)
    7b63:	74 69                	je     7bce <_storeEdge+0x26>
    7b65:	6e                   	outsb  %ds:(%rsi),(%dx)
    7b66:	75 65                	jne    7bcd <_storeEdge+0x25>
    7b68:	20 72 75             	and    %dh,0x75(%rdx)
    7b6b:	6e                   	outsb  %ds:(%rsi),(%dx)
    7b6c:	6e                   	outsb  %ds:(%rsi),(%dx)
    7b6d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    7b74:	6f                   	outsl  %ds:(%rsi),(%dx)
    7b75:	75 74                	jne    7beb <_storeEdge+0x43>
    7b77:	20 73 65             	and    %dh,0x65(%rbx)
    7b7a:	72 76                	jb     7bf2 <_caledgehash>
    7b7c:	65 72 20             	gs jb  7b9f <.debug+0xa>
    7b7f:	0a 20                	or     (%rax),%ah
	...

0000000000007b82 <.serverDied>:
    7b82:	20 53 65             	and    %dl,0x65(%rbx)
    7b85:	72 76                	jb     7bfd <_caledgehash+0xb>
    7b87:	65 72 20             	gs jb  7baa <_storeEdge+0x2>
    7b8a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    7b91:	20 0a                	and    %cl,(%rdx)
    7b93:	20 00                	and    %al,(%rax)

0000000000007b95 <.debug>:
    7b95:	64 65 62             	fs gs (bad) 
    7b98:	75 67                	jne    7c01 <_caledgehash+0xf>
    7b9a:	20 6d 65             	and    %ch,0x65(%rbp)
    7b9d:	73 73                	jae    7c12 <_caledgehash+0x20>
    7b9f:	61                   	(bad)  
    7ba0:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    7ba4:	0a 20                	or     (%rax),%ah
    7ba6:	00                   	.byte 0x0
    7ba7:	90                   	nop

0000000000007ba8 <_storeEdge>:
    7ba8:	50                   	push   %rax
    7ba9:	53                   	push   %rbx
    7baa:	51                   	push   %rcx
    7bab:	52                   	push   %rdx
    7bac:	48 83 3d 9c bd 74 00 	cmpq   $0x1,0x74bd9c(%rip)        # 753950 <cmpPassed>
    7bb3:	01 
    7bb4:	75 3c                	jne    7bf2 <_caledgehash>
    7bb6:	48 c7 05 8f bd 74 00 	movq   $0x0,0x74bd8f(%rip)        # 753950 <cmpPassed>
    7bbd:	00 00 00 00 
    7bc1:	48 8b 05 60 60 5f 00 	mov    0x5f6060(%rip),%rax        # 5fdc28 <edgeCnt>
    7bc8:	48 c1 e0 03          	shl    $0x3,%rax
    7bcc:	48 3b 05 15 60 5f 00 	cmp    0x5f6015(%rip),%rax        # 5fdbe8 <shmSize2>
    7bd3:	77 55                	ja     7c2a <_shm2Full>
    7bd5:	48 8b 1d 34 bd 74 00 	mov    0x74bd34(%rip),%rbx        # 753910 <edgehash>
    7bdc:	48 8b 15 25 bd 74 00 	mov    0x74bd25(%rip),%rdx        # 753908 <shmptr_edge>
    7be3:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    7be7:	48 89 19             	mov    %rbx,(%rcx)
    7bea:	48 83 05 36 60 5f 00 	addq   $0x1,0x5f6036(%rip)        # 5fdc28 <edgeCnt>
    7bf1:	01 

0000000000007bf2 <_caledgehash>:
    7bf2:	48 8b 15 17 bd 74 00 	mov    0x74bd17(%rip),%rdx        # 753910 <edgehash>
    7bf9:	48 89 d0             	mov    %rdx,%rax
    7bfc:	48 c1 e0 05          	shl    $0x5,%rax
    7c00:	48 01 c2             	add    %rax,%rdx
    7c03:	48 8b 05 36 bd 74 00 	mov    0x74bd36(%rip),%rax        # 753940 <edgeId>
    7c0a:	48 01 d0             	add    %rdx,%rax
    7c0d:	48 89 05 fc bc 74 00 	mov    %rax,0x74bcfc(%rip)        # 753910 <edgehash>
    7c14:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    7c1b:	00 00 00 
    7c1e:	48 21 05 eb bc 74 00 	and    %rax,0x74bceb(%rip)        # 753910 <edgehash>
    7c25:	5a                   	pop    %rdx
    7c26:	59                   	pop    %rcx
    7c27:	5b                   	pop    %rbx
    7c28:	58                   	pop    %rax
    7c29:	c3                   	retq   

0000000000007c2a <_shm2Full>:
    7c2a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    7c31:	5a                   	pop    %rdx
    7c32:	59                   	pop    %rcx
    7c33:	5b                   	pop    %rbx
    7c34:	58                   	pop    %rax
    7c35:	e8 76 9c ff ff       	callq  18b0 <_exit@plt>
    7c3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000007c40 <_storeDataFn>:
    7c40:	55                   	push   %rbp
    7c41:	48 89 e5             	mov    %rsp,%rbp
    7c44:	50                   	push   %rax
    7c45:	53                   	push   %rbx
    7c46:	41 50                	push   %r8
    7c48:	41 51                	push   %r9
    7c4a:	41 52                	push   %r10
    7c4c:	48 8b 05 e5 bc 74 00 	mov    0x74bce5(%rip),%rax        # 753938 <shmptr_gcnt>
    7c53:	48 8b 00             	mov    (%rax),%rax
    7c56:	48 c1 e0 03          	shl    $0x3,%rax
    7c5a:	48 83 c0 30          	add    $0x30,%rax
    7c5e:	48 3b 05 e3 bc 74 00 	cmp    0x74bce3(%rip),%rax        # 753948 <shmSize>
    7c65:	0f 83 8f 01 00 00    	jae    7dfa <_shmFull>
    7c6b:	48 83 3d bd bc 74 00 	cmpq   $0x0,0x74bcbd(%rip)        # 753930 <shmptr_cmp>
    7c72:	00 
    7c73:	0f 84 99 01 00 00    	je     7e12 <_shmUninitialize>
    7c79:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    7c80:	48 83 e8 30          	sub    $0x30,%rax
    7c84:	48 c1 e8 03          	shr    $0x3,%rax

0000000000007c88 <_storeloop>:
    7c88:	49 89 c2             	mov    %rax,%r10
    7c8b:	49 c1 e2 03          	shl    $0x3,%r10
    7c8f:	4c 03 15 9a bc 74 00 	add    0x74bc9a(%rip),%r10        # 753930 <shmptr_cmp>
    7c96:	49 89 d9             	mov    %rbx,%r9
    7c99:	49 c1 e1 03          	shl    $0x3,%r9
    7c9d:	4c 8d 05 4c 5f 5f 00 	lea    0x5f5f4c(%rip),%r8        # 5fdbf0 <funcinptr>
    7ca4:	4d 01 c1             	add    %r8,%r9
    7ca7:	4d 8b 01             	mov    (%r9),%r8
    7caa:	4d 89 02             	mov    %r8,(%r10)
    7cad:	48 83 fb 00          	cmp    $0x0,%rbx
    7cb1:	75 07                	jne    7cba <_no_get_cmpid>
    7cb3:	4c 89 05 6e bc 74 00 	mov    %r8,0x74bc6e(%rip)        # 753928 <cmpid>

0000000000007cba <_no_get_cmpid>:
    7cba:	48 ff c0             	inc    %rax
    7cbd:	48 ff c3             	inc    %rbx
    7cc0:	48 83 fb 06          	cmp    $0x6,%rbx
    7cc4:	75 c2                	jne    7c88 <_storeloop>
    7cc6:	48 8b 1d 6b bc 74 00 	mov    0x74bc6b(%rip),%rbx        # 753938 <shmptr_gcnt>
    7ccd:	48 89 03             	mov    %rax,(%rbx)
    7cd0:	48 8b 05 51 bc 74 00 	mov    0x74bc51(%rip),%rax        # 753928 <cmpid>
    7cd7:	48 c1 e0 04          	shl    $0x4,%rax
    7cdb:	48 89 c3             	mov    %rax,%rbx
    7cde:	48 83 c3 08          	add    $0x8,%rbx
    7ce2:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    7ce9:	0f 83 17 01 00 00    	jae    7e06 <_cmpdictFull>
    7cef:	48 8d 1d 4a 5f 5f 00 	lea    0x5f5f4a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    7cf6:	48 01 d8             	add    %rbx,%rax
    7cf9:	48 83 38 00          	cmpq   $0x0,(%rax)
    7cfd:	0f 84 db 00 00 00    	je     7dde <_insert_entry>
    7d03:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000007d0a <_remove_repeated_cycle>:
    7d0a:	4d 89 c1             	mov    %r8,%r9
    7d0d:	4d 89 ca             	mov    %r9,%r10
    7d10:	49 c1 e1 02          	shl    $0x2,%r9
    7d14:	4d 01 d1             	add    %r10,%r9
    7d17:	4d 01 d1             	add    %r10,%r9
    7d1a:	4c 8b 15 17 bc 74 00 	mov    0x74bc17(%rip),%r10        # 753938 <shmptr_gcnt>
    7d21:	4d 8b 12             	mov    (%r10),%r10
    7d24:	4c 2b 10             	sub    (%rax),%r10
    7d27:	4c 3b 10             	cmp    (%rax),%r10
    7d2a:	0f 87 9f 00 00 00    	ja     7dcf <_no_remove_cycle>
    7d30:	4d 39 ca             	cmp    %r9,%r10
    7d33:	76 67                	jbe    7d9c <_remove_cycle>
    7d35:	4d 89 c1             	mov    %r8,%r9
    7d38:	49 83 c1 01          	add    $0x1,%r9
    7d3c:	4d 89 ca             	mov    %r9,%r10
    7d3f:	49 c1 e1 02          	shl    $0x2,%r9
    7d43:	4d 01 d1             	add    %r10,%r9
    7d46:	4d 01 d1             	add    %r10,%r9
    7d49:	4c 8b 15 e8 bb 74 00 	mov    0x74bbe8(%rip),%r10        # 753938 <shmptr_gcnt>
    7d50:	4d 8b 12             	mov    (%r10),%r10
    7d53:	4d 29 ca             	sub    %r9,%r10
    7d56:	49 c1 e2 03          	shl    $0x3,%r10
    7d5a:	4c 8b 0d cf bb 74 00 	mov    0x74bbcf(%rip),%r9        # 753930 <shmptr_cmp>
    7d61:	4d 01 d1             	add    %r10,%r9
    7d64:	49 8b 19             	mov    (%r9),%rbx
    7d67:	4d 89 c1             	mov    %r8,%r9
    7d6a:	49 83 c1 01          	add    $0x1,%r9
    7d6e:	4d 89 ca             	mov    %r9,%r10
    7d71:	49 c1 e1 02          	shl    $0x2,%r9
    7d75:	4d 01 d1             	add    %r10,%r9
    7d78:	4d 01 d1             	add    %r10,%r9
    7d7b:	4c 8b 10             	mov    (%rax),%r10
    7d7e:	4d 29 ca             	sub    %r9,%r10
    7d81:	49 c1 e2 03          	shl    $0x3,%r10
    7d85:	4c 8b 0d a4 bb 74 00 	mov    0x74bba4(%rip),%r9        # 753930 <shmptr_cmp>
    7d8c:	4d 01 d1             	add    %r10,%r9
    7d8f:	49 3b 19             	cmp    (%r9),%rbx
    7d92:	75 3b                	jne    7dcf <_no_remove_cycle>
    7d94:	49 ff c0             	inc    %r8
    7d97:	e9 6e ff ff ff       	jmpq   7d0a <_remove_repeated_cycle>

0000000000007d9c <_remove_cycle>:
    7d9c:	48 89 15 75 bb 74 00 	mov    %rdx,0x74bb75(%rip)        # 753918 <tmpquadone>
    7da3:	48 8b 10             	mov    (%rax),%rdx
    7da6:	48 8b 05 8b bb 74 00 	mov    0x74bb8b(%rip),%rax        # 753938 <shmptr_gcnt>
    7dad:	48 89 10             	mov    %rdx,(%rax)
    7db0:	89 d0                	mov    %edx,%eax
    7db2:	48 c1 ea 20          	shr    $0x20,%rdx
    7db6:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    7dbd:	49 f7 f0             	div    %r8
    7dc0:	89 05 62 5e 5f 00    	mov    %eax,0x5f5e62(%rip)        # 5fdc28 <edgeCnt>
    7dc6:	48 8b 15 4b bb 74 00 	mov    0x74bb4b(%rip),%rdx        # 753918 <tmpquadone>
    7dcd:	eb 1c                	jmp    7deb <_skipstoredata>

0000000000007dcf <_no_remove_cycle>:
    7dcf:	48 8b 1d 62 bb 74 00 	mov    0x74bb62(%rip),%rbx        # 753938 <shmptr_gcnt>
    7dd6:	48 8b 1b             	mov    (%rbx),%rbx
    7dd9:	48 89 18             	mov    %rbx,(%rax)
    7ddc:	eb 0d                	jmp    7deb <_skipstoredata>

0000000000007dde <_insert_entry>:
    7dde:	48 8b 1d 53 bb 74 00 	mov    0x74bb53(%rip),%rbx        # 753938 <shmptr_gcnt>
    7de5:	48 8b 1b             	mov    (%rbx),%rbx
    7de8:	48 89 18             	mov    %rbx,(%rax)

0000000000007deb <_skipstoredata>:
    7deb:	41 5a                	pop    %r10
    7ded:	41 59                	pop    %r9
    7def:	41 58                	pop    %r8
    7df1:	5b                   	pop    %rbx
    7df2:	58                   	pop    %rax
    7df3:	48 89 ec             	mov    %rbp,%rsp
    7df6:	5d                   	pop    %rbp
    7df7:	c2 08 00             	retq   $0x8

0000000000007dfa <_shmFull>:
    7dfa:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    7e01:	e8 aa 9a ff ff       	callq  18b0 <_exit@plt>

0000000000007e06 <_cmpdictFull>:
    7e06:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    7e0d:	e8 9e 9a ff ff       	callq  18b0 <_exit@plt>

0000000000007e12 <_shmUninitialize>:
    7e12:	48 89 ec             	mov    %rbp,%rsp
    7e15:	5d                   	pop    %rbp
    7e16:	48 31 c0             	xor    %rax,%rax
    7e19:	c2 08 00             	retq   $0x8
    7e1c:	0f 1f 40 00          	nopl   0x0(%rax)
    7e20:	9f                   	lahf   
    7e21:	0f 90 c0             	seto   %al
    7e24:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007e28 <__afl_setup_first>:
    7e28:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    7e2f:	ff 
    7e30:	48 89 04 24          	mov    %rax,(%rsp)
    7e34:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7e39:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    7e3e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    7e43:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    7e48:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    7e4d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    7e52:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    7e57:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    7e5d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    7e63:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    7e6a:	00 00 
    7e6c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    7e73:	00 00 
    7e75:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    7e7c:	00 00 
    7e7e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    7e85:	00 00 
    7e87:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    7e8e:	00 00 
    7e90:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    7e97:	00 00 
    7e99:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    7ea0:	00 00 00 
    7ea3:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    7eaa:	00 00 00 
    7ead:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    7eb4:	01 00 00 
    7eb7:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    7ebe:	01 00 00 
    7ec1:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    7ec8:	01 00 00 
    7ecb:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    7ed2:	01 00 00 
    7ed5:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    7edc:	01 00 00 
    7edf:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    7ee6:	01 00 00 
    7ee9:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    7ef0:	00 
    7ef1:	41 54                	push   %r12
    7ef3:	49 89 e4             	mov    %rsp,%r12
    7ef6:	48 83 ec 10          	sub    $0x10,%rsp
    7efa:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    7efe:	48 c7 05 3f ba 74 00 	movq   $0x100000,0x74ba3f(%rip)        # 753948 <shmSize>
    7f05:	00 00 10 00 
    7f09:	48 c7 05 d4 5c 5f 00 	movq   $0x100000,0x5f5cd4(%rip)        # 5fdbe8 <shmSize2>
    7f10:	00 00 10 00 
    7f14:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 8266 <.SHM_ENV_GCNT>
    7f1b:	e8 40 99 ff ff       	callq  1860 <getenv@plt>
    7f20:	48 85 c0             	test   %rax,%rax
    7f23:	0f 84 6a 01 00 00    	je     8093 <__afl_setup_abort>
    7f29:	48 89 c7             	mov    %rax,%rdi
    7f2c:	e8 bf 9c ff ff       	callq  1bf0 <atoi@plt>
    7f31:	48 31 d2             	xor    %rdx,%rdx
    7f34:	48 31 f6             	xor    %rsi,%rsi
    7f37:	48 89 c7             	mov    %rax,%rdi
    7f3a:	e8 91 9c ff ff       	callq  1bd0 <shmat@plt>
    7f3f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    7f43:	0f 84 4a 01 00 00    	je     8093 <__afl_setup_abort>
    7f49:	48 89 05 e8 b9 74 00 	mov    %rax,0x74b9e8(%rip)        # 753938 <shmptr_gcnt>
    7f50:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 824d <.SHM_ENV_CMP>
    7f57:	e8 04 99 ff ff       	callq  1860 <getenv@plt>
    7f5c:	48 85 c0             	test   %rax,%rax
    7f5f:	0f 84 2e 01 00 00    	je     8093 <__afl_setup_abort>
    7f65:	48 89 c7             	mov    %rax,%rdi
    7f68:	e8 83 9c ff ff       	callq  1bf0 <atoi@plt>
    7f6d:	48 31 d2             	xor    %rdx,%rdx
    7f70:	48 31 f6             	xor    %rsi,%rsi
    7f73:	48 89 c7             	mov    %rax,%rdi
    7f76:	e8 55 9c ff ff       	callq  1bd0 <shmat@plt>
    7f7b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    7f7f:	0f 84 0e 01 00 00    	je     8093 <__afl_setup_abort>
    7f85:	48 89 05 a4 b9 74 00 	mov    %rax,0x74b9a4(%rip)        # 753930 <shmptr_cmp>
    7f8c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 8259 <.SHM_ENV_EDGE>
    7f93:	e8 c8 98 ff ff       	callq  1860 <getenv@plt>
    7f98:	48 85 c0             	test   %rax,%rax
    7f9b:	0f 84 f2 00 00 00    	je     8093 <__afl_setup_abort>
    7fa1:	48 89 c7             	mov    %rax,%rdi
    7fa4:	e8 47 9c ff ff       	callq  1bf0 <atoi@plt>
    7fa9:	48 31 d2             	xor    %rdx,%rdx
    7fac:	48 31 f6             	xor    %rsi,%rsi
    7faf:	48 89 c7             	mov    %rax,%rdi
    7fb2:	e8 19 9c ff ff       	callq  1bd0 <shmat@plt>
    7fb7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    7fbb:	0f 84 d2 00 00 00    	je     8093 <__afl_setup_abort>
    7fc1:	48 89 05 40 b9 74 00 	mov    %rax,0x74b940(%rip)        # 753908 <shmptr_edge>

0000000000007fc8 <__afl_forkserver>:
    7fc8:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    7fcf:	48 8d 35 ce 5b 5f 00 	lea    0x5f5bce(%rip),%rsi        # 5fdba4 <__afl_temp>
    7fd6:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    7fdd:	e8 ee 98 ff ff       	callq  18d0 <write@plt>
    7fe2:	48 83 f8 04          	cmp    $0x4,%rax
    7fe6:	0f 85 78 01 00 00    	jne    8164 <__afl_fork_resume>

0000000000007fec <__afl_fork_wait_loop>:
    7fec:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    7ff3:	48 8d 35 aa 5b 5f 00 	lea    0x5f5baa(%rip),%rsi        # 5fdba4 <__afl_temp>
    7ffa:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    8001:	e8 3a 9a ff ff       	callq  1a40 <read@plt>
    8006:	48 83 f8 04          	cmp    $0x4,%rax
    800a:	75 70                	jne    807c <__afl_die>
    800c:	e8 3f 9c ff ff       	callq  1c50 <fork@plt>
    8011:	48 83 f8 00          	cmp    $0x0,%rax
    8015:	7c 65                	jl     807c <__afl_die>
    8017:	0f 84 47 01 00 00    	je     8164 <__afl_fork_resume>
    801d:	89 05 7d 5b 5f 00    	mov    %eax,0x5f5b7d(%rip)        # 5fdba0 <__afl_fork_pid>
    8023:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    802a:	48 8d 35 6f 5b 5f 00 	lea    0x5f5b6f(%rip),%rsi        # 5fdba0 <__afl_fork_pid>
    8031:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8038:	e8 93 98 ff ff       	callq  18d0 <write@plt>
    803d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    8044:	48 8d 35 59 5b 5f 00 	lea    0x5f5b59(%rip),%rsi        # 5fdba4 <__afl_temp>
    804b:	48 8b 3d 4e 5b 5f 00 	mov    0x5f5b4e(%rip),%rdi        # 5fdba0 <__afl_fork_pid>
    8052:	e8 29 9b ff ff       	callq  1b80 <waitpid@plt>
    8057:	48 83 f8 00          	cmp    $0x0,%rax
    805b:	7e 1f                	jle    807c <__afl_die>
    805d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8064:	48 8d 35 39 5b 5f 00 	lea    0x5f5b39(%rip),%rsi        # 5fdba4 <__afl_temp>
    806b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8072:	e8 59 98 ff ff       	callq  18d0 <write@plt>
    8077:	e9 70 ff ff ff       	jmpq   7fec <__afl_fork_wait_loop>

000000000000807c <__afl_die>:
    807c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 82aa <.serverDied>
    8083:	48 31 c0             	xor    %rax,%rax
    8086:	e8 05 99 ff ff       	callq  1990 <printf@plt>
    808b:	48 31 c0             	xor    %rax,%rax
    808e:	e8 1d 98 ff ff       	callq  18b0 <_exit@plt>

0000000000008093 <__afl_setup_abort>:
    8093:	4c 89 e4             	mov    %r12,%rsp
    8096:	41 5c                	pop    %r12
    8098:	48 8b 04 24          	mov    (%rsp),%rax
    809c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    80a1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    80a6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    80ab:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    80b0:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    80b5:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    80ba:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    80bf:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    80c5:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    80cb:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    80d2:	00 00 
    80d4:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    80db:	00 00 
    80dd:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    80e4:	00 00 
    80e6:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    80ed:	00 00 
    80ef:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    80f6:	00 00 
    80f8:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    80ff:	00 00 
    8101:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    8108:	00 00 00 
    810b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    8112:	00 00 00 
    8115:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    811c:	01 00 00 
    811f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    8126:	01 00 00 
    8129:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    8130:	01 00 00 
    8133:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    813a:	01 00 00 
    813d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    8144:	01 00 00 
    8147:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    814e:	01 00 00 
    8151:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    8158:	00 
    8159:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    8160:	00 
    8161:	b0 7f                	mov    $0x7f,%al
    8163:	c3                   	retq   

0000000000008164 <__afl_fork_resume>:
    8164:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    816b:	e8 a0 98 ff ff       	callq  1a10 <close@plt>
    8170:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8177:	e8 94 98 ff ff       	callq  1a10 <close@plt>
    817c:	4c 89 e4             	mov    %r12,%rsp
    817f:	41 5c                	pop    %r12
    8181:	48 8b 04 24          	mov    (%rsp),%rax
    8185:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    818a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    818f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    8194:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    8199:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    819e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    81a3:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    81a8:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    81ae:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    81b4:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    81bb:	00 00 
    81bd:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    81c4:	00 00 
    81c6:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    81cd:	00 00 
    81cf:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    81d6:	00 00 
    81d8:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    81df:	00 00 
    81e1:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    81e8:	00 00 
    81ea:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    81f1:	00 00 00 
    81f4:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    81fb:	00 00 00 
    81fe:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    8205:	01 00 00 
    8208:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    820f:	01 00 00 
    8212:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    8219:	01 00 00 
    821c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    8223:	01 00 00 
    8226:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    822d:	01 00 00 
    8230:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    8237:	01 00 00 
    823a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    8241:	00 
    8242:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    8249:	00 
    824a:	b0 00                	mov    $0x0,%al
    824c:	c3                   	retq   

000000000000824d <.SHM_ENV_CMP>:
    824d:	53                   	push   %rbx
    824e:	48                   	rex.W
    824f:	4d 5f                	rex.WRB pop %r15
    8251:	45                   	rex.RB
    8252:	4e 56                	rex.WRX push %rsi
    8254:	5f                   	pop    %rdi
    8255:	43                   	rex.XB
    8256:	4d 50                	rex.WRB push %r8
	...

0000000000008259 <.SHM_ENV_EDGE>:
    8259:	53                   	push   %rbx
    825a:	48                   	rex.W
    825b:	4d 5f                	rex.WRB pop %r15
    825d:	45                   	rex.RB
    825e:	4e 56                	rex.WRX push %rsi
    8260:	5f                   	pop    %rdi
    8261:	45                   	rex.RB
    8262:	44                   	rex.R
    8263:	47                   	rex.RXB
    8264:	45                   	rex.RB
	...

0000000000008266 <.SHM_ENV_GCNT>:
    8266:	53                   	push   %rbx
    8267:	48                   	rex.W
    8268:	4d 5f                	rex.WRB pop %r15
    826a:	45                   	rex.RB
    826b:	4e 56                	rex.WRX push %rsi
    826d:	5f                   	pop    %rdi
    826e:	47                   	rex.RXB
    826f:	43                   	rex.XB
    8270:	4e 54                	rex.WRX push %rsp
	...

0000000000008273 <.serverSetupError>:
    8273:	20 53 65             	and    %dl,0x65(%rbx)
    8276:	72 76                	jb     82ee <_storeEdge+0x1e>
    8278:	65 72 20             	gs jb  829b <.serverSetupError+0x28>
    827b:	53                   	push   %rbx
    827c:	65 74 75             	gs je  82f4 <_storeEdge+0x24>
    827f:	70 20                	jo     82a1 <.serverSetupError+0x2e>
    8281:	45 72 72             	rex.RB jb 82f6 <_storeEdge+0x26>
    8284:	6f                   	outsl  %ds:(%rsi),(%dx)
    8285:	72 2c                	jb     82b3 <.serverDied+0x9>
    8287:	20 63 6f             	and    %ah,0x6f(%rbx)
    828a:	6e                   	outsb  %ds:(%rsi),(%dx)
    828b:	74 69                	je     82f6 <_storeEdge+0x26>
    828d:	6e                   	outsb  %ds:(%rsi),(%dx)
    828e:	75 65                	jne    82f5 <_storeEdge+0x25>
    8290:	20 72 75             	and    %dh,0x75(%rdx)
    8293:	6e                   	outsb  %ds:(%rsi),(%dx)
    8294:	6e                   	outsb  %ds:(%rsi),(%dx)
    8295:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    829c:	6f                   	outsl  %ds:(%rsi),(%dx)
    829d:	75 74                	jne    8313 <_storeEdge+0x43>
    829f:	20 73 65             	and    %dh,0x65(%rbx)
    82a2:	72 76                	jb     831a <_caledgehash>
    82a4:	65 72 20             	gs jb  82c7 <.debug+0xa>
    82a7:	0a 20                	or     (%rax),%ah
	...

00000000000082aa <.serverDied>:
    82aa:	20 53 65             	and    %dl,0x65(%rbx)
    82ad:	72 76                	jb     8325 <_caledgehash+0xb>
    82af:	65 72 20             	gs jb  82d2 <_storeEdge+0x2>
    82b2:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    82b9:	20 0a                	and    %cl,(%rdx)
    82bb:	20 00                	and    %al,(%rax)

00000000000082bd <.debug>:
    82bd:	64 65 62             	fs gs (bad) 
    82c0:	75 67                	jne    8329 <_caledgehash+0xf>
    82c2:	20 6d 65             	and    %ch,0x65(%rbp)
    82c5:	73 73                	jae    833a <_caledgehash+0x20>
    82c7:	61                   	(bad)  
    82c8:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    82cc:	0a 20                	or     (%rax),%ah
    82ce:	00                   	.byte 0x0
    82cf:	90                   	nop

00000000000082d0 <_storeEdge>:
    82d0:	50                   	push   %rax
    82d1:	53                   	push   %rbx
    82d2:	51                   	push   %rcx
    82d3:	52                   	push   %rdx
    82d4:	48 83 3d 74 b6 74 00 	cmpq   $0x1,0x74b674(%rip)        # 753950 <cmpPassed>
    82db:	01 
    82dc:	75 3c                	jne    831a <_caledgehash>
    82de:	48 c7 05 67 b6 74 00 	movq   $0x0,0x74b667(%rip)        # 753950 <cmpPassed>
    82e5:	00 00 00 00 
    82e9:	48 8b 05 38 59 5f 00 	mov    0x5f5938(%rip),%rax        # 5fdc28 <edgeCnt>
    82f0:	48 c1 e0 03          	shl    $0x3,%rax
    82f4:	48 3b 05 ed 58 5f 00 	cmp    0x5f58ed(%rip),%rax        # 5fdbe8 <shmSize2>
    82fb:	77 55                	ja     8352 <_shm2Full>
    82fd:	48 8b 1d 0c b6 74 00 	mov    0x74b60c(%rip),%rbx        # 753910 <edgehash>
    8304:	48 8b 15 fd b5 74 00 	mov    0x74b5fd(%rip),%rdx        # 753908 <shmptr_edge>
    830b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    830f:	48 89 19             	mov    %rbx,(%rcx)
    8312:	48 83 05 0e 59 5f 00 	addq   $0x1,0x5f590e(%rip)        # 5fdc28 <edgeCnt>
    8319:	01 

000000000000831a <_caledgehash>:
    831a:	48 8b 15 ef b5 74 00 	mov    0x74b5ef(%rip),%rdx        # 753910 <edgehash>
    8321:	48 89 d0             	mov    %rdx,%rax
    8324:	48 c1 e0 05          	shl    $0x5,%rax
    8328:	48 01 c2             	add    %rax,%rdx
    832b:	48 8b 05 0e b6 74 00 	mov    0x74b60e(%rip),%rax        # 753940 <edgeId>
    8332:	48 01 d0             	add    %rdx,%rax
    8335:	48 89 05 d4 b5 74 00 	mov    %rax,0x74b5d4(%rip)        # 753910 <edgehash>
    833c:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    8343:	00 00 00 
    8346:	48 21 05 c3 b5 74 00 	and    %rax,0x74b5c3(%rip)        # 753910 <edgehash>
    834d:	5a                   	pop    %rdx
    834e:	59                   	pop    %rcx
    834f:	5b                   	pop    %rbx
    8350:	58                   	pop    %rax
    8351:	c3                   	retq   

0000000000008352 <_shm2Full>:
    8352:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    8359:	5a                   	pop    %rdx
    835a:	59                   	pop    %rcx
    835b:	5b                   	pop    %rbx
    835c:	58                   	pop    %rax
    835d:	e8 4e 95 ff ff       	callq  18b0 <_exit@plt>
    8362:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000008368 <_storeDataFn>:
    8368:	55                   	push   %rbp
    8369:	48 89 e5             	mov    %rsp,%rbp
    836c:	50                   	push   %rax
    836d:	53                   	push   %rbx
    836e:	41 50                	push   %r8
    8370:	41 51                	push   %r9
    8372:	41 52                	push   %r10
    8374:	48 8b 05 bd b5 74 00 	mov    0x74b5bd(%rip),%rax        # 753938 <shmptr_gcnt>
    837b:	48 8b 00             	mov    (%rax),%rax
    837e:	48 c1 e0 03          	shl    $0x3,%rax
    8382:	48 83 c0 30          	add    $0x30,%rax
    8386:	48 3b 05 bb b5 74 00 	cmp    0x74b5bb(%rip),%rax        # 753948 <shmSize>
    838d:	0f 83 8f 01 00 00    	jae    8522 <_shmFull>
    8393:	48 83 3d 95 b5 74 00 	cmpq   $0x0,0x74b595(%rip)        # 753930 <shmptr_cmp>
    839a:	00 
    839b:	0f 84 99 01 00 00    	je     853a <_shmUninitialize>
    83a1:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    83a8:	48 83 e8 30          	sub    $0x30,%rax
    83ac:	48 c1 e8 03          	shr    $0x3,%rax

00000000000083b0 <_storeloop>:
    83b0:	49 89 c2             	mov    %rax,%r10
    83b3:	49 c1 e2 03          	shl    $0x3,%r10
    83b7:	4c 03 15 72 b5 74 00 	add    0x74b572(%rip),%r10        # 753930 <shmptr_cmp>
    83be:	49 89 d9             	mov    %rbx,%r9
    83c1:	49 c1 e1 03          	shl    $0x3,%r9
    83c5:	4c 8d 05 24 58 5f 00 	lea    0x5f5824(%rip),%r8        # 5fdbf0 <funcinptr>
    83cc:	4d 01 c1             	add    %r8,%r9
    83cf:	4d 8b 01             	mov    (%r9),%r8
    83d2:	4d 89 02             	mov    %r8,(%r10)
    83d5:	48 83 fb 00          	cmp    $0x0,%rbx
    83d9:	75 07                	jne    83e2 <_no_get_cmpid>
    83db:	4c 89 05 46 b5 74 00 	mov    %r8,0x74b546(%rip)        # 753928 <cmpid>

00000000000083e2 <_no_get_cmpid>:
    83e2:	48 ff c0             	inc    %rax
    83e5:	48 ff c3             	inc    %rbx
    83e8:	48 83 fb 06          	cmp    $0x6,%rbx
    83ec:	75 c2                	jne    83b0 <_storeloop>
    83ee:	48 8b 1d 43 b5 74 00 	mov    0x74b543(%rip),%rbx        # 753938 <shmptr_gcnt>
    83f5:	48 89 03             	mov    %rax,(%rbx)
    83f8:	48 8b 05 29 b5 74 00 	mov    0x74b529(%rip),%rax        # 753928 <cmpid>
    83ff:	48 c1 e0 04          	shl    $0x4,%rax
    8403:	48 89 c3             	mov    %rax,%rbx
    8406:	48 83 c3 08          	add    $0x8,%rbx
    840a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    8411:	0f 83 17 01 00 00    	jae    852e <_cmpdictFull>
    8417:	48 8d 1d 22 58 5f 00 	lea    0x5f5822(%rip),%rbx        # 5fdc40 <cmpid_dict>
    841e:	48 01 d8             	add    %rbx,%rax
    8421:	48 83 38 00          	cmpq   $0x0,(%rax)
    8425:	0f 84 db 00 00 00    	je     8506 <_insert_entry>
    842b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000008432 <_remove_repeated_cycle>:
    8432:	4d 89 c1             	mov    %r8,%r9
    8435:	4d 89 ca             	mov    %r9,%r10
    8438:	49 c1 e1 02          	shl    $0x2,%r9
    843c:	4d 01 d1             	add    %r10,%r9
    843f:	4d 01 d1             	add    %r10,%r9
    8442:	4c 8b 15 ef b4 74 00 	mov    0x74b4ef(%rip),%r10        # 753938 <shmptr_gcnt>
    8449:	4d 8b 12             	mov    (%r10),%r10
    844c:	4c 2b 10             	sub    (%rax),%r10
    844f:	4c 3b 10             	cmp    (%rax),%r10
    8452:	0f 87 9f 00 00 00    	ja     84f7 <_no_remove_cycle>
    8458:	4d 39 ca             	cmp    %r9,%r10
    845b:	76 67                	jbe    84c4 <_remove_cycle>
    845d:	4d 89 c1             	mov    %r8,%r9
    8460:	49 83 c1 01          	add    $0x1,%r9
    8464:	4d 89 ca             	mov    %r9,%r10
    8467:	49 c1 e1 02          	shl    $0x2,%r9
    846b:	4d 01 d1             	add    %r10,%r9
    846e:	4d 01 d1             	add    %r10,%r9
    8471:	4c 8b 15 c0 b4 74 00 	mov    0x74b4c0(%rip),%r10        # 753938 <shmptr_gcnt>
    8478:	4d 8b 12             	mov    (%r10),%r10
    847b:	4d 29 ca             	sub    %r9,%r10
    847e:	49 c1 e2 03          	shl    $0x3,%r10
    8482:	4c 8b 0d a7 b4 74 00 	mov    0x74b4a7(%rip),%r9        # 753930 <shmptr_cmp>
    8489:	4d 01 d1             	add    %r10,%r9
    848c:	49 8b 19             	mov    (%r9),%rbx
    848f:	4d 89 c1             	mov    %r8,%r9
    8492:	49 83 c1 01          	add    $0x1,%r9
    8496:	4d 89 ca             	mov    %r9,%r10
    8499:	49 c1 e1 02          	shl    $0x2,%r9
    849d:	4d 01 d1             	add    %r10,%r9
    84a0:	4d 01 d1             	add    %r10,%r9
    84a3:	4c 8b 10             	mov    (%rax),%r10
    84a6:	4d 29 ca             	sub    %r9,%r10
    84a9:	49 c1 e2 03          	shl    $0x3,%r10
    84ad:	4c 8b 0d 7c b4 74 00 	mov    0x74b47c(%rip),%r9        # 753930 <shmptr_cmp>
    84b4:	4d 01 d1             	add    %r10,%r9
    84b7:	49 3b 19             	cmp    (%r9),%rbx
    84ba:	75 3b                	jne    84f7 <_no_remove_cycle>
    84bc:	49 ff c0             	inc    %r8
    84bf:	e9 6e ff ff ff       	jmpq   8432 <_remove_repeated_cycle>

00000000000084c4 <_remove_cycle>:
    84c4:	48 89 15 4d b4 74 00 	mov    %rdx,0x74b44d(%rip)        # 753918 <tmpquadone>
    84cb:	48 8b 10             	mov    (%rax),%rdx
    84ce:	48 8b 05 63 b4 74 00 	mov    0x74b463(%rip),%rax        # 753938 <shmptr_gcnt>
    84d5:	48 89 10             	mov    %rdx,(%rax)
    84d8:	89 d0                	mov    %edx,%eax
    84da:	48 c1 ea 20          	shr    $0x20,%rdx
    84de:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    84e5:	49 f7 f0             	div    %r8
    84e8:	89 05 3a 57 5f 00    	mov    %eax,0x5f573a(%rip)        # 5fdc28 <edgeCnt>
    84ee:	48 8b 15 23 b4 74 00 	mov    0x74b423(%rip),%rdx        # 753918 <tmpquadone>
    84f5:	eb 1c                	jmp    8513 <_skipstoredata>

00000000000084f7 <_no_remove_cycle>:
    84f7:	48 8b 1d 3a b4 74 00 	mov    0x74b43a(%rip),%rbx        # 753938 <shmptr_gcnt>
    84fe:	48 8b 1b             	mov    (%rbx),%rbx
    8501:	48 89 18             	mov    %rbx,(%rax)
    8504:	eb 0d                	jmp    8513 <_skipstoredata>

0000000000008506 <_insert_entry>:
    8506:	48 8b 1d 2b b4 74 00 	mov    0x74b42b(%rip),%rbx        # 753938 <shmptr_gcnt>
    850d:	48 8b 1b             	mov    (%rbx),%rbx
    8510:	48 89 18             	mov    %rbx,(%rax)

0000000000008513 <_skipstoredata>:
    8513:	41 5a                	pop    %r10
    8515:	41 59                	pop    %r9
    8517:	41 58                	pop    %r8
    8519:	5b                   	pop    %rbx
    851a:	58                   	pop    %rax
    851b:	48 89 ec             	mov    %rbp,%rsp
    851e:	5d                   	pop    %rbp
    851f:	c2 08 00             	retq   $0x8

0000000000008522 <_shmFull>:
    8522:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    8529:	e8 82 93 ff ff       	callq  18b0 <_exit@plt>

000000000000852e <_cmpdictFull>:
    852e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    8535:	e8 76 93 ff ff       	callq  18b0 <_exit@plt>

000000000000853a <_shmUninitialize>:
    853a:	48 89 ec             	mov    %rbp,%rsp
    853d:	5d                   	pop    %rbp
    853e:	48 31 c0             	xor    %rax,%rax
    8541:	c2 08 00             	retq   $0x8
    8544:	0f 1f 40 00          	nopl   0x0(%rax)
    8548:	9f                   	lahf   
    8549:	0f 90 c0             	seto   %al
    854c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008550 <__afl_setup_first>:
    8550:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    8557:	ff 
    8558:	48 89 04 24          	mov    %rax,(%rsp)
    855c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8561:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    8566:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    856b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    8570:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    8575:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    857a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    857f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    8585:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    858b:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    8592:	00 00 
    8594:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    859b:	00 00 
    859d:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    85a4:	00 00 
    85a6:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    85ad:	00 00 
    85af:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    85b6:	00 00 
    85b8:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    85bf:	00 00 
    85c1:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    85c8:	00 00 00 
    85cb:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    85d2:	00 00 00 
    85d5:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    85dc:	01 00 00 
    85df:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    85e6:	01 00 00 
    85e9:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    85f0:	01 00 00 
    85f3:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    85fa:	01 00 00 
    85fd:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    8604:	01 00 00 
    8607:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    860e:	01 00 00 
    8611:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    8618:	00 
    8619:	41 54                	push   %r12
    861b:	49 89 e4             	mov    %rsp,%r12
    861e:	48 83 ec 10          	sub    $0x10,%rsp
    8622:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    8626:	48 c7 05 17 b3 74 00 	movq   $0x100000,0x74b317(%rip)        # 753948 <shmSize>
    862d:	00 00 10 00 
    8631:	48 c7 05 ac 55 5f 00 	movq   $0x100000,0x5f55ac(%rip)        # 5fdbe8 <shmSize2>
    8638:	00 00 10 00 
    863c:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 898e <.SHM_ENV_GCNT>
    8643:	e8 18 92 ff ff       	callq  1860 <getenv@plt>
    8648:	48 85 c0             	test   %rax,%rax
    864b:	0f 84 6a 01 00 00    	je     87bb <__afl_setup_abort>
    8651:	48 89 c7             	mov    %rax,%rdi
    8654:	e8 97 95 ff ff       	callq  1bf0 <atoi@plt>
    8659:	48 31 d2             	xor    %rdx,%rdx
    865c:	48 31 f6             	xor    %rsi,%rsi
    865f:	48 89 c7             	mov    %rax,%rdi
    8662:	e8 69 95 ff ff       	callq  1bd0 <shmat@plt>
    8667:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    866b:	0f 84 4a 01 00 00    	je     87bb <__afl_setup_abort>
    8671:	48 89 05 c0 b2 74 00 	mov    %rax,0x74b2c0(%rip)        # 753938 <shmptr_gcnt>
    8678:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 8975 <.SHM_ENV_CMP>
    867f:	e8 dc 91 ff ff       	callq  1860 <getenv@plt>
    8684:	48 85 c0             	test   %rax,%rax
    8687:	0f 84 2e 01 00 00    	je     87bb <__afl_setup_abort>
    868d:	48 89 c7             	mov    %rax,%rdi
    8690:	e8 5b 95 ff ff       	callq  1bf0 <atoi@plt>
    8695:	48 31 d2             	xor    %rdx,%rdx
    8698:	48 31 f6             	xor    %rsi,%rsi
    869b:	48 89 c7             	mov    %rax,%rdi
    869e:	e8 2d 95 ff ff       	callq  1bd0 <shmat@plt>
    86a3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    86a7:	0f 84 0e 01 00 00    	je     87bb <__afl_setup_abort>
    86ad:	48 89 05 7c b2 74 00 	mov    %rax,0x74b27c(%rip)        # 753930 <shmptr_cmp>
    86b4:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 8981 <.SHM_ENV_EDGE>
    86bb:	e8 a0 91 ff ff       	callq  1860 <getenv@plt>
    86c0:	48 85 c0             	test   %rax,%rax
    86c3:	0f 84 f2 00 00 00    	je     87bb <__afl_setup_abort>
    86c9:	48 89 c7             	mov    %rax,%rdi
    86cc:	e8 1f 95 ff ff       	callq  1bf0 <atoi@plt>
    86d1:	48 31 d2             	xor    %rdx,%rdx
    86d4:	48 31 f6             	xor    %rsi,%rsi
    86d7:	48 89 c7             	mov    %rax,%rdi
    86da:	e8 f1 94 ff ff       	callq  1bd0 <shmat@plt>
    86df:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    86e3:	0f 84 d2 00 00 00    	je     87bb <__afl_setup_abort>
    86e9:	48 89 05 18 b2 74 00 	mov    %rax,0x74b218(%rip)        # 753908 <shmptr_edge>

00000000000086f0 <__afl_forkserver>:
    86f0:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    86f7:	48 8d 35 ae 54 5f 00 	lea    0x5f54ae(%rip),%rsi        # 5fdbac <__afl_temp>
    86fe:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8705:	e8 c6 91 ff ff       	callq  18d0 <write@plt>
    870a:	48 83 f8 04          	cmp    $0x4,%rax
    870e:	0f 85 78 01 00 00    	jne    888c <__afl_fork_resume>

0000000000008714 <__afl_fork_wait_loop>:
    8714:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    871b:	48 8d 35 8a 54 5f 00 	lea    0x5f548a(%rip),%rsi        # 5fdbac <__afl_temp>
    8722:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    8729:	e8 12 93 ff ff       	callq  1a40 <read@plt>
    872e:	48 83 f8 04          	cmp    $0x4,%rax
    8732:	75 70                	jne    87a4 <__afl_die>
    8734:	e8 17 95 ff ff       	callq  1c50 <fork@plt>
    8739:	48 83 f8 00          	cmp    $0x0,%rax
    873d:	7c 65                	jl     87a4 <__afl_die>
    873f:	0f 84 47 01 00 00    	je     888c <__afl_fork_resume>
    8745:	89 05 5d 54 5f 00    	mov    %eax,0x5f545d(%rip)        # 5fdba8 <__afl_fork_pid>
    874b:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8752:	48 8d 35 4f 54 5f 00 	lea    0x5f544f(%rip),%rsi        # 5fdba8 <__afl_fork_pid>
    8759:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8760:	e8 6b 91 ff ff       	callq  18d0 <write@plt>
    8765:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    876c:	48 8d 35 39 54 5f 00 	lea    0x5f5439(%rip),%rsi        # 5fdbac <__afl_temp>
    8773:	48 8b 3d 2e 54 5f 00 	mov    0x5f542e(%rip),%rdi        # 5fdba8 <__afl_fork_pid>
    877a:	e8 01 94 ff ff       	callq  1b80 <waitpid@plt>
    877f:	48 83 f8 00          	cmp    $0x0,%rax
    8783:	7e 1f                	jle    87a4 <__afl_die>
    8785:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    878c:	48 8d 35 19 54 5f 00 	lea    0x5f5419(%rip),%rsi        # 5fdbac <__afl_temp>
    8793:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    879a:	e8 31 91 ff ff       	callq  18d0 <write@plt>
    879f:	e9 70 ff ff ff       	jmpq   8714 <__afl_fork_wait_loop>

00000000000087a4 <__afl_die>:
    87a4:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 89d2 <.serverDied>
    87ab:	48 31 c0             	xor    %rax,%rax
    87ae:	e8 dd 91 ff ff       	callq  1990 <printf@plt>
    87b3:	48 31 c0             	xor    %rax,%rax
    87b6:	e8 f5 90 ff ff       	callq  18b0 <_exit@plt>

00000000000087bb <__afl_setup_abort>:
    87bb:	4c 89 e4             	mov    %r12,%rsp
    87be:	41 5c                	pop    %r12
    87c0:	48 8b 04 24          	mov    (%rsp),%rax
    87c4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    87c9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    87ce:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    87d3:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    87d8:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    87dd:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    87e2:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    87e7:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    87ed:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    87f3:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    87fa:	00 00 
    87fc:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    8803:	00 00 
    8805:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    880c:	00 00 
    880e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    8815:	00 00 
    8817:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    881e:	00 00 
    8820:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    8827:	00 00 
    8829:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    8830:	00 00 00 
    8833:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    883a:	00 00 00 
    883d:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    8844:	01 00 00 
    8847:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    884e:	01 00 00 
    8851:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    8858:	01 00 00 
    885b:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    8862:	01 00 00 
    8865:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    886c:	01 00 00 
    886f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    8876:	01 00 00 
    8879:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    8880:	00 
    8881:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    8888:	00 
    8889:	b0 7f                	mov    $0x7f,%al
    888b:	c3                   	retq   

000000000000888c <__afl_fork_resume>:
    888c:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    8893:	e8 78 91 ff ff       	callq  1a10 <close@plt>
    8898:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    889f:	e8 6c 91 ff ff       	callq  1a10 <close@plt>
    88a4:	4c 89 e4             	mov    %r12,%rsp
    88a7:	41 5c                	pop    %r12
    88a9:	48 8b 04 24          	mov    (%rsp),%rax
    88ad:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    88b2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    88b7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    88bc:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    88c1:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    88c6:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    88cb:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    88d0:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    88d6:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    88dc:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    88e3:	00 00 
    88e5:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    88ec:	00 00 
    88ee:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    88f5:	00 00 
    88f7:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    88fe:	00 00 
    8900:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    8907:	00 00 
    8909:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    8910:	00 00 
    8912:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    8919:	00 00 00 
    891c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    8923:	00 00 00 
    8926:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    892d:	01 00 00 
    8930:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    8937:	01 00 00 
    893a:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    8941:	01 00 00 
    8944:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    894b:	01 00 00 
    894e:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    8955:	01 00 00 
    8958:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    895f:	01 00 00 
    8962:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    8969:	00 
    896a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    8971:	00 
    8972:	b0 00                	mov    $0x0,%al
    8974:	c3                   	retq   

0000000000008975 <.SHM_ENV_CMP>:
    8975:	53                   	push   %rbx
    8976:	48                   	rex.W
    8977:	4d 5f                	rex.WRB pop %r15
    8979:	45                   	rex.RB
    897a:	4e 56                	rex.WRX push %rsi
    897c:	5f                   	pop    %rdi
    897d:	43                   	rex.XB
    897e:	4d 50                	rex.WRB push %r8
	...

0000000000008981 <.SHM_ENV_EDGE>:
    8981:	53                   	push   %rbx
    8982:	48                   	rex.W
    8983:	4d 5f                	rex.WRB pop %r15
    8985:	45                   	rex.RB
    8986:	4e 56                	rex.WRX push %rsi
    8988:	5f                   	pop    %rdi
    8989:	45                   	rex.RB
    898a:	44                   	rex.R
    898b:	47                   	rex.RXB
    898c:	45                   	rex.RB
	...

000000000000898e <.SHM_ENV_GCNT>:
    898e:	53                   	push   %rbx
    898f:	48                   	rex.W
    8990:	4d 5f                	rex.WRB pop %r15
    8992:	45                   	rex.RB
    8993:	4e 56                	rex.WRX push %rsi
    8995:	5f                   	pop    %rdi
    8996:	47                   	rex.RXB
    8997:	43                   	rex.XB
    8998:	4e 54                	rex.WRX push %rsp
	...

000000000000899b <.serverSetupError>:
    899b:	20 53 65             	and    %dl,0x65(%rbx)
    899e:	72 76                	jb     8a16 <_storeEdge+0x1e>
    89a0:	65 72 20             	gs jb  89c3 <.serverSetupError+0x28>
    89a3:	53                   	push   %rbx
    89a4:	65 74 75             	gs je  8a1c <_storeEdge+0x24>
    89a7:	70 20                	jo     89c9 <.serverSetupError+0x2e>
    89a9:	45 72 72             	rex.RB jb 8a1e <_storeEdge+0x26>
    89ac:	6f                   	outsl  %ds:(%rsi),(%dx)
    89ad:	72 2c                	jb     89db <.serverDied+0x9>
    89af:	20 63 6f             	and    %ah,0x6f(%rbx)
    89b2:	6e                   	outsb  %ds:(%rsi),(%dx)
    89b3:	74 69                	je     8a1e <_storeEdge+0x26>
    89b5:	6e                   	outsb  %ds:(%rsi),(%dx)
    89b6:	75 65                	jne    8a1d <_storeEdge+0x25>
    89b8:	20 72 75             	and    %dh,0x75(%rdx)
    89bb:	6e                   	outsb  %ds:(%rsi),(%dx)
    89bc:	6e                   	outsb  %ds:(%rsi),(%dx)
    89bd:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    89c4:	6f                   	outsl  %ds:(%rsi),(%dx)
    89c5:	75 74                	jne    8a3b <_storeEdge+0x43>
    89c7:	20 73 65             	and    %dh,0x65(%rbx)
    89ca:	72 76                	jb     8a42 <_caledgehash>
    89cc:	65 72 20             	gs jb  89ef <.debug+0xa>
    89cf:	0a 20                	or     (%rax),%ah
	...

00000000000089d2 <.serverDied>:
    89d2:	20 53 65             	and    %dl,0x65(%rbx)
    89d5:	72 76                	jb     8a4d <_caledgehash+0xb>
    89d7:	65 72 20             	gs jb  89fa <_storeEdge+0x2>
    89da:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    89e1:	20 0a                	and    %cl,(%rdx)
    89e3:	20 00                	and    %al,(%rax)

00000000000089e5 <.debug>:
    89e5:	64 65 62             	fs gs (bad) 
    89e8:	75 67                	jne    8a51 <_caledgehash+0xf>
    89ea:	20 6d 65             	and    %ch,0x65(%rbp)
    89ed:	73 73                	jae    8a62 <_caledgehash+0x20>
    89ef:	61                   	(bad)  
    89f0:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    89f4:	0a 20                	or     (%rax),%ah
    89f6:	00                   	.byte 0x0
    89f7:	90                   	nop

00000000000089f8 <_storeEdge>:
    89f8:	50                   	push   %rax
    89f9:	53                   	push   %rbx
    89fa:	51                   	push   %rcx
    89fb:	52                   	push   %rdx
    89fc:	48 83 3d 4c af 74 00 	cmpq   $0x1,0x74af4c(%rip)        # 753950 <cmpPassed>
    8a03:	01 
    8a04:	75 3c                	jne    8a42 <_caledgehash>
    8a06:	48 c7 05 3f af 74 00 	movq   $0x0,0x74af3f(%rip)        # 753950 <cmpPassed>
    8a0d:	00 00 00 00 
    8a11:	48 8b 05 10 52 5f 00 	mov    0x5f5210(%rip),%rax        # 5fdc28 <edgeCnt>
    8a18:	48 c1 e0 03          	shl    $0x3,%rax
    8a1c:	48 3b 05 c5 51 5f 00 	cmp    0x5f51c5(%rip),%rax        # 5fdbe8 <shmSize2>
    8a23:	77 55                	ja     8a7a <_shm2Full>
    8a25:	48 8b 1d e4 ae 74 00 	mov    0x74aee4(%rip),%rbx        # 753910 <edgehash>
    8a2c:	48 8b 15 d5 ae 74 00 	mov    0x74aed5(%rip),%rdx        # 753908 <shmptr_edge>
    8a33:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    8a37:	48 89 19             	mov    %rbx,(%rcx)
    8a3a:	48 83 05 e6 51 5f 00 	addq   $0x1,0x5f51e6(%rip)        # 5fdc28 <edgeCnt>
    8a41:	01 

0000000000008a42 <_caledgehash>:
    8a42:	48 8b 15 c7 ae 74 00 	mov    0x74aec7(%rip),%rdx        # 753910 <edgehash>
    8a49:	48 89 d0             	mov    %rdx,%rax
    8a4c:	48 c1 e0 05          	shl    $0x5,%rax
    8a50:	48 01 c2             	add    %rax,%rdx
    8a53:	48 8b 05 e6 ae 74 00 	mov    0x74aee6(%rip),%rax        # 753940 <edgeId>
    8a5a:	48 01 d0             	add    %rdx,%rax
    8a5d:	48 89 05 ac ae 74 00 	mov    %rax,0x74aeac(%rip)        # 753910 <edgehash>
    8a64:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    8a6b:	00 00 00 
    8a6e:	48 21 05 9b ae 74 00 	and    %rax,0x74ae9b(%rip)        # 753910 <edgehash>
    8a75:	5a                   	pop    %rdx
    8a76:	59                   	pop    %rcx
    8a77:	5b                   	pop    %rbx
    8a78:	58                   	pop    %rax
    8a79:	c3                   	retq   

0000000000008a7a <_shm2Full>:
    8a7a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    8a81:	5a                   	pop    %rdx
    8a82:	59                   	pop    %rcx
    8a83:	5b                   	pop    %rbx
    8a84:	58                   	pop    %rax
    8a85:	e8 26 8e ff ff       	callq  18b0 <_exit@plt>
    8a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000008a90 <_storeDataFn>:
    8a90:	55                   	push   %rbp
    8a91:	48 89 e5             	mov    %rsp,%rbp
    8a94:	50                   	push   %rax
    8a95:	53                   	push   %rbx
    8a96:	41 50                	push   %r8
    8a98:	41 51                	push   %r9
    8a9a:	41 52                	push   %r10
    8a9c:	48 8b 05 95 ae 74 00 	mov    0x74ae95(%rip),%rax        # 753938 <shmptr_gcnt>
    8aa3:	48 8b 00             	mov    (%rax),%rax
    8aa6:	48 c1 e0 03          	shl    $0x3,%rax
    8aaa:	48 83 c0 30          	add    $0x30,%rax
    8aae:	48 3b 05 93 ae 74 00 	cmp    0x74ae93(%rip),%rax        # 753948 <shmSize>
    8ab5:	0f 83 8f 01 00 00    	jae    8c4a <_shmFull>
    8abb:	48 83 3d 6d ae 74 00 	cmpq   $0x0,0x74ae6d(%rip)        # 753930 <shmptr_cmp>
    8ac2:	00 
    8ac3:	0f 84 99 01 00 00    	je     8c62 <_shmUninitialize>
    8ac9:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    8ad0:	48 83 e8 30          	sub    $0x30,%rax
    8ad4:	48 c1 e8 03          	shr    $0x3,%rax

0000000000008ad8 <_storeloop>:
    8ad8:	49 89 c2             	mov    %rax,%r10
    8adb:	49 c1 e2 03          	shl    $0x3,%r10
    8adf:	4c 03 15 4a ae 74 00 	add    0x74ae4a(%rip),%r10        # 753930 <shmptr_cmp>
    8ae6:	49 89 d9             	mov    %rbx,%r9
    8ae9:	49 c1 e1 03          	shl    $0x3,%r9
    8aed:	4c 8d 05 fc 50 5f 00 	lea    0x5f50fc(%rip),%r8        # 5fdbf0 <funcinptr>
    8af4:	4d 01 c1             	add    %r8,%r9
    8af7:	4d 8b 01             	mov    (%r9),%r8
    8afa:	4d 89 02             	mov    %r8,(%r10)
    8afd:	48 83 fb 00          	cmp    $0x0,%rbx
    8b01:	75 07                	jne    8b0a <_no_get_cmpid>
    8b03:	4c 89 05 1e ae 74 00 	mov    %r8,0x74ae1e(%rip)        # 753928 <cmpid>

0000000000008b0a <_no_get_cmpid>:
    8b0a:	48 ff c0             	inc    %rax
    8b0d:	48 ff c3             	inc    %rbx
    8b10:	48 83 fb 06          	cmp    $0x6,%rbx
    8b14:	75 c2                	jne    8ad8 <_storeloop>
    8b16:	48 8b 1d 1b ae 74 00 	mov    0x74ae1b(%rip),%rbx        # 753938 <shmptr_gcnt>
    8b1d:	48 89 03             	mov    %rax,(%rbx)
    8b20:	48 8b 05 01 ae 74 00 	mov    0x74ae01(%rip),%rax        # 753928 <cmpid>
    8b27:	48 c1 e0 04          	shl    $0x4,%rax
    8b2b:	48 89 c3             	mov    %rax,%rbx
    8b2e:	48 83 c3 08          	add    $0x8,%rbx
    8b32:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    8b39:	0f 83 17 01 00 00    	jae    8c56 <_cmpdictFull>
    8b3f:	48 8d 1d fa 50 5f 00 	lea    0x5f50fa(%rip),%rbx        # 5fdc40 <cmpid_dict>
    8b46:	48 01 d8             	add    %rbx,%rax
    8b49:	48 83 38 00          	cmpq   $0x0,(%rax)
    8b4d:	0f 84 db 00 00 00    	je     8c2e <_insert_entry>
    8b53:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000008b5a <_remove_repeated_cycle>:
    8b5a:	4d 89 c1             	mov    %r8,%r9
    8b5d:	4d 89 ca             	mov    %r9,%r10
    8b60:	49 c1 e1 02          	shl    $0x2,%r9
    8b64:	4d 01 d1             	add    %r10,%r9
    8b67:	4d 01 d1             	add    %r10,%r9
    8b6a:	4c 8b 15 c7 ad 74 00 	mov    0x74adc7(%rip),%r10        # 753938 <shmptr_gcnt>
    8b71:	4d 8b 12             	mov    (%r10),%r10
    8b74:	4c 2b 10             	sub    (%rax),%r10
    8b77:	4c 3b 10             	cmp    (%rax),%r10
    8b7a:	0f 87 9f 00 00 00    	ja     8c1f <_no_remove_cycle>
    8b80:	4d 39 ca             	cmp    %r9,%r10
    8b83:	76 67                	jbe    8bec <_remove_cycle>
    8b85:	4d 89 c1             	mov    %r8,%r9
    8b88:	49 83 c1 01          	add    $0x1,%r9
    8b8c:	4d 89 ca             	mov    %r9,%r10
    8b8f:	49 c1 e1 02          	shl    $0x2,%r9
    8b93:	4d 01 d1             	add    %r10,%r9
    8b96:	4d 01 d1             	add    %r10,%r9
    8b99:	4c 8b 15 98 ad 74 00 	mov    0x74ad98(%rip),%r10        # 753938 <shmptr_gcnt>
    8ba0:	4d 8b 12             	mov    (%r10),%r10
    8ba3:	4d 29 ca             	sub    %r9,%r10
    8ba6:	49 c1 e2 03          	shl    $0x3,%r10
    8baa:	4c 8b 0d 7f ad 74 00 	mov    0x74ad7f(%rip),%r9        # 753930 <shmptr_cmp>
    8bb1:	4d 01 d1             	add    %r10,%r9
    8bb4:	49 8b 19             	mov    (%r9),%rbx
    8bb7:	4d 89 c1             	mov    %r8,%r9
    8bba:	49 83 c1 01          	add    $0x1,%r9
    8bbe:	4d 89 ca             	mov    %r9,%r10
    8bc1:	49 c1 e1 02          	shl    $0x2,%r9
    8bc5:	4d 01 d1             	add    %r10,%r9
    8bc8:	4d 01 d1             	add    %r10,%r9
    8bcb:	4c 8b 10             	mov    (%rax),%r10
    8bce:	4d 29 ca             	sub    %r9,%r10
    8bd1:	49 c1 e2 03          	shl    $0x3,%r10
    8bd5:	4c 8b 0d 54 ad 74 00 	mov    0x74ad54(%rip),%r9        # 753930 <shmptr_cmp>
    8bdc:	4d 01 d1             	add    %r10,%r9
    8bdf:	49 3b 19             	cmp    (%r9),%rbx
    8be2:	75 3b                	jne    8c1f <_no_remove_cycle>
    8be4:	49 ff c0             	inc    %r8
    8be7:	e9 6e ff ff ff       	jmpq   8b5a <_remove_repeated_cycle>

0000000000008bec <_remove_cycle>:
    8bec:	48 89 15 25 ad 74 00 	mov    %rdx,0x74ad25(%rip)        # 753918 <tmpquadone>
    8bf3:	48 8b 10             	mov    (%rax),%rdx
    8bf6:	48 8b 05 3b ad 74 00 	mov    0x74ad3b(%rip),%rax        # 753938 <shmptr_gcnt>
    8bfd:	48 89 10             	mov    %rdx,(%rax)
    8c00:	89 d0                	mov    %edx,%eax
    8c02:	48 c1 ea 20          	shr    $0x20,%rdx
    8c06:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    8c0d:	49 f7 f0             	div    %r8
    8c10:	89 05 12 50 5f 00    	mov    %eax,0x5f5012(%rip)        # 5fdc28 <edgeCnt>
    8c16:	48 8b 15 fb ac 74 00 	mov    0x74acfb(%rip),%rdx        # 753918 <tmpquadone>
    8c1d:	eb 1c                	jmp    8c3b <_skipstoredata>

0000000000008c1f <_no_remove_cycle>:
    8c1f:	48 8b 1d 12 ad 74 00 	mov    0x74ad12(%rip),%rbx        # 753938 <shmptr_gcnt>
    8c26:	48 8b 1b             	mov    (%rbx),%rbx
    8c29:	48 89 18             	mov    %rbx,(%rax)
    8c2c:	eb 0d                	jmp    8c3b <_skipstoredata>

0000000000008c2e <_insert_entry>:
    8c2e:	48 8b 1d 03 ad 74 00 	mov    0x74ad03(%rip),%rbx        # 753938 <shmptr_gcnt>
    8c35:	48 8b 1b             	mov    (%rbx),%rbx
    8c38:	48 89 18             	mov    %rbx,(%rax)

0000000000008c3b <_skipstoredata>:
    8c3b:	41 5a                	pop    %r10
    8c3d:	41 59                	pop    %r9
    8c3f:	41 58                	pop    %r8
    8c41:	5b                   	pop    %rbx
    8c42:	58                   	pop    %rax
    8c43:	48 89 ec             	mov    %rbp,%rsp
    8c46:	5d                   	pop    %rbp
    8c47:	c2 08 00             	retq   $0x8

0000000000008c4a <_shmFull>:
    8c4a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    8c51:	e8 5a 8c ff ff       	callq  18b0 <_exit@plt>

0000000000008c56 <_cmpdictFull>:
    8c56:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    8c5d:	e8 4e 8c ff ff       	callq  18b0 <_exit@plt>

0000000000008c62 <_shmUninitialize>:
    8c62:	48 89 ec             	mov    %rbp,%rsp
    8c65:	5d                   	pop    %rbp
    8c66:	48 31 c0             	xor    %rax,%rax
    8c69:	c2 08 00             	retq   $0x8
    8c6c:	0f 1f 40 00          	nopl   0x0(%rax)
    8c70:	9f                   	lahf   
    8c71:	0f 90 c0             	seto   %al
    8c74:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008c78 <__afl_setup_first>:
    8c78:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    8c7f:	ff 
    8c80:	48 89 04 24          	mov    %rax,(%rsp)
    8c84:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8c89:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    8c8e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    8c93:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    8c98:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    8c9d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    8ca2:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    8ca7:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    8cad:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    8cb3:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    8cba:	00 00 
    8cbc:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    8cc3:	00 00 
    8cc5:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    8ccc:	00 00 
    8cce:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    8cd5:	00 00 
    8cd7:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    8cde:	00 00 
    8ce0:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    8ce7:	00 00 
    8ce9:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    8cf0:	00 00 00 
    8cf3:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    8cfa:	00 00 00 
    8cfd:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    8d04:	01 00 00 
    8d07:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    8d0e:	01 00 00 
    8d11:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    8d18:	01 00 00 
    8d1b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    8d22:	01 00 00 
    8d25:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    8d2c:	01 00 00 
    8d2f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    8d36:	01 00 00 
    8d39:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    8d40:	00 
    8d41:	41 54                	push   %r12
    8d43:	49 89 e4             	mov    %rsp,%r12
    8d46:	48 83 ec 10          	sub    $0x10,%rsp
    8d4a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    8d4e:	48 c7 05 ef ab 74 00 	movq   $0x100000,0x74abef(%rip)        # 753948 <shmSize>
    8d55:	00 00 10 00 
    8d59:	48 c7 05 84 4e 5f 00 	movq   $0x100000,0x5f4e84(%rip)        # 5fdbe8 <shmSize2>
    8d60:	00 00 10 00 
    8d64:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 90b6 <.SHM_ENV_GCNT>
    8d6b:	e8 f0 8a ff ff       	callq  1860 <getenv@plt>
    8d70:	48 85 c0             	test   %rax,%rax
    8d73:	0f 84 6a 01 00 00    	je     8ee3 <__afl_setup_abort>
    8d79:	48 89 c7             	mov    %rax,%rdi
    8d7c:	e8 6f 8e ff ff       	callq  1bf0 <atoi@plt>
    8d81:	48 31 d2             	xor    %rdx,%rdx
    8d84:	48 31 f6             	xor    %rsi,%rsi
    8d87:	48 89 c7             	mov    %rax,%rdi
    8d8a:	e8 41 8e ff ff       	callq  1bd0 <shmat@plt>
    8d8f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    8d93:	0f 84 4a 01 00 00    	je     8ee3 <__afl_setup_abort>
    8d99:	48 89 05 98 ab 74 00 	mov    %rax,0x74ab98(%rip)        # 753938 <shmptr_gcnt>
    8da0:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 909d <.SHM_ENV_CMP>
    8da7:	e8 b4 8a ff ff       	callq  1860 <getenv@plt>
    8dac:	48 85 c0             	test   %rax,%rax
    8daf:	0f 84 2e 01 00 00    	je     8ee3 <__afl_setup_abort>
    8db5:	48 89 c7             	mov    %rax,%rdi
    8db8:	e8 33 8e ff ff       	callq  1bf0 <atoi@plt>
    8dbd:	48 31 d2             	xor    %rdx,%rdx
    8dc0:	48 31 f6             	xor    %rsi,%rsi
    8dc3:	48 89 c7             	mov    %rax,%rdi
    8dc6:	e8 05 8e ff ff       	callq  1bd0 <shmat@plt>
    8dcb:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    8dcf:	0f 84 0e 01 00 00    	je     8ee3 <__afl_setup_abort>
    8dd5:	48 89 05 54 ab 74 00 	mov    %rax,0x74ab54(%rip)        # 753930 <shmptr_cmp>
    8ddc:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 90a9 <.SHM_ENV_EDGE>
    8de3:	e8 78 8a ff ff       	callq  1860 <getenv@plt>
    8de8:	48 85 c0             	test   %rax,%rax
    8deb:	0f 84 f2 00 00 00    	je     8ee3 <__afl_setup_abort>
    8df1:	48 89 c7             	mov    %rax,%rdi
    8df4:	e8 f7 8d ff ff       	callq  1bf0 <atoi@plt>
    8df9:	48 31 d2             	xor    %rdx,%rdx
    8dfc:	48 31 f6             	xor    %rsi,%rsi
    8dff:	48 89 c7             	mov    %rax,%rdi
    8e02:	e8 c9 8d ff ff       	callq  1bd0 <shmat@plt>
    8e07:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    8e0b:	0f 84 d2 00 00 00    	je     8ee3 <__afl_setup_abort>
    8e11:	48 89 05 f0 aa 74 00 	mov    %rax,0x74aaf0(%rip)        # 753908 <shmptr_edge>

0000000000008e18 <__afl_forkserver>:
    8e18:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8e1f:	48 8d 35 8e 4d 5f 00 	lea    0x5f4d8e(%rip),%rsi        # 5fdbb4 <__afl_temp>
    8e26:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8e2d:	e8 9e 8a ff ff       	callq  18d0 <write@plt>
    8e32:	48 83 f8 04          	cmp    $0x4,%rax
    8e36:	0f 85 78 01 00 00    	jne    8fb4 <__afl_fork_resume>

0000000000008e3c <__afl_fork_wait_loop>:
    8e3c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8e43:	48 8d 35 6a 4d 5f 00 	lea    0x5f4d6a(%rip),%rsi        # 5fdbb4 <__afl_temp>
    8e4a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    8e51:	e8 ea 8b ff ff       	callq  1a40 <read@plt>
    8e56:	48 83 f8 04          	cmp    $0x4,%rax
    8e5a:	75 70                	jne    8ecc <__afl_die>
    8e5c:	e8 ef 8d ff ff       	callq  1c50 <fork@plt>
    8e61:	48 83 f8 00          	cmp    $0x0,%rax
    8e65:	7c 65                	jl     8ecc <__afl_die>
    8e67:	0f 84 47 01 00 00    	je     8fb4 <__afl_fork_resume>
    8e6d:	89 05 3d 4d 5f 00    	mov    %eax,0x5f4d3d(%rip)        # 5fdbb0 <__afl_fork_pid>
    8e73:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8e7a:	48 8d 35 2f 4d 5f 00 	lea    0x5f4d2f(%rip),%rsi        # 5fdbb0 <__afl_fork_pid>
    8e81:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8e88:	e8 43 8a ff ff       	callq  18d0 <write@plt>
    8e8d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    8e94:	48 8d 35 19 4d 5f 00 	lea    0x5f4d19(%rip),%rsi        # 5fdbb4 <__afl_temp>
    8e9b:	48 8b 3d 0e 4d 5f 00 	mov    0x5f4d0e(%rip),%rdi        # 5fdbb0 <__afl_fork_pid>
    8ea2:	e8 d9 8c ff ff       	callq  1b80 <waitpid@plt>
    8ea7:	48 83 f8 00          	cmp    $0x0,%rax
    8eab:	7e 1f                	jle    8ecc <__afl_die>
    8ead:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    8eb4:	48 8d 35 f9 4c 5f 00 	lea    0x5f4cf9(%rip),%rsi        # 5fdbb4 <__afl_temp>
    8ebb:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8ec2:	e8 09 8a ff ff       	callq  18d0 <write@plt>
    8ec7:	e9 70 ff ff ff       	jmpq   8e3c <__afl_fork_wait_loop>

0000000000008ecc <__afl_die>:
    8ecc:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 90fa <.serverDied>
    8ed3:	48 31 c0             	xor    %rax,%rax
    8ed6:	e8 b5 8a ff ff       	callq  1990 <printf@plt>
    8edb:	48 31 c0             	xor    %rax,%rax
    8ede:	e8 cd 89 ff ff       	callq  18b0 <_exit@plt>

0000000000008ee3 <__afl_setup_abort>:
    8ee3:	4c 89 e4             	mov    %r12,%rsp
    8ee6:	41 5c                	pop    %r12
    8ee8:	48 8b 04 24          	mov    (%rsp),%rax
    8eec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    8ef1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    8ef6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    8efb:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    8f00:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    8f05:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    8f0a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    8f0f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    8f15:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    8f1b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    8f22:	00 00 
    8f24:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    8f2b:	00 00 
    8f2d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    8f34:	00 00 
    8f36:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    8f3d:	00 00 
    8f3f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    8f46:	00 00 
    8f48:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    8f4f:	00 00 
    8f51:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    8f58:	00 00 00 
    8f5b:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    8f62:	00 00 00 
    8f65:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    8f6c:	01 00 00 
    8f6f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    8f76:	01 00 00 
    8f79:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    8f80:	01 00 00 
    8f83:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    8f8a:	01 00 00 
    8f8d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    8f94:	01 00 00 
    8f97:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    8f9e:	01 00 00 
    8fa1:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    8fa8:	00 
    8fa9:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    8fb0:	00 
    8fb1:	b0 7f                	mov    $0x7f,%al
    8fb3:	c3                   	retq   

0000000000008fb4 <__afl_fork_resume>:
    8fb4:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    8fbb:	e8 50 8a ff ff       	callq  1a10 <close@plt>
    8fc0:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    8fc7:	e8 44 8a ff ff       	callq  1a10 <close@plt>
    8fcc:	4c 89 e4             	mov    %r12,%rsp
    8fcf:	41 5c                	pop    %r12
    8fd1:	48 8b 04 24          	mov    (%rsp),%rax
    8fd5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    8fda:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    8fdf:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    8fe4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    8fe9:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    8fee:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    8ff3:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    8ff8:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    8ffe:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    9004:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    900b:	00 00 
    900d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    9014:	00 00 
    9016:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    901d:	00 00 
    901f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    9026:	00 00 
    9028:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    902f:	00 00 
    9031:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    9038:	00 00 
    903a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    9041:	00 00 00 
    9044:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    904b:	00 00 00 
    904e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    9055:	01 00 00 
    9058:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    905f:	01 00 00 
    9062:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    9069:	01 00 00 
    906c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    9073:	01 00 00 
    9076:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    907d:	01 00 00 
    9080:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    9087:	01 00 00 
    908a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    9091:	00 
    9092:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    9099:	00 
    909a:	b0 00                	mov    $0x0,%al
    909c:	c3                   	retq   

000000000000909d <.SHM_ENV_CMP>:
    909d:	53                   	push   %rbx
    909e:	48                   	rex.W
    909f:	4d 5f                	rex.WRB pop %r15
    90a1:	45                   	rex.RB
    90a2:	4e 56                	rex.WRX push %rsi
    90a4:	5f                   	pop    %rdi
    90a5:	43                   	rex.XB
    90a6:	4d 50                	rex.WRB push %r8
	...

00000000000090a9 <.SHM_ENV_EDGE>:
    90a9:	53                   	push   %rbx
    90aa:	48                   	rex.W
    90ab:	4d 5f                	rex.WRB pop %r15
    90ad:	45                   	rex.RB
    90ae:	4e 56                	rex.WRX push %rsi
    90b0:	5f                   	pop    %rdi
    90b1:	45                   	rex.RB
    90b2:	44                   	rex.R
    90b3:	47                   	rex.RXB
    90b4:	45                   	rex.RB
	...

00000000000090b6 <.SHM_ENV_GCNT>:
    90b6:	53                   	push   %rbx
    90b7:	48                   	rex.W
    90b8:	4d 5f                	rex.WRB pop %r15
    90ba:	45                   	rex.RB
    90bb:	4e 56                	rex.WRX push %rsi
    90bd:	5f                   	pop    %rdi
    90be:	47                   	rex.RXB
    90bf:	43                   	rex.XB
    90c0:	4e 54                	rex.WRX push %rsp
	...

00000000000090c3 <.serverSetupError>:
    90c3:	20 53 65             	and    %dl,0x65(%rbx)
    90c6:	72 76                	jb     913e <_storeEdge+0x1e>
    90c8:	65 72 20             	gs jb  90eb <.serverSetupError+0x28>
    90cb:	53                   	push   %rbx
    90cc:	65 74 75             	gs je  9144 <_storeEdge+0x24>
    90cf:	70 20                	jo     90f1 <.serverSetupError+0x2e>
    90d1:	45 72 72             	rex.RB jb 9146 <_storeEdge+0x26>
    90d4:	6f                   	outsl  %ds:(%rsi),(%dx)
    90d5:	72 2c                	jb     9103 <.serverDied+0x9>
    90d7:	20 63 6f             	and    %ah,0x6f(%rbx)
    90da:	6e                   	outsb  %ds:(%rsi),(%dx)
    90db:	74 69                	je     9146 <_storeEdge+0x26>
    90dd:	6e                   	outsb  %ds:(%rsi),(%dx)
    90de:	75 65                	jne    9145 <_storeEdge+0x25>
    90e0:	20 72 75             	and    %dh,0x75(%rdx)
    90e3:	6e                   	outsb  %ds:(%rsi),(%dx)
    90e4:	6e                   	outsb  %ds:(%rsi),(%dx)
    90e5:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    90ec:	6f                   	outsl  %ds:(%rsi),(%dx)
    90ed:	75 74                	jne    9163 <_storeEdge+0x43>
    90ef:	20 73 65             	and    %dh,0x65(%rbx)
    90f2:	72 76                	jb     916a <_caledgehash>
    90f4:	65 72 20             	gs jb  9117 <.debug+0xa>
    90f7:	0a 20                	or     (%rax),%ah
	...

00000000000090fa <.serverDied>:
    90fa:	20 53 65             	and    %dl,0x65(%rbx)
    90fd:	72 76                	jb     9175 <_caledgehash+0xb>
    90ff:	65 72 20             	gs jb  9122 <_storeEdge+0x2>
    9102:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    9109:	20 0a                	and    %cl,(%rdx)
    910b:	20 00                	and    %al,(%rax)

000000000000910d <.debug>:
    910d:	64 65 62             	fs gs (bad) 
    9110:	75 67                	jne    9179 <_caledgehash+0xf>
    9112:	20 6d 65             	and    %ch,0x65(%rbp)
    9115:	73 73                	jae    918a <_caledgehash+0x20>
    9117:	61                   	(bad)  
    9118:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    911c:	0a 20                	or     (%rax),%ah
    911e:	00                   	.byte 0x0
    911f:	90                   	nop

0000000000009120 <_storeEdge>:
    9120:	50                   	push   %rax
    9121:	53                   	push   %rbx
    9122:	51                   	push   %rcx
    9123:	52                   	push   %rdx
    9124:	48 83 3d 24 a8 74 00 	cmpq   $0x1,0x74a824(%rip)        # 753950 <cmpPassed>
    912b:	01 
    912c:	75 3c                	jne    916a <_caledgehash>
    912e:	48 c7 05 17 a8 74 00 	movq   $0x0,0x74a817(%rip)        # 753950 <cmpPassed>
    9135:	00 00 00 00 
    9139:	48 8b 05 e8 4a 5f 00 	mov    0x5f4ae8(%rip),%rax        # 5fdc28 <edgeCnt>
    9140:	48 c1 e0 03          	shl    $0x3,%rax
    9144:	48 3b 05 9d 4a 5f 00 	cmp    0x5f4a9d(%rip),%rax        # 5fdbe8 <shmSize2>
    914b:	77 55                	ja     91a2 <_shm2Full>
    914d:	48 8b 1d bc a7 74 00 	mov    0x74a7bc(%rip),%rbx        # 753910 <edgehash>
    9154:	48 8b 15 ad a7 74 00 	mov    0x74a7ad(%rip),%rdx        # 753908 <shmptr_edge>
    915b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    915f:	48 89 19             	mov    %rbx,(%rcx)
    9162:	48 83 05 be 4a 5f 00 	addq   $0x1,0x5f4abe(%rip)        # 5fdc28 <edgeCnt>
    9169:	01 

000000000000916a <_caledgehash>:
    916a:	48 8b 15 9f a7 74 00 	mov    0x74a79f(%rip),%rdx        # 753910 <edgehash>
    9171:	48 89 d0             	mov    %rdx,%rax
    9174:	48 c1 e0 05          	shl    $0x5,%rax
    9178:	48 01 c2             	add    %rax,%rdx
    917b:	48 8b 05 be a7 74 00 	mov    0x74a7be(%rip),%rax        # 753940 <edgeId>
    9182:	48 01 d0             	add    %rdx,%rax
    9185:	48 89 05 84 a7 74 00 	mov    %rax,0x74a784(%rip)        # 753910 <edgehash>
    918c:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    9193:	00 00 00 
    9196:	48 21 05 73 a7 74 00 	and    %rax,0x74a773(%rip)        # 753910 <edgehash>
    919d:	5a                   	pop    %rdx
    919e:	59                   	pop    %rcx
    919f:	5b                   	pop    %rbx
    91a0:	58                   	pop    %rax
    91a1:	c3                   	retq   

00000000000091a2 <_shm2Full>:
    91a2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    91a9:	5a                   	pop    %rdx
    91aa:	59                   	pop    %rcx
    91ab:	5b                   	pop    %rbx
    91ac:	58                   	pop    %rax
    91ad:	e8 fe 86 ff ff       	callq  18b0 <_exit@plt>
    91b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000091b8 <_storeDataFn>:
    91b8:	55                   	push   %rbp
    91b9:	48 89 e5             	mov    %rsp,%rbp
    91bc:	50                   	push   %rax
    91bd:	53                   	push   %rbx
    91be:	41 50                	push   %r8
    91c0:	41 51                	push   %r9
    91c2:	41 52                	push   %r10
    91c4:	48 8b 05 6d a7 74 00 	mov    0x74a76d(%rip),%rax        # 753938 <shmptr_gcnt>
    91cb:	48 8b 00             	mov    (%rax),%rax
    91ce:	48 c1 e0 03          	shl    $0x3,%rax
    91d2:	48 83 c0 30          	add    $0x30,%rax
    91d6:	48 3b 05 6b a7 74 00 	cmp    0x74a76b(%rip),%rax        # 753948 <shmSize>
    91dd:	0f 83 8f 01 00 00    	jae    9372 <_shmFull>
    91e3:	48 83 3d 45 a7 74 00 	cmpq   $0x0,0x74a745(%rip)        # 753930 <shmptr_cmp>
    91ea:	00 
    91eb:	0f 84 99 01 00 00    	je     938a <_shmUninitialize>
    91f1:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    91f8:	48 83 e8 30          	sub    $0x30,%rax
    91fc:	48 c1 e8 03          	shr    $0x3,%rax

0000000000009200 <_storeloop>:
    9200:	49 89 c2             	mov    %rax,%r10
    9203:	49 c1 e2 03          	shl    $0x3,%r10
    9207:	4c 03 15 22 a7 74 00 	add    0x74a722(%rip),%r10        # 753930 <shmptr_cmp>
    920e:	49 89 d9             	mov    %rbx,%r9
    9211:	49 c1 e1 03          	shl    $0x3,%r9
    9215:	4c 8d 05 d4 49 5f 00 	lea    0x5f49d4(%rip),%r8        # 5fdbf0 <funcinptr>
    921c:	4d 01 c1             	add    %r8,%r9
    921f:	4d 8b 01             	mov    (%r9),%r8
    9222:	4d 89 02             	mov    %r8,(%r10)
    9225:	48 83 fb 00          	cmp    $0x0,%rbx
    9229:	75 07                	jne    9232 <_no_get_cmpid>
    922b:	4c 89 05 f6 a6 74 00 	mov    %r8,0x74a6f6(%rip)        # 753928 <cmpid>

0000000000009232 <_no_get_cmpid>:
    9232:	48 ff c0             	inc    %rax
    9235:	48 ff c3             	inc    %rbx
    9238:	48 83 fb 06          	cmp    $0x6,%rbx
    923c:	75 c2                	jne    9200 <_storeloop>
    923e:	48 8b 1d f3 a6 74 00 	mov    0x74a6f3(%rip),%rbx        # 753938 <shmptr_gcnt>
    9245:	48 89 03             	mov    %rax,(%rbx)
    9248:	48 8b 05 d9 a6 74 00 	mov    0x74a6d9(%rip),%rax        # 753928 <cmpid>
    924f:	48 c1 e0 04          	shl    $0x4,%rax
    9253:	48 89 c3             	mov    %rax,%rbx
    9256:	48 83 c3 08          	add    $0x8,%rbx
    925a:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    9261:	0f 83 17 01 00 00    	jae    937e <_cmpdictFull>
    9267:	48 8d 1d d2 49 5f 00 	lea    0x5f49d2(%rip),%rbx        # 5fdc40 <cmpid_dict>
    926e:	48 01 d8             	add    %rbx,%rax
    9271:	48 83 38 00          	cmpq   $0x0,(%rax)
    9275:	0f 84 db 00 00 00    	je     9356 <_insert_entry>
    927b:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

0000000000009282 <_remove_repeated_cycle>:
    9282:	4d 89 c1             	mov    %r8,%r9
    9285:	4d 89 ca             	mov    %r9,%r10
    9288:	49 c1 e1 02          	shl    $0x2,%r9
    928c:	4d 01 d1             	add    %r10,%r9
    928f:	4d 01 d1             	add    %r10,%r9
    9292:	4c 8b 15 9f a6 74 00 	mov    0x74a69f(%rip),%r10        # 753938 <shmptr_gcnt>
    9299:	4d 8b 12             	mov    (%r10),%r10
    929c:	4c 2b 10             	sub    (%rax),%r10
    929f:	4c 3b 10             	cmp    (%rax),%r10
    92a2:	0f 87 9f 00 00 00    	ja     9347 <_no_remove_cycle>
    92a8:	4d 39 ca             	cmp    %r9,%r10
    92ab:	76 67                	jbe    9314 <_remove_cycle>
    92ad:	4d 89 c1             	mov    %r8,%r9
    92b0:	49 83 c1 01          	add    $0x1,%r9
    92b4:	4d 89 ca             	mov    %r9,%r10
    92b7:	49 c1 e1 02          	shl    $0x2,%r9
    92bb:	4d 01 d1             	add    %r10,%r9
    92be:	4d 01 d1             	add    %r10,%r9
    92c1:	4c 8b 15 70 a6 74 00 	mov    0x74a670(%rip),%r10        # 753938 <shmptr_gcnt>
    92c8:	4d 8b 12             	mov    (%r10),%r10
    92cb:	4d 29 ca             	sub    %r9,%r10
    92ce:	49 c1 e2 03          	shl    $0x3,%r10
    92d2:	4c 8b 0d 57 a6 74 00 	mov    0x74a657(%rip),%r9        # 753930 <shmptr_cmp>
    92d9:	4d 01 d1             	add    %r10,%r9
    92dc:	49 8b 19             	mov    (%r9),%rbx
    92df:	4d 89 c1             	mov    %r8,%r9
    92e2:	49 83 c1 01          	add    $0x1,%r9
    92e6:	4d 89 ca             	mov    %r9,%r10
    92e9:	49 c1 e1 02          	shl    $0x2,%r9
    92ed:	4d 01 d1             	add    %r10,%r9
    92f0:	4d 01 d1             	add    %r10,%r9
    92f3:	4c 8b 10             	mov    (%rax),%r10
    92f6:	4d 29 ca             	sub    %r9,%r10
    92f9:	49 c1 e2 03          	shl    $0x3,%r10
    92fd:	4c 8b 0d 2c a6 74 00 	mov    0x74a62c(%rip),%r9        # 753930 <shmptr_cmp>
    9304:	4d 01 d1             	add    %r10,%r9
    9307:	49 3b 19             	cmp    (%r9),%rbx
    930a:	75 3b                	jne    9347 <_no_remove_cycle>
    930c:	49 ff c0             	inc    %r8
    930f:	e9 6e ff ff ff       	jmpq   9282 <_remove_repeated_cycle>

0000000000009314 <_remove_cycle>:
    9314:	48 89 15 fd a5 74 00 	mov    %rdx,0x74a5fd(%rip)        # 753918 <tmpquadone>
    931b:	48 8b 10             	mov    (%rax),%rdx
    931e:	48 8b 05 13 a6 74 00 	mov    0x74a613(%rip),%rax        # 753938 <shmptr_gcnt>
    9325:	48 89 10             	mov    %rdx,(%rax)
    9328:	89 d0                	mov    %edx,%eax
    932a:	48 c1 ea 20          	shr    $0x20,%rdx
    932e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    9335:	49 f7 f0             	div    %r8
    9338:	89 05 ea 48 5f 00    	mov    %eax,0x5f48ea(%rip)        # 5fdc28 <edgeCnt>
    933e:	48 8b 15 d3 a5 74 00 	mov    0x74a5d3(%rip),%rdx        # 753918 <tmpquadone>
    9345:	eb 1c                	jmp    9363 <_skipstoredata>

0000000000009347 <_no_remove_cycle>:
    9347:	48 8b 1d ea a5 74 00 	mov    0x74a5ea(%rip),%rbx        # 753938 <shmptr_gcnt>
    934e:	48 8b 1b             	mov    (%rbx),%rbx
    9351:	48 89 18             	mov    %rbx,(%rax)
    9354:	eb 0d                	jmp    9363 <_skipstoredata>

0000000000009356 <_insert_entry>:
    9356:	48 8b 1d db a5 74 00 	mov    0x74a5db(%rip),%rbx        # 753938 <shmptr_gcnt>
    935d:	48 8b 1b             	mov    (%rbx),%rbx
    9360:	48 89 18             	mov    %rbx,(%rax)

0000000000009363 <_skipstoredata>:
    9363:	41 5a                	pop    %r10
    9365:	41 59                	pop    %r9
    9367:	41 58                	pop    %r8
    9369:	5b                   	pop    %rbx
    936a:	58                   	pop    %rax
    936b:	48 89 ec             	mov    %rbp,%rsp
    936e:	5d                   	pop    %rbp
    936f:	c2 08 00             	retq   $0x8

0000000000009372 <_shmFull>:
    9372:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    9379:	e8 32 85 ff ff       	callq  18b0 <_exit@plt>

000000000000937e <_cmpdictFull>:
    937e:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    9385:	e8 26 85 ff ff       	callq  18b0 <_exit@plt>

000000000000938a <_shmUninitialize>:
    938a:	48 89 ec             	mov    %rbp,%rsp
    938d:	5d                   	pop    %rbp
    938e:	48 31 c0             	xor    %rax,%rax
    9391:	c2 08 00             	retq   $0x8
    9394:	0f 1f 40 00          	nopl   0x0(%rax)
    9398:	9f                   	lahf   
    9399:	0f 90 c0             	seto   %al
    939c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000093a0 <__afl_setup_first>:
    93a0:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    93a7:	ff 
    93a8:	48 89 04 24          	mov    %rax,(%rsp)
    93ac:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    93b1:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    93b6:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    93bb:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    93c0:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    93c5:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    93ca:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    93cf:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    93d5:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    93db:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    93e2:	00 00 
    93e4:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    93eb:	00 00 
    93ed:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    93f4:	00 00 
    93f6:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    93fd:	00 00 
    93ff:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    9406:	00 00 
    9408:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    940f:	00 00 
    9411:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    9418:	00 00 00 
    941b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    9422:	00 00 00 
    9425:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    942c:	01 00 00 
    942f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    9436:	01 00 00 
    9439:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    9440:	01 00 00 
    9443:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    944a:	01 00 00 
    944d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    9454:	01 00 00 
    9457:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    945e:	01 00 00 
    9461:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    9468:	00 
    9469:	41 54                	push   %r12
    946b:	49 89 e4             	mov    %rsp,%r12
    946e:	48 83 ec 10          	sub    $0x10,%rsp
    9472:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    9476:	48 c7 05 c7 a4 74 00 	movq   $0x100000,0x74a4c7(%rip)        # 753948 <shmSize>
    947d:	00 00 10 00 
    9481:	48 c7 05 5c 47 5f 00 	movq   $0x100000,0x5f475c(%rip)        # 5fdbe8 <shmSize2>
    9488:	00 00 10 00 
    948c:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 97de <.SHM_ENV_GCNT>
    9493:	e8 c8 83 ff ff       	callq  1860 <getenv@plt>
    9498:	48 85 c0             	test   %rax,%rax
    949b:	0f 84 6a 01 00 00    	je     960b <__afl_setup_abort>
    94a1:	48 89 c7             	mov    %rax,%rdi
    94a4:	e8 47 87 ff ff       	callq  1bf0 <atoi@plt>
    94a9:	48 31 d2             	xor    %rdx,%rdx
    94ac:	48 31 f6             	xor    %rsi,%rsi
    94af:	48 89 c7             	mov    %rax,%rdi
    94b2:	e8 19 87 ff ff       	callq  1bd0 <shmat@plt>
    94b7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    94bb:	0f 84 4a 01 00 00    	je     960b <__afl_setup_abort>
    94c1:	48 89 05 70 a4 74 00 	mov    %rax,0x74a470(%rip)        # 753938 <shmptr_gcnt>
    94c8:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 97c5 <.SHM_ENV_CMP>
    94cf:	e8 8c 83 ff ff       	callq  1860 <getenv@plt>
    94d4:	48 85 c0             	test   %rax,%rax
    94d7:	0f 84 2e 01 00 00    	je     960b <__afl_setup_abort>
    94dd:	48 89 c7             	mov    %rax,%rdi
    94e0:	e8 0b 87 ff ff       	callq  1bf0 <atoi@plt>
    94e5:	48 31 d2             	xor    %rdx,%rdx
    94e8:	48 31 f6             	xor    %rsi,%rsi
    94eb:	48 89 c7             	mov    %rax,%rdi
    94ee:	e8 dd 86 ff ff       	callq  1bd0 <shmat@plt>
    94f3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    94f7:	0f 84 0e 01 00 00    	je     960b <__afl_setup_abort>
    94fd:	48 89 05 2c a4 74 00 	mov    %rax,0x74a42c(%rip)        # 753930 <shmptr_cmp>
    9504:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 97d1 <.SHM_ENV_EDGE>
    950b:	e8 50 83 ff ff       	callq  1860 <getenv@plt>
    9510:	48 85 c0             	test   %rax,%rax
    9513:	0f 84 f2 00 00 00    	je     960b <__afl_setup_abort>
    9519:	48 89 c7             	mov    %rax,%rdi
    951c:	e8 cf 86 ff ff       	callq  1bf0 <atoi@plt>
    9521:	48 31 d2             	xor    %rdx,%rdx
    9524:	48 31 f6             	xor    %rsi,%rsi
    9527:	48 89 c7             	mov    %rax,%rdi
    952a:	e8 a1 86 ff ff       	callq  1bd0 <shmat@plt>
    952f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    9533:	0f 84 d2 00 00 00    	je     960b <__afl_setup_abort>
    9539:	48 89 05 c8 a3 74 00 	mov    %rax,0x74a3c8(%rip)        # 753908 <shmptr_edge>

0000000000009540 <__afl_forkserver>:
    9540:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    9547:	48 8d 35 6e 46 5f 00 	lea    0x5f466e(%rip),%rsi        # 5fdbbc <__afl_temp>
    954e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    9555:	e8 76 83 ff ff       	callq  18d0 <write@plt>
    955a:	48 83 f8 04          	cmp    $0x4,%rax
    955e:	0f 85 78 01 00 00    	jne    96dc <__afl_fork_resume>

0000000000009564 <__afl_fork_wait_loop>:
    9564:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    956b:	48 8d 35 4a 46 5f 00 	lea    0x5f464a(%rip),%rsi        # 5fdbbc <__afl_temp>
    9572:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    9579:	e8 c2 84 ff ff       	callq  1a40 <read@plt>
    957e:	48 83 f8 04          	cmp    $0x4,%rax
    9582:	75 70                	jne    95f4 <__afl_die>
    9584:	e8 c7 86 ff ff       	callq  1c50 <fork@plt>
    9589:	48 83 f8 00          	cmp    $0x0,%rax
    958d:	7c 65                	jl     95f4 <__afl_die>
    958f:	0f 84 47 01 00 00    	je     96dc <__afl_fork_resume>
    9595:	89 05 1d 46 5f 00    	mov    %eax,0x5f461d(%rip)        # 5fdbb8 <__afl_fork_pid>
    959b:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    95a2:	48 8d 35 0f 46 5f 00 	lea    0x5f460f(%rip),%rsi        # 5fdbb8 <__afl_fork_pid>
    95a9:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    95b0:	e8 1b 83 ff ff       	callq  18d0 <write@plt>
    95b5:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    95bc:	48 8d 35 f9 45 5f 00 	lea    0x5f45f9(%rip),%rsi        # 5fdbbc <__afl_temp>
    95c3:	48 8b 3d ee 45 5f 00 	mov    0x5f45ee(%rip),%rdi        # 5fdbb8 <__afl_fork_pid>
    95ca:	e8 b1 85 ff ff       	callq  1b80 <waitpid@plt>
    95cf:	48 83 f8 00          	cmp    $0x0,%rax
    95d3:	7e 1f                	jle    95f4 <__afl_die>
    95d5:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    95dc:	48 8d 35 d9 45 5f 00 	lea    0x5f45d9(%rip),%rsi        # 5fdbbc <__afl_temp>
    95e3:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    95ea:	e8 e1 82 ff ff       	callq  18d0 <write@plt>
    95ef:	e9 70 ff ff ff       	jmpq   9564 <__afl_fork_wait_loop>

00000000000095f4 <__afl_die>:
    95f4:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 9822 <.serverDied>
    95fb:	48 31 c0             	xor    %rax,%rax
    95fe:	e8 8d 83 ff ff       	callq  1990 <printf@plt>
    9603:	48 31 c0             	xor    %rax,%rax
    9606:	e8 a5 82 ff ff       	callq  18b0 <_exit@plt>

000000000000960b <__afl_setup_abort>:
    960b:	4c 89 e4             	mov    %r12,%rsp
    960e:	41 5c                	pop    %r12
    9610:	48 8b 04 24          	mov    (%rsp),%rax
    9614:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    9619:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    961e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    9623:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    9628:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    962d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    9632:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    9637:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    963d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    9643:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    964a:	00 00 
    964c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    9653:	00 00 
    9655:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    965c:	00 00 
    965e:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    9665:	00 00 
    9667:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    966e:	00 00 
    9670:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    9677:	00 00 
    9679:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    9680:	00 00 00 
    9683:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    968a:	00 00 00 
    968d:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    9694:	01 00 00 
    9697:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    969e:	01 00 00 
    96a1:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    96a8:	01 00 00 
    96ab:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    96b2:	01 00 00 
    96b5:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    96bc:	01 00 00 
    96bf:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    96c6:	01 00 00 
    96c9:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    96d0:	00 
    96d1:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    96d8:	00 
    96d9:	b0 7f                	mov    $0x7f,%al
    96db:	c3                   	retq   

00000000000096dc <__afl_fork_resume>:
    96dc:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    96e3:	e8 28 83 ff ff       	callq  1a10 <close@plt>
    96e8:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    96ef:	e8 1c 83 ff ff       	callq  1a10 <close@plt>
    96f4:	4c 89 e4             	mov    %r12,%rsp
    96f7:	41 5c                	pop    %r12
    96f9:	48 8b 04 24          	mov    (%rsp),%rax
    96fd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    9702:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    9707:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    970c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    9711:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    9716:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    971b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    9720:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    9726:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    972c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    9733:	00 00 
    9735:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    973c:	00 00 
    973e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    9745:	00 00 
    9747:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    974e:	00 00 
    9750:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    9757:	00 00 
    9759:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    9760:	00 00 
    9762:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    9769:	00 00 00 
    976c:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    9773:	00 00 00 
    9776:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    977d:	01 00 00 
    9780:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    9787:	01 00 00 
    978a:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    9791:	01 00 00 
    9794:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    979b:	01 00 00 
    979e:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    97a5:	01 00 00 
    97a8:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    97af:	01 00 00 
    97b2:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    97b9:	00 
    97ba:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    97c1:	00 
    97c2:	b0 00                	mov    $0x0,%al
    97c4:	c3                   	retq   

00000000000097c5 <.SHM_ENV_CMP>:
    97c5:	53                   	push   %rbx
    97c6:	48                   	rex.W
    97c7:	4d 5f                	rex.WRB pop %r15
    97c9:	45                   	rex.RB
    97ca:	4e 56                	rex.WRX push %rsi
    97cc:	5f                   	pop    %rdi
    97cd:	43                   	rex.XB
    97ce:	4d 50                	rex.WRB push %r8
	...

00000000000097d1 <.SHM_ENV_EDGE>:
    97d1:	53                   	push   %rbx
    97d2:	48                   	rex.W
    97d3:	4d 5f                	rex.WRB pop %r15
    97d5:	45                   	rex.RB
    97d6:	4e 56                	rex.WRX push %rsi
    97d8:	5f                   	pop    %rdi
    97d9:	45                   	rex.RB
    97da:	44                   	rex.R
    97db:	47                   	rex.RXB
    97dc:	45                   	rex.RB
	...

00000000000097de <.SHM_ENV_GCNT>:
    97de:	53                   	push   %rbx
    97df:	48                   	rex.W
    97e0:	4d 5f                	rex.WRB pop %r15
    97e2:	45                   	rex.RB
    97e3:	4e 56                	rex.WRX push %rsi
    97e5:	5f                   	pop    %rdi
    97e6:	47                   	rex.RXB
    97e7:	43                   	rex.XB
    97e8:	4e 54                	rex.WRX push %rsp
	...

00000000000097eb <.serverSetupError>:
    97eb:	20 53 65             	and    %dl,0x65(%rbx)
    97ee:	72 76                	jb     9866 <_storeEdge+0x1e>
    97f0:	65 72 20             	gs jb  9813 <.serverSetupError+0x28>
    97f3:	53                   	push   %rbx
    97f4:	65 74 75             	gs je  986c <_storeEdge+0x24>
    97f7:	70 20                	jo     9819 <.serverSetupError+0x2e>
    97f9:	45 72 72             	rex.RB jb 986e <_storeEdge+0x26>
    97fc:	6f                   	outsl  %ds:(%rsi),(%dx)
    97fd:	72 2c                	jb     982b <.serverDied+0x9>
    97ff:	20 63 6f             	and    %ah,0x6f(%rbx)
    9802:	6e                   	outsb  %ds:(%rsi),(%dx)
    9803:	74 69                	je     986e <_storeEdge+0x26>
    9805:	6e                   	outsb  %ds:(%rsi),(%dx)
    9806:	75 65                	jne    986d <_storeEdge+0x25>
    9808:	20 72 75             	and    %dh,0x75(%rdx)
    980b:	6e                   	outsb  %ds:(%rsi),(%dx)
    980c:	6e                   	outsb  %ds:(%rsi),(%dx)
    980d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    9814:	6f                   	outsl  %ds:(%rsi),(%dx)
    9815:	75 74                	jne    988b <_storeEdge+0x43>
    9817:	20 73 65             	and    %dh,0x65(%rbx)
    981a:	72 76                	jb     9892 <_caledgehash>
    981c:	65 72 20             	gs jb  983f <.debug+0xa>
    981f:	0a 20                	or     (%rax),%ah
	...

0000000000009822 <.serverDied>:
    9822:	20 53 65             	and    %dl,0x65(%rbx)
    9825:	72 76                	jb     989d <_caledgehash+0xb>
    9827:	65 72 20             	gs jb  984a <_storeEdge+0x2>
    982a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    9831:	20 0a                	and    %cl,(%rdx)
    9833:	20 00                	and    %al,(%rax)

0000000000009835 <.debug>:
    9835:	64 65 62             	fs gs (bad) 
    9838:	75 67                	jne    98a1 <_caledgehash+0xf>
    983a:	20 6d 65             	and    %ch,0x65(%rbp)
    983d:	73 73                	jae    98b2 <_caledgehash+0x20>
    983f:	61                   	(bad)  
    9840:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    9844:	0a 20                	or     (%rax),%ah
    9846:	00                   	.byte 0x0
    9847:	90                   	nop

0000000000009848 <_storeEdge>:
    9848:	50                   	push   %rax
    9849:	53                   	push   %rbx
    984a:	51                   	push   %rcx
    984b:	52                   	push   %rdx
    984c:	48 83 3d fc a0 74 00 	cmpq   $0x1,0x74a0fc(%rip)        # 753950 <cmpPassed>
    9853:	01 
    9854:	75 3c                	jne    9892 <_caledgehash>
    9856:	48 c7 05 ef a0 74 00 	movq   $0x0,0x74a0ef(%rip)        # 753950 <cmpPassed>
    985d:	00 00 00 00 
    9861:	48 8b 05 c0 43 5f 00 	mov    0x5f43c0(%rip),%rax        # 5fdc28 <edgeCnt>
    9868:	48 c1 e0 03          	shl    $0x3,%rax
    986c:	48 3b 05 75 43 5f 00 	cmp    0x5f4375(%rip),%rax        # 5fdbe8 <shmSize2>
    9873:	77 55                	ja     98ca <_shm2Full>
    9875:	48 8b 1d 94 a0 74 00 	mov    0x74a094(%rip),%rbx        # 753910 <edgehash>
    987c:	48 8b 15 85 a0 74 00 	mov    0x74a085(%rip),%rdx        # 753908 <shmptr_edge>
    9883:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    9887:	48 89 19             	mov    %rbx,(%rcx)
    988a:	48 83 05 96 43 5f 00 	addq   $0x1,0x5f4396(%rip)        # 5fdc28 <edgeCnt>
    9891:	01 

0000000000009892 <_caledgehash>:
    9892:	48 8b 15 77 a0 74 00 	mov    0x74a077(%rip),%rdx        # 753910 <edgehash>
    9899:	48 89 d0             	mov    %rdx,%rax
    989c:	48 c1 e0 05          	shl    $0x5,%rax
    98a0:	48 01 c2             	add    %rax,%rdx
    98a3:	48 8b 05 96 a0 74 00 	mov    0x74a096(%rip),%rax        # 753940 <edgeId>
    98aa:	48 01 d0             	add    %rdx,%rax
    98ad:	48 89 05 5c a0 74 00 	mov    %rax,0x74a05c(%rip)        # 753910 <edgehash>
    98b4:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    98bb:	00 00 00 
    98be:	48 21 05 4b a0 74 00 	and    %rax,0x74a04b(%rip)        # 753910 <edgehash>
    98c5:	5a                   	pop    %rdx
    98c6:	59                   	pop    %rcx
    98c7:	5b                   	pop    %rbx
    98c8:	58                   	pop    %rax
    98c9:	c3                   	retq   

00000000000098ca <_shm2Full>:
    98ca:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    98d1:	5a                   	pop    %rdx
    98d2:	59                   	pop    %rcx
    98d3:	5b                   	pop    %rbx
    98d4:	58                   	pop    %rax
    98d5:	e8 d6 7f ff ff       	callq  18b0 <_exit@plt>
    98da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000098e0 <_storeDataFn>:
    98e0:	55                   	push   %rbp
    98e1:	48 89 e5             	mov    %rsp,%rbp
    98e4:	50                   	push   %rax
    98e5:	53                   	push   %rbx
    98e6:	41 50                	push   %r8
    98e8:	41 51                	push   %r9
    98ea:	41 52                	push   %r10
    98ec:	48 8b 05 45 a0 74 00 	mov    0x74a045(%rip),%rax        # 753938 <shmptr_gcnt>
    98f3:	48 8b 00             	mov    (%rax),%rax
    98f6:	48 c1 e0 03          	shl    $0x3,%rax
    98fa:	48 83 c0 30          	add    $0x30,%rax
    98fe:	48 3b 05 43 a0 74 00 	cmp    0x74a043(%rip),%rax        # 753948 <shmSize>
    9905:	0f 83 8f 01 00 00    	jae    9a9a <_shmFull>
    990b:	48 83 3d 1d a0 74 00 	cmpq   $0x0,0x74a01d(%rip)        # 753930 <shmptr_cmp>
    9912:	00 
    9913:	0f 84 99 01 00 00    	je     9ab2 <_shmUninitialize>
    9919:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    9920:	48 83 e8 30          	sub    $0x30,%rax
    9924:	48 c1 e8 03          	shr    $0x3,%rax

0000000000009928 <_storeloop>:
    9928:	49 89 c2             	mov    %rax,%r10
    992b:	49 c1 e2 03          	shl    $0x3,%r10
    992f:	4c 03 15 fa 9f 74 00 	add    0x749ffa(%rip),%r10        # 753930 <shmptr_cmp>
    9936:	49 89 d9             	mov    %rbx,%r9
    9939:	49 c1 e1 03          	shl    $0x3,%r9
    993d:	4c 8d 05 ac 42 5f 00 	lea    0x5f42ac(%rip),%r8        # 5fdbf0 <funcinptr>
    9944:	4d 01 c1             	add    %r8,%r9
    9947:	4d 8b 01             	mov    (%r9),%r8
    994a:	4d 89 02             	mov    %r8,(%r10)
    994d:	48 83 fb 00          	cmp    $0x0,%rbx
    9951:	75 07                	jne    995a <_no_get_cmpid>
    9953:	4c 89 05 ce 9f 74 00 	mov    %r8,0x749fce(%rip)        # 753928 <cmpid>

000000000000995a <_no_get_cmpid>:
    995a:	48 ff c0             	inc    %rax
    995d:	48 ff c3             	inc    %rbx
    9960:	48 83 fb 06          	cmp    $0x6,%rbx
    9964:	75 c2                	jne    9928 <_storeloop>
    9966:	48 8b 1d cb 9f 74 00 	mov    0x749fcb(%rip),%rbx        # 753938 <shmptr_gcnt>
    996d:	48 89 03             	mov    %rax,(%rbx)
    9970:	48 8b 05 b1 9f 74 00 	mov    0x749fb1(%rip),%rax        # 753928 <cmpid>
    9977:	48 c1 e0 04          	shl    $0x4,%rax
    997b:	48 89 c3             	mov    %rax,%rbx
    997e:	48 83 c3 08          	add    $0x8,%rbx
    9982:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    9989:	0f 83 17 01 00 00    	jae    9aa6 <_cmpdictFull>
    998f:	48 8d 1d aa 42 5f 00 	lea    0x5f42aa(%rip),%rbx        # 5fdc40 <cmpid_dict>
    9996:	48 01 d8             	add    %rbx,%rax
    9999:	48 83 38 00          	cmpq   $0x0,(%rax)
    999d:	0f 84 db 00 00 00    	je     9a7e <_insert_entry>
    99a3:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

00000000000099aa <_remove_repeated_cycle>:
    99aa:	4d 89 c1             	mov    %r8,%r9
    99ad:	4d 89 ca             	mov    %r9,%r10
    99b0:	49 c1 e1 02          	shl    $0x2,%r9
    99b4:	4d 01 d1             	add    %r10,%r9
    99b7:	4d 01 d1             	add    %r10,%r9
    99ba:	4c 8b 15 77 9f 74 00 	mov    0x749f77(%rip),%r10        # 753938 <shmptr_gcnt>
    99c1:	4d 8b 12             	mov    (%r10),%r10
    99c4:	4c 2b 10             	sub    (%rax),%r10
    99c7:	4c 3b 10             	cmp    (%rax),%r10
    99ca:	0f 87 9f 00 00 00    	ja     9a6f <_no_remove_cycle>
    99d0:	4d 39 ca             	cmp    %r9,%r10
    99d3:	76 67                	jbe    9a3c <_remove_cycle>
    99d5:	4d 89 c1             	mov    %r8,%r9
    99d8:	49 83 c1 01          	add    $0x1,%r9
    99dc:	4d 89 ca             	mov    %r9,%r10
    99df:	49 c1 e1 02          	shl    $0x2,%r9
    99e3:	4d 01 d1             	add    %r10,%r9
    99e6:	4d 01 d1             	add    %r10,%r9
    99e9:	4c 8b 15 48 9f 74 00 	mov    0x749f48(%rip),%r10        # 753938 <shmptr_gcnt>
    99f0:	4d 8b 12             	mov    (%r10),%r10
    99f3:	4d 29 ca             	sub    %r9,%r10
    99f6:	49 c1 e2 03          	shl    $0x3,%r10
    99fa:	4c 8b 0d 2f 9f 74 00 	mov    0x749f2f(%rip),%r9        # 753930 <shmptr_cmp>
    9a01:	4d 01 d1             	add    %r10,%r9
    9a04:	49 8b 19             	mov    (%r9),%rbx
    9a07:	4d 89 c1             	mov    %r8,%r9
    9a0a:	49 83 c1 01          	add    $0x1,%r9
    9a0e:	4d 89 ca             	mov    %r9,%r10
    9a11:	49 c1 e1 02          	shl    $0x2,%r9
    9a15:	4d 01 d1             	add    %r10,%r9
    9a18:	4d 01 d1             	add    %r10,%r9
    9a1b:	4c 8b 10             	mov    (%rax),%r10
    9a1e:	4d 29 ca             	sub    %r9,%r10
    9a21:	49 c1 e2 03          	shl    $0x3,%r10
    9a25:	4c 8b 0d 04 9f 74 00 	mov    0x749f04(%rip),%r9        # 753930 <shmptr_cmp>
    9a2c:	4d 01 d1             	add    %r10,%r9
    9a2f:	49 3b 19             	cmp    (%r9),%rbx
    9a32:	75 3b                	jne    9a6f <_no_remove_cycle>
    9a34:	49 ff c0             	inc    %r8
    9a37:	e9 6e ff ff ff       	jmpq   99aa <_remove_repeated_cycle>

0000000000009a3c <_remove_cycle>:
    9a3c:	48 89 15 d5 9e 74 00 	mov    %rdx,0x749ed5(%rip)        # 753918 <tmpquadone>
    9a43:	48 8b 10             	mov    (%rax),%rdx
    9a46:	48 8b 05 eb 9e 74 00 	mov    0x749eeb(%rip),%rax        # 753938 <shmptr_gcnt>
    9a4d:	48 89 10             	mov    %rdx,(%rax)
    9a50:	89 d0                	mov    %edx,%eax
    9a52:	48 c1 ea 20          	shr    $0x20,%rdx
    9a56:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    9a5d:	49 f7 f0             	div    %r8
    9a60:	89 05 c2 41 5f 00    	mov    %eax,0x5f41c2(%rip)        # 5fdc28 <edgeCnt>
    9a66:	48 8b 15 ab 9e 74 00 	mov    0x749eab(%rip),%rdx        # 753918 <tmpquadone>
    9a6d:	eb 1c                	jmp    9a8b <_skipstoredata>

0000000000009a6f <_no_remove_cycle>:
    9a6f:	48 8b 1d c2 9e 74 00 	mov    0x749ec2(%rip),%rbx        # 753938 <shmptr_gcnt>
    9a76:	48 8b 1b             	mov    (%rbx),%rbx
    9a79:	48 89 18             	mov    %rbx,(%rax)
    9a7c:	eb 0d                	jmp    9a8b <_skipstoredata>

0000000000009a7e <_insert_entry>:
    9a7e:	48 8b 1d b3 9e 74 00 	mov    0x749eb3(%rip),%rbx        # 753938 <shmptr_gcnt>
    9a85:	48 8b 1b             	mov    (%rbx),%rbx
    9a88:	48 89 18             	mov    %rbx,(%rax)

0000000000009a8b <_skipstoredata>:
    9a8b:	41 5a                	pop    %r10
    9a8d:	41 59                	pop    %r9
    9a8f:	41 58                	pop    %r8
    9a91:	5b                   	pop    %rbx
    9a92:	58                   	pop    %rax
    9a93:	48 89 ec             	mov    %rbp,%rsp
    9a96:	5d                   	pop    %rbp
    9a97:	c2 08 00             	retq   $0x8

0000000000009a9a <_shmFull>:
    9a9a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    9aa1:	e8 0a 7e ff ff       	callq  18b0 <_exit@plt>

0000000000009aa6 <_cmpdictFull>:
    9aa6:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    9aad:	e8 fe 7d ff ff       	callq  18b0 <_exit@plt>

0000000000009ab2 <_shmUninitialize>:
    9ab2:	48 89 ec             	mov    %rbp,%rsp
    9ab5:	5d                   	pop    %rbp
    9ab6:	48 31 c0             	xor    %rax,%rax
    9ab9:	c2 08 00             	retq   $0x8
    9abc:	0f 1f 40 00          	nopl   0x0(%rax)
    9ac0:	9f                   	lahf   
    9ac1:	0f 90 c0             	seto   %al
    9ac4:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000009ac8 <__afl_setup_first>:
    9ac8:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    9acf:	ff 
    9ad0:	48 89 04 24          	mov    %rax,(%rsp)
    9ad4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9ad9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    9ade:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    9ae3:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    9ae8:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    9aed:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    9af2:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    9af7:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    9afd:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    9b03:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    9b0a:	00 00 
    9b0c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    9b13:	00 00 
    9b15:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    9b1c:	00 00 
    9b1e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    9b25:	00 00 
    9b27:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    9b2e:	00 00 
    9b30:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    9b37:	00 00 
    9b39:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    9b40:	00 00 00 
    9b43:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    9b4a:	00 00 00 
    9b4d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    9b54:	01 00 00 
    9b57:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    9b5e:	01 00 00 
    9b61:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    9b68:	01 00 00 
    9b6b:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    9b72:	01 00 00 
    9b75:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    9b7c:	01 00 00 
    9b7f:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    9b86:	01 00 00 
    9b89:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    9b90:	00 
    9b91:	41 54                	push   %r12
    9b93:	49 89 e4             	mov    %rsp,%r12
    9b96:	48 83 ec 10          	sub    $0x10,%rsp
    9b9a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    9b9e:	48 c7 05 9f 9d 74 00 	movq   $0x100000,0x749d9f(%rip)        # 753948 <shmSize>
    9ba5:	00 00 10 00 
    9ba9:	48 c7 05 34 40 5f 00 	movq   $0x100000,0x5f4034(%rip)        # 5fdbe8 <shmSize2>
    9bb0:	00 00 10 00 
    9bb4:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # 9f06 <.SHM_ENV_GCNT>
    9bbb:	e8 a0 7c ff ff       	callq  1860 <getenv@plt>
    9bc0:	48 85 c0             	test   %rax,%rax
    9bc3:	0f 84 6a 01 00 00    	je     9d33 <__afl_setup_abort>
    9bc9:	48 89 c7             	mov    %rax,%rdi
    9bcc:	e8 1f 80 ff ff       	callq  1bf0 <atoi@plt>
    9bd1:	48 31 d2             	xor    %rdx,%rdx
    9bd4:	48 31 f6             	xor    %rsi,%rsi
    9bd7:	48 89 c7             	mov    %rax,%rdi
    9bda:	e8 f1 7f ff ff       	callq  1bd0 <shmat@plt>
    9bdf:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    9be3:	0f 84 4a 01 00 00    	je     9d33 <__afl_setup_abort>
    9be9:	48 89 05 48 9d 74 00 	mov    %rax,0x749d48(%rip)        # 753938 <shmptr_gcnt>
    9bf0:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # 9eed <.SHM_ENV_CMP>
    9bf7:	e8 64 7c ff ff       	callq  1860 <getenv@plt>
    9bfc:	48 85 c0             	test   %rax,%rax
    9bff:	0f 84 2e 01 00 00    	je     9d33 <__afl_setup_abort>
    9c05:	48 89 c7             	mov    %rax,%rdi
    9c08:	e8 e3 7f ff ff       	callq  1bf0 <atoi@plt>
    9c0d:	48 31 d2             	xor    %rdx,%rdx
    9c10:	48 31 f6             	xor    %rsi,%rsi
    9c13:	48 89 c7             	mov    %rax,%rdi
    9c16:	e8 b5 7f ff ff       	callq  1bd0 <shmat@plt>
    9c1b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    9c1f:	0f 84 0e 01 00 00    	je     9d33 <__afl_setup_abort>
    9c25:	48 89 05 04 9d 74 00 	mov    %rax,0x749d04(%rip)        # 753930 <shmptr_cmp>
    9c2c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # 9ef9 <.SHM_ENV_EDGE>
    9c33:	e8 28 7c ff ff       	callq  1860 <getenv@plt>
    9c38:	48 85 c0             	test   %rax,%rax
    9c3b:	0f 84 f2 00 00 00    	je     9d33 <__afl_setup_abort>
    9c41:	48 89 c7             	mov    %rax,%rdi
    9c44:	e8 a7 7f ff ff       	callq  1bf0 <atoi@plt>
    9c49:	48 31 d2             	xor    %rdx,%rdx
    9c4c:	48 31 f6             	xor    %rsi,%rsi
    9c4f:	48 89 c7             	mov    %rax,%rdi
    9c52:	e8 79 7f ff ff       	callq  1bd0 <shmat@plt>
    9c57:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    9c5b:	0f 84 d2 00 00 00    	je     9d33 <__afl_setup_abort>
    9c61:	48 89 05 a0 9c 74 00 	mov    %rax,0x749ca0(%rip)        # 753908 <shmptr_edge>

0000000000009c68 <__afl_forkserver>:
    9c68:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    9c6f:	48 8d 35 4e 3f 5f 00 	lea    0x5f3f4e(%rip),%rsi        # 5fdbc4 <__afl_temp>
    9c76:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    9c7d:	e8 4e 7c ff ff       	callq  18d0 <write@plt>
    9c82:	48 83 f8 04          	cmp    $0x4,%rax
    9c86:	0f 85 78 01 00 00    	jne    9e04 <__afl_fork_resume>

0000000000009c8c <__afl_fork_wait_loop>:
    9c8c:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    9c93:	48 8d 35 2a 3f 5f 00 	lea    0x5f3f2a(%rip),%rsi        # 5fdbc4 <__afl_temp>
    9c9a:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    9ca1:	e8 9a 7d ff ff       	callq  1a40 <read@plt>
    9ca6:	48 83 f8 04          	cmp    $0x4,%rax
    9caa:	75 70                	jne    9d1c <__afl_die>
    9cac:	e8 9f 7f ff ff       	callq  1c50 <fork@plt>
    9cb1:	48 83 f8 00          	cmp    $0x0,%rax
    9cb5:	7c 65                	jl     9d1c <__afl_die>
    9cb7:	0f 84 47 01 00 00    	je     9e04 <__afl_fork_resume>
    9cbd:	89 05 fd 3e 5f 00    	mov    %eax,0x5f3efd(%rip)        # 5fdbc0 <__afl_fork_pid>
    9cc3:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    9cca:	48 8d 35 ef 3e 5f 00 	lea    0x5f3eef(%rip),%rsi        # 5fdbc0 <__afl_fork_pid>
    9cd1:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    9cd8:	e8 f3 7b ff ff       	callq  18d0 <write@plt>
    9cdd:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    9ce4:	48 8d 35 d9 3e 5f 00 	lea    0x5f3ed9(%rip),%rsi        # 5fdbc4 <__afl_temp>
    9ceb:	48 8b 3d ce 3e 5f 00 	mov    0x5f3ece(%rip),%rdi        # 5fdbc0 <__afl_fork_pid>
    9cf2:	e8 89 7e ff ff       	callq  1b80 <waitpid@plt>
    9cf7:	48 83 f8 00          	cmp    $0x0,%rax
    9cfb:	7e 1f                	jle    9d1c <__afl_die>
    9cfd:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    9d04:	48 8d 35 b9 3e 5f 00 	lea    0x5f3eb9(%rip),%rsi        # 5fdbc4 <__afl_temp>
    9d0b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    9d12:	e8 b9 7b ff ff       	callq  18d0 <write@plt>
    9d17:	e9 70 ff ff ff       	jmpq   9c8c <__afl_fork_wait_loop>

0000000000009d1c <__afl_die>:
    9d1c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # 9f4a <.serverDied>
    9d23:	48 31 c0             	xor    %rax,%rax
    9d26:	e8 65 7c ff ff       	callq  1990 <printf@plt>
    9d2b:	48 31 c0             	xor    %rax,%rax
    9d2e:	e8 7d 7b ff ff       	callq  18b0 <_exit@plt>

0000000000009d33 <__afl_setup_abort>:
    9d33:	4c 89 e4             	mov    %r12,%rsp
    9d36:	41 5c                	pop    %r12
    9d38:	48 8b 04 24          	mov    (%rsp),%rax
    9d3c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    9d41:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    9d46:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    9d4b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    9d50:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    9d55:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    9d5a:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    9d5f:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    9d65:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    9d6b:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    9d72:	00 00 
    9d74:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    9d7b:	00 00 
    9d7d:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    9d84:	00 00 
    9d86:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    9d8d:	00 00 
    9d8f:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    9d96:	00 00 
    9d98:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    9d9f:	00 00 
    9da1:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    9da8:	00 00 00 
    9dab:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    9db2:	00 00 00 
    9db5:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    9dbc:	01 00 00 
    9dbf:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    9dc6:	01 00 00 
    9dc9:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    9dd0:	01 00 00 
    9dd3:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    9dda:	01 00 00 
    9ddd:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    9de4:	01 00 00 
    9de7:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    9dee:	01 00 00 
    9df1:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    9df8:	00 
    9df9:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    9e00:	00 
    9e01:	b0 7f                	mov    $0x7f,%al
    9e03:	c3                   	retq   

0000000000009e04 <__afl_fork_resume>:
    9e04:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    9e0b:	e8 00 7c ff ff       	callq  1a10 <close@plt>
    9e10:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    9e17:	e8 f4 7b ff ff       	callq  1a10 <close@plt>
    9e1c:	4c 89 e4             	mov    %r12,%rsp
    9e1f:	41 5c                	pop    %r12
    9e21:	48 8b 04 24          	mov    (%rsp),%rax
    9e25:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    9e2a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    9e2f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    9e34:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    9e39:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    9e3e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    9e43:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    9e48:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    9e4e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    9e54:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    9e5b:	00 00 
    9e5d:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    9e64:	00 00 
    9e66:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    9e6d:	00 00 
    9e6f:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    9e76:	00 00 
    9e78:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    9e7f:	00 00 
    9e81:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    9e88:	00 00 
    9e8a:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    9e91:	00 00 00 
    9e94:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    9e9b:	00 00 00 
    9e9e:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    9ea5:	01 00 00 
    9ea8:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    9eaf:	01 00 00 
    9eb2:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    9eb9:	01 00 00 
    9ebc:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    9ec3:	01 00 00 
    9ec6:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    9ecd:	01 00 00 
    9ed0:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    9ed7:	01 00 00 
    9eda:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    9ee1:	00 
    9ee2:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    9ee9:	00 
    9eea:	b0 00                	mov    $0x0,%al
    9eec:	c3                   	retq   

0000000000009eed <.SHM_ENV_CMP>:
    9eed:	53                   	push   %rbx
    9eee:	48                   	rex.W
    9eef:	4d 5f                	rex.WRB pop %r15
    9ef1:	45                   	rex.RB
    9ef2:	4e 56                	rex.WRX push %rsi
    9ef4:	5f                   	pop    %rdi
    9ef5:	43                   	rex.XB
    9ef6:	4d 50                	rex.WRB push %r8
	...

0000000000009ef9 <.SHM_ENV_EDGE>:
    9ef9:	53                   	push   %rbx
    9efa:	48                   	rex.W
    9efb:	4d 5f                	rex.WRB pop %r15
    9efd:	45                   	rex.RB
    9efe:	4e 56                	rex.WRX push %rsi
    9f00:	5f                   	pop    %rdi
    9f01:	45                   	rex.RB
    9f02:	44                   	rex.R
    9f03:	47                   	rex.RXB
    9f04:	45                   	rex.RB
	...

0000000000009f06 <.SHM_ENV_GCNT>:
    9f06:	53                   	push   %rbx
    9f07:	48                   	rex.W
    9f08:	4d 5f                	rex.WRB pop %r15
    9f0a:	45                   	rex.RB
    9f0b:	4e 56                	rex.WRX push %rsi
    9f0d:	5f                   	pop    %rdi
    9f0e:	47                   	rex.RXB
    9f0f:	43                   	rex.XB
    9f10:	4e 54                	rex.WRX push %rsp
	...

0000000000009f13 <.serverSetupError>:
    9f13:	20 53 65             	and    %dl,0x65(%rbx)
    9f16:	72 76                	jb     9f8e <_storeEdge+0x1e>
    9f18:	65 72 20             	gs jb  9f3b <.serverSetupError+0x28>
    9f1b:	53                   	push   %rbx
    9f1c:	65 74 75             	gs je  9f94 <_storeEdge+0x24>
    9f1f:	70 20                	jo     9f41 <.serverSetupError+0x2e>
    9f21:	45 72 72             	rex.RB jb 9f96 <_storeEdge+0x26>
    9f24:	6f                   	outsl  %ds:(%rsi),(%dx)
    9f25:	72 2c                	jb     9f53 <.serverDied+0x9>
    9f27:	20 63 6f             	and    %ah,0x6f(%rbx)
    9f2a:	6e                   	outsb  %ds:(%rsi),(%dx)
    9f2b:	74 69                	je     9f96 <_storeEdge+0x26>
    9f2d:	6e                   	outsb  %ds:(%rsi),(%dx)
    9f2e:	75 65                	jne    9f95 <_storeEdge+0x25>
    9f30:	20 72 75             	and    %dh,0x75(%rdx)
    9f33:	6e                   	outsb  %ds:(%rsi),(%dx)
    9f34:	6e                   	outsb  %ds:(%rsi),(%dx)
    9f35:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    9f3c:	6f                   	outsl  %ds:(%rsi),(%dx)
    9f3d:	75 74                	jne    9fb3 <_storeEdge+0x43>
    9f3f:	20 73 65             	and    %dh,0x65(%rbx)
    9f42:	72 76                	jb     9fba <_caledgehash>
    9f44:	65 72 20             	gs jb  9f67 <.debug+0xa>
    9f47:	0a 20                	or     (%rax),%ah
	...

0000000000009f4a <.serverDied>:
    9f4a:	20 53 65             	and    %dl,0x65(%rbx)
    9f4d:	72 76                	jb     9fc5 <_caledgehash+0xb>
    9f4f:	65 72 20             	gs jb  9f72 <_storeEdge+0x2>
    9f52:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    9f59:	20 0a                	and    %cl,(%rdx)
    9f5b:	20 00                	and    %al,(%rax)

0000000000009f5d <.debug>:
    9f5d:	64 65 62             	fs gs (bad) 
    9f60:	75 67                	jne    9fc9 <_caledgehash+0xf>
    9f62:	20 6d 65             	and    %ch,0x65(%rbp)
    9f65:	73 73                	jae    9fda <_caledgehash+0x20>
    9f67:	61                   	(bad)  
    9f68:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    9f6c:	0a 20                	or     (%rax),%ah
    9f6e:	00                   	.byte 0x0
    9f6f:	90                   	nop

0000000000009f70 <_storeEdge>:
    9f70:	50                   	push   %rax
    9f71:	53                   	push   %rbx
    9f72:	51                   	push   %rcx
    9f73:	52                   	push   %rdx
    9f74:	48 83 3d d4 99 74 00 	cmpq   $0x1,0x7499d4(%rip)        # 753950 <cmpPassed>
    9f7b:	01 
    9f7c:	75 3c                	jne    9fba <_caledgehash>
    9f7e:	48 c7 05 c7 99 74 00 	movq   $0x0,0x7499c7(%rip)        # 753950 <cmpPassed>
    9f85:	00 00 00 00 
    9f89:	48 8b 05 98 3c 5f 00 	mov    0x5f3c98(%rip),%rax        # 5fdc28 <edgeCnt>
    9f90:	48 c1 e0 03          	shl    $0x3,%rax
    9f94:	48 3b 05 4d 3c 5f 00 	cmp    0x5f3c4d(%rip),%rax        # 5fdbe8 <shmSize2>
    9f9b:	77 55                	ja     9ff2 <_shm2Full>
    9f9d:	48 8b 1d 6c 99 74 00 	mov    0x74996c(%rip),%rbx        # 753910 <edgehash>
    9fa4:	48 8b 15 5d 99 74 00 	mov    0x74995d(%rip),%rdx        # 753908 <shmptr_edge>
    9fab:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    9faf:	48 89 19             	mov    %rbx,(%rcx)
    9fb2:	48 83 05 6e 3c 5f 00 	addq   $0x1,0x5f3c6e(%rip)        # 5fdc28 <edgeCnt>
    9fb9:	01 

0000000000009fba <_caledgehash>:
    9fba:	48 8b 15 4f 99 74 00 	mov    0x74994f(%rip),%rdx        # 753910 <edgehash>
    9fc1:	48 89 d0             	mov    %rdx,%rax
    9fc4:	48 c1 e0 05          	shl    $0x5,%rax
    9fc8:	48 01 c2             	add    %rax,%rdx
    9fcb:	48 8b 05 6e 99 74 00 	mov    0x74996e(%rip),%rax        # 753940 <edgeId>
    9fd2:	48 01 d0             	add    %rdx,%rax
    9fd5:	48 89 05 34 99 74 00 	mov    %rax,0x749934(%rip)        # 753910 <edgehash>
    9fdc:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    9fe3:	00 00 00 
    9fe6:	48 21 05 23 99 74 00 	and    %rax,0x749923(%rip)        # 753910 <edgehash>
    9fed:	5a                   	pop    %rdx
    9fee:	59                   	pop    %rcx
    9fef:	5b                   	pop    %rbx
    9ff0:	58                   	pop    %rax
    9ff1:	c3                   	retq   

0000000000009ff2 <_shm2Full>:
    9ff2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    9ff9:	5a                   	pop    %rdx
    9ffa:	59                   	pop    %rcx
    9ffb:	5b                   	pop    %rbx
    9ffc:	58                   	pop    %rax
    9ffd:	e8 ae 78 ff ff       	callq  18b0 <_exit@plt>
    a002:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000a008 <_storeDataFn>:
    a008:	55                   	push   %rbp
    a009:	48 89 e5             	mov    %rsp,%rbp
    a00c:	50                   	push   %rax
    a00d:	53                   	push   %rbx
    a00e:	41 50                	push   %r8
    a010:	41 51                	push   %r9
    a012:	41 52                	push   %r10
    a014:	48 8b 05 1d 99 74 00 	mov    0x74991d(%rip),%rax        # 753938 <shmptr_gcnt>
    a01b:	48 8b 00             	mov    (%rax),%rax
    a01e:	48 c1 e0 03          	shl    $0x3,%rax
    a022:	48 83 c0 30          	add    $0x30,%rax
    a026:	48 3b 05 1b 99 74 00 	cmp    0x74991b(%rip),%rax        # 753948 <shmSize>
    a02d:	0f 83 8f 01 00 00    	jae    a1c2 <_shmFull>
    a033:	48 83 3d f5 98 74 00 	cmpq   $0x0,0x7498f5(%rip)        # 753930 <shmptr_cmp>
    a03a:	00 
    a03b:	0f 84 99 01 00 00    	je     a1da <_shmUninitialize>
    a041:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    a048:	48 83 e8 30          	sub    $0x30,%rax
    a04c:	48 c1 e8 03          	shr    $0x3,%rax

000000000000a050 <_storeloop>:
    a050:	49 89 c2             	mov    %rax,%r10
    a053:	49 c1 e2 03          	shl    $0x3,%r10
    a057:	4c 03 15 d2 98 74 00 	add    0x7498d2(%rip),%r10        # 753930 <shmptr_cmp>
    a05e:	49 89 d9             	mov    %rbx,%r9
    a061:	49 c1 e1 03          	shl    $0x3,%r9
    a065:	4c 8d 05 84 3b 5f 00 	lea    0x5f3b84(%rip),%r8        # 5fdbf0 <funcinptr>
    a06c:	4d 01 c1             	add    %r8,%r9
    a06f:	4d 8b 01             	mov    (%r9),%r8
    a072:	4d 89 02             	mov    %r8,(%r10)
    a075:	48 83 fb 00          	cmp    $0x0,%rbx
    a079:	75 07                	jne    a082 <_no_get_cmpid>
    a07b:	4c 89 05 a6 98 74 00 	mov    %r8,0x7498a6(%rip)        # 753928 <cmpid>

000000000000a082 <_no_get_cmpid>:
    a082:	48 ff c0             	inc    %rax
    a085:	48 ff c3             	inc    %rbx
    a088:	48 83 fb 06          	cmp    $0x6,%rbx
    a08c:	75 c2                	jne    a050 <_storeloop>
    a08e:	48 8b 1d a3 98 74 00 	mov    0x7498a3(%rip),%rbx        # 753938 <shmptr_gcnt>
    a095:	48 89 03             	mov    %rax,(%rbx)
    a098:	48 8b 05 89 98 74 00 	mov    0x749889(%rip),%rax        # 753928 <cmpid>
    a09f:	48 c1 e0 04          	shl    $0x4,%rax
    a0a3:	48 89 c3             	mov    %rax,%rbx
    a0a6:	48 83 c3 08          	add    $0x8,%rbx
    a0aa:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    a0b1:	0f 83 17 01 00 00    	jae    a1ce <_cmpdictFull>
    a0b7:	48 8d 1d 82 3b 5f 00 	lea    0x5f3b82(%rip),%rbx        # 5fdc40 <cmpid_dict>
    a0be:	48 01 d8             	add    %rbx,%rax
    a0c1:	48 83 38 00          	cmpq   $0x0,(%rax)
    a0c5:	0f 84 db 00 00 00    	je     a1a6 <_insert_entry>
    a0cb:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000a0d2 <_remove_repeated_cycle>:
    a0d2:	4d 89 c1             	mov    %r8,%r9
    a0d5:	4d 89 ca             	mov    %r9,%r10
    a0d8:	49 c1 e1 02          	shl    $0x2,%r9
    a0dc:	4d 01 d1             	add    %r10,%r9
    a0df:	4d 01 d1             	add    %r10,%r9
    a0e2:	4c 8b 15 4f 98 74 00 	mov    0x74984f(%rip),%r10        # 753938 <shmptr_gcnt>
    a0e9:	4d 8b 12             	mov    (%r10),%r10
    a0ec:	4c 2b 10             	sub    (%rax),%r10
    a0ef:	4c 3b 10             	cmp    (%rax),%r10
    a0f2:	0f 87 9f 00 00 00    	ja     a197 <_no_remove_cycle>
    a0f8:	4d 39 ca             	cmp    %r9,%r10
    a0fb:	76 67                	jbe    a164 <_remove_cycle>
    a0fd:	4d 89 c1             	mov    %r8,%r9
    a100:	49 83 c1 01          	add    $0x1,%r9
    a104:	4d 89 ca             	mov    %r9,%r10
    a107:	49 c1 e1 02          	shl    $0x2,%r9
    a10b:	4d 01 d1             	add    %r10,%r9
    a10e:	4d 01 d1             	add    %r10,%r9
    a111:	4c 8b 15 20 98 74 00 	mov    0x749820(%rip),%r10        # 753938 <shmptr_gcnt>
    a118:	4d 8b 12             	mov    (%r10),%r10
    a11b:	4d 29 ca             	sub    %r9,%r10
    a11e:	49 c1 e2 03          	shl    $0x3,%r10
    a122:	4c 8b 0d 07 98 74 00 	mov    0x749807(%rip),%r9        # 753930 <shmptr_cmp>
    a129:	4d 01 d1             	add    %r10,%r9
    a12c:	49 8b 19             	mov    (%r9),%rbx
    a12f:	4d 89 c1             	mov    %r8,%r9
    a132:	49 83 c1 01          	add    $0x1,%r9
    a136:	4d 89 ca             	mov    %r9,%r10
    a139:	49 c1 e1 02          	shl    $0x2,%r9
    a13d:	4d 01 d1             	add    %r10,%r9
    a140:	4d 01 d1             	add    %r10,%r9
    a143:	4c 8b 10             	mov    (%rax),%r10
    a146:	4d 29 ca             	sub    %r9,%r10
    a149:	49 c1 e2 03          	shl    $0x3,%r10
    a14d:	4c 8b 0d dc 97 74 00 	mov    0x7497dc(%rip),%r9        # 753930 <shmptr_cmp>
    a154:	4d 01 d1             	add    %r10,%r9
    a157:	49 3b 19             	cmp    (%r9),%rbx
    a15a:	75 3b                	jne    a197 <_no_remove_cycle>
    a15c:	49 ff c0             	inc    %r8
    a15f:	e9 6e ff ff ff       	jmpq   a0d2 <_remove_repeated_cycle>

000000000000a164 <_remove_cycle>:
    a164:	48 89 15 ad 97 74 00 	mov    %rdx,0x7497ad(%rip)        # 753918 <tmpquadone>
    a16b:	48 8b 10             	mov    (%rax),%rdx
    a16e:	48 8b 05 c3 97 74 00 	mov    0x7497c3(%rip),%rax        # 753938 <shmptr_gcnt>
    a175:	48 89 10             	mov    %rdx,(%rax)
    a178:	89 d0                	mov    %edx,%eax
    a17a:	48 c1 ea 20          	shr    $0x20,%rdx
    a17e:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    a185:	49 f7 f0             	div    %r8
    a188:	89 05 9a 3a 5f 00    	mov    %eax,0x5f3a9a(%rip)        # 5fdc28 <edgeCnt>
    a18e:	48 8b 15 83 97 74 00 	mov    0x749783(%rip),%rdx        # 753918 <tmpquadone>
    a195:	eb 1c                	jmp    a1b3 <_skipstoredata>

000000000000a197 <_no_remove_cycle>:
    a197:	48 8b 1d 9a 97 74 00 	mov    0x74979a(%rip),%rbx        # 753938 <shmptr_gcnt>
    a19e:	48 8b 1b             	mov    (%rbx),%rbx
    a1a1:	48 89 18             	mov    %rbx,(%rax)
    a1a4:	eb 0d                	jmp    a1b3 <_skipstoredata>

000000000000a1a6 <_insert_entry>:
    a1a6:	48 8b 1d 8b 97 74 00 	mov    0x74978b(%rip),%rbx        # 753938 <shmptr_gcnt>
    a1ad:	48 8b 1b             	mov    (%rbx),%rbx
    a1b0:	48 89 18             	mov    %rbx,(%rax)

000000000000a1b3 <_skipstoredata>:
    a1b3:	41 5a                	pop    %r10
    a1b5:	41 59                	pop    %r9
    a1b7:	41 58                	pop    %r8
    a1b9:	5b                   	pop    %rbx
    a1ba:	58                   	pop    %rax
    a1bb:	48 89 ec             	mov    %rbp,%rsp
    a1be:	5d                   	pop    %rbp
    a1bf:	c2 08 00             	retq   $0x8

000000000000a1c2 <_shmFull>:
    a1c2:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    a1c9:	e8 e2 76 ff ff       	callq  18b0 <_exit@plt>

000000000000a1ce <_cmpdictFull>:
    a1ce:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    a1d5:	e8 d6 76 ff ff       	callq  18b0 <_exit@plt>

000000000000a1da <_shmUninitialize>:
    a1da:	48 89 ec             	mov    %rbp,%rsp
    a1dd:	5d                   	pop    %rbp
    a1de:	48 31 c0             	xor    %rax,%rax
    a1e1:	c2 08 00             	retq   $0x8
    a1e4:	0f 1f 40 00          	nopl   0x0(%rax)
    a1e8:	9f                   	lahf   
    a1e9:	0f 90 c0             	seto   %al
    a1ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a1f0 <__afl_setup_first>:
    a1f0:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    a1f7:	ff 
    a1f8:	48 89 04 24          	mov    %rax,(%rsp)
    a1fc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a201:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    a206:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    a20b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    a210:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    a215:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    a21a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    a21f:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    a225:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    a22b:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    a232:	00 00 
    a234:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    a23b:	00 00 
    a23d:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    a244:	00 00 
    a246:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    a24d:	00 00 
    a24f:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    a256:	00 00 
    a258:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    a25f:	00 00 
    a261:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    a268:	00 00 00 
    a26b:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    a272:	00 00 00 
    a275:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    a27c:	01 00 00 
    a27f:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    a286:	01 00 00 
    a289:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    a290:	01 00 00 
    a293:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    a29a:	01 00 00 
    a29d:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    a2a4:	01 00 00 
    a2a7:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    a2ae:	01 00 00 
    a2b1:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    a2b8:	00 
    a2b9:	41 54                	push   %r12
    a2bb:	49 89 e4             	mov    %rsp,%r12
    a2be:	48 83 ec 10          	sub    $0x10,%rsp
    a2c2:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    a2c6:	48 c7 05 77 96 74 00 	movq   $0x100000,0x749677(%rip)        # 753948 <shmSize>
    a2cd:	00 00 10 00 
    a2d1:	48 c7 05 0c 39 5f 00 	movq   $0x100000,0x5f390c(%rip)        # 5fdbe8 <shmSize2>
    a2d8:	00 00 10 00 
    a2dc:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # a62e <.SHM_ENV_GCNT>
    a2e3:	e8 78 75 ff ff       	callq  1860 <getenv@plt>
    a2e8:	48 85 c0             	test   %rax,%rax
    a2eb:	0f 84 6a 01 00 00    	je     a45b <__afl_setup_abort>
    a2f1:	48 89 c7             	mov    %rax,%rdi
    a2f4:	e8 f7 78 ff ff       	callq  1bf0 <atoi@plt>
    a2f9:	48 31 d2             	xor    %rdx,%rdx
    a2fc:	48 31 f6             	xor    %rsi,%rsi
    a2ff:	48 89 c7             	mov    %rax,%rdi
    a302:	e8 c9 78 ff ff       	callq  1bd0 <shmat@plt>
    a307:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    a30b:	0f 84 4a 01 00 00    	je     a45b <__afl_setup_abort>
    a311:	48 89 05 20 96 74 00 	mov    %rax,0x749620(%rip)        # 753938 <shmptr_gcnt>
    a318:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # a615 <.SHM_ENV_CMP>
    a31f:	e8 3c 75 ff ff       	callq  1860 <getenv@plt>
    a324:	48 85 c0             	test   %rax,%rax
    a327:	0f 84 2e 01 00 00    	je     a45b <__afl_setup_abort>
    a32d:	48 89 c7             	mov    %rax,%rdi
    a330:	e8 bb 78 ff ff       	callq  1bf0 <atoi@plt>
    a335:	48 31 d2             	xor    %rdx,%rdx
    a338:	48 31 f6             	xor    %rsi,%rsi
    a33b:	48 89 c7             	mov    %rax,%rdi
    a33e:	e8 8d 78 ff ff       	callq  1bd0 <shmat@plt>
    a343:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    a347:	0f 84 0e 01 00 00    	je     a45b <__afl_setup_abort>
    a34d:	48 89 05 dc 95 74 00 	mov    %rax,0x7495dc(%rip)        # 753930 <shmptr_cmp>
    a354:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # a621 <.SHM_ENV_EDGE>
    a35b:	e8 00 75 ff ff       	callq  1860 <getenv@plt>
    a360:	48 85 c0             	test   %rax,%rax
    a363:	0f 84 f2 00 00 00    	je     a45b <__afl_setup_abort>
    a369:	48 89 c7             	mov    %rax,%rdi
    a36c:	e8 7f 78 ff ff       	callq  1bf0 <atoi@plt>
    a371:	48 31 d2             	xor    %rdx,%rdx
    a374:	48 31 f6             	xor    %rsi,%rsi
    a377:	48 89 c7             	mov    %rax,%rdi
    a37a:	e8 51 78 ff ff       	callq  1bd0 <shmat@plt>
    a37f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    a383:	0f 84 d2 00 00 00    	je     a45b <__afl_setup_abort>
    a389:	48 89 05 78 95 74 00 	mov    %rax,0x749578(%rip)        # 753908 <shmptr_edge>

000000000000a390 <__afl_forkserver>:
    a390:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    a397:	48 8d 35 2e 38 5f 00 	lea    0x5f382e(%rip),%rsi        # 5fdbcc <__afl_temp>
    a39e:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    a3a5:	e8 26 75 ff ff       	callq  18d0 <write@plt>
    a3aa:	48 83 f8 04          	cmp    $0x4,%rax
    a3ae:	0f 85 78 01 00 00    	jne    a52c <__afl_fork_resume>

000000000000a3b4 <__afl_fork_wait_loop>:
    a3b4:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    a3bb:	48 8d 35 0a 38 5f 00 	lea    0x5f380a(%rip),%rsi        # 5fdbcc <__afl_temp>
    a3c2:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    a3c9:	e8 72 76 ff ff       	callq  1a40 <read@plt>
    a3ce:	48 83 f8 04          	cmp    $0x4,%rax
    a3d2:	75 70                	jne    a444 <__afl_die>
    a3d4:	e8 77 78 ff ff       	callq  1c50 <fork@plt>
    a3d9:	48 83 f8 00          	cmp    $0x0,%rax
    a3dd:	7c 65                	jl     a444 <__afl_die>
    a3df:	0f 84 47 01 00 00    	je     a52c <__afl_fork_resume>
    a3e5:	89 05 dd 37 5f 00    	mov    %eax,0x5f37dd(%rip)        # 5fdbc8 <__afl_fork_pid>
    a3eb:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    a3f2:	48 8d 35 cf 37 5f 00 	lea    0x5f37cf(%rip),%rsi        # 5fdbc8 <__afl_fork_pid>
    a3f9:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    a400:	e8 cb 74 ff ff       	callq  18d0 <write@plt>
    a405:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    a40c:	48 8d 35 b9 37 5f 00 	lea    0x5f37b9(%rip),%rsi        # 5fdbcc <__afl_temp>
    a413:	48 8b 3d ae 37 5f 00 	mov    0x5f37ae(%rip),%rdi        # 5fdbc8 <__afl_fork_pid>
    a41a:	e8 61 77 ff ff       	callq  1b80 <waitpid@plt>
    a41f:	48 83 f8 00          	cmp    $0x0,%rax
    a423:	7e 1f                	jle    a444 <__afl_die>
    a425:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    a42c:	48 8d 35 99 37 5f 00 	lea    0x5f3799(%rip),%rsi        # 5fdbcc <__afl_temp>
    a433:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    a43a:	e8 91 74 ff ff       	callq  18d0 <write@plt>
    a43f:	e9 70 ff ff ff       	jmpq   a3b4 <__afl_fork_wait_loop>

000000000000a444 <__afl_die>:
    a444:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # a672 <.serverDied>
    a44b:	48 31 c0             	xor    %rax,%rax
    a44e:	e8 3d 75 ff ff       	callq  1990 <printf@plt>
    a453:	48 31 c0             	xor    %rax,%rax
    a456:	e8 55 74 ff ff       	callq  18b0 <_exit@plt>

000000000000a45b <__afl_setup_abort>:
    a45b:	4c 89 e4             	mov    %r12,%rsp
    a45e:	41 5c                	pop    %r12
    a460:	48 8b 04 24          	mov    (%rsp),%rax
    a464:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    a469:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    a46e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    a473:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    a478:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    a47d:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    a482:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    a487:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    a48d:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    a493:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    a49a:	00 00 
    a49c:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    a4a3:	00 00 
    a4a5:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    a4ac:	00 00 
    a4ae:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    a4b5:	00 00 
    a4b7:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    a4be:	00 00 
    a4c0:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    a4c7:	00 00 
    a4c9:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    a4d0:	00 00 00 
    a4d3:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    a4da:	00 00 00 
    a4dd:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    a4e4:	01 00 00 
    a4e7:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    a4ee:	01 00 00 
    a4f1:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    a4f8:	01 00 00 
    a4fb:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    a502:	01 00 00 
    a505:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    a50c:	01 00 00 
    a50f:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    a516:	01 00 00 
    a519:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    a520:	00 
    a521:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    a528:	00 
    a529:	b0 7f                	mov    $0x7f,%al
    a52b:	c3                   	retq   

000000000000a52c <__afl_fork_resume>:
    a52c:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    a533:	e8 d8 74 ff ff       	callq  1a10 <close@plt>
    a538:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    a53f:	e8 cc 74 ff ff       	callq  1a10 <close@plt>
    a544:	4c 89 e4             	mov    %r12,%rsp
    a547:	41 5c                	pop    %r12
    a549:	48 8b 04 24          	mov    (%rsp),%rax
    a54d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    a552:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    a557:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    a55c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    a561:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    a566:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    a56b:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    a570:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    a576:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    a57c:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    a583:	00 00 
    a585:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    a58c:	00 00 
    a58e:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    a595:	00 00 
    a597:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    a59e:	00 00 
    a5a0:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    a5a7:	00 00 
    a5a9:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    a5b0:	00 00 
    a5b2:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    a5b9:	00 00 00 
    a5bc:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    a5c3:	00 00 00 
    a5c6:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    a5cd:	01 00 00 
    a5d0:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    a5d7:	01 00 00 
    a5da:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    a5e1:	01 00 00 
    a5e4:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    a5eb:	01 00 00 
    a5ee:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    a5f5:	01 00 00 
    a5f8:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    a5ff:	01 00 00 
    a602:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    a609:	00 
    a60a:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    a611:	00 
    a612:	b0 00                	mov    $0x0,%al
    a614:	c3                   	retq   

000000000000a615 <.SHM_ENV_CMP>:
    a615:	53                   	push   %rbx
    a616:	48                   	rex.W
    a617:	4d 5f                	rex.WRB pop %r15
    a619:	45                   	rex.RB
    a61a:	4e 56                	rex.WRX push %rsi
    a61c:	5f                   	pop    %rdi
    a61d:	43                   	rex.XB
    a61e:	4d 50                	rex.WRB push %r8
	...

000000000000a621 <.SHM_ENV_EDGE>:
    a621:	53                   	push   %rbx
    a622:	48                   	rex.W
    a623:	4d 5f                	rex.WRB pop %r15
    a625:	45                   	rex.RB
    a626:	4e 56                	rex.WRX push %rsi
    a628:	5f                   	pop    %rdi
    a629:	45                   	rex.RB
    a62a:	44                   	rex.R
    a62b:	47                   	rex.RXB
    a62c:	45                   	rex.RB
	...

000000000000a62e <.SHM_ENV_GCNT>:
    a62e:	53                   	push   %rbx
    a62f:	48                   	rex.W
    a630:	4d 5f                	rex.WRB pop %r15
    a632:	45                   	rex.RB
    a633:	4e 56                	rex.WRX push %rsi
    a635:	5f                   	pop    %rdi
    a636:	47                   	rex.RXB
    a637:	43                   	rex.XB
    a638:	4e 54                	rex.WRX push %rsp
	...

000000000000a63b <.serverSetupError>:
    a63b:	20 53 65             	and    %dl,0x65(%rbx)
    a63e:	72 76                	jb     a6b6 <_storeEdge+0x1e>
    a640:	65 72 20             	gs jb  a663 <.serverSetupError+0x28>
    a643:	53                   	push   %rbx
    a644:	65 74 75             	gs je  a6bc <_storeEdge+0x24>
    a647:	70 20                	jo     a669 <.serverSetupError+0x2e>
    a649:	45 72 72             	rex.RB jb a6be <_storeEdge+0x26>
    a64c:	6f                   	outsl  %ds:(%rsi),(%dx)
    a64d:	72 2c                	jb     a67b <.serverDied+0x9>
    a64f:	20 63 6f             	and    %ah,0x6f(%rbx)
    a652:	6e                   	outsb  %ds:(%rsi),(%dx)
    a653:	74 69                	je     a6be <_storeEdge+0x26>
    a655:	6e                   	outsb  %ds:(%rsi),(%dx)
    a656:	75 65                	jne    a6bd <_storeEdge+0x25>
    a658:	20 72 75             	and    %dh,0x75(%rdx)
    a65b:	6e                   	outsb  %ds:(%rsi),(%dx)
    a65c:	6e                   	outsb  %ds:(%rsi),(%dx)
    a65d:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    a664:	6f                   	outsl  %ds:(%rsi),(%dx)
    a665:	75 74                	jne    a6db <_storeEdge+0x43>
    a667:	20 73 65             	and    %dh,0x65(%rbx)
    a66a:	72 76                	jb     a6e2 <_caledgehash>
    a66c:	65 72 20             	gs jb  a68f <.debug+0xa>
    a66f:	0a 20                	or     (%rax),%ah
	...

000000000000a672 <.serverDied>:
    a672:	20 53 65             	and    %dl,0x65(%rbx)
    a675:	72 76                	jb     a6ed <_caledgehash+0xb>
    a677:	65 72 20             	gs jb  a69a <_storeEdge+0x2>
    a67a:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    a681:	20 0a                	and    %cl,(%rdx)
    a683:	20 00                	and    %al,(%rax)

000000000000a685 <.debug>:
    a685:	64 65 62             	fs gs (bad) 
    a688:	75 67                	jne    a6f1 <_caledgehash+0xf>
    a68a:	20 6d 65             	and    %ch,0x65(%rbp)
    a68d:	73 73                	jae    a702 <_caledgehash+0x20>
    a68f:	61                   	(bad)  
    a690:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    a694:	0a 20                	or     (%rax),%ah
    a696:	00                   	.byte 0x0
    a697:	90                   	nop

000000000000a698 <_storeEdge>:
    a698:	50                   	push   %rax
    a699:	53                   	push   %rbx
    a69a:	51                   	push   %rcx
    a69b:	52                   	push   %rdx
    a69c:	48 83 3d ac 92 74 00 	cmpq   $0x1,0x7492ac(%rip)        # 753950 <cmpPassed>
    a6a3:	01 
    a6a4:	75 3c                	jne    a6e2 <_caledgehash>
    a6a6:	48 c7 05 9f 92 74 00 	movq   $0x0,0x74929f(%rip)        # 753950 <cmpPassed>
    a6ad:	00 00 00 00 
    a6b1:	48 8b 05 70 35 5f 00 	mov    0x5f3570(%rip),%rax        # 5fdc28 <edgeCnt>
    a6b8:	48 c1 e0 03          	shl    $0x3,%rax
    a6bc:	48 3b 05 25 35 5f 00 	cmp    0x5f3525(%rip),%rax        # 5fdbe8 <shmSize2>
    a6c3:	77 55                	ja     a71a <_shm2Full>
    a6c5:	48 8b 1d 44 92 74 00 	mov    0x749244(%rip),%rbx        # 753910 <edgehash>
    a6cc:	48 8b 15 35 92 74 00 	mov    0x749235(%rip),%rdx        # 753908 <shmptr_edge>
    a6d3:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    a6d7:	48 89 19             	mov    %rbx,(%rcx)
    a6da:	48 83 05 46 35 5f 00 	addq   $0x1,0x5f3546(%rip)        # 5fdc28 <edgeCnt>
    a6e1:	01 

000000000000a6e2 <_caledgehash>:
    a6e2:	48 8b 15 27 92 74 00 	mov    0x749227(%rip),%rdx        # 753910 <edgehash>
    a6e9:	48 89 d0             	mov    %rdx,%rax
    a6ec:	48 c1 e0 05          	shl    $0x5,%rax
    a6f0:	48 01 c2             	add    %rax,%rdx
    a6f3:	48 8b 05 46 92 74 00 	mov    0x749246(%rip),%rax        # 753940 <edgeId>
    a6fa:	48 01 d0             	add    %rdx,%rax
    a6fd:	48 89 05 0c 92 74 00 	mov    %rax,0x74920c(%rip)        # 753910 <edgehash>
    a704:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
    a70b:	00 00 00 
    a70e:	48 21 05 fb 91 74 00 	and    %rax,0x7491fb(%rip)        # 753910 <edgehash>
    a715:	5a                   	pop    %rdx
    a716:	59                   	pop    %rcx
    a717:	5b                   	pop    %rbx
    a718:	58                   	pop    %rax
    a719:	c3                   	retq   

000000000000a71a <_shm2Full>:
    a71a:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    a721:	5a                   	pop    %rdx
    a722:	59                   	pop    %rcx
    a723:	5b                   	pop    %rbx
    a724:	58                   	pop    %rax
    a725:	e8 86 71 ff ff       	callq  18b0 <_exit@plt>
    a72a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000a730 <_storeDataFn>:
    a730:	55                   	push   %rbp
    a731:	48 89 e5             	mov    %rsp,%rbp
    a734:	50                   	push   %rax
    a735:	53                   	push   %rbx
    a736:	41 50                	push   %r8
    a738:	41 51                	push   %r9
    a73a:	41 52                	push   %r10
    a73c:	48 8b 05 f5 91 74 00 	mov    0x7491f5(%rip),%rax        # 753938 <shmptr_gcnt>
    a743:	48 8b 00             	mov    (%rax),%rax
    a746:	48 c1 e0 03          	shl    $0x3,%rax
    a74a:	48 83 c0 30          	add    $0x30,%rax
    a74e:	48 3b 05 f3 91 74 00 	cmp    0x7491f3(%rip),%rax        # 753948 <shmSize>
    a755:	0f 83 8f 01 00 00    	jae    a8ea <_shmFull>
    a75b:	48 83 3d cd 91 74 00 	cmpq   $0x0,0x7491cd(%rip)        # 753930 <shmptr_cmp>
    a762:	00 
    a763:	0f 84 99 01 00 00    	je     a902 <_shmUninitialize>
    a769:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    a770:	48 83 e8 30          	sub    $0x30,%rax
    a774:	48 c1 e8 03          	shr    $0x3,%rax

000000000000a778 <_storeloop>:
    a778:	49 89 c2             	mov    %rax,%r10
    a77b:	49 c1 e2 03          	shl    $0x3,%r10
    a77f:	4c 03 15 aa 91 74 00 	add    0x7491aa(%rip),%r10        # 753930 <shmptr_cmp>
    a786:	49 89 d9             	mov    %rbx,%r9
    a789:	49 c1 e1 03          	shl    $0x3,%r9
    a78d:	4c 8d 05 5c 34 5f 00 	lea    0x5f345c(%rip),%r8        # 5fdbf0 <funcinptr>
    a794:	4d 01 c1             	add    %r8,%r9
    a797:	4d 8b 01             	mov    (%r9),%r8
    a79a:	4d 89 02             	mov    %r8,(%r10)
    a79d:	48 83 fb 00          	cmp    $0x0,%rbx
    a7a1:	75 07                	jne    a7aa <_no_get_cmpid>
    a7a3:	4c 89 05 7e 91 74 00 	mov    %r8,0x74917e(%rip)        # 753928 <cmpid>

000000000000a7aa <_no_get_cmpid>:
    a7aa:	48 ff c0             	inc    %rax
    a7ad:	48 ff c3             	inc    %rbx
    a7b0:	48 83 fb 06          	cmp    $0x6,%rbx
    a7b4:	75 c2                	jne    a778 <_storeloop>
    a7b6:	48 8b 1d 7b 91 74 00 	mov    0x74917b(%rip),%rbx        # 753938 <shmptr_gcnt>
    a7bd:	48 89 03             	mov    %rax,(%rbx)
    a7c0:	48 8b 05 61 91 74 00 	mov    0x749161(%rip),%rax        # 753928 <cmpid>
    a7c7:	48 c1 e0 04          	shl    $0x4,%rax
    a7cb:	48 89 c3             	mov    %rax,%rbx
    a7ce:	48 83 c3 08          	add    $0x8,%rbx
    a7d2:	48 81 fb c0 5c 15 00 	cmp    $0x155cc0,%rbx
    a7d9:	0f 83 17 01 00 00    	jae    a8f6 <_cmpdictFull>
    a7df:	48 8d 1d 5a 34 5f 00 	lea    0x5f345a(%rip),%rbx        # 5fdc40 <cmpid_dict>
    a7e6:	48 01 d8             	add    %rbx,%rax
    a7e9:	48 83 38 00          	cmpq   $0x0,(%rax)
    a7ed:	0f 84 db 00 00 00    	je     a8ce <_insert_entry>
    a7f3:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

000000000000a7fa <_remove_repeated_cycle>:
    a7fa:	4d 89 c1             	mov    %r8,%r9
    a7fd:	4d 89 ca             	mov    %r9,%r10
    a800:	49 c1 e1 02          	shl    $0x2,%r9
    a804:	4d 01 d1             	add    %r10,%r9
    a807:	4d 01 d1             	add    %r10,%r9
    a80a:	4c 8b 15 27 91 74 00 	mov    0x749127(%rip),%r10        # 753938 <shmptr_gcnt>
    a811:	4d 8b 12             	mov    (%r10),%r10
    a814:	4c 2b 10             	sub    (%rax),%r10
    a817:	4c 3b 10             	cmp    (%rax),%r10
    a81a:	0f 87 9f 00 00 00    	ja     a8bf <_no_remove_cycle>
    a820:	4d 39 ca             	cmp    %r9,%r10
    a823:	76 67                	jbe    a88c <_remove_cycle>
    a825:	4d 89 c1             	mov    %r8,%r9
    a828:	49 83 c1 01          	add    $0x1,%r9
    a82c:	4d 89 ca             	mov    %r9,%r10
    a82f:	49 c1 e1 02          	shl    $0x2,%r9
    a833:	4d 01 d1             	add    %r10,%r9
    a836:	4d 01 d1             	add    %r10,%r9
    a839:	4c 8b 15 f8 90 74 00 	mov    0x7490f8(%rip),%r10        # 753938 <shmptr_gcnt>
    a840:	4d 8b 12             	mov    (%r10),%r10
    a843:	4d 29 ca             	sub    %r9,%r10
    a846:	49 c1 e2 03          	shl    $0x3,%r10
    a84a:	4c 8b 0d df 90 74 00 	mov    0x7490df(%rip),%r9        # 753930 <shmptr_cmp>
    a851:	4d 01 d1             	add    %r10,%r9
    a854:	49 8b 19             	mov    (%r9),%rbx
    a857:	4d 89 c1             	mov    %r8,%r9
    a85a:	49 83 c1 01          	add    $0x1,%r9
    a85e:	4d 89 ca             	mov    %r9,%r10
    a861:	49 c1 e1 02          	shl    $0x2,%r9
    a865:	4d 01 d1             	add    %r10,%r9
    a868:	4d 01 d1             	add    %r10,%r9
    a86b:	4c 8b 10             	mov    (%rax),%r10
    a86e:	4d 29 ca             	sub    %r9,%r10
    a871:	49 c1 e2 03          	shl    $0x3,%r10
    a875:	4c 8b 0d b4 90 74 00 	mov    0x7490b4(%rip),%r9        # 753930 <shmptr_cmp>
    a87c:	4d 01 d1             	add    %r10,%r9
    a87f:	49 3b 19             	cmp    (%r9),%rbx
    a882:	75 3b                	jne    a8bf <_no_remove_cycle>
    a884:	49 ff c0             	inc    %r8
    a887:	e9 6e ff ff ff       	jmpq   a7fa <_remove_repeated_cycle>

000000000000a88c <_remove_cycle>:
    a88c:	48 89 15 85 90 74 00 	mov    %rdx,0x749085(%rip)        # 753918 <tmpquadone>
    a893:	48 8b 10             	mov    (%rax),%rdx
    a896:	48 8b 05 9b 90 74 00 	mov    0x74909b(%rip),%rax        # 753938 <shmptr_gcnt>
    a89d:	48 89 10             	mov    %rdx,(%rax)
    a8a0:	89 d0                	mov    %edx,%eax
    a8a2:	48 c1 ea 20          	shr    $0x20,%rdx
    a8a6:	49 c7 c0 06 00 00 00 	mov    $0x6,%r8
    a8ad:	49 f7 f0             	div    %r8
    a8b0:	89 05 72 33 5f 00    	mov    %eax,0x5f3372(%rip)        # 5fdc28 <edgeCnt>
    a8b6:	48 8b 15 5b 90 74 00 	mov    0x74905b(%rip),%rdx        # 753918 <tmpquadone>
    a8bd:	eb 1c                	jmp    a8db <_skipstoredata>

000000000000a8bf <_no_remove_cycle>:
    a8bf:	48 8b 1d 72 90 74 00 	mov    0x749072(%rip),%rbx        # 753938 <shmptr_gcnt>
    a8c6:	48 8b 1b             	mov    (%rbx),%rbx
    a8c9:	48 89 18             	mov    %rbx,(%rax)
    a8cc:	eb 0d                	jmp    a8db <_skipstoredata>

000000000000a8ce <_insert_entry>:
    a8ce:	48 8b 1d 63 90 74 00 	mov    0x749063(%rip),%rbx        # 753938 <shmptr_gcnt>
    a8d5:	48 8b 1b             	mov    (%rbx),%rbx
    a8d8:	48 89 18             	mov    %rbx,(%rax)

000000000000a8db <_skipstoredata>:
    a8db:	41 5a                	pop    %r10
    a8dd:	41 59                	pop    %r9
    a8df:	41 58                	pop    %r8
    a8e1:	5b                   	pop    %rbx
    a8e2:	58                   	pop    %rax
    a8e3:	48 89 ec             	mov    %rbp,%rsp
    a8e6:	5d                   	pop    %rbp
    a8e7:	c2 08 00             	retq   $0x8

000000000000a8ea <_shmFull>:
    a8ea:	48 c7 c0 0f 00 00 00 	mov    $0xf,%rax
    a8f1:	e8 ba 6f ff ff       	callq  18b0 <_exit@plt>

000000000000a8f6 <_cmpdictFull>:
    a8f6:	48 c7 c0 0e 00 00 00 	mov    $0xe,%rax
    a8fd:	e8 ae 6f ff ff       	callq  18b0 <_exit@plt>

000000000000a902 <_shmUninitialize>:
    a902:	48 89 ec             	mov    %rbp,%rsp
    a905:	5d                   	pop    %rbp
    a906:	48 31 c0             	xor    %rax,%rax
    a909:	c2 08 00             	retq   $0x8
    a90c:	0f 1f 40 00          	nopl   0x0(%rax)
    a910:	9f                   	lahf   
    a911:	0f 90 c0             	seto   %al
    a914:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a918 <__afl_setup_first>:
    a918:	48 8d a4 24 98 fe ff 	lea    -0x168(%rsp),%rsp
    a91f:	ff 
    a920:	48 89 04 24          	mov    %rax,(%rsp)
    a924:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a929:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    a92e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    a933:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    a938:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    a93d:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
    a942:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
    a947:	66 0f d6 44 24 60    	movq   %xmm0,0x60(%rsp)
    a94d:	66 0f d6 4c 24 70    	movq   %xmm1,0x70(%rsp)
    a953:	66 0f d6 94 24 80 00 	movq   %xmm2,0x80(%rsp)
    a95a:	00 00 
    a95c:	66 0f d6 9c 24 90 00 	movq   %xmm3,0x90(%rsp)
    a963:	00 00 
    a965:	66 0f d6 a4 24 a0 00 	movq   %xmm4,0xa0(%rsp)
    a96c:	00 00 
    a96e:	66 0f d6 ac 24 b0 00 	movq   %xmm5,0xb0(%rsp)
    a975:	00 00 
    a977:	66 0f d6 b4 24 c0 00 	movq   %xmm6,0xc0(%rsp)
    a97e:	00 00 
    a980:	66 0f d6 bc 24 d0 00 	movq   %xmm7,0xd0(%rsp)
    a987:	00 00 
    a989:	66 44 0f d6 84 24 e0 	movq   %xmm8,0xe0(%rsp)
    a990:	00 00 00 
    a993:	66 44 0f d6 8c 24 f0 	movq   %xmm9,0xf0(%rsp)
    a99a:	00 00 00 
    a99d:	66 44 0f d6 94 24 00 	movq   %xmm10,0x100(%rsp)
    a9a4:	01 00 00 
    a9a7:	66 44 0f d6 9c 24 10 	movq   %xmm11,0x110(%rsp)
    a9ae:	01 00 00 
    a9b1:	66 44 0f d6 a4 24 20 	movq   %xmm12,0x120(%rsp)
    a9b8:	01 00 00 
    a9bb:	66 44 0f d6 ac 24 30 	movq   %xmm13,0x130(%rsp)
    a9c2:	01 00 00 
    a9c5:	66 44 0f d6 b4 24 40 	movq   %xmm14,0x140(%rsp)
    a9cc:	01 00 00 
    a9cf:	66 44 0f d6 bc 24 50 	movq   %xmm15,0x150(%rsp)
    a9d6:	01 00 00 
    a9d9:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
    a9e0:	00 
    a9e1:	41 54                	push   %r12
    a9e3:	49 89 e4             	mov    %rsp,%r12
    a9e6:	48 83 ec 10          	sub    $0x10,%rsp
    a9ea:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    a9ee:	48 c7 05 4f 8f 74 00 	movq   $0x100000,0x748f4f(%rip)        # 753948 <shmSize>
    a9f5:	00 00 10 00 
    a9f9:	48 c7 05 e4 31 5f 00 	movq   $0x100000,0x5f31e4(%rip)        # 5fdbe8 <shmSize2>
    aa00:	00 00 10 00 
    aa04:	48 8d 3d 4b 03 00 00 	lea    0x34b(%rip),%rdi        # ad56 <.SHM_ENV_GCNT>
    aa0b:	e8 50 6e ff ff       	callq  1860 <getenv@plt>
    aa10:	48 85 c0             	test   %rax,%rax
    aa13:	0f 84 6a 01 00 00    	je     ab83 <__afl_setup_abort>
    aa19:	48 89 c7             	mov    %rax,%rdi
    aa1c:	e8 cf 71 ff ff       	callq  1bf0 <atoi@plt>
    aa21:	48 31 d2             	xor    %rdx,%rdx
    aa24:	48 31 f6             	xor    %rsi,%rsi
    aa27:	48 89 c7             	mov    %rax,%rdi
    aa2a:	e8 a1 71 ff ff       	callq  1bd0 <shmat@plt>
    aa2f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    aa33:	0f 84 4a 01 00 00    	je     ab83 <__afl_setup_abort>
    aa39:	48 89 05 f8 8e 74 00 	mov    %rax,0x748ef8(%rip)        # 753938 <shmptr_gcnt>
    aa40:	48 8d 3d f6 02 00 00 	lea    0x2f6(%rip),%rdi        # ad3d <.SHM_ENV_CMP>
    aa47:	e8 14 6e ff ff       	callq  1860 <getenv@plt>
    aa4c:	48 85 c0             	test   %rax,%rax
    aa4f:	0f 84 2e 01 00 00    	je     ab83 <__afl_setup_abort>
    aa55:	48 89 c7             	mov    %rax,%rdi
    aa58:	e8 93 71 ff ff       	callq  1bf0 <atoi@plt>
    aa5d:	48 31 d2             	xor    %rdx,%rdx
    aa60:	48 31 f6             	xor    %rsi,%rsi
    aa63:	48 89 c7             	mov    %rax,%rdi
    aa66:	e8 65 71 ff ff       	callq  1bd0 <shmat@plt>
    aa6b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    aa6f:	0f 84 0e 01 00 00    	je     ab83 <__afl_setup_abort>
    aa75:	48 89 05 b4 8e 74 00 	mov    %rax,0x748eb4(%rip)        # 753930 <shmptr_cmp>
    aa7c:	48 8d 3d c6 02 00 00 	lea    0x2c6(%rip),%rdi        # ad49 <.SHM_ENV_EDGE>
    aa83:	e8 d8 6d ff ff       	callq  1860 <getenv@plt>
    aa88:	48 85 c0             	test   %rax,%rax
    aa8b:	0f 84 f2 00 00 00    	je     ab83 <__afl_setup_abort>
    aa91:	48 89 c7             	mov    %rax,%rdi
    aa94:	e8 57 71 ff ff       	callq  1bf0 <atoi@plt>
    aa99:	48 31 d2             	xor    %rdx,%rdx
    aa9c:	48 31 f6             	xor    %rsi,%rsi
    aa9f:	48 89 c7             	mov    %rax,%rdi
    aaa2:	e8 29 71 ff ff       	callq  1bd0 <shmat@plt>
    aaa7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    aaab:	0f 84 d2 00 00 00    	je     ab83 <__afl_setup_abort>
    aab1:	48 89 05 50 8e 74 00 	mov    %rax,0x748e50(%rip)        # 753908 <shmptr_edge>

000000000000aab8 <__afl_forkserver>:
    aab8:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    aabf:	48 8d 35 16 31 5f 00 	lea    0x5f3116(%rip),%rsi        # 5fdbdc <__afl_temp>
    aac6:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    aacd:	e8 fe 6d ff ff       	callq  18d0 <write@plt>
    aad2:	48 83 f8 04          	cmp    $0x4,%rax
    aad6:	0f 85 78 01 00 00    	jne    ac54 <__afl_fork_resume>

000000000000aadc <__afl_fork_wait_loop>:
    aadc:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    aae3:	48 8d 35 f2 30 5f 00 	lea    0x5f30f2(%rip),%rsi        # 5fdbdc <__afl_temp>
    aaea:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    aaf1:	e8 4a 6f ff ff       	callq  1a40 <read@plt>
    aaf6:	48 83 f8 04          	cmp    $0x4,%rax
    aafa:	75 70                	jne    ab6c <__afl_die>
    aafc:	e8 4f 71 ff ff       	callq  1c50 <fork@plt>
    ab01:	48 83 f8 00          	cmp    $0x0,%rax
    ab05:	7c 65                	jl     ab6c <__afl_die>
    ab07:	0f 84 47 01 00 00    	je     ac54 <__afl_fork_resume>
    ab0d:	89 05 c5 30 5f 00    	mov    %eax,0x5f30c5(%rip)        # 5fdbd8 <__afl_fork_pid>
    ab13:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    ab1a:	48 8d 35 b7 30 5f 00 	lea    0x5f30b7(%rip),%rsi        # 5fdbd8 <__afl_fork_pid>
    ab21:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    ab28:	e8 a3 6d ff ff       	callq  18d0 <write@plt>
    ab2d:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    ab34:	48 8d 35 a1 30 5f 00 	lea    0x5f30a1(%rip),%rsi        # 5fdbdc <__afl_temp>
    ab3b:	48 8b 3d 96 30 5f 00 	mov    0x5f3096(%rip),%rdi        # 5fdbd8 <__afl_fork_pid>
    ab42:	e8 39 70 ff ff       	callq  1b80 <waitpid@plt>
    ab47:	48 83 f8 00          	cmp    $0x0,%rax
    ab4b:	7e 1f                	jle    ab6c <__afl_die>
    ab4d:	48 c7 c2 04 00 00 00 	mov    $0x4,%rdx
    ab54:	48 8d 35 81 30 5f 00 	lea    0x5f3081(%rip),%rsi        # 5fdbdc <__afl_temp>
    ab5b:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    ab62:	e8 69 6d ff ff       	callq  18d0 <write@plt>
    ab67:	e9 70 ff ff ff       	jmpq   aadc <__afl_fork_wait_loop>

000000000000ab6c <__afl_die>:
    ab6c:	48 8d 3d 27 02 00 00 	lea    0x227(%rip),%rdi        # ad9a <.serverDied>
    ab73:	48 31 c0             	xor    %rax,%rax
    ab76:	e8 15 6e ff ff       	callq  1990 <printf@plt>
    ab7b:	48 31 c0             	xor    %rax,%rax
    ab7e:	e8 2d 6d ff ff       	callq  18b0 <_exit@plt>

000000000000ab83 <__afl_setup_abort>:
    ab83:	4c 89 e4             	mov    %r12,%rsp
    ab86:	41 5c                	pop    %r12
    ab88:	48 8b 04 24          	mov    (%rsp),%rax
    ab8c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    ab91:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    ab96:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    ab9b:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    aba0:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    aba5:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    abaa:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    abaf:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    abb5:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    abbb:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    abc2:	00 00 
    abc4:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    abcb:	00 00 
    abcd:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    abd4:	00 00 
    abd6:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    abdd:	00 00 
    abdf:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    abe6:	00 00 
    abe8:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    abef:	00 00 
    abf1:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    abf8:	00 00 00 
    abfb:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    ac02:	00 00 00 
    ac05:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    ac0c:	01 00 00 
    ac0f:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    ac16:	01 00 00 
    ac19:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    ac20:	01 00 00 
    ac23:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    ac2a:	01 00 00 
    ac2d:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    ac34:	01 00 00 
    ac37:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    ac3e:	01 00 00 
    ac41:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    ac48:	00 
    ac49:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    ac50:	00 
    ac51:	b0 7f                	mov    $0x7f,%al
    ac53:	c3                   	retq   

000000000000ac54 <__afl_fork_resume>:
    ac54:	48 c7 c7 c4 00 00 00 	mov    $0xc4,%rdi
    ac5b:	e8 b0 6d ff ff       	callq  1a10 <close@plt>
    ac60:	48 c7 c7 c5 00 00 00 	mov    $0xc5,%rdi
    ac67:	e8 a4 6d ff ff       	callq  1a10 <close@plt>
    ac6c:	4c 89 e4             	mov    %r12,%rsp
    ac6f:	41 5c                	pop    %r12
    ac71:	48 8b 04 24          	mov    (%rsp),%rax
    ac75:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    ac7a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    ac7f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    ac84:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
    ac89:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    ac8e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
    ac93:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
    ac98:	f3 0f 7e 44 24 60    	movq   0x60(%rsp),%xmm0
    ac9e:	f3 0f 7e 4c 24 70    	movq   0x70(%rsp),%xmm1
    aca4:	f3 0f 7e 94 24 80 00 	movq   0x80(%rsp),%xmm2
    acab:	00 00 
    acad:	f3 0f 7e 9c 24 90 00 	movq   0x90(%rsp),%xmm3
    acb4:	00 00 
    acb6:	f3 0f 7e a4 24 a0 00 	movq   0xa0(%rsp),%xmm4
    acbd:	00 00 
    acbf:	f3 0f 7e ac 24 b0 00 	movq   0xb0(%rsp),%xmm5
    acc6:	00 00 
    acc8:	f3 0f 7e b4 24 c0 00 	movq   0xc0(%rsp),%xmm6
    accf:	00 00 
    acd1:	f3 0f 7e bc 24 d0 00 	movq   0xd0(%rsp),%xmm7
    acd8:	00 00 
    acda:	f3 44 0f 7e 84 24 e0 	movq   0xe0(%rsp),%xmm8
    ace1:	00 00 00 
    ace4:	f3 44 0f 7e 8c 24 f0 	movq   0xf0(%rsp),%xmm9
    aceb:	00 00 00 
    acee:	f3 44 0f 7e 94 24 00 	movq   0x100(%rsp),%xmm10
    acf5:	01 00 00 
    acf8:	f3 44 0f 7e 9c 24 10 	movq   0x110(%rsp),%xmm11
    acff:	01 00 00 
    ad02:	f3 44 0f 7e a4 24 20 	movq   0x120(%rsp),%xmm12
    ad09:	01 00 00 
    ad0c:	f3 44 0f 7e ac 24 30 	movq   0x130(%rsp),%xmm13
    ad13:	01 00 00 
    ad16:	f3 44 0f 7e b4 24 40 	movq   0x140(%rsp),%xmm14
    ad1d:	01 00 00 
    ad20:	f3 44 0f 7e bc 24 50 	movq   0x150(%rsp),%xmm15
    ad27:	01 00 00 
    ad2a:	48 8b 94 24 60 01 00 	mov    0x160(%rsp),%rdx
    ad31:	00 
    ad32:	48 8d a4 24 68 01 00 	lea    0x168(%rsp),%rsp
    ad39:	00 
    ad3a:	b0 00                	mov    $0x0,%al
    ad3c:	c3                   	retq   

000000000000ad3d <.SHM_ENV_CMP>:
    ad3d:	53                   	push   %rbx
    ad3e:	48                   	rex.W
    ad3f:	4d 5f                	rex.WRB pop %r15
    ad41:	45                   	rex.RB
    ad42:	4e 56                	rex.WRX push %rsi
    ad44:	5f                   	pop    %rdi
    ad45:	43                   	rex.XB
    ad46:	4d 50                	rex.WRB push %r8
	...

000000000000ad49 <.SHM_ENV_EDGE>:
    ad49:	53                   	push   %rbx
    ad4a:	48                   	rex.W
    ad4b:	4d 5f                	rex.WRB pop %r15
    ad4d:	45                   	rex.RB
    ad4e:	4e 56                	rex.WRX push %rsi
    ad50:	5f                   	pop    %rdi
    ad51:	45                   	rex.RB
    ad52:	44                   	rex.R
    ad53:	47                   	rex.RXB
    ad54:	45                   	rex.RB
	...

000000000000ad56 <.SHM_ENV_GCNT>:
    ad56:	53                   	push   %rbx
    ad57:	48                   	rex.W
    ad58:	4d 5f                	rex.WRB pop %r15
    ad5a:	45                   	rex.RB
    ad5b:	4e 56                	rex.WRX push %rsi
    ad5d:	5f                   	pop    %rdi
    ad5e:	47                   	rex.RXB
    ad5f:	43                   	rex.XB
    ad60:	4e 54                	rex.WRX push %rsp
	...

000000000000ad63 <.serverSetupError>:
    ad63:	20 53 65             	and    %dl,0x65(%rbx)
    ad66:	72 76                	jb     adde <_start+0x1e>
    ad68:	65 72 20             	gs jb  ad8b <.serverSetupError+0x28>
    ad6b:	53                   	push   %rbx
    ad6c:	65 74 75             	gs je  ade4 <_start+0x24>
    ad6f:	70 20                	jo     ad91 <.serverSetupError+0x2e>
    ad71:	45 72 72             	rex.RB jb ade6 <_start+0x26>
    ad74:	6f                   	outsl  %ds:(%rsi),(%dx)
    ad75:	72 2c                	jb     ada3 <.serverDied+0x9>
    ad77:	20 63 6f             	and    %ah,0x6f(%rbx)
    ad7a:	6e                   	outsb  %ds:(%rsi),(%dx)
    ad7b:	74 69                	je     ade6 <_start+0x26>
    ad7d:	6e                   	outsb  %ds:(%rsi),(%dx)
    ad7e:	75 65                	jne    ade5 <_start+0x25>
    ad80:	20 72 75             	and    %dh,0x75(%rdx)
    ad83:	6e                   	outsb  %ds:(%rsi),(%dx)
    ad84:	6e                   	outsb  %ds:(%rsi),(%dx)
    ad85:	69 67 20 77 69 74 68 	imul   $0x68746977,0x20(%rdi),%esp
    ad8c:	6f                   	outsl  %ds:(%rsi),(%dx)
    ad8d:	75 74                	jne    ae03 <deregister_tm_clones+0x13>
    ad8f:	20 73 65             	and    %dh,0x65(%rbx)
    ad92:	72 76                	jb     ae0a <deregister_tm_clones+0x1a>
    ad94:	65 72 20             	gs jb  adb7 <.debug+0xa>
    ad97:	0a 20                	or     (%rax),%ah
	...

000000000000ad9a <.serverDied>:
    ad9a:	20 53 65             	and    %dl,0x65(%rbx)
    ad9d:	72 76                	jb     ae15 <deregister_tm_clones+0x25>
    ad9f:	65 72 20             	gs jb  adc2 <_start+0x2>
    ada2:	69 73 20 64 65 61 64 	imul   $0x64616564,0x20(%rbx),%esi
    ada9:	20 0a                	and    %cl,(%rdx)
    adab:	20 00                	and    %al,(%rax)

000000000000adad <.debug>:
    adad:	64 65 62             	fs gs (bad) 
    adb0:	75 67                	jne    ae19 <deregister_tm_clones+0x29>
    adb2:	20 6d 65             	and    %ch,0x65(%rbp)
    adb5:	73 73                	jae    ae2a <deregister_tm_clones+0x3a>
    adb7:	61                   	(bad)  
    adb8:	67 65 3a 20          	cmp    %gs:(%eax),%ah
    adbc:	0a 20                	or     (%rax),%ah
    adbe:	00                   	.byte 0x0
    adbf:	90                   	nop

000000000000adc0 <_start>:
    adc0:	31 ed                	xor    %ebp,%ebp
    adc2:	49 89 d1             	mov    %rdx,%r9
    adc5:	5e                   	pop    %rsi
    adc6:	48 89 e2             	mov    %rsp,%rdx
    adc9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    adcd:	50                   	push   %rax
    adce:	54                   	push   %rsp
    adcf:	4c 8d 05 7a e5 01 00 	lea    0x1e57a(%rip),%r8        # 29350 <__libc_csu_fini>
    add6:	48 8d 0d 03 e5 01 00 	lea    0x1e503(%rip),%rcx        # 292e0 <__libc_csu_init>
    addd:	48 8d 3d 9c 6e ff ff 	lea    -0x9164(%rip),%rdi        # 1c80 <main>
    ade4:	ff 15 de 21 22 00    	callq  *0x2221de(%rip)        # 22cfc8 <__libc_start_main@GLIBC_2.2.5>
    adea:	f4                   	hlt    
    adeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000adf0 <deregister_tm_clones>:
    adf0:	48 8d 3d 89 22 22 00 	lea    0x222289(%rip),%rdi        # 22d080 <__progname@@GLIBC_2.2.5>
    adf7:	55                   	push   %rbp
    adf8:	48 8d 05 81 22 22 00 	lea    0x222281(%rip),%rax        # 22d080 <__progname@@GLIBC_2.2.5>
    adff:	48 39 f8             	cmp    %rdi,%rax
    ae02:	48 89 e5             	mov    %rsp,%rbp
    ae05:	74 19                	je     ae20 <deregister_tm_clones+0x30>
    ae07:	48 8b 05 b2 21 22 00 	mov    0x2221b2(%rip),%rax        # 22cfc0 <_ITM_deregisterTMCloneTable>
    ae0e:	48 85 c0             	test   %rax,%rax
    ae11:	74 0d                	je     ae20 <deregister_tm_clones+0x30>
    ae13:	5d                   	pop    %rbp
    ae14:	ff e0                	jmpq   *%rax
    ae16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ae1d:	00 00 00 
    ae20:	5d                   	pop    %rbp
    ae21:	c3                   	retq   
    ae22:	0f 1f 40 00          	nopl   0x0(%rax)
    ae26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ae2d:	00 00 00 

000000000000ae30 <register_tm_clones>:
    ae30:	48 8d 3d 49 22 22 00 	lea    0x222249(%rip),%rdi        # 22d080 <__progname@@GLIBC_2.2.5>
    ae37:	48 8d 35 42 22 22 00 	lea    0x222242(%rip),%rsi        # 22d080 <__progname@@GLIBC_2.2.5>
    ae3e:	55                   	push   %rbp
    ae3f:	48 29 fe             	sub    %rdi,%rsi
    ae42:	48 89 e5             	mov    %rsp,%rbp
    ae45:	48 c1 fe 03          	sar    $0x3,%rsi
    ae49:	48 89 f0             	mov    %rsi,%rax
    ae4c:	48 c1 e8 3f          	shr    $0x3f,%rax
    ae50:	48 01 c6             	add    %rax,%rsi
    ae53:	48 d1 fe             	sar    %rsi
    ae56:	74 18                	je     ae70 <register_tm_clones+0x40>
    ae58:	48 8b 05 79 21 22 00 	mov    0x222179(%rip),%rax        # 22cfd8 <_ITM_registerTMCloneTable>
    ae5f:	48 85 c0             	test   %rax,%rax
    ae62:	74 0c                	je     ae70 <register_tm_clones+0x40>
    ae64:	5d                   	pop    %rbp
    ae65:	ff e0                	jmpq   *%rax
    ae67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ae6e:	00 00 
    ae70:	5d                   	pop    %rbp
    ae71:	c3                   	retq   
    ae72:	0f 1f 40 00          	nopl   0x0(%rax)
    ae76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ae7d:	00 00 00 

000000000000ae80 <__do_global_dtors_aux>:
    ae80:	80 3d 41 22 22 00 00 	cmpb   $0x0,0x222241(%rip)        # 22d0c8 <completed.7698>
    ae87:	75 2f                	jne    aeb8 <__do_global_dtors_aux+0x38>
    ae89:	48 83 3d 4f 21 22 00 	cmpq   $0x0,0x22214f(%rip)        # 22cfe0 <__cxa_finalize@GLIBC_2.2.5>
    ae90:	00 
    ae91:	55                   	push   %rbp
    ae92:	48 89 e5             	mov    %rsp,%rbp
    ae95:	74 0c                	je     aea3 <__do_global_dtors_aux+0x23>
    ae97:	48 8b 3d 6a 21 22 00 	mov    0x22216a(%rip),%rdi        # 22d008 <__dso_handle>
    ae9e:	e8 cd 6d ff ff       	callq  1c70 <__cxa_finalize@plt>
    aea3:	e8 48 ff ff ff       	callq  adf0 <deregister_tm_clones>
    aea8:	c6 05 19 22 22 00 01 	movb   $0x1,0x222219(%rip)        # 22d0c8 <completed.7698>
    aeaf:	5d                   	pop    %rbp
    aeb0:	c3                   	retq   
    aeb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    aeb8:	f3 c3                	repz retq 
    aeba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000aec0 <frame_dummy>:
    aec0:	55                   	push   %rbp
    aec1:	48 89 e5             	mov    %rsp,%rbp
    aec4:	5d                   	pop    %rbp
    aec5:	e9 66 ff ff ff       	jmpq   ae30 <register_tm_clones>
    aeca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000aed0 <do_encode>:
{
    aed0:	41 57                	push   %r15
    aed2:	41 56                	push   %r14
    aed4:	41 55                	push   %r13
    aed6:	41 54                	push   %r12
  size_t current_column = 0;
    aed8:	45 31 ed             	xor    %r13d,%r13d
{
    aedb:	55                   	push   %rbp
    aedc:	53                   	push   %rbx
          n = fread (inbuf + sum, 1, ENC_BLOCKSIZE - sum, in);
    aedd:	41 bc 00 78 00 00    	mov    $0x7800,%r12d
{
    aee3:	48 89 fb             	mov    %rdi,%rbx
    aee6:	48 81 ec 58 18 01 00 	sub    $0x11858,%rsp
    aeed:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    aef4:	00 00 
    aef6:	48 89 84 24 48 18 01 	mov    %rax,0x11848(%rsp)
    aefd:	00 
    aefe:	31 c0                	xor    %eax,%eax
          base64_encode (inbuf, sum, outbuf, BASE64_LENGTH (sum));
    af00:	48 8d 84 24 40 78 00 	lea    0x7840(%rsp),%rax
    af07:	00 
    af08:	48 8d 6c 24 40       	lea    0x40(%rsp),%rbp
{
    af0d:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    af12:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
          base64_encode (inbuf, sum, outbuf, BASE64_LENGTH (sum));
    af17:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    af1c:	50                   	push   %rax
    af1d:	48 b8 3b 2a d2 b2 00 	movabs $0xb2d22a3b,%rax
    af24:	00 00 00 
    af27:	48 89 05 12 8a 74 00 	mov    %rax,0x748a12(%rip)        # 753940 <edgeId>
    af2e:	58                   	pop    %rax
    af2f:	e8 95 76 ff ff       	callq  25c9 <_storeEdge>
      sum = 0;
    af34:	45 31 f6             	xor    %r14d,%r14d
    af37:	e9 a4 00 00 00       	jmpq   afe0 <do_encode+0x110>
    af3c:	0f 1f 40 00          	nopl   0x0(%rax)
    af40:	50                   	push   %rax
    af41:	48 c7 c0 54 a4 65 33 	mov    $0x3365a454,%rax
    af48:	48 89 05 f1 89 74 00 	mov    %rax,0x7489f1(%rip)        # 753940 <edgeId>
    af4f:	58                   	pop    %rax
    af50:	e8 74 76 ff ff       	callq  25c9 <_storeEdge>
      while (!feof (in) && !ferror (in) && sum < ENC_BLOCKSIZE);
    af55:	48 89 15 bc 89 74 00 	mov    %rdx,0x7489bc(%rip)        # 753918 <tmpquadone>
    af5c:	48 89 0d cd 2c 5f 00 	mov    %rcx,0x5f2ccd(%rip)        # 5fdc30 <tmpquadtwo>
    af63:	48 8d 15 86 2c 5f 00 	lea    0x5f2c86(%rip),%rdx        # 5fdbf0 <funcinptr>
    af6a:	48 c7 02 2c 15 00 00 	movq   $0x152c,(%rdx)
    af71:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    af78:	00 
    af79:	48 c7 c1 ff 77 00 00 	mov    $0x77ff,%rcx
    af80:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    af84:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    af8b:	00 
    af8c:	4c 89 f1             	mov    %r14,%rcx
    af8f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    af93:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    af9a:	00 
    af9b:	ff 32                	pushq  (%rdx)
    af9d:	48 8b 15 74 89 74 00 	mov    0x748974(%rip),%rdx        # 753918 <tmpquadone>
    afa4:	48 8b 0d 85 2c 5f 00 	mov    0x5f2c85(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    afab:	48 c7 05 9a 89 74 00 	movq   $0x1,0x74899a(%rip)        # 753950 <cmpPassed>
    afb2:	01 00 00 00 
    afb6:	e8 a5 76 ff ff       	callq  2660 <_storeDataFn>
    afbb:	49 81 fe ff 77 00 00 	cmp    $0x77ff,%r14
    afc2:	0f 87 08 02 00 00    	ja     b1d0 <do_encode+0x300>
    afc8:	50                   	push   %rax
    afc9:	48 b8 8a b4 6c a6 00 	movabs $0xa66cb48a,%rax
    afd0:	00 00 00 
    afd3:	48 89 05 66 89 74 00 	mov    %rax,0x748966(%rip)        # 753940 <edgeId>
    afda:	58                   	pop    %rax
    afdb:	e8 e9 75 ff ff       	callq  25c9 <_storeEdge>
    afe0:	50                   	push   %rax
    afe1:	48 b8 22 2d 9b e9 00 	movabs $0xe99b2d22,%rax
    afe8:	00 00 00 
    afeb:	48 89 05 4e 89 74 00 	mov    %rax,0x74894e(%rip)        # 753940 <edgeId>
    aff2:	58                   	pop    %rax
    aff3:	e8 d1 75 ff ff       	callq  25c9 <_storeEdge>
          n = fread (inbuf + sum, 1, ENC_BLOCKSIZE - sum, in);
    aff8:	4a 8d 7c 35 00       	lea    0x0(%rbp,%r14,1),%rdi
    affd:	4c 89 e2             	mov    %r12,%rdx
	  *__cptr++ = __c;
	}
      return (__cptr - (char *) __ptr) / __size;
    }
# endif
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
    b000:	48 89 d9             	mov    %rbx,%rcx
    b003:	4c 29 f2             	sub    %r14,%rdx
    b006:	be 01 00 00 00       	mov    $0x1,%esi
    b00b:	e8 d0 68 ff ff       	callq  18e0 <fread_unlocked@plt>
          sum += n;
    b010:	49 01 c6             	add    %rax,%r14
# ifdef __USE_MISC
/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (feof_unlocked (FILE *__stream))
{
  return _IO_feof_unlocked (__stream);
    b013:	8b 03                	mov    (%rbx),%eax
      while (!feof (in) && !ferror (in) && sum < ENC_BLOCKSIZE);
    b015:	a8 30                	test   $0x30,%al
    b017:	0f 84 23 ff ff ff    	je     af40 <do_encode+0x70>
    b01d:	50                   	push   %rax
    b01e:	48 b8 91 5e 67 b2 00 	movabs $0xb2675e91,%rax
    b025:	00 00 00 
    b028:	48 89 05 11 89 74 00 	mov    %rax,0x748911(%rip)        # 753940 <edgeId>
    b02f:	58                   	pop    %rax
    b030:	e8 94 75 ff ff       	callq  25c9 <_storeEdge>
      if (sum > 0)
    b035:	4d 85 f6             	test   %r14,%r14
    b038:	0f 85 92 01 00 00    	jne    b1d0 <do_encode+0x300>
    b03e:	50                   	push   %rax
    b03f:	48 b8 d2 eb 4c b6 00 	movabs $0xb64cebd2,%rax
    b046:	00 00 00 
    b049:	48 89 05 f0 88 74 00 	mov    %rax,0x7488f0(%rip)        # 753940 <edgeId>
    b050:	58                   	pop    %rax
    b051:	e8 73 75 ff ff       	callq  25c9 <_storeEdge>
    b056:	50                   	push   %rax
    b057:	48 b8 f4 3a 93 ad 00 	movabs $0xad933af4,%rax
    b05e:	00 00 00 
    b061:	48 89 05 d8 88 74 00 	mov    %rax,0x7488d8(%rip)        # 753940 <edgeId>
    b068:	58                   	pop    %rax
    b069:	e8 5b 75 ff ff       	callq  25c9 <_storeEdge>
  if (wrap_column && current_column > 0 && fputc ('\n', out) == EOF)
    b06e:	48 89 15 a3 88 74 00 	mov    %rdx,0x7488a3(%rip)        # 753918 <tmpquadone>
    b075:	48 89 0d b4 2b 5f 00 	mov    %rcx,0x5f2bb4(%rip)        # 5fdc30 <tmpquadtwo>
    b07c:	48 8d 15 6d 2b 5f 00 	lea    0x5f2b6d(%rip),%rdx        # 5fdbf0 <funcinptr>
    b083:	48 c7 02 2d 15 00 00 	movq   $0x152d,(%rdx)
    b08a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b091:	00 
    b092:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    b099:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b09d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b0a4:	00 
    b0a5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    b0aa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b0ae:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b0b5:	00 
    b0b6:	ff 32                	pushq  (%rdx)
    b0b8:	48 8b 15 59 88 74 00 	mov    0x748859(%rip),%rdx        # 753918 <tmpquadone>
    b0bf:	48 8b 0d 6a 2b 5f 00 	mov    0x5f2b6a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b0c6:	48 c7 05 7f 88 74 00 	movq   $0x1,0x74887f(%rip)        # 753950 <cmpPassed>
    b0cd:	01 00 00 00 
    b0d1:	e8 8a 75 ff ff       	callq  2660 <_storeDataFn>
    b0d6:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
    b0dc:	74 36                	je     b114 <do_encode+0x244>
    b0de:	50                   	push   %rax
    b0df:	48 b8 af 33 d9 ba 00 	movabs $0xbad933af,%rax
    b0e6:	00 00 00 
    b0e9:	48 89 05 50 88 74 00 	mov    %rax,0x748850(%rip)        # 753940 <edgeId>
    b0f0:	58                   	pop    %rax
    b0f1:	e8 d3 74 ff ff       	callq  25c9 <_storeEdge>
    b0f6:	4d 85 ed             	test   %r13,%r13
    b0f9:	0f 85 4b 07 00 00    	jne    b84a <do_encode+0x97a>
    b0ff:	50                   	push   %rax
    b100:	48 c7 c0 eb 4c b6 6e 	mov    $0x6eb64ceb,%rax
    b107:	48 89 05 32 88 74 00 	mov    %rax,0x748832(%rip)        # 753940 <edgeId>
    b10e:	58                   	pop    %rax
    b10f:	e8 b5 74 ff ff       	callq  25c9 <_storeEdge>
    b114:	50                   	push   %rax
    b115:	48 b8 75 26 5b b7 00 	movabs $0xb75b2675,%rax
    b11c:	00 00 00 
    b11f:	48 89 05 1a 88 74 00 	mov    %rax,0x74881a(%rip)        # 753940 <edgeId>
    b126:	58                   	pop    %rax
    b127:	e8 9d 74 ff ff       	callq  25c9 <_storeEdge>
  if (ferror (in))
    b12c:	a8 20                	test   $0x20,%al
    b12e:	74 41                	je     b171 <do_encode+0x2a1>
    b130:	50                   	push   %rax
    b131:	48 c7 c0 ce 64 eb 56 	mov    $0x56eb64ce,%rax
    b138:	48 89 05 01 88 74 00 	mov    %rax,0x748801(%rip)        # 753940 <edgeId>
    b13f:	58                   	pop    %rax
    b140:	e8 84 74 ff ff       	callq  25c9 <_storeEdge>
    error (EXIT_FAILURE, errno, _("read error"));
    b145:	48 8d 35 44 e2 01 00 	lea    0x1e244(%rip),%rsi        # 29390 <_IO_stdin_used+0x10>
    b14c:	ba 05 00 00 00       	mov    $0x5,%edx
    b151:	31 ff                	xor    %edi,%edi
    b153:	e8 c8 67 ff ff       	callq  1920 <dcgettext@plt>
    b158:	49 89 c5             	mov    %rax,%r13
    b15b:	e8 30 67 ff ff       	callq  1890 <__errno_location@plt>
    b160:	8b 30                	mov    (%rax),%esi
    b162:	4c 89 ea             	mov    %r13,%rdx
    b165:	bf 01 00 00 00       	mov    $0x1,%edi
    b16a:	31 c0                	xor    %eax,%eax
    b16c:	e8 ff 69 ff ff       	callq  1b70 <error@plt>
    b171:	50                   	push   %rax
    b172:	48 b8 75 ab 85 84 00 	movabs $0x8485ab75,%rax
    b179:	00 00 00 
    b17c:	48 89 05 bd 87 74 00 	mov    %rax,0x7487bd(%rip)        # 753940 <edgeId>
    b183:	58                   	pop    %rax
    b184:	e8 40 74 ff ff       	callq  25c9 <_storeEdge>
}
    b189:	48 8b 84 24 48 18 01 	mov    0x11848(%rsp),%rax
    b190:	00 
    b191:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    b198:	00 00 
    b19a:	0f 85 6c 08 00 00    	jne    ba0c <do_encode+0xb3c>
    b1a0:	50                   	push   %rax
    b1a1:	48 c7 c0 b7 5a 48 78 	mov    $0x78485ab7,%rax
    b1a8:	48 89 05 91 87 74 00 	mov    %rax,0x748791(%rip)        # 753940 <edgeId>
    b1af:	58                   	pop    %rax
    b1b0:	e8 14 74 ff ff       	callq  25c9 <_storeEdge>
    b1b5:	48 81 c4 58 18 01 00 	add    $0x11858,%rsp
    b1bc:	5b                   	pop    %rbx
    b1bd:	5d                   	pop    %rbp
    b1be:	41 5c                	pop    %r12
    b1c0:	41 5d                	pop    %r13
    b1c2:	41 5e                	pop    %r14
    b1c4:	41 5f                	pop    %r15
    b1c6:	c3                   	retq   
    b1c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b1ce:	00 00 
    b1d0:	50                   	push   %rax
    b1d1:	48 c7 c0 84 d7 a1 0c 	mov    $0xca1d784,%rax
    b1d8:	48 89 05 61 87 74 00 	mov    %rax,0x748761(%rip)        # 753940 <edgeId>
    b1df:	58                   	pop    %rax
    b1e0:	e8 e4 73 ff ff       	callq  25c9 <_storeEdge>
          base64_encode (inbuf, sum, outbuf, BASE64_LENGTH (sum));
    b1e5:	49 8d 56 02          	lea    0x2(%r14),%rdx
    b1e9:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    b1f0:	aa aa aa 
    b1f3:	4c 89 f6             	mov    %r14,%rsi
    b1f6:	48 89 ef             	mov    %rbp,%rdi
    b1f9:	48 f7 e2             	mul    %rdx
    b1fc:	48 d1 ea             	shr    %rdx
    b1ff:	4c 8d 3c 95 00 00 00 	lea    0x0(,%rdx,4),%r15
    b206:	00 
    b207:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    b20c:	4c 89 f9             	mov    %r15,%rcx
    b20f:	e8 8c 2e 00 00       	callq  e0a0 <base64_encode>
  if (wrap_column == 0)
    b214:	48 89 15 fd 86 74 00 	mov    %rdx,0x7486fd(%rip)        # 753918 <tmpquadone>
    b21b:	48 89 0d 0e 2a 5f 00 	mov    %rcx,0x5f2a0e(%rip)        # 5fdc30 <tmpquadtwo>
    b222:	48 8d 15 c7 29 5f 00 	lea    0x5f29c7(%rip),%rdx        # 5fdbf0 <funcinptr>
    b229:	48 c7 02 2e 15 00 00 	movq   $0x152e,(%rdx)
    b230:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b237:	00 
    b238:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    b23f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b243:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b24a:	00 
    b24b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    b250:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b254:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b25b:	00 
    b25c:	ff 32                	pushq  (%rdx)
    b25e:	48 8b 15 b3 86 74 00 	mov    0x7486b3(%rip),%rdx        # 753918 <tmpquadone>
    b265:	48 8b 0d c4 29 5f 00 	mov    0x5f29c4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b26c:	48 c7 05 d9 86 74 00 	movq   $0x1,0x7486d9(%rip)        # 753950 <cmpPassed>
    b273:	01 00 00 00 
    b277:	e8 e4 73 ff ff       	callq  2660 <_storeDataFn>
    b27c:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
    b282:	0f 84 90 04 00 00    	je     b718 <do_encode+0x848>
    b288:	50                   	push   %rax
    b289:	48 b8 94 e1 61 b9 00 	movabs $0xb961e194,%rax
    b290:	00 00 00 
    b293:	48 89 05 a6 86 74 00 	mov    %rax,0x7486a6(%rip)        # 753940 <edgeId>
    b29a:	58                   	pop    %rax
    b29b:	e8 29 73 ff ff       	callq  25c9 <_storeEdge>
    for (written = 0; written < len;)
    b2a0:	45 31 db             	xor    %r11d,%r11d
    b2a3:	4d 85 ff             	test   %r15,%r15
    b2a6:	0f 84 a1 03 00 00    	je     b64d <do_encode+0x77d>
    b2ac:	50                   	push   %rax
    b2ad:	48 c7 c0 0c 0f cb 45 	mov    $0x45cb0f0c,%rax
    b2b4:	48 89 05 85 86 74 00 	mov    %rax,0x748685(%rip)        # 753940 <edgeId>
    b2bb:	58                   	pop    %rax
    b2bc:	e8 08 73 ff ff       	callq  25c9 <_storeEdge>
    b2c1:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
    b2c6:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
    b2cb:	4d 89 ee             	mov    %r13,%r14
    b2ce:	4c 89 fd             	mov    %r15,%rbp
    b2d1:	4d 89 dd             	mov    %r11,%r13
    b2d4:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
    b2d9:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    b2de:	e9 5b 01 00 00       	jmpq   b43e <do_encode+0x56e>
    b2e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    b2e8:	50                   	push   %rax
    b2e9:	48 b8 96 8b 22 fd 00 	movabs $0xfd228b96,%rax
    b2f0:	00 00 00 
    b2f3:	48 89 05 46 86 74 00 	mov    %rax,0x748646(%rip)        # 753940 <edgeId>
    b2fa:	58                   	pop    %rax
    b2fb:	e8 c9 72 ff ff       	callq  25c9 <_storeEdge>
  return _IO_putc_unlocked (__c, __stream);
    b300:	49 8b 7f 28          	mov    0x28(%r15),%rdi
    b304:	48 89 15 0d 86 74 00 	mov    %rdx,0x74860d(%rip)        # 753918 <tmpquadone>
    b30b:	48 89 0d 1e 29 5f 00 	mov    %rcx,0x5f291e(%rip)        # 5fdc30 <tmpquadtwo>
    b312:	48 8d 15 d7 28 5f 00 	lea    0x5f28d7(%rip),%rdx        # 5fdbf0 <funcinptr>
    b319:	48 c7 02 2f 15 00 00 	movq   $0x152f,(%rdx)
    b320:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b327:	00 
    b328:	49 8b 4f 30          	mov    0x30(%r15),%rcx
    b32c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b330:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b337:	00 
    b338:	48 89 f9             	mov    %rdi,%rcx
    b33b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b33f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b346:	00 
    b347:	ff 32                	pushq  (%rdx)
    b349:	48 8b 15 c8 85 74 00 	mov    0x7485c8(%rip),%rdx        # 753918 <tmpquadone>
    b350:	48 8b 0d d9 28 5f 00 	mov    0x5f28d9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b357:	48 c7 05 ee 85 74 00 	movq   $0x1,0x7485ee(%rip)        # 753950 <cmpPassed>
    b35e:	01 00 00 00 
    b362:	e8 f9 72 ff ff       	callq  2660 <_storeDataFn>
    b367:	49 3b 7f 30          	cmp    0x30(%r15),%rdi
    b36b:	0f 83 96 05 00 00    	jae    b907 <do_encode+0xa37>
    b371:	50                   	push   %rax
    b372:	48 c7 c0 17 45 fa 37 	mov    $0x37fa4517,%rax
    b379:	48 89 05 c0 85 74 00 	mov    %rax,0x7485c0(%rip)        # 753940 <edgeId>
    b380:	58                   	pop    %rax
    b381:	e8 43 72 ff ff       	callq  25c9 <_storeEdge>
    b386:	4c 8d 4f 01          	lea    0x1(%rdi),%r9
    b38a:	4d 89 4f 28          	mov    %r9,0x28(%r15)
    b38e:	c6 07 0a             	movb   $0xa,(%rdi)
    b391:	50                   	push   %rax
    b392:	48 c7 c0 28 d2 bf 21 	mov    $0x21bfd228,%rax
    b399:	48 89 05 a0 85 74 00 	mov    %rax,0x7485a0(%rip)        # 753940 <edgeId>
    b3a0:	58                   	pop    %rax
    b3a1:	e8 23 72 ff ff       	callq  25c9 <_storeEdge>
            *current_column = 0;
    b3a6:	45 31 f6             	xor    %r14d,%r14d
    b3a9:	50                   	push   %rax
    b3aa:	48 c7 c0 48 ff 86 4c 	mov    $0x4c86ff48,%rax
    b3b1:	48 89 05 88 85 74 00 	mov    %rax,0x748588(%rip)        # 753940 <edgeId>
    b3b8:	58                   	pop    %rax
    b3b9:	e8 0b 72 ff ff       	callq  25c9 <_storeEdge>
    for (written = 0; written < len;)
    b3be:	48 89 15 53 85 74 00 	mov    %rdx,0x748553(%rip)        # 753918 <tmpquadone>
    b3c5:	48 89 0d 64 28 5f 00 	mov    %rcx,0x5f2864(%rip)        # 5fdc30 <tmpquadtwo>
    b3cc:	48 8d 15 1d 28 5f 00 	lea    0x5f281d(%rip),%rdx        # 5fdbf0 <funcinptr>
    b3d3:	48 c7 02 30 15 00 00 	movq   $0x1530,(%rdx)
    b3da:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b3e1:	00 
    b3e2:	4c 89 e9             	mov    %r13,%rcx
    b3e5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b3e9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b3f0:	00 
    b3f1:	48 89 e9             	mov    %rbp,%rcx
    b3f4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b3f8:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b3ff:	00 
    b400:	ff 32                	pushq  (%rdx)
    b402:	48 8b 15 0f 85 74 00 	mov    0x74850f(%rip),%rdx        # 753918 <tmpquadone>
    b409:	48 8b 0d 20 28 5f 00 	mov    0x5f2820(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b410:	48 c7 05 35 85 74 00 	movq   $0x1,0x748535(%rip)        # 753950 <cmpPassed>
    b417:	01 00 00 00 
    b41b:	e8 40 72 ff ff       	callq  2660 <_storeDataFn>
    b420:	4c 39 ed             	cmp    %r13,%rbp
    b423:	0f 86 fa 01 00 00    	jbe    b623 <do_encode+0x753>
    b429:	50                   	push   %rax
    b42a:	48 c7 c0 f4 6f c8 14 	mov    $0x14c86ff4,%rax
    b431:	48 89 05 08 85 74 00 	mov    %rax,0x748508(%rip)        # 753940 <edgeId>
    b438:	58                   	pop    %rax
    b439:	e8 8b 71 ff ff       	callq  25c9 <_storeEdge>
    b43e:	50                   	push   %rax
    b43f:	48 c7 c0 fd 1b 32 45 	mov    $0x45321bfd,%rax
    b446:	48 89 05 f3 84 74 00 	mov    %rax,0x7484f3(%rip)        # 753940 <edgeId>
    b44d:	58                   	pop    %rax
    b44e:	e8 76 71 ff ff       	callq  25c9 <_storeEdge>
        uintmax_t cols_remaining = wrap_column - *current_column;
    b453:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
        to_write = MIN (to_write, len - written);
    b458:	48 89 eb             	mov    %rbp,%rbx
    b45b:	4c 29 eb             	sub    %r13,%rbx
        uintmax_t cols_remaining = wrap_column - *current_column;
    b45e:	4d 29 f0             	sub    %r14,%r8
        to_write = MIN (to_write, len - written);
    b461:	48 89 15 b0 84 74 00 	mov    %rdx,0x7484b0(%rip)        # 753918 <tmpquadone>
    b468:	48 89 0d c1 27 5f 00 	mov    %rcx,0x5f27c1(%rip)        # 5fdc30 <tmpquadtwo>
    b46f:	48 8d 15 7a 27 5f 00 	lea    0x5f277a(%rip),%rdx        # 5fdbf0 <funcinptr>
    b476:	48 c7 02 31 15 00 00 	movq   $0x1531,(%rdx)
    b47d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b484:	00 
    b485:	48 89 d9             	mov    %rbx,%rcx
    b488:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b48c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b493:	00 
    b494:	4c 89 c1             	mov    %r8,%rcx
    b497:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b49b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b4a2:	00 
    b4a3:	ff 32                	pushq  (%rdx)
    b4a5:	48 8b 15 6c 84 74 00 	mov    0x74846c(%rip),%rdx        # 753918 <tmpquadone>
    b4ac:	48 8b 0d 7d 27 5f 00 	mov    0x5f277d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b4b3:	48 c7 05 92 84 74 00 	movq   $0x1,0x748492(%rip)        # 753950 <cmpPassed>
    b4ba:	01 00 00 00 
    b4be:	e8 9d 71 ff ff       	callq  2660 <_storeDataFn>
    b4c3:	49 39 d8             	cmp    %rbx,%r8
    b4c6:	49 0f 46 d8          	cmovbe %r8,%rbx
        if (to_write == 0)
    b4ca:	48 85 db             	test   %rbx,%rbx
    b4cd:	0f 84 15 fe ff ff    	je     b2e8 <do_encode+0x418>
    b4d3:	50                   	push   %rax
    b4d4:	48 b8 32 45 5b ad 00 	movabs $0xad5b4532,%rax
    b4db:	00 00 00 
    b4de:	48 89 05 5b 84 74 00 	mov    %rax,0x74845b(%rip)        # 753940 <edgeId>
    b4e5:	58                   	pop    %rax
    b4e6:	e8 de 70 ff ff       	callq  25c9 <_storeEdge>
            if (fwrite (buffer + written, 1, to_write, stdout) < to_write)
    b4eb:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    b4f0:	48 89 da             	mov    %rbx,%rdx
    b4f3:	be 01 00 00 00       	mov    $0x1,%esi
    b4f8:	4a 8d 3c 29          	lea    (%rcx,%r13,1),%rdi
    b4fc:	48 8b 0d 85 1b 22 00 	mov    0x221b85(%rip),%rcx        # 22d088 <stdout@@GLIBC_2.2.5>
    b503:	e8 08 66 ff ff       	callq  1b10 <fwrite_unlocked@plt>
    b508:	48 89 15 09 84 74 00 	mov    %rdx,0x748409(%rip)        # 753918 <tmpquadone>
    b50f:	48 89 0d 1a 27 5f 00 	mov    %rcx,0x5f271a(%rip)        # 5fdc30 <tmpquadtwo>
    b516:	48 8d 15 d3 26 5f 00 	lea    0x5f26d3(%rip),%rdx        # 5fdbf0 <funcinptr>
    b51d:	48 c7 02 32 15 00 00 	movq   $0x1532,(%rdx)
    b524:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b52b:	00 
    b52c:	48 89 c1             	mov    %rax,%rcx
    b52f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b533:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b53a:	00 
    b53b:	48 89 d9             	mov    %rbx,%rcx
    b53e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b542:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b549:	00 
    b54a:	ff 32                	pushq  (%rdx)
    b54c:	48 8b 15 c5 83 74 00 	mov    0x7483c5(%rip),%rdx        # 753918 <tmpquadone>
    b553:	48 8b 0d d6 26 5f 00 	mov    0x5f26d6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b55a:	48 c7 05 eb 83 74 00 	movq   $0x1,0x7483eb(%rip)        # 753950 <cmpPassed>
    b561:	01 00 00 00 
    b565:	e8 f6 70 ff ff       	callq  2660 <_storeDataFn>
    b56a:	48 39 c3             	cmp    %rax,%rbx
    b56d:	0f 87 8d 02 00 00    	ja     b800 <do_encode+0x930>
    b573:	50                   	push   %rax
    b574:	48 c7 c0 d1 56 6b 7d 	mov    $0x7d6b56d1,%rax
    b57b:	48 89 05 be 83 74 00 	mov    %rax,0x7483be(%rip)        # 753940 <edgeId>
    b582:	58                   	pop    %rax
    b583:	e8 41 70 ff ff       	callq  25c9 <_storeEdge>
    b588:	50                   	push   %rax
    b589:	48 c7 c0 68 ab b5 3e 	mov    $0x3eb5ab68,%rax
    b590:	48 89 05 a9 83 74 00 	mov    %rax,0x7483a9(%rip)        # 753940 <edgeId>
    b597:	58                   	pop    %rax
    b598:	e8 2c 70 ff ff       	callq  25c9 <_storeEdge>
            written += to_write;
    b59d:	49 01 dd             	add    %rbx,%r13
            *current_column += to_write;
    b5a0:	49 01 de             	add    %rbx,%r14
    for (written = 0; written < len;)
    b5a3:	48 89 15 6e 83 74 00 	mov    %rdx,0x74836e(%rip)        # 753918 <tmpquadone>
    b5aa:	48 89 0d 7f 26 5f 00 	mov    %rcx,0x5f267f(%rip)        # 5fdc30 <tmpquadtwo>
    b5b1:	48 8d 15 38 26 5f 00 	lea    0x5f2638(%rip),%rdx        # 5fdbf0 <funcinptr>
    b5b8:	48 c7 02 33 15 00 00 	movq   $0x1533,(%rdx)
    b5bf:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b5c6:	00 
    b5c7:	4c 89 e9             	mov    %r13,%rcx
    b5ca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b5ce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b5d5:	00 
    b5d6:	48 89 e9             	mov    %rbp,%rcx
    b5d9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b5dd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b5e4:	00 
    b5e5:	ff 32                	pushq  (%rdx)
    b5e7:	48 8b 15 2a 83 74 00 	mov    0x74832a(%rip),%rdx        # 753918 <tmpquadone>
    b5ee:	48 8b 0d 3b 26 5f 00 	mov    0x5f263b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b5f5:	48 c7 05 50 83 74 00 	movq   $0x1,0x748350(%rip)        # 753950 <cmpPassed>
    b5fc:	01 00 00 00 
    b600:	e8 5b 70 ff ff       	callq  2660 <_storeDataFn>
    b605:	4c 39 ed             	cmp    %r13,%rbp
    b608:	0f 87 30 fe ff ff    	ja     b43e <do_encode+0x56e>
    b60e:	50                   	push   %rax
    b60f:	48 c7 c0 6a ad 4f 29 	mov    $0x294fad6a,%rax
    b616:	48 89 05 23 83 74 00 	mov    %rax,0x748323(%rip)        # 753940 <edgeId>
    b61d:	58                   	pop    %rax
    b61e:	e8 a6 6f ff ff       	callq  25c9 <_storeEdge>
    b623:	50                   	push   %rax
    b624:	48 b8 b5 d6 a7 94 00 	movabs $0x94a7d6b5,%rax
    b62b:	00 00 00 
    b62e:	48 89 05 0b 83 74 00 	mov    %rax,0x74830b(%rip)        # 753940 <edgeId>
    b635:	58                   	pop    %rax
    b636:	e8 8e 6f ff ff       	callq  25c9 <_storeEdge>
    b63b:	4d 89 f5             	mov    %r14,%r13
    b63e:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
    b643:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
    b648:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
    b64d:	50                   	push   %rax
    b64e:	48 c7 c0 eb 53 ca 1f 	mov    $0x1fca53eb,%rax
    b655:	48 89 05 e4 82 74 00 	mov    %rax,0x7482e4(%rip)        # 753940 <edgeId>
    b65c:	58                   	pop    %rax
    b65d:	e8 67 6f ff ff       	callq  25c9 <_storeEdge>
  return _IO_feof_unlocked (__stream);
    b662:	8b 03                	mov    (%rbx),%eax
  while (!feof (in) && !ferror (in) && sum == ENC_BLOCKSIZE);
    b664:	a8 30                	test   $0x30,%al
    b666:	0f 85 ea f9 ff ff    	jne    b056 <do_encode+0x186>
    b66c:	50                   	push   %rax
    b66d:	48 b8 52 fe 48 a1 00 	movabs $0xa148fe52,%rax
    b674:	00 00 00 
    b677:	48 89 05 c2 82 74 00 	mov    %rax,0x7482c2(%rip)        # 753940 <edgeId>
    b67e:	58                   	pop    %rax
    b67f:	e8 45 6f ff ff       	callq  25c9 <_storeEdge>
    b684:	48 89 15 8d 82 74 00 	mov    %rdx,0x74828d(%rip)        # 753918 <tmpquadone>
    b68b:	48 89 0d 9e 25 5f 00 	mov    %rcx,0x5f259e(%rip)        # 5fdc30 <tmpquadtwo>
    b692:	48 8d 15 57 25 5f 00 	lea    0x5f2557(%rip),%rdx        # 5fdbf0 <funcinptr>
    b699:	48 c7 02 34 15 00 00 	movq   $0x1534,(%rdx)
    b6a0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b6a7:	00 
    b6a8:	48 c7 c1 00 78 00 00 	mov    $0x7800,%rcx
    b6af:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b6b3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b6ba:	00 
    b6bb:	4c 89 f1             	mov    %r14,%rcx
    b6be:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b6c2:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b6c9:	00 
    b6ca:	ff 32                	pushq  (%rdx)
    b6cc:	48 8b 15 45 82 74 00 	mov    0x748245(%rip),%rdx        # 753918 <tmpquadone>
    b6d3:	48 8b 0d 56 25 5f 00 	mov    0x5f2556(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b6da:	48 c7 05 6b 82 74 00 	movq   $0x1,0x74826b(%rip)        # 753950 <cmpPassed>
    b6e1:	01 00 00 00 
    b6e5:	e8 76 6f ff ff       	callq  2660 <_storeDataFn>
    b6ea:	49 81 fe 00 78 00 00 	cmp    $0x7800,%r14
    b6f1:	0f 84 25 f8 ff ff    	je     af1c <do_encode+0x4c>
    b6f7:	50                   	push   %rax
    b6f8:	48 b8 94 3f 52 e8 00 	movabs $0xe8523f94,%rax
    b6ff:	00 00 00 
    b702:	48 89 05 37 82 74 00 	mov    %rax,0x748237(%rip)        # 753940 <edgeId>
    b709:	58                   	pop    %rax
    b70a:	e8 ba 6e ff ff       	callq  25c9 <_storeEdge>
    b70f:	e9 42 f9 ff ff       	jmpq   b056 <do_encode+0x186>
    b714:	0f 1f 40 00          	nopl   0x0(%rax)
    b718:	50                   	push   %rax
    b719:	48 b8 fc 91 42 bf 00 	movabs $0xbf4291fc,%rax
    b720:	00 00 00 
    b723:	48 89 05 16 82 74 00 	mov    %rax,0x748216(%rip)        # 753940 <edgeId>
    b72a:	58                   	pop    %rax
    b72b:	e8 99 6e ff ff       	callq  25c9 <_storeEdge>
      if (fwrite (buffer, 1, len, stdout) < len)
    b730:	48 8b 0d 51 19 22 00 	mov    0x221951(%rip),%rcx        # 22d088 <stdout@@GLIBC_2.2.5>
    b737:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    b73c:	4c 89 fa             	mov    %r15,%rdx
    b73f:	be 01 00 00 00       	mov    $0x1,%esi
    b744:	e8 c7 63 ff ff       	callq  1b10 <fwrite_unlocked@plt>
    b749:	48 89 15 c8 81 74 00 	mov    %rdx,0x7481c8(%rip)        # 753918 <tmpquadone>
    b750:	48 89 0d d9 24 5f 00 	mov    %rcx,0x5f24d9(%rip)        # 5fdc30 <tmpquadtwo>
    b757:	48 8d 15 92 24 5f 00 	lea    0x5f2492(%rip),%rdx        # 5fdbf0 <funcinptr>
    b75e:	48 c7 02 35 15 00 00 	movq   $0x1535,(%rdx)
    b765:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b76c:	00 
    b76d:	48 89 c1             	mov    %rax,%rcx
    b770:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b774:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b77b:	00 
    b77c:	4c 89 f9             	mov    %r15,%rcx
    b77f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b783:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b78a:	00 
    b78b:	ff 32                	pushq  (%rdx)
    b78d:	48 8b 15 84 81 74 00 	mov    0x748184(%rip),%rdx        # 753918 <tmpquadone>
    b794:	48 8b 0d 95 24 5f 00 	mov    0x5f2495(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b79b:	48 c7 05 aa 81 74 00 	movq   $0x1,0x7481aa(%rip)        # 753950 <cmpPassed>
    b7a2:	01 00 00 00 
    b7a6:	e8 b5 6e ff ff       	callq  2660 <_storeDataFn>
    b7ab:	49 39 c7             	cmp    %rax,%r15
    b7ae:	0f 86 99 fe ff ff    	jbe    b64d <do_encode+0x77d>
    b7b4:	50                   	push   %rax
    b7b5:	48 c7 c0 29 f4 2b 1b 	mov    $0x1b2bf429,%rax
    b7bc:	48 89 05 7d 81 74 00 	mov    %rax,0x74817d(%rip)        # 753940 <edgeId>
    b7c3:	58                   	pop    %rax
    b7c4:	e8 00 6e ff ff       	callq  25c9 <_storeEdge>
        error (EXIT_FAILURE, errno, _("write error"));
    b7c9:	48 8d 35 b4 db 01 00 	lea    0x1dbb4(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
    b7d0:	31 ff                	xor    %edi,%edi
    b7d2:	ba 05 00 00 00       	mov    $0x5,%edx
    b7d7:	e8 44 61 ff ff       	callq  1920 <dcgettext@plt>
    b7dc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    b7e1:	e8 aa 60 ff ff       	callq  1890 <__errno_location@plt>
    b7e6:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    b7eb:	8b 30                	mov    (%rax),%esi
    b7ed:	bf 01 00 00 00       	mov    $0x1,%edi
    b7f2:	31 c0                	xor    %eax,%eax
    b7f4:	e8 77 63 ff ff       	callq  1b70 <error@plt>
    b7f9:	e9 4f fe ff ff       	jmpq   b64d <do_encode+0x77d>
    b7fe:	66 90                	xchg   %ax,%ax
    b800:	50                   	push   %rax
    b801:	48 c7 c0 b2 51 84 2f 	mov    $0x2f8451b2,%rax
    b808:	48 89 05 31 81 74 00 	mov    %rax,0x748131(%rip)        # 753940 <edgeId>
    b80f:	58                   	pop    %rax
    b810:	e8 b4 6d ff ff       	callq  25c9 <_storeEdge>
              error (EXIT_FAILURE, errno, _("write error"));
    b815:	48 8d 35 68 db 01 00 	lea    0x1db68(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
    b81c:	31 ff                	xor    %edi,%edi
    b81e:	ba 05 00 00 00       	mov    $0x5,%edx
    b823:	e8 f8 60 ff ff       	callq  1920 <dcgettext@plt>
    b828:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    b82d:	e8 5e 60 ff ff       	callq  1890 <__errno_location@plt>
    b832:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    b837:	8b 30                	mov    (%rax),%esi
    b839:	bf 01 00 00 00       	mov    $0x1,%edi
    b83e:	31 c0                	xor    %eax,%eax
    b840:	e8 2b 63 ff ff       	callq  1b70 <error@plt>
    b845:	e9 3e fd ff ff       	jmpq   b588 <do_encode+0x6b8>
    b84a:	50                   	push   %rax
    b84b:	48 c7 c0 f0 c5 27 2a 	mov    $0x2a27c5f0,%rax
    b852:	48 89 05 e7 80 74 00 	mov    %rax,0x7480e7(%rip)        # 753940 <edgeId>
    b859:	58                   	pop    %rax
    b85a:	e8 6a 6d ff ff       	callq  25c9 <_storeEdge>
  return _IO_putc_unlocked (__c, __stream);
    b85f:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
    b864:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    b869:	48 89 15 a8 80 74 00 	mov    %rdx,0x7480a8(%rip)        # 753918 <tmpquadone>
    b870:	48 89 0d b9 23 5f 00 	mov    %rcx,0x5f23b9(%rip)        # 5fdc30 <tmpquadtwo>
    b877:	48 8d 15 72 23 5f 00 	lea    0x5f2372(%rip),%rdx        # 5fdbf0 <funcinptr>
    b87e:	48 c7 02 36 15 00 00 	movq   $0x1536,(%rdx)
    b885:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    b88c:	00 
    b88d:	49 8b 4c 24 30       	mov    0x30(%r12),%rcx
    b892:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    b896:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    b89d:	00 
    b89e:	48 89 c1             	mov    %rax,%rcx
    b8a1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    b8a5:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    b8ac:	00 
    b8ad:	ff 32                	pushq  (%rdx)
    b8af:	48 8b 15 62 80 74 00 	mov    0x748062(%rip),%rdx        # 753918 <tmpquadone>
    b8b6:	48 8b 0d 73 23 5f 00 	mov    0x5f2373(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    b8bd:	48 c7 05 88 80 74 00 	movq   $0x1,0x748088(%rip)        # 753950 <cmpPassed>
    b8c4:	01 00 00 00 
    b8c8:	e8 93 6d ff ff       	callq  2660 <_storeDataFn>
    b8cd:	49 3b 44 24 30       	cmp    0x30(%r12),%rax
    b8d2:	0f 83 a6 00 00 00    	jae    b97e <do_encode+0xaae>
    b8d8:	50                   	push   %rax
    b8d9:	48 b8 f8 44 c5 a8 00 	movabs $0xa8c544f8,%rax
    b8e0:	00 00 00 
    b8e3:	48 89 05 56 80 74 00 	mov    %rax,0x748056(%rip)        # 753940 <edgeId>
    b8ea:	58                   	pop    %rax
    b8eb:	e8 d9 6c ff ff       	callq  25c9 <_storeEdge>
    b8f0:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
    b8f5:	48 8d 50 01          	lea    0x1(%rax),%rdx
    b8f9:	49 89 53 28          	mov    %rdx,0x28(%r11)
    b8fd:	c6 00 0a             	movb   $0xa,(%rax)
    b900:	8b 03                	mov    (%rbx),%eax
    b902:	e9 0d f8 ff ff       	jmpq   b114 <do_encode+0x244>
    b907:	50                   	push   %rax
    b908:	48 c7 c0 a2 62 54 49 	mov    $0x495462a2,%rax
    b90f:	48 89 05 2a 80 74 00 	mov    %rax,0x74802a(%rip)        # 753940 <edgeId>
    b916:	58                   	pop    %rax
    b917:	e8 ad 6c ff ff       	callq  25c9 <_storeEdge>
    b91c:	be 0a 00 00 00       	mov    $0xa,%esi
    b921:	4c 89 ff             	mov    %r15,%rdi
    b924:	e8 77 60 ff ff       	callq  19a0 <__overflow@plt>
            if (fputc ('\n', out) == EOF)
    b929:	83 c0 01             	add    $0x1,%eax
    b92c:	0f 85 5f fa ff ff    	jne    b391 <do_encode+0x4c1>
    b932:	50                   	push   %rax
    b933:	48 b8 aa 24 61 c0 00 	movabs $0xc06124aa,%rax
    b93a:	00 00 00 
    b93d:	48 89 05 fc 7f 74 00 	mov    %rax,0x747ffc(%rip)        # 753940 <edgeId>
    b944:	58                   	pop    %rax
    b945:	e8 7f 6c ff ff       	callq  25c9 <_storeEdge>
              error (EXIT_FAILURE, errno, _("write error"));
    b94a:	48 8d 35 33 da 01 00 	lea    0x1da33(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
    b951:	ba 05 00 00 00       	mov    $0x5,%edx
    b956:	31 ff                	xor    %edi,%edi
    b958:	e8 c3 5f ff ff       	callq  1920 <dcgettext@plt>
    b95d:	49 89 c6             	mov    %rax,%r14
    b960:	e8 2b 5f ff ff       	callq  1890 <__errno_location@plt>
    b965:	8b 30                	mov    (%rax),%esi
    b967:	4c 89 f2             	mov    %r14,%rdx
    b96a:	bf 01 00 00 00       	mov    $0x1,%edi
    b96f:	31 c0                	xor    %eax,%eax
            *current_column = 0;
    b971:	45 31 f6             	xor    %r14d,%r14d
              error (EXIT_FAILURE, errno, _("write error"));
    b974:	e8 f7 61 ff ff       	callq  1b70 <error@plt>
    b979:	e9 2b fa ff ff       	jmpq   b3a9 <do_encode+0x4d9>
    b97e:	50                   	push   %rax
    b97f:	48 c7 c0 01 8f 3d 05 	mov    $0x53d8f01,%rax
    b986:	48 89 05 b3 7f 74 00 	mov    %rax,0x747fb3(%rip)        # 753940 <edgeId>
    b98d:	58                   	pop    %rax
    b98e:	e8 36 6c ff ff       	callq  25c9 <_storeEdge>
    b993:	be 0a 00 00 00       	mov    $0xa,%esi
    b998:	4c 89 e7             	mov    %r12,%rdi
    b99b:	e8 00 60 ff ff       	callq  19a0 <__overflow@plt>
  if (wrap_column && current_column > 0 && fputc ('\n', out) == EOF)
    b9a0:	83 c0 01             	add    $0x1,%eax
    b9a3:	74 1f                	je     b9c4 <do_encode+0xaf4>
    b9a5:	50                   	push   %rax
    b9a6:	48 b8 3d 05 94 ef 00 	movabs $0xef94053d,%rax
    b9ad:	00 00 00 
    b9b0:	48 89 05 89 7f 74 00 	mov    %rax,0x747f89(%rip)        # 753940 <edgeId>
    b9b7:	58                   	pop    %rax
    b9b8:	e8 0c 6c ff ff       	callq  25c9 <_storeEdge>
    b9bd:	8b 03                	mov    (%rbx),%eax
    b9bf:	e9 50 f7 ff ff       	jmpq   b114 <do_encode+0x244>
    b9c4:	50                   	push   %rax
    b9c5:	48 c7 c0 a7 80 f2 1d 	mov    $0x1df280a7,%rax
    b9cc:	48 89 05 6d 7f 74 00 	mov    %rax,0x747f6d(%rip)        # 753940 <edgeId>
    b9d3:	58                   	pop    %rax
    b9d4:	e8 f0 6b ff ff       	callq  25c9 <_storeEdge>
    error (EXIT_FAILURE, errno, _("write error"));
    b9d9:	48 8d 35 a4 d9 01 00 	lea    0x1d9a4(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
    b9e0:	ba 05 00 00 00       	mov    $0x5,%edx
    b9e5:	31 ff                	xor    %edi,%edi
    b9e7:	e8 34 5f ff ff       	callq  1920 <dcgettext@plt>
    b9ec:	49 89 c7             	mov    %rax,%r15
    b9ef:	e8 9c 5e ff ff       	callq  1890 <__errno_location@plt>
    b9f4:	8b 30                	mov    (%rax),%esi
    b9f6:	4c 89 fa             	mov    %r15,%rdx
    b9f9:	31 c0                	xor    %eax,%eax
    b9fb:	bf 01 00 00 00       	mov    $0x1,%edi
    ba00:	e8 6b 61 ff ff       	callq  1b70 <error@plt>
    ba05:	8b 03                	mov    (%rbx),%eax
    ba07:	e9 08 f7 ff ff       	jmpq   b114 <do_encode+0x244>
    ba0c:	50                   	push   %rax
    ba0d:	48 c7 c0 be 83 db 14 	mov    $0x14db83be,%rax
    ba14:	48 89 05 25 7f 74 00 	mov    %rax,0x747f25(%rip)        # 753940 <edgeId>
    ba1b:	58                   	pop    %rax
    ba1c:	e8 a8 6b ff ff       	callq  25c9 <_storeEdge>
}
    ba21:	e8 2a 5f ff ff       	callq  1950 <__stack_chk_fail@plt>
    ba26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ba2d:	00 00 00 

000000000000ba30 <do_decode>:
{
    ba30:	41 57                	push   %r15
    ba32:	41 56                	push   %r14
    ba34:	41 55                	push   %r13
    ba36:	41 54                	push   %r12
    ba38:	49 89 fd             	mov    %rdi,%r13
    ba3b:	55                   	push   %rbp
    ba3c:	53                   	push   %rbx
    ba3d:	48 81 ec 68 1c 00 00 	sub    $0x1c68,%rsp
  base64_decode_ctx_init (&ctx);
    ba44:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
{
    ba49:	88 54 24 37          	mov    %dl,0x37(%rsp)
    ba4d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    ba52:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    ba59:	00 00 
    ba5b:	48 89 84 24 58 1c 00 	mov    %rax,0x1c58(%rsp)
    ba62:	00 
    ba63:	31 c0                	xor    %eax,%eax
  base64_decode_ctx_init (&ctx);
    ba65:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    ba6a:	e8 31 32 00 00       	callq  eca0 <base64_decode_ctx_init>
    ba6f:	48 8d 84 24 50 0c 00 	lea    0xc50(%rsp),%rax
    ba76:	00 
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    ba77:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    ba7c:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
    ba81:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    ba86:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    ba8b:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    ba90:	50                   	push   %rax
    ba91:	48 c7 c0 73 fe 10 1d 	mov    $0x1d10fe73,%rax
    ba98:	48 89 05 a1 7e 74 00 	mov    %rax,0x747ea1(%rip)        # 753940 <edgeId>
    ba9f:	58                   	pop    %rax
    baa0:	e8 24 6b ff ff       	callq  25c9 <_storeEdge>
      sum = 0;
    baa5:	31 ed                	xor    %ebp,%ebp
    baa7:	e9 1d 01 00 00       	jmpq   bbc9 <do_decode+0x199>
    baac:	0f 1f 40 00          	nopl   0x0(%rax)
    bab0:	50                   	push   %rax
    bab1:	48 b8 fe 10 1d c6 00 	movabs $0xc61d10fe,%rax
    bab8:	00 00 00 
    babb:	48 89 05 7e 7e 74 00 	mov    %rax,0x747e7e(%rip)        # 753940 <edgeId>
    bac2:	58                   	pop    %rax
    bac3:	e8 01 6b ff ff       	callq  25c9 <_storeEdge>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
    bac8:	41 8b 45 00          	mov    0x0(%r13),%eax
          sum += n;
    bacc:	48 01 dd             	add    %rbx,%rbp
          if (ferror (in))
    bacf:	a8 20                	test   $0x20,%al
    bad1:	0f 85 a9 03 00 00    	jne    be80 <do_decode+0x450>
    bad7:	50                   	push   %rax
    bad8:	48 b8 d1 61 7c dd 00 	movabs $0xdd7c61d1,%rax
    badf:	00 00 00 
    bae2:	48 89 05 57 7e 74 00 	mov    %rax,0x747e57(%rip)        # 753940 <edgeId>
    bae9:	58                   	pop    %rax
    baea:	e8 da 6a ff ff       	callq  25c9 <_storeEdge>
    baef:	50                   	push   %rax
    baf0:	48 b8 e8 30 be ee 00 	movabs $0xeebe30e8,%rax
    baf7:	00 00 00 
    bafa:	48 89 05 3f 7e 74 00 	mov    %rax,0x747e3f(%rip)        # 753940 <edgeId>
    bb01:	58                   	pop    %rax
    bb02:	e8 c2 6a ff ff       	callq  25c9 <_storeEdge>
    bb07:	89 c6                	mov    %eax,%esi
    bb09:	83 e6 10             	and    $0x10,%esi
      while (sum < DEC_B64BLOCKSIZE && !feof (in));
    bb0c:	48 89 15 05 7e 74 00 	mov    %rdx,0x747e05(%rip)        # 753918 <tmpquadone>
    bb13:	48 89 0d 16 21 5f 00 	mov    %rcx,0x5f2116(%rip)        # 5fdc30 <tmpquadtwo>
    bb1a:	48 8d 15 cf 20 5f 00 	lea    0x5f20cf(%rip),%rdx        # 5fdbf0 <funcinptr>
    bb21:	48 c7 02 37 15 00 00 	movq   $0x1537,(%rdx)
    bb28:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    bb2f:	00 
    bb30:	48 c7 c1 ff 0f 00 00 	mov    $0xfff,%rcx
    bb37:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    bb3b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    bb42:	00 
    bb43:	48 89 e9             	mov    %rbp,%rcx
    bb46:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    bb4a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    bb51:	00 
    bb52:	ff 32                	pushq  (%rdx)
    bb54:	48 8b 15 bd 7d 74 00 	mov    0x747dbd(%rip),%rdx        # 753918 <tmpquadone>
    bb5b:	48 8b 0d ce 20 5f 00 	mov    0x5f20ce(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    bb62:	48 c7 05 e3 7d 74 00 	movq   $0x1,0x747de3(%rip)        # 753950 <cmpPassed>
    bb69:	01 00 00 00 
    bb6d:	e8 ee 6a ff ff       	callq  2660 <_storeDataFn>
    bb72:	48 81 fd ff 0f 00 00 	cmp    $0xfff,%rbp
    bb79:	0f 87 e1 03 00 00    	ja     bf60 <do_decode+0x530>
    bb7f:	50                   	push   %rax
    bb80:	48 c7 c0 87 f1 75 17 	mov    $0x1775f187,%rax
    bb87:	48 89 05 b2 7d 74 00 	mov    %rax,0x747db2(%rip)        # 753940 <edgeId>
    bb8e:	58                   	pop    %rax
    bb8f:	e8 35 6a ff ff       	callq  25c9 <_storeEdge>
    bb94:	50                   	push   %rax
    bb95:	48 b8 c3 f8 ba 8b 00 	movabs $0x8bbaf8c3,%rax
    bb9c:	00 00 00 
    bb9f:	48 89 05 9a 7d 74 00 	mov    %rax,0x747d9a(%rip)        # 753940 <edgeId>
    bba6:	58                   	pop    %rax
    bba7:	e8 1d 6a ff ff       	callq  25c9 <_storeEdge>
    bbac:	85 f6                	test   %esi,%esi
    bbae:	0f 85 ac 03 00 00    	jne    bf60 <do_decode+0x530>
    bbb4:	50                   	push   %rax
    bbb5:	48 c7 c0 30 be ee 22 	mov    $0x22eebe30,%rax
    bbbc:	48 89 05 7d 7d 74 00 	mov    %rax,0x747d7d(%rip)        # 753940 <edgeId>
    bbc3:	58                   	pop    %rax
    bbc4:	e8 00 6a ff ff       	callq  25c9 <_storeEdge>
    bbc9:	50                   	push   %rax
    bbca:	48 c7 c0 8c af bb 48 	mov    $0x48bbaf8c,%rax
    bbd1:	48 89 05 68 7d 74 00 	mov    %rax,0x747d68(%rip)        # 753940 <edgeId>
    bbd8:	58                   	pop    %rax
    bbd9:	e8 eb 69 ff ff       	callq  25c9 <_storeEdge>
          n = fread (inbuf + sum, 1, DEC_B64BLOCKSIZE - sum, in);
    bbde:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    bbe3:	ba 00 10 00 00       	mov    $0x1000,%edx
    bbe8:	4c 89 e9             	mov    %r13,%rcx
    bbeb:	48 29 ea             	sub    %rbp,%rdx
    bbee:	be 01 00 00 00       	mov    $0x1,%esi
    bbf3:	48 8d 3c 2b          	lea    (%rbx,%rbp,1),%rdi
    bbf7:	e8 e4 5c ff ff       	callq  18e0 <fread_unlocked@plt>
          if (ignore_garbage)
    bbfc:	48 89 15 15 7d 74 00 	mov    %rdx,0x747d15(%rip)        # 753918 <tmpquadone>
    bc03:	48 89 0d 26 20 5f 00 	mov    %rcx,0x5f2026(%rip)        # 5fdc30 <tmpquadtwo>
    bc0a:	48 8d 15 df 1f 5f 00 	lea    0x5f1fdf(%rip),%rdx        # 5fdbf0 <funcinptr>
    bc11:	48 c7 02 38 15 00 00 	movq   $0x1538,(%rdx)
    bc18:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    bc1f:	00 
    bc20:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    bc27:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    bc2b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    bc32:	00 
    bc33:	48 8b 4c 24 37       	mov    0x37(%rsp),%rcx
    bc38:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    bc3c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    bc43:	00 
    bc44:	ff 32                	pushq  (%rdx)
    bc46:	48 8b 15 cb 7c 74 00 	mov    0x747ccb(%rip),%rdx        # 753918 <tmpquadone>
    bc4d:	48 8b 0d dc 1f 5f 00 	mov    0x5f1fdc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    bc54:	48 c7 05 f1 7c 74 00 	movq   $0x1,0x747cf1(%rip)        # 753950 <cmpPassed>
    bc5b:	01 00 00 00 
    bc5f:	e8 fc 69 ff ff       	callq  2660 <_storeDataFn>
    bc64:	80 7c 24 37 00       	cmpb   $0x0,0x37(%rsp)
    bc69:	48 89 c3             	mov    %rax,%rbx
          n = fread (inbuf + sum, 1, DEC_B64BLOCKSIZE - sum, in);
    bc6c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
          if (ignore_garbage)
    bc71:	0f 84 39 fe ff ff    	je     bab0 <do_decode+0x80>
    bc77:	50                   	push   %rax
    bc78:	48 b8 8d 7f 34 a1 00 	movabs $0xa1347f8d,%rax
    bc7f:	00 00 00 
    bc82:	48 89 05 b7 7c 74 00 	mov    %rax,0x747cb7(%rip)        # 753940 <edgeId>
    bc89:	58                   	pop    %rax
    bc8a:	e8 3a 69 ff ff       	callq  25c9 <_storeEdge>
              for (i = 0; n > 0 && i < n;)
    bc8f:	45 31 e4             	xor    %r12d,%r12d
    bc92:	50                   	push   %rax
    bc93:	48 c7 c0 f8 47 13 6a 	mov    $0x6a1347f8,%rax
    bc9a:	48 89 05 9f 7c 74 00 	mov    %rax,0x747c9f(%rip)        # 753940 <edgeId>
    bca1:	58                   	pop    %rax
    bca2:	e8 22 69 ff ff       	callq  25c9 <_storeEdge>
    bca7:	48 85 db             	test   %rbx,%rbx
    bcaa:	0f 84 00 fe ff ff    	je     bab0 <do_decode+0x80>
    bcb0:	50                   	push   %rax
    bcb1:	48 c7 c0 7f 34 a1 66 	mov    $0x66a1347f,%rax
    bcb8:	48 89 05 81 7c 74 00 	mov    %rax,0x747c81(%rip)        # 753940 <edgeId>
    bcbf:	58                   	pop    %rax
    bcc0:	e8 04 69 ff ff       	callq  25c9 <_storeEdge>
    bcc5:	50                   	push   %rax
    bcc6:	48 c7 c0 3f 9a 50 33 	mov    $0x33509a3f,%rax
    bccd:	48 89 05 6c 7c 74 00 	mov    %rax,0x747c6c(%rip)        # 753940 <edgeId>
    bcd4:	58                   	pop    %rax
    bcd5:	e8 ef 68 ff ff       	callq  25c9 <_storeEdge>
    bcda:	48 89 15 37 7c 74 00 	mov    %rdx,0x747c37(%rip)        # 753918 <tmpquadone>
    bce1:	48 89 0d 48 1f 5f 00 	mov    %rcx,0x5f1f48(%rip)        # 5fdc30 <tmpquadtwo>
    bce8:	48 8d 15 01 1f 5f 00 	lea    0x5f1f01(%rip),%rdx        # 5fdbf0 <funcinptr>
    bcef:	48 c7 02 39 15 00 00 	movq   $0x1539,(%rdx)
    bcf6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    bcfd:	00 
    bcfe:	48 89 d9             	mov    %rbx,%rcx
    bd01:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    bd05:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    bd0c:	00 
    bd0d:	4c 89 e1             	mov    %r12,%rcx
    bd10:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    bd14:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    bd1b:	00 
    bd1c:	ff 32                	pushq  (%rdx)
    bd1e:	48 8b 15 f3 7b 74 00 	mov    0x747bf3(%rip),%rdx        # 753918 <tmpquadone>
    bd25:	48 8b 0d 04 1f 5f 00 	mov    0x5f1f04(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    bd2c:	48 c7 05 19 7c 74 00 	movq   $0x1,0x747c19(%rip)        # 753950 <cmpPassed>
    bd33:	01 00 00 00 
    bd37:	e8 24 69 ff ff       	callq  2660 <_storeDataFn>
    bd3c:	49 39 dc             	cmp    %rbx,%r12
    bd3f:	0f 83 6b fd ff ff    	jae    bab0 <do_decode+0x80>
    bd45:	50                   	push   %rax
    bd46:	48 b8 8f 26 d4 8c 00 	movabs $0x8cd4268f,%rax
    bd4d:	00 00 00 
    bd50:	48 89 05 e9 7b 74 00 	mov    %rax,0x747be9(%rip)        # 753940 <edgeId>
    bd57:	58                   	pop    %rax
    bd58:	e8 6c 68 ff ff       	callq  25c9 <_storeEdge>
                if (isbase64 (inbuf[sum + i]) || inbuf[sum + i] == '=')
    bd5d:	4e 8d 7c 25 00       	lea    0x0(%rbp,%r12,1),%r15
    bd62:	42 0f be bc 3c 50 0c 	movsbl 0xc50(%rsp,%r15,1),%edi
    bd69:	00 00 
    bd6b:	41 89 fe             	mov    %edi,%r14d
    bd6e:	e8 0d 2f 00 00       	callq  ec80 <isbase64>
    bd73:	48 89 15 9e 7b 74 00 	mov    %rdx,0x747b9e(%rip)        # 753918 <tmpquadone>
    bd7a:	48 89 0d af 1e 5f 00 	mov    %rcx,0x5f1eaf(%rip)        # 5fdc30 <tmpquadtwo>
    bd81:	48 8d 15 68 1e 5f 00 	lea    0x5f1e68(%rip),%rdx        # 5fdbf0 <funcinptr>
    bd88:	48 c7 02 3a 15 00 00 	movq   $0x153a,(%rdx)
    bd8f:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    bd96:	00 
    bd97:	48 c7 c1 3d 00 00 00 	mov    $0x3d,%rcx
    bd9e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    bda2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    bda9:	00 
    bdaa:	4c 89 f1             	mov    %r14,%rcx
    bdad:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    bdb1:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    bdb8:	00 
    bdb9:	ff 32                	pushq  (%rdx)
    bdbb:	48 8b 15 56 7b 74 00 	mov    0x747b56(%rip),%rdx        # 753918 <tmpquadone>
    bdc2:	48 8b 0d 67 1e 5f 00 	mov    0x5f1e67(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    bdc9:	48 c7 05 7c 7b 74 00 	movq   $0x1,0x747b7c(%rip)        # 753950 <cmpPassed>
    bdd0:	01 00 00 00 
    bdd4:	e8 87 68 ff ff       	callq  2660 <_storeDataFn>
    bdd9:	41 80 fe 3d          	cmp    $0x3d,%r14b
    bddd:	74 38                	je     be17 <do_decode+0x3e7>
    bddf:	50                   	push   %rax
    bde0:	48 b8 26 d4 8c f0 00 	movabs $0xf08cd426,%rax
    bde7:	00 00 00 
    bdea:	48 89 05 4f 7b 74 00 	mov    %rax,0x747b4f(%rip)        # 753940 <edgeId>
    bdf1:	58                   	pop    %rax
    bdf2:	e8 d2 67 ff ff       	callq  25c9 <_storeEdge>
    bdf7:	84 c0                	test   %al,%al
    bdf9:	0f 84 31 0c 00 00    	je     ca30 <do_decode+0x1000>
    bdff:	50                   	push   %rax
    be00:	48 b8 09 35 23 fc 00 	movabs $0xfc233509,%rax
    be07:	00 00 00 
    be0a:	48 89 05 2f 7b 74 00 	mov    %rax,0x747b2f(%rip)        # 753940 <edgeId>
    be11:	58                   	pop    %rax
    be12:	e8 b2 67 ff ff       	callq  25c9 <_storeEdge>
    be17:	50                   	push   %rax
    be18:	48 b8 84 9a 11 fe 00 	movabs $0xfe119a84,%rax
    be1f:	00 00 00 
    be22:	48 89 05 17 7b 74 00 	mov    %rax,0x747b17(%rip)        # 753940 <edgeId>
    be29:	58                   	pop    %rax
    be2a:	e8 9a 67 ff ff       	callq  25c9 <_storeEdge>
                  i++;
    be2f:	49 83 c4 01          	add    $0x1,%r12
              for (i = 0; n > 0 && i < n;)
    be33:	48 85 db             	test   %rbx,%rbx
    be36:	0f 85 89 fe ff ff    	jne    bcc5 <do_decode+0x295>
    be3c:	50                   	push   %rax
    be3d:	48 b8 6a 46 f8 ff 00 	movabs $0xfff8466a,%rax
    be44:	00 00 00 
    be47:	48 89 05 f2 7a 74 00 	mov    %rax,0x747af2(%rip)        # 753940 <edgeId>
    be4e:	58                   	pop    %rax
    be4f:	e8 75 67 ff ff       	callq  25c9 <_storeEdge>
    be54:	41 8b 45 00          	mov    0x0(%r13),%eax
          sum += n;
    be58:	48 01 dd             	add    %rbx,%rbp
          if (ferror (in))
    be5b:	a8 20                	test   $0x20,%al
    be5d:	0f 84 8c fc ff ff    	je     baef <do_decode+0xbf>
    be63:	50                   	push   %rax
    be64:	48 b8 c2 ff 4f c5 00 	movabs $0xc54fffc2,%rax
    be6b:	00 00 00 
    be6e:	48 89 05 cb 7a 74 00 	mov    %rax,0x747acb(%rip)        # 753940 <edgeId>
    be75:	58                   	pop    %rax
    be76:	e8 4e 67 ff ff       	callq  25c9 <_storeEdge>
    be7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    be80:	50                   	push   %rax
    be81:	48 b8 fc ff 54 9c 00 	movabs $0x9c54fffc,%rax
    be88:	00 00 00 
    be8b:	48 89 05 ae 7a 74 00 	mov    %rax,0x747aae(%rip)        # 753940 <edgeId>
    be92:	58                   	pop    %rax
    be93:	e8 31 67 ff ff       	callq  25c9 <_storeEdge>
            error (EXIT_FAILURE, errno, _("read error"));
    be98:	48 8d 35 f1 d4 01 00 	lea    0x1d4f1(%rip),%rsi        # 29390 <_IO_stdin_used+0x10>
    be9f:	31 ff                	xor    %edi,%edi
    bea1:	ba 05 00 00 00       	mov    $0x5,%edx
    bea6:	e8 75 5a ff ff       	callq  1920 <dcgettext@plt>
    beab:	48 89 c3             	mov    %rax,%rbx
    beae:	e8 dd 59 ff ff       	callq  1890 <__errno_location@plt>
    beb3:	8b 30                	mov    (%rax),%esi
    beb5:	48 89 da             	mov    %rbx,%rdx
    beb8:	31 c0                	xor    %eax,%eax
    beba:	bf 01 00 00 00       	mov    $0x1,%edi
    bebf:	e8 ac 5c ff ff       	callq  1b70 <error@plt>
    bec4:	41 8b 45 00          	mov    0x0(%r13),%eax
    bec8:	89 c6                	mov    %eax,%esi
    beca:	83 e6 10             	and    $0x10,%esi
      while (sum < DEC_B64BLOCKSIZE && !feof (in));
    becd:	48 89 15 44 7a 74 00 	mov    %rdx,0x747a44(%rip)        # 753918 <tmpquadone>
    bed4:	48 89 0d 55 1d 5f 00 	mov    %rcx,0x5f1d55(%rip)        # 5fdc30 <tmpquadtwo>
    bedb:	48 8d 15 0e 1d 5f 00 	lea    0x5f1d0e(%rip),%rdx        # 5fdbf0 <funcinptr>
    bee2:	48 c7 02 3b 15 00 00 	movq   $0x153b,(%rdx)
    bee9:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    bef0:	00 
    bef1:	48 c7 c1 ff 0f 00 00 	mov    $0xfff,%rcx
    bef8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    befc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    bf03:	00 
    bf04:	48 89 e9             	mov    %rbp,%rcx
    bf07:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    bf0b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    bf12:	00 
    bf13:	ff 32                	pushq  (%rdx)
    bf15:	48 8b 15 fc 79 74 00 	mov    0x7479fc(%rip),%rdx        # 753918 <tmpquadone>
    bf1c:	48 8b 0d 0d 1d 5f 00 	mov    0x5f1d0d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    bf23:	48 c7 05 22 7a 74 00 	movq   $0x1,0x747a22(%rip)        # 753950 <cmpPassed>
    bf2a:	01 00 00 00 
    bf2e:	e8 2d 67 ff ff       	callq  2660 <_storeDataFn>
    bf33:	48 81 fd ff 0f 00 00 	cmp    $0xfff,%rbp
    bf3a:	0f 86 54 fc ff ff    	jbe    bb94 <do_decode+0x164>
    bf40:	50                   	push   %rax
    bf41:	48 b8 e2 d4 76 9b 00 	movabs $0x9b76d4e2,%rax
    bf48:	00 00 00 
    bf4b:	48 89 05 ee 79 74 00 	mov    %rax,0x7479ee(%rip)        # 753940 <edgeId>
    bf52:	58                   	pop    %rax
    bf53:	e8 71 66 ff ff       	callq  25c9 <_storeEdge>
    bf58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    bf5f:	00 
    bf60:	50                   	push   %rax
    bf61:	48 b8 9c da 6e 93 00 	movabs $0x936eda9c,%rax
    bf68:	00 00 00 
    bf6b:	48 89 05 ce 79 74 00 	mov    %rax,0x7479ce(%rip)        # 753940 <edgeId>
    bf72:	58                   	pop    %rax
    bf73:	e8 51 66 ff ff       	callq  25c9 <_storeEdge>
    bf78:	45 31 e4             	xor    %r12d,%r12d
    bf7b:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
    bf80:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
    bf85:	e9 49 06 00 00       	jmpq   c5d3 <do_decode+0xba3>
    bf8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    bf90:	50                   	push   %rax
    bf91:	48 b8 da 6e 93 9c 00 	movabs $0x9c936eda,%rax
    bf98:	00 00 00 
    bf9b:	48 89 05 9e 79 74 00 	mov    %rax,0x74799e(%rip)        # 753940 <edgeId>
    bfa2:	58                   	pop    %rax
    bfa3:	e8 21 66 ff ff       	callq  25c9 <_storeEdge>
      for (k = 0; k < 1 + !!feof (in); k++)
    bfa8:	45 85 e4             	test   %r12d,%r12d
    bfab:	0f 85 df fa ff ff    	jne    ba90 <do_decode+0x60>
    bfb1:	50                   	push   %rax
    bfb2:	48 b8 db 6d 92 d3 00 	movabs $0xd3926ddb,%rax
    bfb9:	00 00 00 
    bfbc:	48 89 05 7d 79 74 00 	mov    %rax,0x74797d(%rip)        # 753940 <edgeId>
    bfc3:	58                   	pop    %rax
    bfc4:	e8 00 66 ff ff       	callq  25c9 <_storeEdge>
    bfc9:	50                   	push   %rax
    bfca:	48 b8 ed 36 c9 e9 00 	movabs $0xe9c936ed,%rax
    bfd1:	00 00 00 
    bfd4:	48 89 05 65 79 74 00 	mov    %rax,0x747965(%rip)        # 753940 <edgeId>
    bfdb:	58                   	pop    %rax
    bfdc:	e8 e8 65 ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    bfe1:	8b 1d f5 14 22 00    	mov    0x2214f5(%rip),%ebx        # 22d4dc <lava_val+0x3fc>
          n = DEC_BLOCKSIZE;
    bfe7:	48 c7 44 24 40 00 0c 	movq   $0xc00,0x40(%rsp)
    bfee:	00 00 
    bff0:	4c 8b 7c 24 28       	mov    0x28(%rsp),%r15
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    bff5:	48 89 15 1c 79 74 00 	mov    %rdx,0x74791c(%rip)        # 753918 <tmpquadone>
    bffc:	48 89 0d 2d 1c 5f 00 	mov    %rcx,0x5f1c2d(%rip)        # 5fdc30 <tmpquadtwo>
    c003:	48 8d 15 e6 1b 5f 00 	lea    0x5f1be6(%rip),%rdx        # 5fdbf0 <funcinptr>
    c00a:	48 c7 02 3c 15 00 00 	movq   $0x153c,(%rdx)
    c011:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c018:	00 
    c019:	48 c7 c1 6c 61 75 62 	mov    $0x6275616c,%rcx
    c020:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c024:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c02b:	00 
    c02c:	48 89 d9             	mov    %rbx,%rcx
    c02f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c033:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c03a:	00 
    c03b:	ff 32                	pushq  (%rdx)
    c03d:	48 8b 15 d4 78 74 00 	mov    0x7478d4(%rip),%rdx        # 753918 <tmpquadone>
    c044:	48 8b 0d e5 1b 5f 00 	mov    0x5f1be5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c04b:	48 c7 05 fa 78 74 00 	movq   $0x1,0x7478fa(%rip)        # 753950 <cmpPassed>
    c052:	01 00 00 00 
    c056:	e8 05 66 ff ff       	callq  2660 <_storeDataFn>
    c05b:	81 fb 6c 61 75 62    	cmp    $0x6275616c,%ebx
    c061:	0f 84 01 07 00 00    	je     c768 <do_decode+0xd38>
    c067:	50                   	push   %rax
    c068:	48 c7 c0 92 d3 cf 49 	mov    $0x49cfd392,%rax
    c06f:	48 89 05 ca 78 74 00 	mov    %rax,0x7478ca(%rip)        # 753940 <edgeId>
    c076:	58                   	pop    %rax
    c077:	e8 4d 65 ff ff       	callq  25c9 <_storeEdge>
    c07c:	50                   	push   %rax
    c07d:	48 b8 c9 e9 e7 a4 00 	movabs $0xa4e7e9c9,%rax
    c084:	00 00 00 
    c087:	48 89 05 b2 78 74 00 	mov    %rax,0x7478b2(%rip)        # 753940 <edgeId>
    c08e:	58                   	pop    %rax
    c08f:	e8 35 65 ff ff       	callq  25c9 <_storeEdge>
    c094:	48 89 15 7d 78 74 00 	mov    %rdx,0x74787d(%rip)        # 753918 <tmpquadone>
    c09b:	48 89 0d 8e 1b 5f 00 	mov    %rcx,0x5f1b8e(%rip)        # 5fdc30 <tmpquadtwo>
    c0a2:	48 8d 15 47 1b 5f 00 	lea    0x5f1b47(%rip),%rdx        # 5fdbf0 <funcinptr>
    c0a9:	48 c7 02 3d 15 00 00 	movq   $0x153d,(%rdx)
    c0b0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c0b7:	00 
    c0b8:	48 c7 c1 62 75 61 6c 	mov    $0x6c617562,%rcx
    c0bf:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c0c3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c0ca:	00 
    c0cb:	48 89 d9             	mov    %rbx,%rcx
    c0ce:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c0d2:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c0d9:	00 
    c0da:	ff 32                	pushq  (%rdx)
    c0dc:	48 8b 15 35 78 74 00 	mov    0x747835(%rip),%rdx        # 753918 <tmpquadone>
    c0e3:	48 8b 0d 46 1b 5f 00 	mov    0x5f1b46(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c0ea:	48 c7 05 5b 78 74 00 	movq   $0x1,0x74785b(%rip)        # 753950 <cmpPassed>
    c0f1:	01 00 00 00 
    c0f5:	e8 66 65 ff ff       	callq  2660 <_storeDataFn>
    c0fa:	81 fb 62 75 61 6c    	cmp    $0x6c617562,%ebx
    c100:	41 89 da             	mov    %ebx,%r10d
    c103:	0f 84 5f 06 00 00    	je     c768 <do_decode+0xd38>
    c109:	50                   	push   %rax
    c10a:	48 b8 9c 7e 4e ca 00 	movabs $0xca4e7e9c,%rax
    c111:	00 00 00 
    c114:	48 89 05 25 78 74 00 	mov    %rax,0x747825(%rip)        # 753940 <edgeId>
    c11b:	58                   	pop    %rax
    c11c:	e8 a8 64 ff ff       	callq  25c9 <_storeEdge>
    c121:	50                   	push   %rax
    c122:	48 c7 c0 a7 9f 93 32 	mov    $0x32939fa7,%rax
    c129:	48 89 05 10 78 74 00 	mov    %rax,0x747810(%rip)        # 753940 <edgeId>
    c130:	58                   	pop    %rax
    c131:	e8 93 64 ff ff       	callq  25c9 <_storeEdge>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c136:	48 89 15 db 77 74 00 	mov    %rdx,0x7477db(%rip)        # 753918 <tmpquadone>
    c13d:	48 89 0d ec 1a 5f 00 	mov    %rcx,0x5f1aec(%rip)        # 5fdc30 <tmpquadtwo>
    c144:	48 8d 15 a5 1a 5f 00 	lea    0x5f1aa5(%rip),%rdx        # 5fdbf0 <funcinptr>
    c14b:	48 c7 02 3e 15 00 00 	movq   $0x153e,(%rdx)
    c152:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c159:	00 
    c15a:	48 c7 c1 62 75 61 6c 	mov    $0x6c617562,%rcx
    c161:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c165:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c16c:	00 
    c16d:	48 89 d9             	mov    %rbx,%rcx
    c170:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c174:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c17b:	00 
    c17c:	ff 32                	pushq  (%rdx)
    c17e:	48 8b 15 93 77 74 00 	mov    0x747793(%rip),%rdx        # 753918 <tmpquadone>
    c185:	48 8b 0d a4 1a 5f 00 	mov    0x5f1aa4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c18c:	48 c7 05 b9 77 74 00 	movq   $0x1,0x7477b9(%rip)        # 753950 <cmpPassed>
    c193:	01 00 00 00 
    c197:	e8 c4 64 ff ff       	callq  2660 <_storeDataFn>
    c19c:	81 fb 62 75 61 6c    	cmp    $0x6c617562,%ebx
    c1a2:	0f 84 a2 00 00 00    	je     c24a <do_decode+0x81a>
    c1a8:	50                   	push   %rax
    c1a9:	48 c7 c0 fd 9c 94 11 	mov    $0x11949cfd,%rax
    c1b0:	48 89 05 89 77 74 00 	mov    %rax,0x747789(%rip)        # 753940 <edgeId>
    c1b7:	58                   	pop    %rax
    c1b8:	e8 0c 64 ff ff       	callq  25c9 <_storeEdge>
    c1bd:	50                   	push   %rax
    c1be:	48 c7 c0 7e 4e ca 08 	mov    $0x8ca4e7e,%rax
    c1c5:	48 89 05 74 77 74 00 	mov    %rax,0x747774(%rip)        # 753940 <edgeId>
    c1cc:	58                   	pop    %rax
    c1cd:	e8 f7 63 ff ff       	callq  25c9 <_storeEdge>
    c1d2:	48 89 15 3f 77 74 00 	mov    %rdx,0x74773f(%rip)        # 753918 <tmpquadone>
    c1d9:	48 89 0d 50 1a 5f 00 	mov    %rcx,0x5f1a50(%rip)        # 5fdc30 <tmpquadtwo>
    c1e0:	48 8d 15 09 1a 5f 00 	lea    0x5f1a09(%rip),%rdx        # 5fdbf0 <funcinptr>
    c1e7:	48 c7 02 3f 15 00 00 	movq   $0x153f,(%rdx)
    c1ee:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c1f5:	00 
    c1f6:	48 c7 c1 6c 61 75 62 	mov    $0x6275616c,%rcx
    c1fd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c201:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c208:	00 
    c209:	4c 89 d1             	mov    %r10,%rcx
    c20c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c210:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c217:	00 
    c218:	ff 32                	pushq  (%rdx)
    c21a:	48 8b 15 f7 76 74 00 	mov    0x7476f7(%rip),%rdx        # 753918 <tmpquadone>
    c221:	48 8b 0d 08 1a 5f 00 	mov    0x5f1a08(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c228:	48 c7 05 1d 77 74 00 	movq   $0x1,0x74771d(%rip)        # 753950 <cmpPassed>
    c22f:	01 00 00 00 
    c233:	e8 28 64 ff ff       	callq  2660 <_storeDataFn>
    c238:	41 81 fa 6c 61 75 62 	cmp    $0x6275616c,%r10d
    c23f:	41 0f 94 c3          	sete   %r11b
    c243:	41 0f b6 fb          	movzbl %r11b,%edi
    c247:	0f af df             	imul   %edi,%ebx
    c24a:	50                   	push   %rax
    c24b:	48 b8 73 52 46 e0 00 	movabs $0xe0465273,%rax
    c252:	00 00 00 
    c255:	48 89 05 e4 76 74 00 	mov    %rax,0x7476e4(%rip)        # 753940 <edgeId>
    c25c:	58                   	pop    %rax
    c25d:	e8 67 63 ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c262:	8b 2d 6c 12 22 00    	mov    0x22126c(%rip),%ebp        # 22d4d4 <lava_val+0x3f4>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c268:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c26d:	48 89 15 a4 76 74 00 	mov    %rdx,0x7476a4(%rip)        # 753918 <tmpquadone>
    c274:	48 89 0d b5 19 5f 00 	mov    %rcx,0x5f19b5(%rip)        # 5fdc30 <tmpquadtwo>
    c27b:	48 8d 15 6e 19 5f 00 	lea    0x5f196e(%rip),%rdx        # 5fdbf0 <funcinptr>
    c282:	48 c7 02 40 15 00 00 	movq   $0x1540,(%rdx)
    c289:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c290:	00 
    c291:	48 c7 c1 6c 61 75 64 	mov    $0x6475616c,%rcx
    c298:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c29c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c2a3:	00 
    c2a4:	48 89 e9             	mov    %rbp,%rcx
    c2a7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c2ab:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c2b2:	00 
    c2b3:	ff 32                	pushq  (%rdx)
    c2b5:	48 8b 15 5c 76 74 00 	mov    0x74765c(%rip),%rdx        # 753918 <tmpquadone>
    c2bc:	48 8b 0d 6d 19 5f 00 	mov    0x5f196d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c2c3:	48 c7 05 82 76 74 00 	movq   $0x1,0x747682(%rip)        # 753950 <cmpPassed>
    c2ca:	01 00 00 00 
    c2ce:	e8 8d 63 ff ff       	callq  2660 <_storeDataFn>
    c2d3:	81 fd 6c 61 75 64    	cmp    $0x6475616c,%ebp
    c2d9:	0f 84 91 07 00 00    	je     ca70 <do_decode+0x1040>
    c2df:	50                   	push   %rax
    c2e0:	48 b8 19 81 73 a3 00 	movabs $0xa3738119,%rax
    c2e7:	00 00 00 
    c2ea:	48 89 05 4f 76 74 00 	mov    %rax,0x74764f(%rip)        # 753940 <edgeId>
    c2f1:	58                   	pop    %rax
    c2f2:	e8 d2 62 ff ff       	callq  25c9 <_storeEdge>
    c2f7:	48 89 15 1a 76 74 00 	mov    %rdx,0x74761a(%rip)        # 753918 <tmpquadone>
    c2fe:	48 89 0d 2b 19 5f 00 	mov    %rcx,0x5f192b(%rip)        # 5fdc30 <tmpquadtwo>
    c305:	48 8d 15 e4 18 5f 00 	lea    0x5f18e4(%rip),%rdx        # 5fdbf0 <funcinptr>
    c30c:	48 c7 02 41 15 00 00 	movq   $0x1541,(%rdx)
    c313:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c31a:	00 
    c31b:	48 c7 c1 64 75 61 6c 	mov    $0x6c617564,%rcx
    c322:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c326:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c32d:	00 
    c32e:	48 89 e9             	mov    %rbp,%rcx
    c331:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c335:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c33c:	00 
    c33d:	ff 32                	pushq  (%rdx)
    c33f:	48 8b 15 d2 75 74 00 	mov    0x7475d2(%rip),%rdx        # 753918 <tmpquadone>
    c346:	48 8b 0d e3 18 5f 00 	mov    0x5f18e3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c34d:	48 c7 05 f8 75 74 00 	movq   $0x1,0x7475f8(%rip)        # 753950 <cmpPassed>
    c354:	01 00 00 00 
    c358:	e8 03 63 ff ff       	callq  2660 <_storeDataFn>
    c35d:	81 fd 64 75 61 6c    	cmp    $0x6c617564,%ebp
    c363:	89 ea                	mov    %ebp,%edx
    c365:	0f 84 05 07 00 00    	je     ca70 <do_decode+0x1040>
    c36b:	50                   	push   %rax
    c36c:	48 c7 c0 23 70 6e 74 	mov    $0x746e7023,%rax
    c373:	48 89 05 c6 75 74 00 	mov    %rax,0x7475c6(%rip)        # 753940 <edgeId>
    c37a:	58                   	pop    %rax
    c37b:	e8 49 62 ff ff       	callq  25c9 <_storeEdge>
    c380:	50                   	push   %rax
    c381:	48 c7 c0 08 9c 1b 1d 	mov    $0x1d1b9c08,%rax
    c388:	48 89 05 b1 75 74 00 	mov    %rax,0x7475b1(%rip)        # 753940 <edgeId>
    c38f:	58                   	pop    %rax
    c390:	e8 34 62 ff ff       	callq  25c9 <_storeEdge>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c395:	48 89 15 7c 75 74 00 	mov    %rdx,0x74757c(%rip)        # 753918 <tmpquadone>
    c39c:	48 89 0d 8d 18 5f 00 	mov    %rcx,0x5f188d(%rip)        # 5fdc30 <tmpquadtwo>
    c3a3:	48 8d 15 46 18 5f 00 	lea    0x5f1846(%rip),%rdx        # 5fdbf0 <funcinptr>
    c3aa:	48 c7 02 42 15 00 00 	movq   $0x1542,(%rdx)
    c3b1:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c3b8:	00 
    c3b9:	48 c7 c1 64 75 61 6c 	mov    $0x6c617564,%rcx
    c3c0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c3c4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c3cb:	00 
    c3cc:	48 89 e9             	mov    %rbp,%rcx
    c3cf:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c3d3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c3da:	00 
    c3db:	ff 32                	pushq  (%rdx)
    c3dd:	48 8b 15 34 75 74 00 	mov    0x747534(%rip),%rdx        # 753918 <tmpquadone>
    c3e4:	48 8b 0d 45 18 5f 00 	mov    0x5f1845(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c3eb:	48 c7 05 5a 75 74 00 	movq   $0x1,0x74755a(%rip)        # 753950 <cmpPassed>
    c3f2:	01 00 00 00 
    c3f6:	e8 65 62 ff ff       	callq  2660 <_storeDataFn>
    c3fb:	81 fd 64 75 61 6c    	cmp    $0x6c617564,%ebp
    c401:	0f 84 a4 00 00 00    	je     c4ab <do_decode+0xa7b>
    c407:	50                   	push   %rax
    c408:	48 c7 c0 e0 dc e8 20 	mov    $0x20e8dce0,%rax
    c40f:	48 89 05 2a 75 74 00 	mov    %rax,0x74752a(%rip)        # 753940 <edgeId>
    c416:	58                   	pop    %rax
    c417:	e8 ad 61 ff ff       	callq  25c9 <_storeEdge>
    c41c:	50                   	push   %rax
    c41d:	48 b8 70 6e 74 90 00 	movabs $0x90746e70,%rax
    c424:	00 00 00 
    c427:	48 89 05 12 75 74 00 	mov    %rax,0x747512(%rip)        # 753940 <edgeId>
    c42e:	58                   	pop    %rax
    c42f:	e8 95 61 ff ff       	callq  25c9 <_storeEdge>
    c434:	48 89 0d dd 74 74 00 	mov    %rcx,0x7474dd(%rip)        # 753918 <tmpquadone>
    c43b:	48 89 1d ee 17 5f 00 	mov    %rbx,0x5f17ee(%rip)        # 5fdc30 <tmpquadtwo>
    c442:	48 8d 0d a7 17 5f 00 	lea    0x5f17a7(%rip),%rcx        # 5fdbf0 <funcinptr>
    c449:	48 c7 01 43 15 00 00 	movq   $0x1543,(%rcx)
    c450:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
    c457:	00 
    c458:	48 c7 c3 6c 61 75 64 	mov    $0x6475616c,%rbx
    c45f:	48 89 59 10          	mov    %rbx,0x10(%rcx)
    c463:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
    c46a:	00 
    c46b:	48 89 d3             	mov    %rdx,%rbx
    c46e:	48 89 59 20          	mov    %rbx,0x20(%rcx)
    c472:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    c479:	00 
    c47a:	ff 31                	pushq  (%rcx)
    c47c:	48 8b 0d 95 74 74 00 	mov    0x747495(%rip),%rcx        # 753918 <tmpquadone>
    c483:	48 8b 1d a6 17 5f 00 	mov    0x5f17a6(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    c48a:	48 c7 05 bb 74 74 00 	movq   $0x1,0x7474bb(%rip)        # 753950 <cmpPassed>
    c491:	01 00 00 00 
    c495:	e8 c6 61 ff ff       	callq  2660 <_storeDataFn>
    c49a:	81 fa 6c 61 75 64    	cmp    $0x6475616c,%edx
    c4a0:	0f 94 c1             	sete   %cl
    c4a3:	44 0f b6 c1          	movzbl %cl,%r8d
    c4a7:	41 0f af e8          	imul   %r8d,%ebp
    c4ab:	50                   	push   %rax
    c4ac:	48 b8 73 a3 83 ec 00 	movabs $0xec83a373,%rax
    c4b3:	00 00 00 
    c4b6:	48 89 05 83 74 74 00 	mov    %rax,0x747483(%rip)        # 753940 <edgeId>
    c4bd:	58                   	pop    %rax
    c4be:	e8 06 61 ff ff       	callq  25c9 <_storeEdge>
    c4c3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    c4c8:	89 ee                	mov    %ebp,%esi
    c4ca:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
    c4cf:	4c 89 f1             	mov    %r14,%rcx
    c4d2:	4c 89 fa             	mov    %r15,%rdx
    c4d5:	48 8d 3c f0          	lea    (%rax,%rsi,8),%rdi
    c4d9:	48 89 de             	mov    %rbx,%rsi
    c4dc:	e8 cf 27 00 00       	callq  ecb0 <base64_decode_ctx>
          if (fwrite (outbuf, 1, n, out) < n)
    c4e1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    c4e6:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
    c4eb:	be 01 00 00 00       	mov    $0x1,%esi
    c4f0:	4c 89 f7             	mov    %r14,%rdi
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c4f3:	89 c3                	mov    %eax,%ebx
          if (fwrite (outbuf, 1, n, out) < n)
    c4f5:	e8 16 56 ff ff       	callq  1b10 <fwrite_unlocked@plt>
    c4fa:	48 89 15 17 74 74 00 	mov    %rdx,0x747417(%rip)        # 753918 <tmpquadone>
    c501:	48 89 0d 28 17 5f 00 	mov    %rcx,0x5f1728(%rip)        # 5fdc30 <tmpquadtwo>
    c508:	48 8d 15 e1 16 5f 00 	lea    0x5f16e1(%rip),%rdx        # 5fdbf0 <funcinptr>
    c50f:	48 c7 02 44 15 00 00 	movq   $0x1544,(%rdx)
    c516:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    c51d:	00 
    c51e:	48 89 c1             	mov    %rax,%rcx
    c521:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c525:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c52c:	00 
    c52d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
    c532:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c536:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c53d:	00 
    c53e:	ff 32                	pushq  (%rdx)
    c540:	48 8b 15 d1 73 74 00 	mov    0x7473d1(%rip),%rdx        # 753918 <tmpquadone>
    c547:	48 8b 0d e2 16 5f 00 	mov    0x5f16e2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c54e:	48 c7 05 f7 73 74 00 	movq   $0x1,0x7473f7(%rip)        # 753950 <cmpPassed>
    c555:	01 00 00 00 
    c559:	e8 02 61 ff ff       	callq  2660 <_storeDataFn>
    c55e:	48 39 44 24 40       	cmp    %rax,0x40(%rsp)
    c563:	0f 87 0f 08 00 00    	ja     cd78 <do_decode+0x1348>
    c569:	50                   	push   %rax
    c56a:	48 c7 c0 d9 2b cd 06 	mov    $0x6cd2bd9,%rax
    c571:	48 89 05 c8 73 74 00 	mov    %rax,0x7473c8(%rip)        # 753940 <edgeId>
    c578:	58                   	pop    %rax
    c579:	e8 4b 60 ff ff       	callq  25c9 <_storeEdge>
    c57e:	50                   	push   %rax
    c57f:	48 b8 ec 95 66 83 00 	movabs $0x836695ec,%rax
    c586:	00 00 00 
    c589:	48 89 05 b0 73 74 00 	mov    %rax,0x7473b0(%rip)        # 753940 <edgeId>
    c590:	58                   	pop    %rax
    c591:	e8 33 60 ff ff       	callq  25c9 <_storeEdge>
          if (!ok)
    c596:	84 db                	test   %bl,%bl
    c598:	0f 84 92 07 00 00    	je     cd30 <do_decode+0x1300>
    c59e:	50                   	push   %rax
    c59f:	48 c7 c0 bd d2 6c 30 	mov    $0x306cd2bd,%rax
    c5a6:	48 89 05 93 73 74 00 	mov    %rax,0x747393(%rip)        # 753940 <edgeId>
    c5ad:	58                   	pop    %rax
    c5ae:	e8 16 60 ff ff       	callq  25c9 <_storeEdge>
    c5b3:	50                   	push   %rax
    c5b4:	48 b8 5e 69 36 98 00 	movabs $0x9836695e,%rax
    c5bb:	00 00 00 
    c5be:	48 89 05 7b 73 74 00 	mov    %rax,0x74737b(%rip)        # 753940 <edgeId>
    c5c5:	58                   	pop    %rax
    c5c6:	e8 fe 5f ff ff       	callq  25c9 <_storeEdge>
    c5cb:	41 8b 45 00          	mov    0x0(%r13),%eax
      for (k = 0; k < 1 + !!feof (in); k++)
    c5cf:	41 83 c4 01          	add    $0x1,%r12d
    c5d3:	50                   	push   %rax
    c5d4:	48 c7 c0 4a b3 c1 74 	mov    $0x74c1b34a,%rax
    c5db:	48 89 05 5e 73 74 00 	mov    %rax,0x74735e(%rip)        # 753940 <edgeId>
    c5e2:	58                   	pop    %rax
    c5e3:	e8 e1 5f ff ff       	callq  25c9 <_storeEdge>
    c5e8:	a8 10                	test   $0x10,%al
    c5ea:	0f 84 a0 f9 ff ff    	je     bf90 <do_decode+0x560>
    c5f0:	50                   	push   %rax
    c5f1:	48 b8 69 36 98 ae 00 	movabs $0xae983669,%rax
    c5f8:	00 00 00 
    c5fb:	48 89 05 3e 73 74 00 	mov    %rax,0x74733e(%rip)        # 753940 <edgeId>
    c602:	58                   	pop    %rax
    c603:	e8 c1 5f ff ff       	callq  25c9 <_storeEdge>
    c608:	48 89 15 09 73 74 00 	mov    %rdx,0x747309(%rip)        # 753918 <tmpquadone>
    c60f:	48 89 0d 1a 16 5f 00 	mov    %rcx,0x5f161a(%rip)        # 5fdc30 <tmpquadtwo>
    c616:	48 8d 15 d3 15 5f 00 	lea    0x5f15d3(%rip),%rdx        # 5fdbf0 <funcinptr>
    c61d:	48 c7 02 45 15 00 00 	movq   $0x1545,(%rdx)
    c624:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c62b:	00 
    c62c:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
    c633:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c637:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c63e:	00 
    c63f:	4c 89 e1             	mov    %r12,%rcx
    c642:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c646:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c64d:	00 
    c64e:	ff 32                	pushq  (%rdx)
    c650:	48 8b 15 c1 72 74 00 	mov    0x7472c1(%rip),%rdx        # 753918 <tmpquadone>
    c657:	48 8b 0d d2 15 5f 00 	mov    0x5f15d2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c65e:	48 c7 05 e7 72 74 00 	movq   $0x1,0x7472e7(%rip)        # 753950 <cmpPassed>
    c665:	01 00 00 00 
    c669:	e8 f2 5f ff ff       	callq  2660 <_storeDataFn>
    c66e:	41 83 fc 01          	cmp    $0x1,%r12d
    c672:	0f 87 50 07 00 00    	ja     cdc8 <do_decode+0x1398>
    c678:	50                   	push   %rax
    c679:	48 c7 c0 cd 06 d3 35 	mov    $0x35d306cd,%rax
    c680:	48 89 05 b9 72 74 00 	mov    %rax,0x7472b9(%rip)        # 753940 <edgeId>
    c687:	58                   	pop    %rax
    c688:	e8 3c 5f ff ff       	callq  25c9 <_storeEdge>
          if (k == 1 && ctx.i == 0)
    c68d:	0f 85 36 f9 ff ff    	jne    bfc9 <do_decode+0x599>
    c693:	50                   	push   %rax
    c694:	48 c7 c0 b3 c1 74 0d 	mov    $0xd74c1b3,%rax
    c69b:	48 89 05 9e 72 74 00 	mov    %rax,0x74729e(%rip)        # 753940 <edgeId>
    c6a2:	58                   	pop    %rax
    c6a3:	e8 21 5f ff ff       	callq  25c9 <_storeEdge>
    c6a8:	44 8b 4c 24 48       	mov    0x48(%rsp),%r9d
    c6ad:	45 85 c9             	test   %r9d,%r9d
    c6b0:	0f 84 12 07 00 00    	je     cdc8 <do_decode+0x1398>
    c6b6:	50                   	push   %rax
    c6b7:	48 c7 c0 1b 4c d7 30 	mov    $0x30d74c1b,%rax
    c6be:	48 89 05 7b 72 74 00 	mov    %rax,0x74727b(%rip)        # 753940 <edgeId>
    c6c5:	58                   	pop    %rax
    c6c6:	e8 fe 5e ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c6cb:	8b 1d 0b 0e 22 00    	mov    0x220e0b(%rip),%ebx        # 22d4dc <lava_val+0x3fc>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c6d1:	45 31 ff             	xor    %r15d,%r15d
          n = DEC_BLOCKSIZE;
    c6d4:	48 c7 44 24 40 00 0c 	movq   $0xc00,0x40(%rsp)
    c6db:	00 00 
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c6dd:	48 89 15 34 72 74 00 	mov    %rdx,0x747234(%rip)        # 753918 <tmpquadone>
    c6e4:	48 89 0d 45 15 5f 00 	mov    %rcx,0x5f1545(%rip)        # 5fdc30 <tmpquadtwo>
    c6eb:	48 8d 15 fe 14 5f 00 	lea    0x5f14fe(%rip),%rdx        # 5fdbf0 <funcinptr>
    c6f2:	48 c7 02 46 15 00 00 	movq   $0x1546,(%rdx)
    c6f9:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c700:	00 
    c701:	48 c7 c1 6c 61 75 62 	mov    $0x6275616c,%rcx
    c708:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c70c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c713:	00 
    c714:	48 89 d9             	mov    %rbx,%rcx
    c717:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c71b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c722:	00 
    c723:	ff 32                	pushq  (%rdx)
    c725:	48 8b 15 ec 71 74 00 	mov    0x7471ec(%rip),%rdx        # 753918 <tmpquadone>
    c72c:	48 8b 0d fd 14 5f 00 	mov    0x5f14fd(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c733:	48 c7 05 12 72 74 00 	movq   $0x1,0x747212(%rip)        # 753950 <cmpPassed>
    c73a:	01 00 00 00 
    c73e:	e8 1d 5f ff ff       	callq  2660 <_storeDataFn>
    c743:	81 fb 6c 61 75 62    	cmp    $0x6275616c,%ebx
    c749:	0f 85 2d f9 ff ff    	jne    c07c <do_decode+0x64c>
    c74f:	50                   	push   %rax
    c750:	48 c7 c0 d7 30 82 2e 	mov    $0x2e8230d7,%rax
    c757:	48 89 05 e2 71 74 00 	mov    %rax,0x7471e2(%rip)        # 753940 <edgeId>
    c75e:	58                   	pop    %rax
    c75f:	e8 65 5e ff ff       	callq  25c9 <_storeEdge>
    c764:	0f 1f 40 00          	nopl   0x0(%rax)
    c768:	50                   	push   %rax
    c769:	48 c7 c0 1a 46 d0 45 	mov    $0x45d0461a,%rax
    c770:	48 89 05 c9 71 74 00 	mov    %rax,0x7471c9(%rip)        # 753940 <edgeId>
    c777:	58                   	pop    %rax
    c778:	e8 4c 5e ff ff       	callq  25c9 <_storeEdge>
  return __dprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt,
    c77d:	48 8d 15 4c cd 01 00 	lea    0x1cd4c(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    c784:	31 c0                	xor    %eax,%eax
    c786:	b9 ff 00 00 00       	mov    $0xff,%ecx
    c78b:	be 01 00 00 00       	mov    $0x1,%esi
    c790:	bf 01 00 00 00       	mov    $0x1,%edi
    c795:	e8 26 54 ff ff       	callq  1bc0 <__dprintf_chk@plt>
    return lava_val[bug_num];
    c79a:	8b 1d 3c 0d 22 00    	mov    0x220d3c(%rip),%ebx        # 22d4dc <lava_val+0x3fc>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c7a0:	48 89 15 71 71 74 00 	mov    %rdx,0x747171(%rip)        # 753918 <tmpquadone>
    c7a7:	48 89 0d 82 14 5f 00 	mov    %rcx,0x5f1482(%rip)        # 5fdc30 <tmpquadtwo>
    c7ae:	48 8d 15 3b 14 5f 00 	lea    0x5f143b(%rip),%rdx        # 5fdbf0 <funcinptr>
    c7b5:	48 c7 02 47 15 00 00 	movq   $0x1547,(%rdx)
    c7bc:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c7c3:	00 
    c7c4:	48 c7 c1 62 75 61 6c 	mov    $0x6c617562,%rcx
    c7cb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c7cf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c7d6:	00 
    c7d7:	48 89 d9             	mov    %rbx,%rcx
    c7da:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c7de:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c7e5:	00 
    c7e6:	ff 32                	pushq  (%rdx)
    c7e8:	48 8b 15 29 71 74 00 	mov    0x747129(%rip),%rdx        # 753918 <tmpquadone>
    c7ef:	48 8b 0d 3a 14 5f 00 	mov    0x5f143a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c7f6:	48 c7 05 4f 71 74 00 	movq   $0x1,0x74714f(%rip)        # 753950 <cmpPassed>
    c7fd:	01 00 00 00 
    c801:	e8 5a 5e ff ff       	callq  2660 <_storeDataFn>
    c806:	81 fb 62 75 61 6c    	cmp    $0x6c617562,%ebx
    c80c:	0f 84 9f 00 00 00    	je     c8b1 <do_decode+0xe81>
    c812:	50                   	push   %rax
    c813:	48 b8 8b f4 56 f2 00 	movabs $0xf256f48b,%rax
    c81a:	00 00 00 
    c81d:	48 89 05 1c 71 74 00 	mov    %rax,0x74711c(%rip)        # 753940 <edgeId>
    c824:	58                   	pop    %rax
    c825:	e8 9f 5d ff ff       	callq  25c9 <_storeEdge>
    c82a:	48 89 15 e7 70 74 00 	mov    %rdx,0x7470e7(%rip)        # 753918 <tmpquadone>
    c831:	48 89 0d f8 13 5f 00 	mov    %rcx,0x5f13f8(%rip)        # 5fdc30 <tmpquadtwo>
    c838:	48 8d 15 b1 13 5f 00 	lea    0x5f13b1(%rip),%rdx        # 5fdbf0 <funcinptr>
    c83f:	48 c7 02 48 15 00 00 	movq   $0x1548,(%rdx)
    c846:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c84d:	00 
    c84e:	48 c7 c1 6c 61 75 62 	mov    $0x6275616c,%rcx
    c855:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c859:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c860:	00 
    c861:	48 89 d9             	mov    %rbx,%rcx
    c864:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c868:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c86f:	00 
    c870:	ff 32                	pushq  (%rdx)
    c872:	48 8b 15 9f 70 74 00 	mov    0x74709f(%rip),%rdx        # 753918 <tmpquadone>
    c879:	48 8b 0d b0 13 5f 00 	mov    0x5f13b0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c880:	48 c7 05 c5 70 74 00 	movq   $0x1,0x7470c5(%rip)        # 753950 <cmpPassed>
    c887:	01 00 00 00 
    c88b:	e8 d0 5d ff ff       	callq  2660 <_storeDataFn>
    c890:	81 fb 6c 61 75 62    	cmp    $0x6275616c,%ebx
    c896:	0f 85 bd 05 00 00    	jne    ce59 <do_decode+0x1429>
    c89c:	50                   	push   %rax
    c89d:	48 c7 c0 22 bd 95 3c 	mov    $0x3c95bd22,%rax
    c8a4:	48 89 05 95 70 74 00 	mov    %rax,0x747095(%rip)        # 753940 <edgeId>
    c8ab:	58                   	pop    %rax
    c8ac:	e8 18 5d ff ff       	callq  25c9 <_storeEdge>
    c8b1:	50                   	push   %rax
    c8b2:	48 b8 91 de 4a 9e 00 	movabs $0x9e4ade91,%rax
    c8b9:	00 00 00 
    c8bc:	48 89 05 7d 70 74 00 	mov    %rax,0x74707d(%rip)        # 753940 <edgeId>
    c8c3:	58                   	pop    %rax
    c8c4:	e8 00 5d ff ff       	callq  25c9 <_storeEdge>
    c8c9:	48 8d 15 00 cc 01 00 	lea    0x1cc00(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    c8d0:	31 c0                	xor    %eax,%eax
    c8d2:	b9 ff 00 00 00       	mov    $0xff,%ecx
    c8d7:	be 01 00 00 00       	mov    $0x1,%esi
    c8dc:	bf 01 00 00 00       	mov    $0x1,%edi
    c8e1:	e8 da 52 ff ff       	callq  1bc0 <__dprintf_chk@plt>
    c8e6:	44 8b 15 ef 0b 22 00 	mov    0x220bef(%rip),%r10d        # 22d4dc <lava_val+0x3fc>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    c8ed:	48 89 15 24 70 74 00 	mov    %rdx,0x747024(%rip)        # 753918 <tmpquadone>
    c8f4:	48 89 0d 35 13 5f 00 	mov    %rcx,0x5f1335(%rip)        # 5fdc30 <tmpquadtwo>
    c8fb:	48 8d 15 ee 12 5f 00 	lea    0x5f12ee(%rip),%rdx        # 5fdbf0 <funcinptr>
    c902:	48 c7 02 49 15 00 00 	movq   $0x1549,(%rdx)
    c909:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c910:	00 
    c911:	48 c7 c1 62 75 61 6c 	mov    $0x6c617562,%rcx
    c918:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c91c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c923:	00 
    c924:	4c 89 d1             	mov    %r10,%rcx
    c927:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c92b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c932:	00 
    c933:	ff 32                	pushq  (%rdx)
    c935:	48 8b 15 dc 6f 74 00 	mov    0x746fdc(%rip),%rdx        # 753918 <tmpquadone>
    c93c:	48 8b 0d ed 12 5f 00 	mov    0x5f12ed(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c943:	48 c7 05 02 70 74 00 	movq   $0x1,0x747002(%rip)        # 753950 <cmpPassed>
    c94a:	01 00 00 00 
    c94e:	e8 0d 5d ff ff       	callq  2660 <_storeDataFn>
    c953:	41 81 fa 62 75 61 6c 	cmp    $0x6c617562,%r10d
    c95a:	0f 84 ea f8 ff ff    	je     c24a <do_decode+0x81a>
    c960:	50                   	push   %rax
    c961:	48 c7 c0 e4 a9 87 58 	mov    $0x5887a9e4,%rax
    c968:	48 89 05 d1 6f 74 00 	mov    %rax,0x746fd1(%rip)        # 753940 <edgeId>
    c96f:	58                   	pop    %rax
    c970:	e8 54 5c ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    c975:	48 89 15 9c 6f 74 00 	mov    %rdx,0x746f9c(%rip)        # 753918 <tmpquadone>
    c97c:	48 89 0d ad 12 5f 00 	mov    %rcx,0x5f12ad(%rip)        # 5fdc30 <tmpquadtwo>
    c983:	48 8d 15 66 12 5f 00 	lea    0x5f1266(%rip),%rdx        # 5fdbf0 <funcinptr>
    c98a:	48 c7 02 4a 15 00 00 	movq   $0x154a,(%rdx)
    c991:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    c998:	00 
    c999:	48 c7 c1 6c 61 75 62 	mov    $0x6275616c,%rcx
    c9a0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    c9a4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    c9ab:	00 
    c9ac:	4c 89 d1             	mov    %r10,%rcx
    c9af:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    c9b3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    c9ba:	00 
    c9bb:	ff 32                	pushq  (%rdx)
    c9bd:	48 8b 15 54 6f 74 00 	mov    0x746f54(%rip),%rdx        # 753918 <tmpquadone>
    c9c4:	48 8b 0d 65 12 5f 00 	mov    0x5f1265(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    c9cb:	48 c7 05 7a 6f 74 00 	movq   $0x1,0x746f7a(%rip)        # 753950 <cmpPassed>
    c9d2:	01 00 00 00 
    c9d6:	e8 85 5c ff ff       	callq  2660 <_storeDataFn>
    c9db:	41 81 fa 6c 61 75 62 	cmp    $0x6275616c,%r10d
    c9e2:	0f 85 d5 f7 ff ff    	jne    c1bd <do_decode+0x78d>
    c9e8:	50                   	push   %rax
    c9e9:	48 b8 a7 1e 62 f9 00 	movabs $0xf9621ea7,%rax
    c9f0:	00 00 00 
    c9f3:	48 89 05 46 6f 74 00 	mov    %rax,0x746f46(%rip)        # 753940 <edgeId>
    c9fa:	58                   	pop    %rax
    c9fb:	e8 c9 5b ff ff       	callq  25c9 <_storeEdge>
    ca00:	48 8d 15 c9 ca 01 00 	lea    0x1cac9(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    ca07:	b9 ff 00 00 00       	mov    $0xff,%ecx
    ca0c:	be 01 00 00 00       	mov    $0x1,%esi
    ca11:	bf 01 00 00 00       	mov    $0x1,%edi
    ca16:	31 c0                	xor    %eax,%eax
    ca18:	e8 a3 51 ff ff       	callq  1bc0 <__dprintf_chk@plt>
    ca1d:	44 8b 15 b8 0a 22 00 	mov    0x220ab8(%rip),%r10d        # 22d4dc <lava_val+0x3fc>
    ca24:	e9 94 f7 ff ff       	jmpq   c1bd <do_decode+0x78d>
    ca29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ca30:	50                   	push   %rax
    ca31:	48 c7 c0 b1 fc bb 59 	mov    $0x59bbfcb1,%rax
    ca38:	48 89 05 01 6f 74 00 	mov    %rax,0x746f01(%rip)        # 753940 <edgeId>
    ca3f:	58                   	pop    %rax
    ca40:	e8 84 5b ff ff       	callq  25c9 <_storeEdge>
                  memmove (inbuf + sum + i, inbuf + sum + i + 1, --n - i);
    ca45:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    ca4a:	48 83 eb 01          	sub    $0x1,%rbx
    ca4e:	48 89 da             	mov    %rbx,%rdx
    ca51:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
    ca56:	4c 29 e2             	sub    %r12,%rdx
    ca59:	4b 8d 74 38 01       	lea    0x1(%r8,%r15,1),%rsi
    ca5e:	4b 8d 3c 38          	lea    (%r8,%r15,1),%rdi
}

__fortify_function void *
__NTH (memmove (void *__dest, const void *__src, size_t __len))
{
  return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
    ca62:	e8 f9 50 ff ff       	callq  1b60 <memmove@plt>
    ca67:	e9 26 f2 ff ff       	jmpq   bc92 <do_decode+0x262>
    ca6c:	0f 1f 40 00          	nopl   0x0(%rax)
    ca70:	50                   	push   %rax
    ca71:	48 b8 56 a2 b2 98 00 	movabs $0x98b2a256,%rax
    ca78:	00 00 00 
    ca7b:	48 89 05 be 6e 74 00 	mov    %rax,0x746ebe(%rip)        # 753940 <edgeId>
    ca82:	58                   	pop    %rax
    ca83:	e8 41 5b ff ff       	callq  25c9 <_storeEdge>
    ca88:	48 8d 15 41 ca 01 00 	lea    0x1ca41(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    ca8f:	31 c0                	xor    %eax,%eax
    ca91:	b9 fd 00 00 00       	mov    $0xfd,%ecx
    ca96:	be 01 00 00 00       	mov    $0x1,%esi
    ca9b:	bf 01 00 00 00       	mov    $0x1,%edi
    caa0:	e8 1b 51 ff ff       	callq  1bc0 <__dprintf_chk@plt>
    return lava_val[bug_num];
    caa5:	8b 2d 29 0a 22 00    	mov    0x220a29(%rip),%ebp        # 22d4d4 <lava_val+0x3f4>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    caab:	48 89 15 66 6e 74 00 	mov    %rdx,0x746e66(%rip)        # 753918 <tmpquadone>
    cab2:	48 89 0d 77 11 5f 00 	mov    %rcx,0x5f1177(%rip)        # 5fdc30 <tmpquadtwo>
    cab9:	48 8d 15 30 11 5f 00 	lea    0x5f1130(%rip),%rdx        # 5fdbf0 <funcinptr>
    cac0:	48 c7 02 4b 15 00 00 	movq   $0x154b,(%rdx)
    cac7:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    cace:	00 
    cacf:	48 c7 c1 64 75 61 6c 	mov    $0x6c617564,%rcx
    cad6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    cada:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    cae1:	00 
    cae2:	48 89 e9             	mov    %rbp,%rcx
    cae5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    cae9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    caf0:	00 
    caf1:	ff 32                	pushq  (%rdx)
    caf3:	48 8b 15 1e 6e 74 00 	mov    0x746e1e(%rip),%rdx        # 753918 <tmpquadone>
    cafa:	48 8b 0d 2f 11 5f 00 	mov    0x5f112f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    cb01:	48 c7 05 44 6e 74 00 	movq   $0x1,0x746e44(%rip)        # 753950 <cmpPassed>
    cb08:	01 00 00 00 
    cb0c:	e8 4f 5b ff ff       	callq  2660 <_storeDataFn>
    cb11:	81 fd 64 75 61 6c    	cmp    $0x6c617564,%ebp
    cb17:	0f 84 9c 00 00 00    	je     cbb9 <do_decode+0x1189>
    cb1d:	50                   	push   %rax
    cb1e:	48 c7 c0 b3 3c 7a 5b 	mov    $0x5b7a3cb3,%rax
    cb25:	48 89 05 14 6e 74 00 	mov    %rax,0x746e14(%rip)        # 753940 <edgeId>
    cb2c:	58                   	pop    %rax
    cb2d:	e8 97 5a ff ff       	callq  25c9 <_storeEdge>
    cb32:	48 89 15 df 6d 74 00 	mov    %rdx,0x746ddf(%rip)        # 753918 <tmpquadone>
    cb39:	48 89 0d f0 10 5f 00 	mov    %rcx,0x5f10f0(%rip)        # 5fdc30 <tmpquadtwo>
    cb40:	48 8d 15 a9 10 5f 00 	lea    0x5f10a9(%rip),%rdx        # 5fdbf0 <funcinptr>
    cb47:	48 c7 02 4c 15 00 00 	movq   $0x154c,(%rdx)
    cb4e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    cb55:	00 
    cb56:	48 c7 c1 6c 61 75 64 	mov    $0x6475616c,%rcx
    cb5d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    cb61:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    cb68:	00 
    cb69:	48 89 e9             	mov    %rbp,%rcx
    cb6c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    cb70:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    cb77:	00 
    cb78:	ff 32                	pushq  (%rdx)
    cb7a:	48 8b 15 97 6d 74 00 	mov    0x746d97(%rip),%rdx        # 753918 <tmpquadone>
    cb81:	48 8b 0d a8 10 5f 00 	mov    0x5f10a8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    cb88:	48 c7 05 bd 6d 74 00 	movq   $0x1,0x746dbd(%rip)        # 753950 <cmpPassed>
    cb8f:	01 00 00 00 
    cb93:	e8 c8 5a ff ff       	callq  2660 <_storeDataFn>
    cb98:	81 fd 6c 61 75 64    	cmp    $0x6475616c,%ebp
    cb9e:	0f 85 79 02 00 00    	jne    ce1d <do_decode+0x13ed>
    cba4:	50                   	push   %rax
    cba5:	48 c7 c0 2c 8f de 16 	mov    $0x16de8f2c,%rax
    cbac:	48 89 05 8d 6d 74 00 	mov    %rax,0x746d8d(%rip)        # 753940 <edgeId>
    cbb3:	58                   	pop    %rax
    cbb4:	e8 10 5a ff ff       	callq  25c9 <_storeEdge>
    cbb9:	50                   	push   %rax
    cbba:	48 b8 96 47 6f 8b 00 	movabs $0x8b6f4796,%rax
    cbc1:	00 00 00 
    cbc4:	48 89 05 75 6d 74 00 	mov    %rax,0x746d75(%rip)        # 753940 <edgeId>
    cbcb:	58                   	pop    %rax
    cbcc:	e8 f8 59 ff ff       	callq  25c9 <_storeEdge>
    cbd1:	48 8d 15 f8 c8 01 00 	lea    0x1c8f8(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    cbd8:	31 c0                	xor    %eax,%eax
    cbda:	b9 fd 00 00 00       	mov    $0xfd,%ecx
    cbdf:	be 01 00 00 00       	mov    $0x1,%esi
    cbe4:	bf 01 00 00 00       	mov    $0x1,%edi
    cbe9:	e8 d2 4f ff ff       	callq  1bc0 <__dprintf_chk@plt>
    cbee:	8b 15 e0 08 22 00    	mov    0x2208e0(%rip),%edx        # 22d4d4 <lava_val+0x3f4>
          ok = base64_decode_ctx (&ctx+(lava_get(253))*(0x6c617564==(lava_get(253))||0x6475616c==(lava_get(253))), inbuf+(lava_get(255))*(0x6c617562==(lava_get(255))||0x6275616c==(lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
    cbf4:	48 89 0d 1d 6d 74 00 	mov    %rcx,0x746d1d(%rip)        # 753918 <tmpquadone>
    cbfb:	48 89 1d 2e 10 5f 00 	mov    %rbx,0x5f102e(%rip)        # 5fdc30 <tmpquadtwo>
    cc02:	48 8d 0d e7 0f 5f 00 	lea    0x5f0fe7(%rip),%rcx        # 5fdbf0 <funcinptr>
    cc09:	48 c7 01 4d 15 00 00 	movq   $0x154d,(%rcx)
    cc10:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
    cc17:	00 
    cc18:	48 c7 c3 64 75 61 6c 	mov    $0x6c617564,%rbx
    cc1f:	48 89 59 10          	mov    %rbx,0x10(%rcx)
    cc23:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
    cc2a:	00 
    cc2b:	48 89 d3             	mov    %rdx,%rbx
    cc2e:	48 89 59 20          	mov    %rbx,0x20(%rcx)
    cc32:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    cc39:	00 
    cc3a:	ff 31                	pushq  (%rcx)
    cc3c:	48 8b 0d d5 6c 74 00 	mov    0x746cd5(%rip),%rcx        # 753918 <tmpquadone>
    cc43:	48 8b 1d e6 0f 5f 00 	mov    0x5f0fe6(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    cc4a:	48 c7 05 fb 6c 74 00 	movq   $0x1,0x746cfb(%rip)        # 753950 <cmpPassed>
    cc51:	01 00 00 00 
    cc55:	e8 06 5a ff ff       	callq  2660 <_storeDataFn>
    cc5a:	81 fa 64 75 61 6c    	cmp    $0x6c617564,%edx
    cc60:	0f 84 45 f8 ff ff    	je     c4ab <do_decode+0xa7b>
    cc66:	50                   	push   %rax
    cc67:	48 b8 b6 78 e2 c5 00 	movabs $0xc5e278b6,%rax
    cc6e:	00 00 00 
    cc71:	48 89 05 c8 6c 74 00 	mov    %rax,0x746cc8(%rip)        # 753940 <edgeId>
    cc78:	58                   	pop    %rax
    cc79:	e8 4b 59 ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    cc7e:	48 89 0d 93 6c 74 00 	mov    %rcx,0x746c93(%rip)        # 753918 <tmpquadone>
    cc85:	48 89 1d a4 0f 5f 00 	mov    %rbx,0x5f0fa4(%rip)        # 5fdc30 <tmpquadtwo>
    cc8c:	48 8d 0d 5d 0f 5f 00 	lea    0x5f0f5d(%rip),%rcx        # 5fdbf0 <funcinptr>
    cc93:	48 c7 01 4e 15 00 00 	movq   $0x154e,(%rcx)
    cc9a:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
    cca1:	00 
    cca2:	48 c7 c3 6c 61 75 64 	mov    $0x6475616c,%rbx
    cca9:	48 89 59 10          	mov    %rbx,0x10(%rcx)
    ccad:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
    ccb4:	00 
    ccb5:	48 89 d3             	mov    %rdx,%rbx
    ccb8:	48 89 59 20          	mov    %rbx,0x20(%rcx)
    ccbc:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    ccc3:	00 
    ccc4:	ff 31                	pushq  (%rcx)
    ccc6:	48 8b 0d 4b 6c 74 00 	mov    0x746c4b(%rip),%rcx        # 753918 <tmpquadone>
    cccd:	48 8b 1d 5c 0f 5f 00 	mov    0x5f0f5c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    ccd4:	48 c7 05 71 6c 74 00 	movq   $0x1,0x746c71(%rip)        # 753950 <cmpPassed>
    ccdb:	01 00 00 00 
    ccdf:	e8 7c 59 ff ff       	callq  2660 <_storeDataFn>
    cce4:	81 fa 6c 61 75 64    	cmp    $0x6475616c,%edx
    ccea:	0f 85 2c f7 ff ff    	jne    c41c <do_decode+0x9ec>
    ccf0:	50                   	push   %rax
    ccf1:	48 c7 c0 e2 89 17 43 	mov    $0x431789e2,%rax
    ccf8:	48 89 05 41 6c 74 00 	mov    %rax,0x746c41(%rip)        # 753940 <edgeId>
    ccff:	58                   	pop    %rax
    cd00:	e8 c4 58 ff ff       	callq  25c9 <_storeEdge>
    cd05:	48 8d 15 c4 c7 01 00 	lea    0x1c7c4(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    cd0c:	b9 fd 00 00 00       	mov    $0xfd,%ecx
    cd11:	be 01 00 00 00       	mov    $0x1,%esi
    cd16:	bf 01 00 00 00       	mov    $0x1,%edi
    cd1b:	31 c0                	xor    %eax,%eax
    cd1d:	e8 9e 4e ff ff       	callq  1bc0 <__dprintf_chk@plt>
    cd22:	8b 15 ac 07 22 00    	mov    0x2207ac(%rip),%edx        # 22d4d4 <lava_val+0x3f4>
    cd28:	e9 ef f6 ff ff       	jmpq   c41c <do_decode+0x9ec>
    cd2d:	0f 1f 00             	nopl   (%rax)
    cd30:	50                   	push   %rax
    cd31:	48 b8 8b a1 4c cb 00 	movabs $0xcb4ca18b,%rax
    cd38:	00 00 00 
    cd3b:	48 89 05 fe 6b 74 00 	mov    %rax,0x746bfe(%rip)        # 753940 <edgeId>
    cd42:	58                   	pop    %rax
    cd43:	e8 81 58 ff ff       	callq  25c9 <_storeEdge>
            error (EXIT_FAILURE, 0, _("invalid input"));
    cd48:	48 8d 35 4c c6 01 00 	lea    0x1c64c(%rip),%rsi        # 2939b <_IO_stdin_used+0x1b>
    cd4f:	31 ff                	xor    %edi,%edi
    cd51:	ba 05 00 00 00       	mov    $0x5,%edx
    cd56:	e8 c5 4b ff ff       	callq  1920 <dcgettext@plt>
    cd5b:	31 f6                	xor    %esi,%esi
    cd5d:	48 89 c2             	mov    %rax,%rdx
    cd60:	bf 01 00 00 00       	mov    $0x1,%edi
    cd65:	31 c0                	xor    %eax,%eax
    cd67:	e8 04 4e ff ff       	callq  1b70 <error@plt>
    cd6c:	e9 42 f8 ff ff       	jmpq   c5b3 <do_decode+0xb83>
    cd71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    cd78:	50                   	push   %rax
    cd79:	48 b8 b4 cc 5e 83 00 	movabs $0x835eccb4,%rax
    cd80:	00 00 00 
    cd83:	48 89 05 b6 6b 74 00 	mov    %rax,0x746bb6(%rip)        # 753940 <edgeId>
    cd8a:	58                   	pop    %rax
    cd8b:	e8 39 58 ff ff       	callq  25c9 <_storeEdge>
            error (EXIT_FAILURE, errno, _("write error"));
    cd90:	48 8d 35 ed c5 01 00 	lea    0x1c5ed(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
    cd97:	31 ff                	xor    %edi,%edi
    cd99:	ba 05 00 00 00       	mov    $0x5,%edx
    cd9e:	e8 7d 4b ff ff       	callq  1920 <dcgettext@plt>
    cda3:	49 89 c7             	mov    %rax,%r15
    cda6:	e8 e5 4a ff ff       	callq  1890 <__errno_location@plt>
    cdab:	8b 30                	mov    (%rax),%esi
    cdad:	4c 89 fa             	mov    %r15,%rdx
    cdb0:	bf 01 00 00 00       	mov    $0x1,%edi
    cdb5:	31 c0                	xor    %eax,%eax
    cdb7:	e8 b4 4d ff ff       	callq  1b70 <error@plt>
    cdbc:	e9 bd f7 ff ff       	jmpq   c57e <do_decode+0xb4e>
    cdc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    cdc8:	50                   	push   %rax
    cdc9:	48 b8 35 e8 2b 95 00 	movabs $0x952be835,%rax
    cdd0:	00 00 00 
    cdd3:	48 89 05 66 6b 74 00 	mov    %rax,0x746b66(%rip)        # 753940 <edgeId>
    cdda:	58                   	pop    %rax
    cddb:	e8 e9 57 ff ff       	callq  25c9 <_storeEdge>
}
    cde0:	48 8b 84 24 58 1c 00 	mov    0x1c58(%rsp),%rax
    cde7:	00 
    cde8:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    cdef:	00 00 
    cdf1:	75 49                	jne    ce3c <do_decode+0x140c>
    cdf3:	50                   	push   %rax
    cdf4:	48 b8 41 5f a9 b4 00 	movabs $0xb4a95f41,%rax
    cdfb:	00 00 00 
    cdfe:	48 89 05 3b 6b 74 00 	mov    %rax,0x746b3b(%rip)        # 753940 <edgeId>
    ce05:	58                   	pop    %rax
    ce06:	e8 be 57 ff ff       	callq  25c9 <_storeEdge>
    ce0b:	48 81 c4 68 1c 00 00 	add    $0x1c68,%rsp
    ce12:	5b                   	pop    %rbx
    ce13:	5d                   	pop    %rbp
    ce14:	41 5c                	pop    %r12
    ce16:	41 5d                	pop    %r13
    ce18:	41 5e                	pop    %r14
    ce1a:	41 5f                	pop    %r15
    ce1c:	c3                   	retq   
    ce1d:	50                   	push   %rax
    ce1e:	48 b8 4a 3b f2 d0 00 	movabs $0xd0f23b4a,%rax
    ce25:	00 00 00 
    ce28:	48 89 05 11 6b 74 00 	mov    %rax,0x746b11(%rip)        # 753940 <edgeId>
    ce2f:	58                   	pop    %rax
    ce30:	e8 94 57 ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    ce35:	89 ea                	mov    %ebp,%edx
    ce37:	e9 44 f5 ff ff       	jmpq   c380 <do_decode+0x950>
    ce3c:	50                   	push   %rax
    ce3d:	48 b8 1d 79 e8 9a 00 	movabs $0x9ae8791d,%rax
    ce44:	00 00 00 
    ce47:	48 89 05 f2 6a 74 00 	mov    %rax,0x746af2(%rip)        # 753940 <edgeId>
    ce4e:	58                   	pop    %rax
    ce4f:	e8 75 57 ff ff       	callq  25c9 <_storeEdge>
}
    ce54:	e8 f7 4a ff ff       	callq  1950 <__stack_chk_fail@plt>
    ce59:	50                   	push   %rax
    ce5a:	48 c7 c0 f2 d0 35 7d 	mov    $0x7d35d0f2,%rax
    ce61:	48 89 05 d8 6a 74 00 	mov    %rax,0x746ad8(%rip)        # 753940 <edgeId>
    ce68:	58                   	pop    %rax
    ce69:	e8 5b 57 ff ff       	callq  25c9 <_storeEdge>
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    ce6e:	41 89 da             	mov    %ebx,%r10d
    ce71:	e9 ab f2 ff ff       	jmpq   c121 <do_decode+0x6f1>
    ce76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ce7d:	00 00 00 

000000000000ce80 <lava_set>:
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
    ce80:	48 8d 05 59 02 22 00 	lea    0x220259(%rip),%rax        # 22d0e0 <lava_val>
    ce87:	89 ff                	mov    %edi,%edi
    ce89:	89 34 b8             	mov    %esi,(%rax,%rdi,4)
    ce8c:	c3                   	retq   
    ce8d:	0f 1f 00             	nopl   (%rax)

000000000000ce90 <lava_get>:
unsigned int lava_get(unsigned int bug_num) {
    ce90:	55                   	push   %rbp
    ce91:	53                   	push   %rbx
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    ce92:	48 8d 1d 47 02 22 00 	lea    0x220247(%rip),%rbx        # 22d0e0 <lava_val>
    ce99:	89 fd                	mov    %edi,%ebp
    ce9b:	ba 61 76 61 6c       	mov    $0x6c617661,%edx
unsigned int lava_get(unsigned int bug_num) {
    cea0:	48 83 ec 08          	sub    $0x8,%rsp
    if (0x6c617661 - bug_num == lava_val[bug_num] ||
    cea4:	8b 04 ab             	mov    (%rbx,%rbp,4),%eax
    cea7:	29 fa                	sub    %edi,%edx
    cea9:	48 89 0d 68 6a 74 00 	mov    %rcx,0x746a68(%rip)        # 753918 <tmpquadone>
    ceb0:	48 89 1d 79 0d 5f 00 	mov    %rbx,0x5f0d79(%rip)        # 5fdc30 <tmpquadtwo>
    ceb7:	48 8d 0d 32 0d 5f 00 	lea    0x5f0d32(%rip),%rcx        # 5fdbf0 <funcinptr>
    cebe:	48 c7 01 4f 15 00 00 	movq   $0x154f,(%rcx)
    cec5:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
    cecc:	00 
    cecd:	48 89 c3             	mov    %rax,%rbx
    ced0:	48 89 59 10          	mov    %rbx,0x10(%rcx)
    ced4:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
    cedb:	00 
    cedc:	48 89 d3             	mov    %rdx,%rbx
    cedf:	48 89 59 20          	mov    %rbx,0x20(%rcx)
    cee3:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    ceea:	00 
    ceeb:	ff 31                	pushq  (%rcx)
    ceed:	48 8b 0d 24 6a 74 00 	mov    0x746a24(%rip),%rcx        # 753918 <tmpquadone>
    cef4:	48 8b 1d 35 0d 5f 00 	mov    0x5f0d35(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    cefb:	48 c7 05 4a 6a 74 00 	movq   $0x1,0x746a4a(%rip)        # 753950 <cmpPassed>
    cf02:	01 00 00 00 
    cf06:	e8 55 57 ff ff       	callq  2660 <_storeDataFn>
    cf0b:	39 c2                	cmp    %eax,%edx
    cf0d:	0f 84 9d 00 00 00    	je     cfb0 <lava_get+0x120>
    cf13:	50                   	push   %rax
    cf14:	48 c7 c0 10 25 c5 63 	mov    $0x63c52510,%rax
    cf1b:	48 89 05 1e 6a 74 00 	mov    %rax,0x746a1e(%rip)        # 753940 <edgeId>
    cf22:	58                   	pop    %rax
    cf23:	e8 a1 56 ff ff       	callq  25c9 <_storeEdge>
    cf28:	0f ca                	bswap  %edx
    cf2a:	48 89 0d e7 69 74 00 	mov    %rcx,0x7469e7(%rip)        # 753918 <tmpquadone>
    cf31:	48 89 1d f8 0c 5f 00 	mov    %rbx,0x5f0cf8(%rip)        # 5fdc30 <tmpquadtwo>
    cf38:	48 8d 0d b1 0c 5f 00 	lea    0x5f0cb1(%rip),%rcx        # 5fdbf0 <funcinptr>
    cf3f:	48 c7 01 50 15 00 00 	movq   $0x1550,(%rcx)
    cf46:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
    cf4d:	00 
    cf4e:	48 89 d3             	mov    %rdx,%rbx
    cf51:	48 89 59 10          	mov    %rbx,0x10(%rcx)
    cf55:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
    cf5c:	00 
    cf5d:	48 89 c3             	mov    %rax,%rbx
    cf60:	48 89 59 20          	mov    %rbx,0x20(%rcx)
    cf64:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    cf6b:	00 
    cf6c:	ff 31                	pushq  (%rcx)
    cf6e:	48 8b 0d a3 69 74 00 	mov    0x7469a3(%rip),%rcx        # 753918 <tmpquadone>
    cf75:	48 8b 1d b4 0c 5f 00 	mov    0x5f0cb4(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    cf7c:	48 c7 05 c9 69 74 00 	movq   $0x1,0x7469c9(%rip)        # 753950 <cmpPassed>
    cf83:	01 00 00 00 
    cf87:	e8 d4 56 ff ff       	callq  2660 <_storeDataFn>
    cf8c:	39 d0                	cmp    %edx,%eax
    cf8e:	74 20                	je     cfb0 <lava_get+0x120>
    cf90:	50                   	push   %rax
    cf91:	48 c7 c0 51 52 3c 36 	mov    $0x363c5251,%rax
    cf98:	48 89 05 a1 69 74 00 	mov    %rax,0x7469a1(%rip)        # 753940 <edgeId>
    cf9f:	58                   	pop    %rax
    cfa0:	e8 24 56 ff ff       	callq  25c9 <_storeEdge>
}
    cfa5:	48 83 c4 08          	add    $0x8,%rsp
    cfa9:	5b                   	pop    %rbx
    cfaa:	5d                   	pop    %rbp
    cfab:	c3                   	retq   
    cfac:	0f 1f 40 00          	nopl   0x0(%rax)
    cfb0:	50                   	push   %rax
    cfb1:	48 c7 c0 c5 63 73 12 	mov    $0x127363c5,%rax
    cfb8:	48 89 05 81 69 74 00 	mov    %rax,0x746981(%rip)        # 753940 <edgeId>
    cfbf:	58                   	pop    %rax
    cfc0:	e8 04 56 ff ff       	callq  25c9 <_storeEdge>
    cfc5:	48 8d 15 04 c5 01 00 	lea    0x1c504(%rip),%rdx        # 294d0 <_IO_stdin_used+0x150>
    cfcc:	89 f9                	mov    %edi,%ecx
    cfce:	be 01 00 00 00       	mov    $0x1,%esi
    cfd3:	bf 01 00 00 00       	mov    $0x1,%edi
    cfd8:	31 c0                	xor    %eax,%eax
    cfda:	e8 e1 4b ff ff       	callq  1bc0 <__dprintf_chk@plt>
    cfdf:	8b 04 ab             	mov    (%rbx,%rbp,4),%eax
    cfe2:	48 83 c4 08          	add    $0x8,%rsp
    cfe6:	5b                   	pop    %rbx
    cfe7:	5d                   	pop    %rbp
    cfe8:	c3                   	retq   
    cfe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000cff0 <usage>:
{
    cff0:	41 54                	push   %r12
    cff2:	55                   	push   %rbp
}

static inline void
emit_try_help (void)
{
  fprintf (stderr, _("Try '%s --help' for more information.\n"), program_name);
    cff3:	ba 05 00 00 00       	mov    $0x5,%edx
    cff8:	53                   	push   %rbx
    cff9:	89 fd                	mov    %edi,%ebp
    cffb:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    d002:	48 8b 1d 17 0a 5f 00 	mov    0x5f0a17(%rip),%rbx        # 5fda20 <program_name>
    d009:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    d010:	00 00 
    d012:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    d019:	00 
    d01a:	31 c0                	xor    %eax,%eax
  if (status != EXIT_SUCCESS)
    d01c:	85 ff                	test   %edi,%edi
    d01e:	74 58                	je     d078 <usage+0x88>
    d020:	50                   	push   %rax
    d021:	48 c7 c0 17 87 89 25 	mov    $0x25898717,%rax
    d028:	48 89 05 11 69 74 00 	mov    %rax,0x746911(%rip)        # 753940 <edgeId>
    d02f:	58                   	pop    %rax
    d030:	e8 94 55 ff ff       	callq  25c9 <_storeEdge>
    d035:	48 8d 35 c4 c4 01 00 	lea    0x1c4c4(%rip),%rsi        # 29500 <_IO_stdin_used+0x180>
    d03c:	31 ff                	xor    %edi,%edi
    d03e:	e8 dd 48 ff ff       	callq  1920 <dcgettext@plt>
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    d043:	48 8b 3d 76 00 22 00 	mov    0x220076(%rip),%rdi        # 22d0c0 <stderr@@GLIBC_2.2.5>
    d04a:	48 89 c2             	mov    %rax,%rdx
    d04d:	48 89 d9             	mov    %rbx,%rcx
    d050:	be 01 00 00 00       	mov    $0x1,%esi
    d055:	31 c0                	xor    %eax,%eax
    d057:	e8 c4 4b ff ff       	callq  1c20 <__fprintf_chk@plt>
    d05c:	50                   	push   %rax
    d05d:	48 c7 c0 58 a2 8c 72 	mov    $0x728ca258,%rax
    d064:	48 89 05 d5 68 74 00 	mov    %rax,0x7468d5(%rip)        # 753940 <edgeId>
    d06b:	58                   	pop    %rax
    d06c:	e8 58 55 ff ff       	callq  25c9 <_storeEdge>
  exit (status);
    d071:	89 ef                	mov    %ebp,%edi
    d073:	e8 88 4b ff ff       	callq  1c00 <exit@plt>
    d078:	50                   	push   %rax
    d079:	48 b8 51 46 b9 f3 00 	movabs $0xf3b94651,%rax
    d080:	00 00 00 
    d083:	48 89 05 b6 68 74 00 	mov    %rax,0x7468b6(%rip)        # 753940 <edgeId>
    d08a:	58                   	pop    %rax
    d08b:	e8 39 55 ff ff       	callq  25c9 <_storeEdge>
      printf (_("\
    d090:	48 8d 35 91 c4 01 00 	lea    0x1c491(%rip),%rsi        # 29528 <_IO_stdin_used+0x1a8>
    d097:	31 ff                	xor    %edi,%edi
    d099:	e8 82 48 ff ff       	callq  1920 <dcgettext@plt>
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    d09e:	48 89 da             	mov    %rbx,%rdx
    d0a1:	48 89 c6             	mov    %rax,%rsi
    d0a4:	bf 01 00 00 00       	mov    $0x1,%edi
    d0a9:	31 c0                	xor    %eax,%eax
    d0ab:	e8 a0 4a ff ff       	callq  1b50 <__printf_chk@plt>
  fputs (_("\n\
    d0b0:	4c 8b 25 d1 ff 21 00 	mov    0x21ffd1(%rip),%r12        # 22d088 <stdout@@GLIBC_2.2.5>
    d0b7:	48 8d 35 d2 c4 01 00 	lea    0x1c4d2(%rip),%rsi        # 29590 <_IO_stdin_used+0x210>
    d0be:	ba 05 00 00 00       	mov    $0x5,%edx
    d0c3:	31 ff                	xor    %edi,%edi
    d0c5:	e8 56 48 ff ff       	callq  1920 <dcgettext@plt>
    d0ca:	4c 89 e6             	mov    %r12,%rsi
    d0cd:	48 89 c7             	mov    %rax,%rdi
    d0d0:	e8 8b 49 ff ff       	callq  1a60 <fputs_unlocked@plt>
  fputs (_("\n\
    d0d5:	48 8b 1d ac ff 21 00 	mov    0x21ffac(%rip),%rbx        # 22d088 <stdout@@GLIBC_2.2.5>
    d0dc:	48 8d 35 e5 c4 01 00 	lea    0x1c4e5(%rip),%rsi        # 295c8 <_IO_stdin_used+0x248>
    d0e3:	ba 05 00 00 00       	mov    $0x5,%edx
    d0e8:	31 ff                	xor    %edi,%edi
    d0ea:	e8 31 48 ff ff       	callq  1920 <dcgettext@plt>
    d0ef:	48 89 de             	mov    %rbx,%rsi
    d0f2:	48 89 c7             	mov    %rax,%rdi
    d0f5:	e8 66 49 ff ff       	callq  1a60 <fputs_unlocked@plt>
      fputs (_("\
    d0fa:	4c 8b 25 87 ff 21 00 	mov    0x21ff87(%rip),%r12        # 22d088 <stdout@@GLIBC_2.2.5>
    d101:	48 8d 35 10 c5 01 00 	lea    0x1c510(%rip),%rsi        # 29618 <_IO_stdin_used+0x298>
    d108:	ba 05 00 00 00       	mov    $0x5,%edx
    d10d:	31 ff                	xor    %edi,%edi
    d10f:	e8 0c 48 ff ff       	callq  1920 <dcgettext@plt>
    d114:	4c 89 e6             	mov    %r12,%rsi
    d117:	48 89 c7             	mov    %rax,%rdi
    d11a:	e8 41 49 ff ff       	callq  1a60 <fputs_unlocked@plt>
      fputs (HELP_OPTION_DESCRIPTION, stdout);
    d11f:	48 8b 1d 62 ff 21 00 	mov    0x21ff62(%rip),%rbx        # 22d088 <stdout@@GLIBC_2.2.5>
    d126:	48 8d 35 e3 c5 01 00 	lea    0x1c5e3(%rip),%rsi        # 29710 <_IO_stdin_used+0x390>
    d12d:	ba 05 00 00 00       	mov    $0x5,%edx
    d132:	31 ff                	xor    %edi,%edi
    d134:	e8 e7 47 ff ff       	callq  1920 <dcgettext@plt>
    d139:	48 89 de             	mov    %rbx,%rsi
    d13c:	48 89 c7             	mov    %rax,%rdi
    d13f:	e8 1c 49 ff ff       	callq  1a60 <fputs_unlocked@plt>
      fputs (VERSION_OPTION_DESCRIPTION, stdout);
    d144:	4c 8b 25 3d ff 21 00 	mov    0x21ff3d(%rip),%r12        # 22d088 <stdout@@GLIBC_2.2.5>
    d14b:	48 8d 35 ee c5 01 00 	lea    0x1c5ee(%rip),%rsi        # 29740 <_IO_stdin_used+0x3c0>
    d152:	ba 05 00 00 00       	mov    $0x5,%edx
    d157:	31 ff                	xor    %edi,%edi
    d159:	e8 c2 47 ff ff       	callq  1920 <dcgettext@plt>
    d15e:	4c 89 e6             	mov    %r12,%rsi
    d161:	48 89 c7             	mov    %rax,%rdi
    d164:	e8 f7 48 ff ff       	callq  1a60 <fputs_unlocked@plt>
      fputs (_("\
    d169:	48 8b 1d 18 ff 21 00 	mov    0x21ff18(%rip),%rbx        # 22d088 <stdout@@GLIBC_2.2.5>
    d170:	48 8d 35 01 c6 01 00 	lea    0x1c601(%rip),%rsi        # 29778 <_IO_stdin_used+0x3f8>
    d177:	ba 05 00 00 00       	mov    $0x5,%edx
    d17c:	31 ff                	xor    %edi,%edi
    d17e:	e8 9d 47 ff ff       	callq  1920 <dcgettext@plt>
    d183:	48 89 de             	mov    %rbx,%rsi
    d186:	48 89 c7             	mov    %rax,%rdi
    d189:	48 8d 1d 19 c2 01 00 	lea    0x1c219(%rip),%rbx        # 293a9 <_IO_stdin_used+0x29>
    d190:	e8 cb 48 ff ff       	callq  1a60 <fputs_unlocked@plt>
  struct infomap { char const *program; char const *node; } const infomap[] = {
    d195:	48 8d 0d 23 c2 01 00 	lea    0x1c223(%rip),%rcx        # 293bf <_IO_stdin_used+0x3f>
    d19c:	48 8d 05 1e c2 01 00 	lea    0x1c21e(%rip),%rax        # 293c1 <_IO_stdin_used+0x41>
    d1a3:	48 8d 35 80 c2 01 00 	lea    0x1c280(%rip),%rsi        # 2942a <_IO_stdin_used+0xaa>
    d1aa:	48 8d 15 20 c2 01 00 	lea    0x1c220(%rip),%rdx        # 293d1 <_IO_stdin_used+0x51>
    d1b1:	48 8d 3d 2f c2 01 00 	lea    0x1c22f(%rip),%rdi        # 293e7 <_IO_stdin_used+0x67>
    d1b8:	4c 8d 05 32 c2 01 00 	lea    0x1c232(%rip),%r8        # 293f1 <_IO_stdin_used+0x71>
    d1bf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    d1c4:	4c 8d 0d 30 c2 01 00 	lea    0x1c230(%rip),%r9        # 293fb <_IO_stdin_used+0x7b>
    d1cb:	4c 8d 15 33 c2 01 00 	lea    0x1c233(%rip),%r10        # 29405 <_IO_stdin_used+0x85>
    d1d2:	f3 0f 7e 44 24 08    	movq   0x8(%rsp),%xmm0
    d1d8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    d1dd:	0f 16 44 24 08       	movhps 0x8(%rsp),%xmm0
    d1e2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  struct infomap const *map_prog = infomap;
    d1e7:	4c 8d 5c 24 10       	lea    0x10(%rsp),%r11
  struct infomap { char const *program; char const *node; } const infomap[] = {
    d1ec:	f3 0f 7e 4c 24 08    	movq   0x8(%rsp),%xmm1
    d1f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    d1f7:	0f 16 4c 24 08       	movhps 0x8(%rsp),%xmm1
    d1fc:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    d201:	f3 0f 7e 54 24 08    	movq   0x8(%rsp),%xmm2
    d207:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    d20c:	f3 0f 7e 5c 24 08    	movq   0x8(%rsp),%xmm3
    d212:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    d217:	0f 16 15 22 f9 21 00 	movhps 0x21f922(%rip),%xmm2        # 22cb40 <long_options+0xc0>
    d21e:	f3 0f 7e 64 24 08    	movq   0x8(%rsp),%xmm4
    d224:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
    d229:	f3 0f 7e 6c 24 08    	movq   0x8(%rsp),%xmm5
    d22f:	0f 16 1d 0a f9 21 00 	movhps 0x21f90a(%rip),%xmm3        # 22cb40 <long_options+0xc0>
    d236:	66 0f ef f6          	pxor   %xmm6,%xmm6
    d23a:	0f 16 25 ff f8 21 00 	movhps 0x21f8ff(%rip),%xmm4        # 22cb40 <long_options+0xc0>
    d241:	0f 16 2d f8 f8 21 00 	movhps 0x21f8f8(%rip),%xmm5        # 22cb40 <long_options+0xc0>
    d248:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    d24d:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
    d252:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
    d257:	0f 29 5c 24 40       	movaps %xmm3,0x40(%rsp)
    d25c:	0f 29 64 24 50       	movaps %xmm4,0x50(%rsp)
    d261:	0f 29 6c 24 60       	movaps %xmm5,0x60(%rsp)
    d266:	0f 29 74 24 70       	movaps %xmm6,0x70(%rsp)
    d26b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    d270:	50                   	push   %rax
    d271:	48 c7 c0 12 9a 98 0d 	mov    $0xd989a12,%rax
    d278:	48 89 05 c1 66 74 00 	mov    %rax,0x7466c1(%rip)        # 753940 <edgeId>
    d27f:	58                   	pop    %rax
    d280:	e8 44 53 ff ff       	callq  25c9 <_storeEdge>
    map_prog++;
    d285:	49 83 c3 10          	add    $0x10,%r11
  while (map_prog->program && ! STREQ (program, map_prog->program))
    d289:	49 8b 3b             	mov    (%r11),%rdi
    d28c:	48 85 ff             	test   %rdi,%rdi
    d28f:	74 44                	je     d2d5 <usage+0x2e5>
    d291:	50                   	push   %rax
    d292:	48 c7 c0 34 31 1b 22 	mov    $0x221b3134,%rax
    d299:	48 89 05 a0 66 74 00 	mov    %rax,0x7466a0(%rip)        # 753940 <edgeId>
    d2a0:	58                   	pop    %rax
    d2a1:	e8 23 53 ff ff       	callq  25c9 <_storeEdge>
    d2a6:	b9 07 00 00 00       	mov    $0x7,%ecx
    d2ab:	48 89 de             	mov    %rbx,%rsi
    d2ae:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    d2b0:	41 0f 97 c4          	seta   %r12b
    d2b4:	41 80 dc 00          	sbb    $0x0,%r12b
    d2b8:	45 84 e4             	test   %r12b,%r12b
    d2bb:	75 b3                	jne    d270 <usage+0x280>
    d2bd:	50                   	push   %rax
    d2be:	48 b8 62 36 44 d0 00 	movabs $0xd0443662,%rax
    d2c5:	00 00 00 
    d2c8:	48 89 05 71 66 74 00 	mov    %rax,0x746671(%rip)        # 753940 <edgeId>
    d2cf:	58                   	pop    %rax
    d2d0:	e8 f4 52 ff ff       	callq  25c9 <_storeEdge>
    d2d5:	50                   	push   %rax
    d2d6:	48 b8 31 1b 22 e8 00 	movabs $0xe8221b31,%rax
    d2dd:	00 00 00 
    d2e0:	48 89 05 59 66 74 00 	mov    %rax,0x746659(%rip)        # 753940 <edgeId>
    d2e7:	58                   	pop    %rax
    d2e8:	e8 dc 52 ff ff       	callq  25c9 <_storeEdge>
  if (map_prog->node)
    d2ed:	4d 8b 63 08          	mov    0x8(%r11),%r12
  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
    d2f1:	31 ff                	xor    %edi,%edi
    d2f3:	ba 05 00 00 00       	mov    $0x5,%edx
    d2f8:	48 8d 35 10 c1 01 00 	lea    0x1c110(%rip),%rsi        # 2940f <_IO_stdin_used+0x8f>
  if (map_prog->node)
    d2ff:	4d 85 e4             	test   %r12,%r12
    d302:	0f 84 8f 01 00 00    	je     d497 <usage+0x4a7>
    d308:	50                   	push   %rax
    d309:	48 c7 c0 0d 11 f4 30 	mov    $0x30f4110d,%rax
    d310:	48 89 05 29 66 74 00 	mov    %rax,0x746629(%rip)        # 753940 <edgeId>
    d317:	58                   	pop    %rax
    d318:	e8 ac 52 ff ff       	callq  25c9 <_storeEdge>
  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
    d31d:	e8 fe 45 ff ff       	callq  1920 <dcgettext@plt>
    d322:	48 8d 0d 67 c5 01 00 	lea    0x1c567(%rip),%rcx        # 29890 <_IO_stdin_used+0x510>
    d329:	48 8d 15 f6 c0 01 00 	lea    0x1c0f6(%rip),%rdx        # 29426 <_IO_stdin_used+0xa6>
    d330:	48 89 c6             	mov    %rax,%rsi
    d333:	bf 01 00 00 00       	mov    $0x1,%edi
    d338:	31 c0                	xor    %eax,%eax
    d33a:	e8 11 48 ff ff       	callq  1b50 <__printf_chk@plt>
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
    d33f:	31 f6                	xor    %esi,%esi
    d341:	bf 05 00 00 00       	mov    $0x5,%edi
    d346:	e8 f5 47 ff ff       	callq  1b40 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
    d34b:	48 85 c0             	test   %rax,%rax
    d34e:	74 49                	je     d399 <usage+0x3a9>
    d350:	50                   	push   %rax
    d351:	48 b8 98 39 99 c8 00 	movabs $0xc8993998,%rax
    d358:	00 00 00 
    d35b:	48 89 05 de 65 74 00 	mov    %rax,0x7465de(%rip)        # 753940 <edgeId>
    d362:	58                   	pop    %rax
    d363:	e8 61 52 ff ff       	callq  25c9 <_storeEdge>
    d368:	48 8d 35 c5 c0 01 00 	lea    0x1c0c5(%rip),%rsi        # 29434 <_IO_stdin_used+0xb4>
    d36f:	ba 03 00 00 00       	mov    $0x3,%edx
    d374:	48 89 c7             	mov    %rax,%rdi
    d377:	e8 24 45 ff ff       	callq  18a0 <strncmp@plt>
    d37c:	85 c0                	test   %eax,%eax
    d37e:	0f 85 17 02 00 00    	jne    d59b <usage+0x5ab>
    d384:	50                   	push   %rax
    d385:	48 c7 c0 73 32 91 3b 	mov    $0x3b913273,%rax
    d38c:	48 89 05 ad 65 74 00 	mov    %rax,0x7465ad(%rip)        # 753940 <edgeId>
    d393:	58                   	pop    %rax
    d394:	e8 30 52 ff ff       	callq  25c9 <_storeEdge>
    d399:	50                   	push   %rax
    d39a:	48 c7 c0 9c 4c e4 4e 	mov    $0x4ee44c9c,%rax
    d3a1:	48 89 05 98 65 74 00 	mov    %rax,0x746598(%rip)        # 753940 <edgeId>
    d3a8:	58                   	pop    %rax
    d3a9:	e8 1b 52 ff ff       	callq  25c9 <_storeEdge>
  printf (_("Full documentation at: <%s%s>\n"),
    d3ae:	48 8d 35 4b c5 01 00 	lea    0x1c54b(%rip),%rsi        # 29900 <_IO_stdin_used+0x580>
    d3b5:	31 ff                	xor    %edi,%edi
    d3b7:	ba 05 00 00 00       	mov    $0x5,%edx
    d3bc:	e8 5f 45 ff ff       	callq  1920 <dcgettext@plt>
    d3c1:	48 8d 0d e1 bf 01 00 	lea    0x1bfe1(%rip),%rcx        # 293a9 <_IO_stdin_used+0x29>
    d3c8:	48 8d 15 c1 c4 01 00 	lea    0x1c4c1(%rip),%rdx        # 29890 <_IO_stdin_used+0x510>
    d3cf:	48 89 c6             	mov    %rax,%rsi
    d3d2:	bf 01 00 00 00       	mov    $0x1,%edi
    d3d7:	31 c0                	xor    %eax,%eax
    d3d9:	e8 72 47 ff ff       	callq  1b50 <__printf_chk@plt>
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
    d3de:	48 89 15 33 65 74 00 	mov    %rdx,0x746533(%rip)        # 753918 <tmpquadone>
    d3e5:	48 89 0d 44 08 5f 00 	mov    %rcx,0x5f0844(%rip)        # 5fdc30 <tmpquadtwo>
    d3ec:	48 8d 15 fd 07 5f 00 	lea    0x5f07fd(%rip),%rdx        # 5fdbf0 <funcinptr>
    d3f3:	48 c7 02 51 15 00 00 	movq   $0x1551,(%rdx)
    d3fa:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    d401:	00 
    d402:	48 89 d9             	mov    %rbx,%rcx
    d405:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d409:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d410:	00 
    d411:	4c 89 e1             	mov    %r12,%rcx
    d414:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d418:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d41f:	00 
    d420:	ff 32                	pushq  (%rdx)
    d422:	48 8b 15 ef 64 74 00 	mov    0x7464ef(%rip),%rdx        # 753918 <tmpquadone>
    d429:	48 8b 0d 00 08 5f 00 	mov    0x5f0800(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d430:	48 c7 05 15 65 74 00 	movq   $0x1,0x746515(%rip)        # 753950 <cmpPassed>
    d437:	01 00 00 00 
    d43b:	e8 20 52 ff ff       	callq  2660 <_storeDataFn>
    d440:	49 39 dc             	cmp    %rbx,%r12
    d443:	48 8d 05 91 bf 01 00 	lea    0x1bf91(%rip),%rax        # 293db <_IO_stdin_used+0x5b>
    d44a:	48 8d 1d c8 c9 01 00 	lea    0x1c9c8(%rip),%rbx        # 29e19 <quoting_style_vals+0x79>
    d451:	48 0f 44 d8          	cmove  %rax,%rbx
    d455:	50                   	push   %rax
    d456:	48 c7 c0 a7 c3 9b 51 	mov    $0x519bc3a7,%rax
    d45d:	48 89 05 dc 64 74 00 	mov    %rax,0x7464dc(%rip)        # 753940 <edgeId>
    d464:	58                   	pop    %rax
    d465:	e8 5f 51 ff ff       	callq  25c9 <_storeEdge>
    d46a:	48 8d 35 af c4 01 00 	lea    0x1c4af(%rip),%rsi        # 29920 <_IO_stdin_used+0x5a0>
    d471:	31 ff                	xor    %edi,%edi
    d473:	ba 05 00 00 00       	mov    $0x5,%edx
    d478:	e8 a3 44 ff ff       	callq  1920 <dcgettext@plt>
    d47d:	48 89 d9             	mov    %rbx,%rcx
    d480:	48 89 c6             	mov    %rax,%rsi
    d483:	4c 89 e2             	mov    %r12,%rdx
    d486:	bf 01 00 00 00       	mov    $0x1,%edi
    d48b:	31 c0                	xor    %eax,%eax
    d48d:	e8 be 46 ff ff       	callq  1b50 <__printf_chk@plt>
    d492:	e9 c5 fb ff ff       	jmpq   d05c <usage+0x6c>
    d497:	50                   	push   %rax
    d498:	48 c7 c0 33 ca a8 5d 	mov    $0x5da8ca33,%rax
    d49f:	48 89 05 9a 64 74 00 	mov    %rax,0x74649a(%rip)        # 753940 <edgeId>
    d4a6:	58                   	pop    %rax
    d4a7:	e8 1d 51 ff ff       	callq  25c9 <_storeEdge>
  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
    d4ac:	e8 6f 44 ff ff       	callq  1920 <dcgettext@plt>
    d4b1:	48 8d 0d d8 c3 01 00 	lea    0x1c3d8(%rip),%rcx        # 29890 <_IO_stdin_used+0x510>
    d4b8:	48 8d 15 67 bf 01 00 	lea    0x1bf67(%rip),%rdx        # 29426 <_IO_stdin_used+0xa6>
    d4bf:	48 89 c6             	mov    %rax,%rsi
    d4c2:	bf 01 00 00 00       	mov    $0x1,%edi
    d4c7:	31 c0                	xor    %eax,%eax
    d4c9:	e8 82 46 ff ff       	callq  1b50 <__printf_chk@plt>
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
    d4ce:	31 f6                	xor    %esi,%esi
    d4d0:	bf 05 00 00 00       	mov    $0x5,%edi
    d4d5:	e8 66 46 ff ff       	callq  1b40 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
    d4da:	48 85 c0             	test   %rax,%rax
    d4dd:	74 45                	je     d524 <usage+0x534>
    d4df:	50                   	push   %rax
    d4e0:	48 c7 c0 17 c7 a5 07 	mov    $0x7a5c717,%rax
    d4e7:	48 89 05 52 64 74 00 	mov    %rax,0x746452(%rip)        # 753940 <edgeId>
    d4ee:	58                   	pop    %rax
    d4ef:	e8 d5 50 ff ff       	callq  25c9 <_storeEdge>
    d4f4:	48 8d 35 39 bf 01 00 	lea    0x1bf39(%rip),%rsi        # 29434 <_IO_stdin_used+0xb4>
    d4fb:	ba 03 00 00 00       	mov    $0x3,%edx
    d500:	48 89 c7             	mov    %rax,%rdi
    d503:	e8 98 43 ff ff       	callq  18a0 <strncmp@plt>
    d508:	85 c0                	test   %eax,%eax
    d50a:	75 70                	jne    d57c <usage+0x58c>
    d50c:	50                   	push   %rax
    d50d:	48 b8 8e 4b 0f ac 00 	movabs $0xac0f4b8e,%rax
    d514:	00 00 00 
    d517:	48 89 05 22 64 74 00 	mov    %rax,0x746422(%rip)        # 753940 <edgeId>
    d51e:	58                   	pop    %rax
    d51f:	e8 a5 50 ff ff       	callq  25c9 <_storeEdge>
    d524:	50                   	push   %rax
    d525:	48 c7 c0 c7 a5 07 56 	mov    $0x5607a5c7,%rax
    d52c:	48 89 05 0d 64 74 00 	mov    %rax,0x74640d(%rip)        # 753940 <edgeId>
    d533:	58                   	pop    %rax
    d534:	e8 90 50 ff ff       	callq  25c9 <_storeEdge>
  printf (_("Full documentation at: <%s%s>\n"),
    d539:	48 8d 35 c0 c3 01 00 	lea    0x1c3c0(%rip),%rsi        # 29900 <_IO_stdin_used+0x580>
    d540:	ba 05 00 00 00       	mov    $0x5,%edx
    d545:	31 ff                	xor    %edi,%edi
  char const *node = program;
    d547:	4c 8d 25 5b be 01 00 	lea    0x1be5b(%rip),%r12        # 293a9 <_IO_stdin_used+0x29>
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
    d54e:	48 8d 1d 86 be 01 00 	lea    0x1be86(%rip),%rbx        # 293db <_IO_stdin_used+0x5b>
  printf (_("Full documentation at: <%s%s>\n"),
    d555:	e8 c6 43 ff ff       	callq  1920 <dcgettext@plt>
    d55a:	48 8d 0d 48 be 01 00 	lea    0x1be48(%rip),%rcx        # 293a9 <_IO_stdin_used+0x29>
    d561:	48 8d 15 28 c3 01 00 	lea    0x1c328(%rip),%rdx        # 29890 <_IO_stdin_used+0x510>
    d568:	48 89 c6             	mov    %rax,%rsi
    d56b:	bf 01 00 00 00       	mov    $0x1,%edi
    d570:	31 c0                	xor    %eax,%eax
    d572:	e8 d9 45 ff ff       	callq  1b50 <__printf_chk@plt>
    d577:	e9 d9 fe ff ff       	jmpq   d455 <usage+0x465>
    d57c:	50                   	push   %rax
    d57d:	48 b8 56 c4 fb a2 00 	movabs $0xa2fbc456,%rax
    d584:	00 00 00 
    d587:	48 89 05 b2 63 74 00 	mov    %rax,0x7463b2(%rip)        # 753940 <edgeId>
    d58e:	58                   	pop    %rax
    d58f:	e8 35 50 ff ff       	callq  25c9 <_storeEdge>
  char const *node = program;
    d594:	4c 8d 25 0e be 01 00 	lea    0x1be0e(%rip),%r12        # 293a9 <_IO_stdin_used+0x29>
    d59b:	50                   	push   %rax
    d59c:	48 c7 c0 11 ef 8b 52 	mov    $0x528bef11,%rax
    d5a3:	48 89 05 96 63 74 00 	mov    %rax,0x746396(%rip)        # 753940 <edgeId>
    d5aa:	58                   	pop    %rax
    d5ab:	e8 19 50 ff ff       	callq  25c9 <_storeEdge>
      printf (_("Report %s translation bugs to "
    d5b0:	48 8d 35 01 c3 01 00 	lea    0x1c301(%rip),%rsi        # 298b8 <_IO_stdin_used+0x538>
    d5b7:	31 ff                	xor    %edi,%edi
    d5b9:	ba 05 00 00 00       	mov    $0x5,%edx
    d5be:	e8 5d 43 ff ff       	callq  1920 <dcgettext@plt>
    d5c3:	48 8d 15 df bd 01 00 	lea    0x1bddf(%rip),%rdx        # 293a9 <_IO_stdin_used+0x29>
    d5ca:	48 89 c6             	mov    %rax,%rsi
    d5cd:	bf 01 00 00 00       	mov    $0x1,%edi
    d5d2:	31 c0                	xor    %eax,%eax
    d5d4:	e8 77 45 ff ff       	callq  1b50 <__printf_chk@plt>
    d5d9:	e9 bb fd ff ff       	jmpq   d399 <usage+0x3a9>
    d5de:	66 90                	xchg   %ax,%ax

000000000000d5e0 <decode_4>:
static bool
decode_4 (char const *restrict in, size_t inlen,
          char *restrict *outp, size_t *outleft)
{
  char *out = *outp;
  if (inlen < 2)
    d5e0:	48 89 15 31 63 74 00 	mov    %rdx,0x746331(%rip)        # 753918 <tmpquadone>
    d5e7:	48 89 0d 42 06 5f 00 	mov    %rcx,0x5f0642(%rip)        # 5fdc30 <tmpquadtwo>
    d5ee:	48 8d 15 fb 05 5f 00 	lea    0x5f05fb(%rip),%rdx        # 5fdbf0 <funcinptr>
    d5f5:	48 c7 02 43 00 00 00 	movq   $0x43,(%rdx)
    d5fc:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    d603:	00 
    d604:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
    d60b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d60f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d616:	00 
    d617:	48 89 f1             	mov    %rsi,%rcx
    d61a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d61e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d625:	00 
    d626:	ff 32                	pushq  (%rdx)
    d628:	48 8b 15 e9 62 74 00 	mov    0x7462e9(%rip),%rdx        # 753918 <tmpquadone>
    d62f:	48 8b 0d fa 05 5f 00 	mov    0x5f05fa(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d636:	48 c7 05 0f 63 74 00 	movq   $0x1,0x74630f(%rip)        # 753950 <cmpPassed>
    d63d:	01 00 00 00 
    d641:	e8 6a 5e ff ff       	callq  34b0 <_storeDataFn>
    d646:	48 83 fe 01          	cmp    $0x1,%rsi
    d64a:	0f 86 90 03 00 00    	jbe    d9e0 <decode_4+0x400>
    d650:	50                   	push   %rax
    d651:	48 b8 00 00 c4 98 00 	movabs $0x98c40000,%rax
    d658:	00 00 00 
    d65b:	48 89 05 de 62 74 00 	mov    %rax,0x7462de(%rip)        # 753940 <edgeId>
    d662:	58                   	pop    %rax
    d663:	e8 b0 5d ff ff       	callq  3418 <_storeEdge>
{
    d668:	41 57                	push   %r15
    d66a:	41 56                	push   %r14
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    d66c:	4c 8d 35 ed c2 01 00 	lea    0x1c2ed(%rip),%r14        # 29960 <b64>
{
    d673:	41 55                	push   %r13
    d675:	41 54                	push   %r12
    d677:	49 89 cd             	mov    %rcx,%r13
    d67a:	55                   	push   %rbp
    d67b:	53                   	push   %rbx
    d67c:	48 89 fb             	mov    %rdi,%rbx
    d67f:	49 89 d4             	mov    %rdx,%r12
    d682:	48 83 ec 18          	sub    $0x18,%rsp
  char *out = *outp;
    d686:	4c 8b 3a             	mov    (%rdx),%r15
    d689:	48 89 34 24          	mov    %rsi,(%rsp)
    return false;

  if (!({if (((in)) && ((in)))  {int lava_776 = 0;
  lava_776 |= ((unsigned char *) (in))[0] << (0*8);lava_776 |= ((unsigned char *) (in))[1] << (1*8);lava_776 |= ((unsigned char *) (in))[2] << (2*8);lava_776 |= ((unsigned char *) (in))[3] << (3*8);lava_set(776,lava_776);
    d68d:	8b 37                	mov    (%rdi),%esi
    d68f:	bf 08 03 00 00       	mov    $0x308,%edi
    d694:	e8 e7 f7 ff ff       	callq  ce80 <lava_set>
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
    d699:	8b 33                	mov    (%rbx),%esi
    d69b:	bf 2a 02 00 00       	mov    $0x22a,%edi
    d6a0:	e8 db f7 ff ff       	callq  ce80 <lava_set>
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
    d6a5:	8b 33                	mov    (%rbx),%esi
    d6a7:	bf 2d 03 00 00       	mov    $0x32d,%edi
    d6ac:	e8 cf f7 ff ff       	callq  ce80 <lava_set>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    d6b1:	0f b6 03             	movzbl (%rbx),%eax
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
    d6b4:	8b 33                	mov    (%rbx),%esi
    d6b6:	bf de 00 00 00       	mov    $0xde,%edi
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    d6bb:	41 0f b6 2c 06       	movzbl (%r14,%rax,1),%ebp
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
    d6c0:	e8 bb f7 ff ff       	callq  ce80 <lava_set>
  if (!({if (((in)) && ((in)))  {int lava_776 = 0;
    d6c5:	40 84 ed             	test   %bpl,%bpl
    d6c8:	0f 88 d0 02 00 00    	js     d99e <decode_4+0x3be>
    d6ce:	50                   	push   %rax
    d6cf:	48 c7 c0 d3 8f f4 3a 	mov    $0x3af48fd3,%rax
    d6d6:	48 89 05 63 62 74 00 	mov    %rax,0x746263(%rip)        # 753940 <edgeId>
    d6dd:	58                   	pop    %rax
    d6de:	e8 35 5d ff ff       	callq  3418 <_storeEdge>
}kbcieiubweuhc1540383426;}) || !({if (((in)) && ((in)))  {int lava_776 = 0;
  lava_776 |= ((unsigned char *) (in))[0] << (0*8);lava_776 |= ((unsigned char *) (in))[1] << (1*8);lava_776 |= ((unsigned char *) (in))[2] << (2*8);lava_776 |= ((unsigned char *) (in))[3] << (3*8);lava_set(776,lava_776);
    d6e3:	8b 33                	mov    (%rbx),%esi
    d6e5:	bf 08 03 00 00       	mov    $0x308,%edi
    d6ea:	e8 91 f7 ff ff       	callq  ce80 <lava_set>
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
    d6ef:	8b 33                	mov    (%rbx),%esi
    d6f1:	bf 2a 02 00 00       	mov    $0x22a,%edi
    d6f6:	e8 85 f7 ff ff       	callq  ce80 <lava_set>
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
    d6fb:	8b 33                	mov    (%rbx),%esi
    d6fd:	bf 2d 03 00 00       	mov    $0x32d,%edi
    d702:	e8 79 f7 ff ff       	callq  ce80 <lava_set>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    d707:	0f b6 53 01          	movzbl 0x1(%rbx),%edx
  }_Bool kbcieiubweuhc304089172 = isbase64 (in[1]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
    d70b:	8b 33                	mov    (%rbx),%esi
    d70d:	bf de 00 00 00       	mov    $0xde,%edi
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    d712:	41 0f b6 0c 16       	movzbl (%r14,%rdx,1),%ecx
    d717:	88 4c 24 0f          	mov    %cl,0xf(%rsp)
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
    d71b:	e8 60 f7 ff ff       	callq  ce80 <lava_set>
}kbcieiubweuhc1540383426;}) || !({if (((in)) && ((in)))  {int lava_776 = 0;
    d720:	0f b6 74 24 0f       	movzbl 0xf(%rsp),%esi
    d725:	40 84 f6             	test   %sil,%sil
    d728:	0f 88 70 02 00 00    	js     d99e <decode_4+0x3be>
    d72e:	50                   	push   %rax
    d72f:	48 b8 5b 2d 24 bc 00 	movabs $0xbc242d5b,%rax
    d736:	00 00 00 
    d739:	48 89 05 00 62 74 00 	mov    %rax,0x746200(%rip)        # 753940 <edgeId>
    d740:	58                   	pop    %rax
    d741:	e8 d2 5c ff ff       	callq  3418 <_storeEdge>
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    d746:	48 89 15 cb 61 74 00 	mov    %rdx,0x7461cb(%rip)        # 753918 <tmpquadone>
    d74d:	48 89 0d dc 04 5f 00 	mov    %rcx,0x5f04dc(%rip)        # 5fdc30 <tmpquadtwo>
    d754:	48 8d 15 95 04 5f 00 	lea    0x5f0495(%rip),%rdx        # 5fdbf0 <funcinptr>
    d75b:	48 c7 02 44 00 00 00 	movq   $0x44,(%rdx)
    d762:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    d769:	00 
    d76a:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    d771:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d775:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d77c:	00 
    d77d:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    d781:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d785:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d78c:	00 
    d78d:	ff 32                	pushq  (%rdx)
    d78f:	48 8b 15 82 61 74 00 	mov    0x746182(%rip),%rdx        # 753918 <tmpquadone>
    d796:	48 8b 0d 93 04 5f 00 	mov    0x5f0493(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d79d:	48 c7 05 a8 61 74 00 	movq   $0x1,0x7461a8(%rip)        # 753950 <cmpPassed>
    d7a4:	01 00 00 00 
    d7a8:	e8 03 5d ff ff       	callq  34b0 <_storeDataFn>
    d7ad:	49 83 7d 00 00       	cmpq   $0x0,0x0(%r13)
    d7b2:	0f 85 48 02 00 00    	jne    da00 <decode_4+0x420>
    d7b8:	50                   	push   %rax
    d7b9:	48 b8 ab 85 84 d7 00 	movabs $0xd78485ab,%rax
    d7c0:	00 00 00 
    d7c3:	48 89 05 76 61 74 00 	mov    %rax,0x746176(%rip)        # 753940 <edgeId>
    d7ca:	58                   	pop    %rax
    d7cb:	e8 48 5c ff ff       	callq  3418 <_storeEdge>
    d7d0:	50                   	push   %rax
    d7d1:	48 b8 d5 42 c2 eb 00 	movabs $0xebc242d5,%rax
    d7d8:	00 00 00 
    d7db:	48 89 05 5e 61 74 00 	mov    %rax,0x74615e(%rip)        # 753940 <edgeId>
    d7e2:	58                   	pop    %rax
    d7e3:	e8 30 5c ff ff       	callq  3418 <_storeEdge>
                lava_817 |= ((unsigned char *) (in))[0] << (0*8);lava_817 |= ((unsigned char *) (in))[1] << (1*8);lava_817 |= ((unsigned char *) (in))[2] << (2*8);lava_817 |= ((unsigned char *) (in))[3] << (3*8);lava_set(817,lava_817);
                }unsigned char kbcieiubweuhc35005211 = to_uchar (in[1]);kbcieiubweuhc35005211;})] >> 4));
      --*outleft;
    }

  if (inlen == 2)
    d7e8:	48 89 15 29 61 74 00 	mov    %rdx,0x746129(%rip)        # 753918 <tmpquadone>
    d7ef:	48 89 0d 3a 04 5f 00 	mov    %rcx,0x5f043a(%rip)        # 5fdc30 <tmpquadtwo>
    d7f6:	48 8d 15 f3 03 5f 00 	lea    0x5f03f3(%rip),%rdx        # 5fdbf0 <funcinptr>
    d7fd:	48 c7 02 45 00 00 00 	movq   $0x45,(%rdx)
    d804:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    d80b:	00 
    d80c:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
    d813:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d817:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d81e:	00 
    d81f:	48 8b 0c 24          	mov    (%rsp),%rcx
    d823:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d827:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d82e:	00 
    d82f:	ff 32                	pushq  (%rdx)
    d831:	48 8b 15 e0 60 74 00 	mov    0x7460e0(%rip),%rdx        # 753918 <tmpquadone>
    d838:	48 8b 0d f1 03 5f 00 	mov    0x5f03f1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d83f:	48 c7 05 06 61 74 00 	movq   $0x1,0x746106(%rip)        # 753950 <cmpPassed>
    d846:	01 00 00 00 
    d84a:	e8 61 5c ff ff       	callq  34b0 <_storeDataFn>
    d84f:	48 83 3c 24 02       	cmpq   $0x2,(%rsp)
    d854:	0f 84 28 01 00 00    	je     d982 <decode_4+0x3a2>
    d85a:	50                   	push   %rax
    d85b:	48 c7 c0 2d 24 bc 0e 	mov    $0xebc242d,%rax
    d862:	48 89 05 d7 60 74 00 	mov    %rax,0x7460d7(%rip)        # 753940 <edgeId>
    d869:	58                   	pop    %rax
    d86a:	e8 a9 5b ff ff       	callq  3418 <_storeEdge>
    return_false;

  if (in[2] == '=')
    d86f:	48 89 15 a2 60 74 00 	mov    %rdx,0x7460a2(%rip)        # 753918 <tmpquadone>
    d876:	48 89 0d b3 03 5f 00 	mov    %rcx,0x5f03b3(%rip)        # 5fdc30 <tmpquadtwo>
    d87d:	48 8d 15 6c 03 5f 00 	lea    0x5f036c(%rip),%rdx        # 5fdbf0 <funcinptr>
    d884:	48 c7 02 46 00 00 00 	movq   $0x46,(%rdx)
    d88b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    d892:	00 
    d893:	48 c7 c1 3d 00 00 00 	mov    $0x3d,%rcx
    d89a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d89e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d8a5:	00 
    d8a6:	48 8b 4b 02          	mov    0x2(%rbx),%rcx
    d8aa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d8ae:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d8b5:	00 
    d8b6:	ff 32                	pushq  (%rdx)
    d8b8:	48 8b 15 59 60 74 00 	mov    0x746059(%rip),%rdx        # 753918 <tmpquadone>
    d8bf:	48 8b 0d 6a 03 5f 00 	mov    0x5f036a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d8c6:	48 c7 05 7f 60 74 00 	movq   $0x1,0x74607f(%rip)        # 753950 <cmpPassed>
    d8cd:	01 00 00 00 
    d8d1:	e8 da 5b ff ff       	callq  34b0 <_storeDataFn>
    d8d6:	80 7b 02 3d          	cmpb   $0x3d,0x2(%rbx)
    d8da:	0f 85 b8 01 00 00    	jne    da98 <decode_4+0x4b8>
    d8e0:	50                   	push   %rax
    d8e1:	48 b8 85 84 d7 a1 00 	movabs $0xa1d78485,%rax
    d8e8:	00 00 00 
    d8eb:	48 89 05 4e 60 74 00 	mov    %rax,0x74604e(%rip)        # 753940 <edgeId>
    d8f2:	58                   	pop    %rax
    d8f3:	e8 20 5b ff ff       	callq  3418 <_storeEdge>
    {
      if (inlen != 4)
    d8f8:	48 89 15 19 60 74 00 	mov    %rdx,0x746019(%rip)        # 753918 <tmpquadone>
    d8ff:	48 89 0d 2a 03 5f 00 	mov    %rcx,0x5f032a(%rip)        # 5fdc30 <tmpquadtwo>
    d906:	48 8d 15 e3 02 5f 00 	lea    0x5f02e3(%rip),%rdx        # 5fdbf0 <funcinptr>
    d90d:	48 c7 02 47 00 00 00 	movq   $0x47,(%rdx)
    d914:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    d91b:	00 
    d91c:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
    d923:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    d927:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    d92e:	00 
    d92f:	48 8b 0c 24          	mov    (%rsp),%rcx
    d933:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    d937:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    d93e:	00 
    d93f:	ff 32                	pushq  (%rdx)
    d941:	48 8b 15 d0 5f 74 00 	mov    0x745fd0(%rip),%rdx        # 753918 <tmpquadone>
    d948:	48 8b 0d e1 02 5f 00 	mov    0x5f02e1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    d94f:	48 c7 05 f6 5f 74 00 	movq   $0x1,0x745ff6(%rip)        # 753950 <cmpPassed>
    d956:	01 00 00 00 
    d95a:	e8 51 5b ff ff       	callq  34b0 <_storeDataFn>
    d95f:	48 83 3c 24 04       	cmpq   $0x4,(%rsp)
    d964:	0f 84 4e 04 00 00    	je     ddb8 <decode_4+0x7d8>
    d96a:	50                   	push   %rax
    d96b:	48 b8 90 f0 3a 94 00 	movabs $0x943af090,%rax
    d972:	00 00 00 
    d975:	48 89 05 c4 5f 74 00 	mov    %rax,0x745fc4(%rip)        # 753940 <edgeId>
    d97c:	58                   	pop    %rax
    d97d:	e8 96 5a ff ff       	callq  3418 <_storeEdge>
    d982:	50                   	push   %rax
    d983:	48 b8 48 78 1d ca 00 	movabs $0xca1d7848,%rax
    d98a:	00 00 00 
    d98d:	48 89 05 ac 5f 74 00 	mov    %rax,0x745fac(%rip)        # 753940 <edgeId>
    d994:	58                   	pop    %rax
    d995:	e8 7e 5a ff ff       	callq  3418 <_storeEdge>
          int lava_788 = 0;
          lava_788 |= ((unsigned char *) (in))[0] << (0*8);lava_788 |= ((unsigned char *) (in))[1] << (1*8);lava_788 |= ((unsigned char *) (in))[2] << (2*8);lava_788 |= ((unsigned char *) (in))[3] << (3*8);lava_set(788,lava_788);
          int lava_566 = 0;
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;
    d99a:	4d 89 3c 24          	mov    %r15,(%r12)
    d99e:	50                   	push   %rax
    d99f:	48 c7 c0 84 d7 a1 0c 	mov    $0xca1d784,%rax
    d9a6:	48 89 05 93 5f 74 00 	mov    %rax,0x745f93(%rip)        # 753940 <edgeId>
    d9ad:	58                   	pop    %rax
    d9ae:	e8 65 5a ff ff       	callq  3418 <_storeEdge>
    d9b3:	31 c0                	xor    %eax,%eax
    d9b5:	50                   	push   %rax
    d9b6:	48 b8 f0 3a 94 e1 00 	movabs $0xe1943af0,%rax
    d9bd:	00 00 00 
    d9c0:	48 89 05 79 5f 74 00 	mov    %rax,0x745f79(%rip)        # 753940 <edgeId>
    d9c7:	58                   	pop    %rax
    d9c8:	e8 4b 5a ff ff       	callq  3418 <_storeEdge>
        }
    }

  *outp = out;
  return true;
}
    d9cd:	48 83 c4 18          	add    $0x18,%rsp
    d9d1:	5b                   	pop    %rbx
    d9d2:	5d                   	pop    %rbp
    d9d3:	41 5c                	pop    %r12
    d9d5:	41 5d                	pop    %r13
    d9d7:	41 5e                	pop    %r14
    d9d9:	41 5f                	pop    %r15
    d9db:	c3                   	retq   
    d9dc:	0f 1f 40 00          	nopl   0x0(%rax)
    d9e0:	50                   	push   %rax
    d9e1:	48 c7 c0 c3 c3 72 51 	mov    $0x5172c3c3,%rax
    d9e8:	48 89 05 51 5f 74 00 	mov    %rax,0x745f51(%rip)        # 753940 <edgeId>
    d9ef:	58                   	pop    %rax
    d9f0:	e8 23 5a ff ff       	callq  3418 <_storeEdge>
    return false;
    d9f5:	31 c0                	xor    %eax,%eax
}
    d9f7:	c3                   	retq   
    d9f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    d9ff:	00 
    da00:	50                   	push   %rax
    da01:	48 b8 cb 45 91 fe 00 	movabs $0xfe9145cb,%rax
    da08:	00 00 00 
    da0b:	48 89 05 2e 5f 74 00 	mov    %rax,0x745f2e(%rip)        # 753940 <edgeId>
    da12:	58                   	pop    %rax
    da13:	e8 00 5a ff ff       	callq  3418 <_storeEdge>
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
    da18:	8b 33                	mov    (%rbx),%esi
    da1a:	bf 0a 03 00 00       	mov    $0x30a,%edi
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
    da1f:	49 83 c7 01          	add    $0x1,%r15
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
    da23:	e8 58 f4 ff ff       	callq  ce80 <lava_set>
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
    da28:	8b 33                	mov    (%rbx),%esi
    da2a:	bf 2c 02 00 00       	mov    $0x22c,%edi
    da2f:	e8 4c f4 ff ff       	callq  ce80 <lava_set>
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
    da34:	8b 33                	mov    (%rbx),%esi
    da36:	bf 2f 03 00 00       	mov    $0x32f,%edi
    da3b:	e8 40 f4 ff ff       	callq  ce80 <lava_set>
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
    da40:	0f b6 3b             	movzbl (%rbx),%edi
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
    da43:	8b 33                	mov    (%rbx),%esi
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
    da45:	45 0f be 04 3e       	movsbl (%r14,%rdi,1),%r8d
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
    da4a:	bf 0c 03 00 00       	mov    $0x30c,%edi
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
    da4f:	42 8d 2c 85 00 00 00 	lea    0x0(,%r8,4),%ebp
    da56:	00 
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
    da57:	e8 24 f4 ff ff       	callq  ce80 <lava_set>
                lava_558 |= ((unsigned char *) (in))[0] << (0*8);lava_558 |= ((unsigned char *) (in))[1] << (1*8);lava_558 |= ((unsigned char *) (in))[2] << (2*8);lava_558 |= ((unsigned char *) (in))[3] << (3*8);lava_set(558,lava_558);
    da5c:	8b 33                	mov    (%rbx),%esi
    da5e:	bf 2e 02 00 00       	mov    $0x22e,%edi
    da63:	e8 18 f4 ff ff       	callq  ce80 <lava_set>
                lava_817 |= ((unsigned char *) (in))[0] << (0*8);lava_817 |= ((unsigned char *) (in))[1] << (1*8);lava_817 |= ((unsigned char *) (in))[2] << (2*8);lava_817 |= ((unsigned char *) (in))[3] << (3*8);lava_set(817,lava_817);
    da68:	8b 33                	mov    (%rbx),%esi
    da6a:	bf 31 03 00 00       	mov    $0x331,%edi
    da6f:	e8 0c f4 ff ff       	callq  ce80 <lava_set>
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
    da74:	44 0f b6 4b 01       	movzbl 0x1(%rbx),%r9d
    da79:	47 0f b6 14 0e       	movzbl (%r14,%r9,1),%r10d
    da7e:	41 c0 fa 04          	sar    $0x4,%r10b
    da82:	41 09 ea             	or     %ebp,%r10d
    da85:	45 88 57 ff          	mov    %r10b,-0x1(%r15)
      --*outleft;
    da89:	49 83 6d 00 01       	subq   $0x1,0x0(%r13)
    da8e:	e9 3d fd ff ff       	jmpq   d7d0 <decode_4+0x1f0>
    da93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    da98:	50                   	push   %rax
    da99:	48 b8 4a f9 23 85 00 	movabs $0x8523f94a,%rax
    daa0:	00 00 00 
    daa3:	48 89 05 96 5e 74 00 	mov    %rax,0x745e96(%rip)        # 753940 <edgeId>
    daaa:	58                   	pop    %rax
    daab:	e8 68 59 ff ff       	callq  3418 <_storeEdge>
      lava_782 |= ((unsigned char *) (in))[0] << (0*8);lava_782 |= ((unsigned char *) (in))[1] << (1*8);lava_782 |= ((unsigned char *) (in))[2] << (2*8);lava_782 |= ((unsigned char *) (in))[3] << (3*8);lava_set(782,lava_782);
    dab0:	8b 33                	mov    (%rbx),%esi
    dab2:	bf 0e 03 00 00       	mov    $0x30e,%edi
    dab7:	e8 c4 f3 ff ff       	callq  ce80 <lava_set>
      lava_560 |= ((unsigned char *) (in))[0] << (0*8);lava_560 |= ((unsigned char *) (in))[1] << (1*8);lava_560 |= ((unsigned char *) (in))[2] << (2*8);lava_560 |= ((unsigned char *) (in))[3] << (3*8);lava_set(560,lava_560);
    dabc:	8b 33                	mov    (%rbx),%esi
    dabe:	bf 30 02 00 00       	mov    $0x230,%edi
    dac3:	e8 b8 f3 ff ff       	callq  ce80 <lava_set>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    dac8:	44 0f b6 5b 02       	movzbl 0x2(%rbx),%r11d
      if (!({if (((in)) && ((in)))  {int lava_782 = 0;
    dacd:	48 89 15 44 5e 74 00 	mov    %rdx,0x745e44(%rip)        # 753918 <tmpquadone>
    dad4:	48 89 0d 55 01 5f 00 	mov    %rcx,0x5f0155(%rip)        # 5fdc30 <tmpquadtwo>
    dadb:	48 8d 15 0e 01 5f 00 	lea    0x5f010e(%rip),%rdx        # 5fdbf0 <funcinptr>
    dae2:	48 c7 02 48 00 00 00 	movq   $0x48,(%rdx)
    dae9:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    daf0:	00 
    daf1:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    daf8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    dafc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    db03:	00 
    db04:	4b 8b 0c 1e          	mov    (%r14,%r11,1),%rcx
    db08:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    db0c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    db13:	00 
    db14:	ff 32                	pushq  (%rdx)
    db16:	48 8b 15 fb 5d 74 00 	mov    0x745dfb(%rip),%rdx        # 753918 <tmpquadone>
    db1d:	48 8b 0d 0c 01 5f 00 	mov    0x5f010c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    db24:	48 c7 05 21 5e 74 00 	movq   $0x1,0x745e21(%rip)        # 753950 <cmpPassed>
    db2b:	01 00 00 00 
    db2f:	e8 7c 59 ff ff       	callq  34b0 <_storeDataFn>
    db34:	43 80 3c 1e 00       	cmpb   $0x0,(%r14,%r11,1)
    db39:	0f 88 43 fe ff ff    	js     d982 <decode_4+0x3a2>
    db3f:	50                   	push   %rax
    db40:	48 c7 c0 0a fd ca 46 	mov    $0x46cafd0a,%rax
    db47:	48 89 05 f2 5d 74 00 	mov    %rax,0x745df2(%rip)        # 753940 <edgeId>
    db4e:	58                   	pop    %rax
    db4f:	e8 c4 58 ff ff       	callq  3418 <_storeEdge>
      if (*outleft)
    db54:	48 89 15 bd 5d 74 00 	mov    %rdx,0x745dbd(%rip)        # 753918 <tmpquadone>
    db5b:	48 89 0d ce 00 5f 00 	mov    %rcx,0x5f00ce(%rip)        # 5fdc30 <tmpquadtwo>
    db62:	48 8d 15 87 00 5f 00 	lea    0x5f0087(%rip),%rdx        # 5fdbf0 <funcinptr>
    db69:	48 c7 02 49 00 00 00 	movq   $0x49,(%rdx)
    db70:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    db77:	00 
    db78:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    db7f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    db83:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    db8a:	00 
    db8b:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    db8f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    db93:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    db9a:	00 
    db9b:	ff 32                	pushq  (%rdx)
    db9d:	48 8b 15 74 5d 74 00 	mov    0x745d74(%rip),%rdx        # 753918 <tmpquadone>
    dba4:	48 8b 0d 85 00 5f 00 	mov    0x5f0085(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    dbab:	48 c7 05 9a 5d 74 00 	movq   $0x1,0x745d9a(%rip)        # 753950 <cmpPassed>
    dbb2:	01 00 00 00 
    dbb6:	e8 f5 58 ff ff       	callq  34b0 <_storeDataFn>
    dbbb:	49 83 7d 00 00       	cmpq   $0x0,0x0(%r13)
    dbc0:	0f 85 9a 02 00 00    	jne    de60 <decode_4+0x880>
    dbc6:	50                   	push   %rax
    dbc7:	48 c7 c0 a1 5f d9 28 	mov    $0x28d95fa1,%rax
    dbce:	48 89 05 6b 5d 74 00 	mov    %rax,0x745d6b(%rip)        # 753940 <edgeId>
    dbd5:	58                   	pop    %rax
    dbd6:	e8 3d 58 ff ff       	callq  3418 <_storeEdge>
    dbdb:	50                   	push   %rax
    dbdc:	48 b8 e8 57 36 8a 00 	movabs $0x8a3657e8,%rax
    dbe3:	00 00 00 
    dbe6:	48 89 05 53 5d 74 00 	mov    %rax,0x745d53(%rip)        # 753940 <edgeId>
    dbed:	58                   	pop    %rax
    dbee:	e8 25 58 ff ff       	callq  3418 <_storeEdge>
      if (inlen == 3)
    dbf3:	48 89 15 1e 5d 74 00 	mov    %rdx,0x745d1e(%rip)        # 753918 <tmpquadone>
    dbfa:	48 89 0d 2f 00 5f 00 	mov    %rcx,0x5f002f(%rip)        # 5fdc30 <tmpquadtwo>
    dc01:	48 8d 15 e8 ff 5e 00 	lea    0x5effe8(%rip),%rdx        # 5fdbf0 <funcinptr>
    dc08:	48 c7 02 4a 00 00 00 	movq   $0x4a,(%rdx)
    dc0f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    dc16:	00 
    dc17:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
    dc1e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    dc22:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    dc29:	00 
    dc2a:	48 8b 0c 24          	mov    (%rsp),%rcx
    dc2e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    dc32:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    dc39:	00 
    dc3a:	ff 32                	pushq  (%rdx)
    dc3c:	48 8b 15 d5 5c 74 00 	mov    0x745cd5(%rip),%rdx        # 753918 <tmpquadone>
    dc43:	48 8b 0d e6 ff 5e 00 	mov    0x5effe6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    dc4a:	48 c7 05 fb 5c 74 00 	movq   $0x1,0x745cfb(%rip)        # 753950 <cmpPassed>
    dc51:	01 00 00 00 
    dc55:	e8 56 58 ff ff       	callq  34b0 <_storeDataFn>
    dc5a:	48 83 3c 24 03       	cmpq   $0x3,(%rsp)
    dc5f:	0f 84 1d fd ff ff    	je     d982 <decode_4+0x3a2>
    dc65:	50                   	push   %rax
    dc66:	48 c7 c0 fd ca 46 11 	mov    $0x1146cafd,%rax
    dc6d:	48 89 05 cc 5c 74 00 	mov    %rax,0x745ccc(%rip)        # 753940 <edgeId>
    dc74:	58                   	pop    %rax
    dc75:	e8 9e 57 ff ff       	callq  3418 <_storeEdge>
      if (in[3] == '=')
    dc7a:	48 89 15 97 5c 74 00 	mov    %rdx,0x745c97(%rip)        # 753918 <tmpquadone>
    dc81:	48 89 0d a8 ff 5e 00 	mov    %rcx,0x5effa8(%rip)        # 5fdc30 <tmpquadtwo>
    dc88:	48 8d 15 61 ff 5e 00 	lea    0x5eff61(%rip),%rdx        # 5fdbf0 <funcinptr>
    dc8f:	48 c7 02 4b 00 00 00 	movq   $0x4b,(%rdx)
    dc96:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    dc9d:	00 
    dc9e:	48 c7 c1 3d 00 00 00 	mov    $0x3d,%rcx
    dca5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    dca9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    dcb0:	00 
    dcb1:	48 8b 4b 03          	mov    0x3(%rbx),%rcx
    dcb5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    dcb9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    dcc0:	00 
    dcc1:	ff 32                	pushq  (%rdx)
    dcc3:	48 8b 15 4e 5c 74 00 	mov    0x745c4e(%rip),%rdx        # 753918 <tmpquadone>
    dcca:	48 8b 0d 5f ff 5e 00 	mov    0x5eff5f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    dcd1:	48 c7 05 74 5c 74 00 	movq   $0x1,0x745c74(%rip)        # 753950 <cmpPassed>
    dcd8:	01 00 00 00 
    dcdc:	e8 cf 57 ff ff       	callq  34b0 <_storeDataFn>
    dce1:	80 7b 03 3d          	cmpb   $0x3d,0x3(%rbx)
    dce5:	0f 85 dd 01 00 00    	jne    dec8 <decode_4+0x8e8>
    dceb:	50                   	push   %rax
    dcec:	48 b8 5f d9 28 c2 00 	movabs $0xc228d95f,%rax
    dcf3:	00 00 00 
    dcf6:	48 89 05 43 5c 74 00 	mov    %rax,0x745c43(%rip)        # 753940 <edgeId>
    dcfd:	58                   	pop    %rax
    dcfe:	e8 15 57 ff ff       	callq  3418 <_storeEdge>
          if (inlen != 4)
    dd03:	48 89 15 0e 5c 74 00 	mov    %rdx,0x745c0e(%rip)        # 753918 <tmpquadone>
    dd0a:	48 89 0d 1f ff 5e 00 	mov    %rcx,0x5eff1f(%rip)        # 5fdc30 <tmpquadtwo>
    dd11:	48 8d 15 d8 fe 5e 00 	lea    0x5efed8(%rip),%rdx        # 5fdbf0 <funcinptr>
    dd18:	48 c7 02 4c 00 00 00 	movq   $0x4c,(%rdx)
    dd1f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    dd26:	00 
    dd27:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
    dd2e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    dd32:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    dd39:	00 
    dd3a:	48 8b 0c 24          	mov    (%rsp),%rcx
    dd3e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    dd42:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    dd49:	00 
    dd4a:	ff 32                	pushq  (%rdx)
    dd4c:	48 8b 15 c5 5b 74 00 	mov    0x745bc5(%rip),%rdx        # 753918 <tmpquadone>
    dd53:	48 8b 0d d6 fe 5e 00 	mov    0x5efed6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    dd5a:	48 c7 05 eb 5b 74 00 	movq   $0x1,0x745beb(%rip)        # 753950 <cmpPassed>
    dd61:	01 00 00 00 
    dd65:	e8 46 57 ff ff       	callq  34b0 <_storeDataFn>
    dd6a:	48 83 3c 24 04       	cmpq   $0x4,(%rsp)
    dd6f:	0f 85 0d fc ff ff    	jne    d982 <decode_4+0x3a2>
    dd75:	50                   	push   %rax
    dd76:	48 b8 2b 1b 45 f8 00 	movabs $0xf8451b2b,%rax
    dd7d:	00 00 00 
    dd80:	48 89 05 b9 5b 74 00 	mov    %rax,0x745bb9(%rip)        # 753940 <edgeId>
    dd87:	58                   	pop    %rax
    dd88:	e8 8b 56 ff ff       	callq  3418 <_storeEdge>
    dd8d:	50                   	push   %rax
    dd8e:	48 b8 ca 46 11 be 00 	movabs $0xbe1146ca,%rax
    dd95:	00 00 00 
    dd98:	48 89 05 a1 5b 74 00 	mov    %rax,0x745ba1(%rip)        # 753940 <edgeId>
    dd9f:	58                   	pop    %rax
    dda0:	e8 73 56 ff ff       	callq  3418 <_storeEdge>
  *outp = out;
    dda5:	4d 89 3c 24          	mov    %r15,(%r12)
  return true;
    dda9:	b8 01 00 00 00       	mov    $0x1,%eax
    ddae:	e9 02 fc ff ff       	jmpq   d9b5 <decode_4+0x3d5>
    ddb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    ddb8:	50                   	push   %rax
    ddb9:	48 c7 c0 a3 08 5f 7c 	mov    $0x7c5f08a3,%rax
    ddc0:	48 89 05 79 5b 74 00 	mov    %rax,0x745b79(%rip)        # 753940 <edgeId>
    ddc7:	58                   	pop    %rax
    ddc8:	e8 4b 56 ff ff       	callq  3418 <_storeEdge>
      if (in[3] != '=')
    ddcd:	48 89 15 44 5b 74 00 	mov    %rdx,0x745b44(%rip)        # 753918 <tmpquadone>
    ddd4:	48 89 0d 55 fe 5e 00 	mov    %rcx,0x5efe55(%rip)        # 5fdc30 <tmpquadtwo>
    dddb:	48 8d 15 0e fe 5e 00 	lea    0x5efe0e(%rip),%rdx        # 5fdbf0 <funcinptr>
    dde2:	48 c7 02 4d 00 00 00 	movq   $0x4d,(%rdx)
    dde9:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    ddf0:	00 
    ddf1:	48 c7 c1 3d 00 00 00 	mov    $0x3d,%rcx
    ddf8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    ddfc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    de03:	00 
    de04:	48 8b 4b 03          	mov    0x3(%rbx),%rcx
    de08:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    de0c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    de13:	00 
    de14:	ff 32                	pushq  (%rdx)
    de16:	48 8b 15 fb 5a 74 00 	mov    0x745afb(%rip),%rdx        # 753918 <tmpquadone>
    de1d:	48 8b 0d 0c fe 5e 00 	mov    0x5efe0c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    de24:	48 c7 05 21 5b 74 00 	movq   $0x1,0x745b21(%rip)        # 753950 <cmpPassed>
    de2b:	01 00 00 00 
    de2f:	e8 7c 56 ff ff       	callq  34b0 <_storeDataFn>
    de34:	80 7b 03 3d          	cmpb   $0x3d,0x3(%rbx)
    de38:	0f 85 44 fb ff ff    	jne    d982 <decode_4+0x3a2>
    de3e:	50                   	push   %rax
    de3f:	48 c7 c0 14 e1 8b 4f 	mov    $0x4f8be114,%rax
    de46:	48 89 05 f3 5a 74 00 	mov    %rax,0x745af3(%rip)        # 753940 <edgeId>
    de4d:	58                   	pop    %rax
    de4e:	e8 c5 55 ff ff       	callq  3418 <_storeEdge>
    de53:	e9 35 ff ff ff       	jmpq   dd8d <decode_4+0x7ad>
    de58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    de5f:	00 
    de60:	50                   	push   %rax
    de61:	48 c7 c0 11 be f8 44 	mov    $0x44f8be11,%rax
    de68:	48 89 05 d1 5a 74 00 	mov    %rax,0x745ad1(%rip)        # 753940 <edgeId>
    de6f:	58                   	pop    %rax
    de70:	e8 a3 55 ff ff       	callq  3418 <_storeEdge>
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
    de75:	8b 33                	mov    (%rbx),%esi
    de77:	bf 10 03 00 00       	mov    $0x310,%edi
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
    de7c:	49 83 c7 01          	add    $0x1,%r15
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
    de80:	e8 fb ef ff ff       	callq  ce80 <lava_set>
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
    de85:	8b 33                	mov    (%rbx),%esi
    de87:	bf 32 02 00 00       	mov    $0x232,%edi
    de8c:	e8 ef ef ff ff       	callq  ce80 <lava_set>
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
    de91:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
    de95:	8b 33                	mov    (%rbx),%esi
    de97:	bf 12 03 00 00       	mov    $0x312,%edi
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
    de9c:	41 0f be 2c 06       	movsbl (%r14,%rax,1),%ebp
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
    dea1:	e8 da ef ff ff       	callq  ce80 <lava_set>
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
    dea6:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
    deaa:	c1 e5 04             	shl    $0x4,%ebp
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
    dead:	41 0f b6 0c 16       	movzbl (%r14,%rdx,1),%ecx
    deb2:	c0 f9 02             	sar    $0x2,%cl
    deb5:	09 e9                	or     %ebp,%ecx
    deb7:	41 88 4f ff          	mov    %cl,-0x1(%r15)
          --*outleft;
    debb:	49 83 6d 00 01       	subq   $0x1,0x0(%r13)
    dec0:	e9 16 fd ff ff       	jmpq   dbdb <decode_4+0x5fb>
    dec5:	0f 1f 00             	nopl   (%rax)
    dec8:	50                   	push   %rax
    dec9:	48 b8 c2 80 c7 9e 00 	movabs $0x9ec780c2,%rax
    ded0:	00 00 00 
    ded3:	48 89 05 66 5a 74 00 	mov    %rax,0x745a66(%rip)        # 753940 <edgeId>
    deda:	58                   	pop    %rax
    dedb:	e8 38 55 ff ff       	callq  3418 <_storeEdge>
          lava_253 |= ((unsigned char *) (in))[0] << (0*8);lava_253 |= ((unsigned char *) (in))[1] << (1*8);lava_253 |= ((unsigned char *) (in))[2] << (2*8);lava_253 |= ((unsigned char *) (in))[3] << (3*8);lava_set(253,lava_253);
    dee0:	8b 33                	mov    (%rbx),%esi
    dee2:	bf fd 00 00 00       	mov    $0xfd,%edi
    dee7:	e8 94 ef ff ff       	callq  ce80 <lava_set>
          lava_274 |= ((unsigned char *) (in))[0] << (0*8);lava_274 |= ((unsigned char *) (in))[1] << (1*8);lava_274 |= ((unsigned char *) (in))[2] << (2*8);lava_274 |= ((unsigned char *) (in))[3] << (3*8);lava_set(274,lava_274);
    deec:	8b 33                	mov    (%rbx),%esi
    deee:	bf 12 01 00 00       	mov    $0x112,%edi
    def3:	e8 88 ef ff ff       	callq  ce80 <lava_set>
          lava_788 |= ((unsigned char *) (in))[0] << (0*8);lava_788 |= ((unsigned char *) (in))[1] << (1*8);lava_788 |= ((unsigned char *) (in))[2] << (2*8);lava_788 |= ((unsigned char *) (in))[3] << (3*8);lava_set(788,lava_788);
    def8:	8b 33                	mov    (%rbx),%esi
    defa:	bf 14 03 00 00       	mov    $0x314,%edi
    deff:	e8 7c ef ff ff       	callq  ce80 <lava_set>
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
    df04:	8b 33                	mov    (%rbx),%esi
    df06:	bf 36 02 00 00       	mov    $0x236,%edi
    df0b:	e8 70 ef ff ff       	callq  ce80 <lava_set>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    df10:	0f b6 73 03          	movzbl 0x3(%rbx),%esi
          if (!({if (((in)) && ((in)))  {int lava_253 = 0;
    df14:	48 89 15 fd 59 74 00 	mov    %rdx,0x7459fd(%rip)        # 753918 <tmpquadone>
    df1b:	48 89 0d 0e fd 5e 00 	mov    %rcx,0x5efd0e(%rip)        # 5fdc30 <tmpquadtwo>
    df22:	48 8d 15 c7 fc 5e 00 	lea    0x5efcc7(%rip),%rdx        # 5fdbf0 <funcinptr>
    df29:	48 c7 02 4e 00 00 00 	movq   $0x4e,(%rdx)
    df30:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    df37:	00 
    df38:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    df3f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    df43:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    df4a:	00 
    df4b:	49 8b 0c 36          	mov    (%r14,%rsi,1),%rcx
    df4f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    df53:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    df5a:	00 
    df5b:	ff 32                	pushq  (%rdx)
    df5d:	48 8b 15 b4 59 74 00 	mov    0x7459b4(%rip),%rdx        # 753918 <tmpquadone>
    df64:	48 8b 0d c5 fc 5e 00 	mov    0x5efcc5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    df6b:	48 c7 05 da 59 74 00 	movq   $0x1,0x7459da(%rip)        # 753950 <cmpPassed>
    df72:	01 00 00 00 
    df76:	e8 35 55 ff ff       	callq  34b0 <_storeDataFn>
    df7b:	41 80 3c 36 00       	cmpb   $0x0,(%r14,%rsi,1)
    df80:	0f 88 fc f9 ff ff    	js     d982 <decode_4+0x3a2>
    df86:	50                   	push   %rax
    df87:	48 b8 01 e5 3b b8 00 	movabs $0xb83be501,%rax
    df8e:	00 00 00 
    df91:	48 89 05 a8 59 74 00 	mov    %rax,0x7459a8(%rip)        # 753940 <edgeId>
    df98:	58                   	pop    %rax
    df99:	e8 7a 54 ff ff       	callq  3418 <_storeEdge>
          if (*outleft)
    df9e:	48 89 15 73 59 74 00 	mov    %rdx,0x745973(%rip)        # 753918 <tmpquadone>
    dfa5:	48 89 0d 84 fc 5e 00 	mov    %rcx,0x5efc84(%rip)        # 5fdc30 <tmpquadtwo>
    dfac:	48 8d 15 3d fc 5e 00 	lea    0x5efc3d(%rip),%rdx        # 5fdbf0 <funcinptr>
    dfb3:	48 c7 02 4f 00 00 00 	movq   $0x4f,(%rdx)
    dfba:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    dfc1:	00 
    dfc2:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    dfc9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    dfcd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    dfd4:	00 
    dfd5:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    dfd9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    dfdd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    dfe4:	00 
    dfe5:	ff 32                	pushq  (%rdx)
    dfe7:	48 8b 15 2a 59 74 00 	mov    0x74592a(%rip),%rdx        # 753918 <tmpquadone>
    dfee:	48 8b 0d 3b fc 5e 00 	mov    0x5efc3b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    dff5:	48 c7 05 50 59 74 00 	movq   $0x1,0x745950(%rip)        # 753950 <cmpPassed>
    dffc:	01 00 00 00 
    e000:	e8 ab 54 ff ff       	callq  34b0 <_storeDataFn>
    e005:	49 83 7d 00 00       	cmpq   $0x0,0x0(%r13)
    e00a:	0f 84 7d fd ff ff    	je     dd8d <decode_4+0x7ad>
    e010:	50                   	push   %rax
    e011:	48 b8 a0 7c 07 b7 00 	movabs $0xb7077ca0,%rax
    e018:	00 00 00 
    e01b:	48 89 05 1e 59 74 00 	mov    %rax,0x74591e(%rip)        # 753940 <edgeId>
    e022:	58                   	pop    %rax
    e023:	e8 f0 53 ff ff       	callq  3418 <_storeEdge>
              lava_255 |= ((unsigned char *) (in))[0] << (0*8);lava_255 |= ((unsigned char *) (in))[1] << (1*8);lava_255 |= ((unsigned char *) (in))[2] << (2*8);lava_255 |= ((unsigned char *) (in))[3] << (3*8);lava_set(255,lava_255);
    e028:	8b 33                	mov    (%rbx),%esi
    e02a:	bf ff 00 00 00       	mov    $0xff,%edi
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
    e02f:	49 83 c7 01          	add    $0x1,%r15
              lava_255 |= ((unsigned char *) (in))[0] << (0*8);lava_255 |= ((unsigned char *) (in))[1] << (1*8);lava_255 |= ((unsigned char *) (in))[2] << (2*8);lava_255 |= ((unsigned char *) (in))[3] << (3*8);lava_set(255,lava_255);
    e033:	e8 48 ee ff ff       	callq  ce80 <lava_set>
              lava_235 |= ((unsigned char *) (in))[0] << (0*8);lava_235 |= ((unsigned char *) (in))[1] << (1*8);lava_235 |= ((unsigned char *) (in))[2] << (2*8);lava_235 |= ((unsigned char *) (in))[3] << (3*8);lava_set(235,lava_235);
    e038:	8b 33                	mov    (%rbx),%esi
    e03a:	bf eb 00 00 00       	mov    $0xeb,%edi
    e03f:	e8 3c ee ff ff       	callq  ce80 <lava_set>
              lava_276 |= ((unsigned char *) (in))[0] << (0*8);lava_276 |= ((unsigned char *) (in))[1] << (1*8);lava_276 |= ((unsigned char *) (in))[2] << (2*8);lava_276 |= ((unsigned char *) (in))[3] << (3*8);lava_set(276,lava_276);
    e044:	8b 33                	mov    (%rbx),%esi
    e046:	bf 14 01 00 00       	mov    $0x114,%edi
    e04b:	e8 30 ee ff ff       	callq  ce80 <lava_set>
              lava_790 |= ((unsigned char *) (in))[0] << (0*8);lava_790 |= ((unsigned char *) (in))[1] << (1*8);lava_790 |= ((unsigned char *) (in))[2] << (2*8);lava_790 |= ((unsigned char *) (in))[3] << (3*8);lava_set(790,lava_790);
    e050:	8b 33                	mov    (%rbx),%esi
    e052:	bf 16 03 00 00       	mov    $0x316,%edi
    e057:	e8 24 ee ff ff       	callq  ce80 <lava_set>
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
    e05c:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
    e060:	8b 33                	mov    (%rbx),%esi
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
    e062:	41 0f be 2c 3e       	movsbl (%r14,%rdi,1),%ebp
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
    e067:	bf 16 01 00 00       	mov    $0x116,%edi
    e06c:	e8 0f ee ff ff       	callq  ce80 <lava_set>
                        lava_792 |= ((unsigned char *) (in))[0] << (0*8);lava_792 |= ((unsigned char *) (in))[1] << (1*8);lava_792 |= ((unsigned char *) (in))[2] << (2*8);lava_792 |= ((unsigned char *) (in))[3] << (3*8);lava_set(792,lava_792);
    e071:	8b 33                	mov    (%rbx),%esi
    e073:	bf 18 03 00 00       	mov    $0x318,%edi
              }unsigned char kbcieiubweuhc861021530 = to_uchar (in[2]);kbcieiubweuhc861021530;})] << 6) & 0xc0)
    e078:	c1 e5 06             	shl    $0x6,%ebp
                        lava_792 |= ((unsigned char *) (in))[0] << (0*8);lava_792 |= ((unsigned char *) (in))[1] << (1*8);lava_792 |= ((unsigned char *) (in))[2] << (2*8);lava_792 |= ((unsigned char *) (in))[3] << (3*8);lava_set(792,lava_792);
    e07b:	e8 00 ee ff ff       	callq  ce80 <lava_set>
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
    e080:	0f b6 5b 03          	movzbl 0x3(%rbx),%ebx
    e084:	41 0a 2c 1e          	or     (%r14,%rbx,1),%bpl
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
    e088:	41 88 6f ff          	mov    %bpl,-0x1(%r15)
              --*outleft;
    e08c:	49 83 6d 00 01       	subq   $0x1,0x0(%r13)
    e091:	e9 f7 fc ff ff       	jmpq   dd8d <decode_4+0x7ad>
    e096:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    e09d:	00 00 00 

000000000000e0a0 <base64_encode>:
  if (outlen % 4 == 0 && inlen == outlen / 4 * 3)
    e0a0:	f6 c1 03             	test   $0x3,%cl
    e0a3:	0f 85 a0 00 00 00    	jne    e149 <base64_encode+0xa9>
    e0a9:	50                   	push   %rax
    e0aa:	48 c7 c0 0f d1 61 7c 	mov    $0x7c61d10f,%rax
    e0b1:	48 89 05 88 58 74 00 	mov    %rax,0x745888(%rip)        # 753940 <edgeId>
    e0b8:	58                   	pop    %rax
    e0b9:	e8 5a 53 ff ff       	callq  3418 <_storeEdge>
    e0be:	48 89 c8             	mov    %rcx,%rax
    e0c1:	48 c1 e8 02          	shr    $0x2,%rax
    e0c5:	4c 8d 04 40          	lea    (%rax,%rax,2),%r8
    e0c9:	48 89 15 48 58 74 00 	mov    %rdx,0x745848(%rip)        # 753918 <tmpquadone>
    e0d0:	48 89 0d 59 fb 5e 00 	mov    %rcx,0x5efb59(%rip)        # 5fdc30 <tmpquadtwo>
    e0d7:	48 8d 15 12 fb 5e 00 	lea    0x5efb12(%rip),%rdx        # 5fdbf0 <funcinptr>
    e0de:	48 c7 02 50 00 00 00 	movq   $0x50,(%rdx)
    e0e5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e0ec:	00 
    e0ed:	48 89 f1             	mov    %rsi,%rcx
    e0f0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    e0f4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e0fb:	00 
    e0fc:	4c 89 c1             	mov    %r8,%rcx
    e0ff:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    e103:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e10a:	00 
    e10b:	ff 32                	pushq  (%rdx)
    e10d:	48 8b 15 04 58 74 00 	mov    0x745804(%rip),%rdx        # 753918 <tmpquadone>
    e114:	48 8b 0d 15 fb 5e 00 	mov    0x5efb15(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    e11b:	48 c7 05 2a 58 74 00 	movq   $0x1,0x74582a(%rip)        # 753950 <cmpPassed>
    e122:	01 00 00 00 
    e126:	e8 85 53 ff ff       	callq  34b0 <_storeDataFn>
    e12b:	49 39 f0             	cmp    %rsi,%r8
    e12e:	0f 84 fc 06 00 00    	je     e830 <base64_encode+0x790>
    e134:	50                   	push   %rax
    e135:	48 c7 c0 44 87 f1 75 	mov    $0x75f18744,%rax
    e13c:	48 89 05 fd 57 74 00 	mov    %rax,0x7457fd(%rip)        # 753940 <edgeId>
    e143:	58                   	pop    %rax
    e144:	e8 cf 52 ff ff       	callq  3418 <_storeEdge>
    e149:	50                   	push   %rax
    e14a:	48 b8 a2 c3 f8 ba 00 	movabs $0xbaf8c3a2,%rax
    e151:	00 00 00 
    e154:	48 89 05 e5 57 74 00 	mov    %rax,0x7457e5(%rip)        # 753940 <edgeId>
    e15b:	58                   	pop    %rax
    e15c:	e8 b7 52 ff ff       	callq  3418 <_storeEdge>
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e161:	4c 8d 0d f8 b8 01 00 	lea    0x1b8f8(%rip),%r9        # 29a60 <b64c>
    e168:	e9 bf 02 00 00       	jmpq   e42c <base64_encode+0x38c>
    e16d:	0f 1f 00             	nopl   (%rax)
    e170:	50                   	push   %rax
    e171:	48 c7 c0 87 f1 75 17 	mov    $0x1775f187,%rax
    e178:	48 89 05 c1 57 74 00 	mov    %rax,0x7457c1(%rip)        # 753940 <edgeId>
    e17f:	58                   	pop    %rax
    e180:	e8 93 52 ff ff       	callq  3418 <_storeEdge>
  return ch;
    e185:	44 0f b6 47 01       	movzbl 0x1(%rdi),%r8d
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
    e18a:	45 89 c2             	mov    %r8d,%r10d
    e18d:	41 c0 ea 04          	shr    $0x4,%r10b
    e191:	45 01 d3             	add    %r10d,%r11d
      *out++ = b64c[((to_uchar (in[0]) << 4)
    e194:	41 83 e3 3f          	and    $0x3f,%r11d
      if (!--outlen)
    e198:	48 89 15 79 57 74 00 	mov    %rdx,0x745779(%rip)        # 753918 <tmpquadone>
    e19f:	48 89 1d 8a fa 5e 00 	mov    %rbx,0x5efa8a(%rip)        # 5fdc30 <tmpquadtwo>
    e1a6:	48 8d 15 43 fa 5e 00 	lea    0x5efa43(%rip),%rdx        # 5fdbf0 <funcinptr>
    e1ad:	48 c7 02 51 00 00 00 	movq   $0x51,(%rdx)
    e1b4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e1bb:	00 
    e1bc:	48 c7 c3 02 00 00 00 	mov    $0x2,%rbx
    e1c3:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e1c7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e1ce:	00 
    e1cf:	48 89 cb             	mov    %rcx,%rbx
    e1d2:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e1d6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e1dd:	00 
    e1de:	ff 32                	pushq  (%rdx)
    e1e0:	48 8b 15 31 57 74 00 	mov    0x745731(%rip),%rdx        # 753918 <tmpquadone>
    e1e7:	48 8b 1d 42 fa 5e 00 	mov    0x5efa42(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e1ee:	48 c7 05 57 57 74 00 	movq   $0x1,0x745757(%rip)        # 753950 <cmpPassed>
    e1f5:	01 00 00 00 
    e1f9:	e8 b2 52 ff ff       	callq  34b0 <_storeDataFn>
    e1fe:	48 83 f9 02          	cmp    $0x2,%rcx
      *out++ = b64c[((to_uchar (in[0]) << 4)
    e202:	47 0f b6 1c 19       	movzbl (%r9,%r11,1),%r11d
    e207:	44 88 5a 01          	mov    %r11b,0x1(%rdx)
      if (!--outlen)
    e20b:	0f 84 08 06 00 00    	je     e819 <base64_encode+0x779>
    e211:	50                   	push   %rax
    e212:	48 b8 bb 48 44 8d 00 	movabs $0x8d4448bb,%rax
    e219:	00 00 00 
    e21c:	48 89 05 1d 57 74 00 	mov    %rax,0x74571d(%rip)        # 753940 <edgeId>
    e223:	58                   	pop    %rax
    e224:	e8 ef 51 ff ff       	callq  3418 <_storeEdge>
         ? b64c[((to_uchar (in[1]) << 2)
    e229:	41 c1 e0 02          	shl    $0x2,%r8d
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
    e22d:	48 89 15 e4 56 74 00 	mov    %rdx,0x7456e4(%rip)        # 753918 <tmpquadone>
    e234:	48 89 0d f5 f9 5e 00 	mov    %rcx,0x5ef9f5(%rip)        # 5fdc30 <tmpquadtwo>
    e23b:	48 8d 15 ae f9 5e 00 	lea    0x5ef9ae(%rip),%rdx        # 5fdbf0 <funcinptr>
    e242:	48 c7 02 52 00 00 00 	movq   $0x52,(%rdx)
    e249:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e250:	00 
    e251:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
    e258:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    e25c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e263:	00 
    e264:	48 89 f1             	mov    %rsi,%rcx
    e267:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    e26b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e272:	00 
    e273:	ff 32                	pushq  (%rdx)
    e275:	48 8b 15 9c 56 74 00 	mov    0x74569c(%rip),%rdx        # 753918 <tmpquadone>
    e27c:	48 8b 0d ad f9 5e 00 	mov    0x5ef9ad(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    e283:	48 c7 05 c2 56 74 00 	movq   $0x1,0x7456c2(%rip)        # 753950 <cmpPassed>
    e28a:	01 00 00 00 
    e28e:	e8 1d 52 ff ff       	callq  34b0 <_storeDataFn>
    e293:	48 83 fe 02          	cmp    $0x2,%rsi
    e297:	0f 84 d3 04 00 00    	je     e770 <base64_encode+0x6d0>
    e29d:	50                   	push   %rax
    e29e:	48 b8 45 22 6a fc 00 	movabs $0xfc6a2245,%rax
    e2a5:	00 00 00 
    e2a8:	48 89 05 91 56 74 00 	mov    %rax,0x745691(%rip)        # 753940 <edgeId>
    e2af:	58                   	pop    %rax
    e2b0:	e8 63 51 ff ff       	callq  3418 <_storeEdge>
  return ch;
    e2b5:	44 0f b6 5f 02       	movzbl 0x2(%rdi),%r11d
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
    e2ba:	45 89 da             	mov    %r11d,%r10d
    e2bd:	41 c0 ea 06          	shr    $0x6,%r10b
    e2c1:	45 01 d0             	add    %r10d,%r8d
      *out++ =
    e2c4:	41 83 e0 3f          	and    $0x3f,%r8d
      if (!--outlen)
    e2c8:	48 89 15 49 56 74 00 	mov    %rdx,0x745649(%rip)        # 753918 <tmpquadone>
    e2cf:	48 89 1d 5a f9 5e 00 	mov    %rbx,0x5ef95a(%rip)        # 5fdc30 <tmpquadtwo>
    e2d6:	48 8d 15 13 f9 5e 00 	lea    0x5ef913(%rip),%rdx        # 5fdbf0 <funcinptr>
    e2dd:	48 c7 02 53 00 00 00 	movq   $0x53,(%rdx)
    e2e4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e2eb:	00 
    e2ec:	48 c7 c3 03 00 00 00 	mov    $0x3,%rbx
    e2f3:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e2f7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e2fe:	00 
    e2ff:	48 89 cb             	mov    %rcx,%rbx
    e302:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e306:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e30d:	00 
    e30e:	ff 32                	pushq  (%rdx)
    e310:	48 8b 15 01 56 74 00 	mov    0x745601(%rip),%rdx        # 753918 <tmpquadone>
    e317:	48 8b 1d 12 f9 5e 00 	mov    0x5ef912(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e31e:	48 c7 05 27 56 74 00 	movq   $0x1,0x745627(%rip)        # 753950 <cmpPassed>
    e325:	01 00 00 00 
    e329:	e8 82 51 ff ff       	callq  34b0 <_storeDataFn>
    e32e:	48 83 f9 03          	cmp    $0x3,%rcx
      *out++ =
    e332:	47 0f b6 04 01       	movzbl (%r9,%r8,1),%r8d
    e337:	44 88 42 02          	mov    %r8b,0x2(%rdx)
      if (!--outlen)
    e33b:	0f 84 d8 04 00 00    	je     e819 <base64_encode+0x779>
    e341:	50                   	push   %rax
    e342:	48 b8 f1 8f 26 d4 00 	movabs $0xd4268ff1,%rax
    e349:	00 00 00 
    e34c:	48 89 05 ed 55 74 00 	mov    %rax,0x7455ed(%rip)        # 753940 <edgeId>
    e353:	58                   	pop    %rax
    e354:	e8 bf 50 ff ff       	callq  3418 <_storeEdge>
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
    e359:	41 83 e3 3f          	and    $0x3f,%r11d
      if (!--outlen)
    e35d:	48 89 15 b4 55 74 00 	mov    %rdx,0x7455b4(%rip)        # 753918 <tmpquadone>
    e364:	48 89 1d c5 f8 5e 00 	mov    %rbx,0x5ef8c5(%rip)        # 5fdc30 <tmpquadtwo>
    e36b:	48 8d 15 7e f8 5e 00 	lea    0x5ef87e(%rip),%rdx        # 5fdbf0 <funcinptr>
    e372:	48 c7 02 54 00 00 00 	movq   $0x54,(%rdx)
    e379:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e380:	00 
    e381:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
    e388:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e38c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e393:	00 
    e394:	48 89 cb             	mov    %rcx,%rbx
    e397:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e39b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e3a2:	00 
    e3a3:	ff 32                	pushq  (%rdx)
    e3a5:	48 8b 15 6c 55 74 00 	mov    0x74556c(%rip),%rdx        # 753918 <tmpquadone>
    e3ac:	48 8b 1d 7d f8 5e 00 	mov    0x5ef87d(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e3b3:	48 c7 05 92 55 74 00 	movq   $0x1,0x745592(%rip)        # 753950 <cmpPassed>
    e3ba:	01 00 00 00 
    e3be:	e8 ed 50 ff ff       	callq  34b0 <_storeDataFn>
    e3c3:	48 83 f9 04          	cmp    $0x4,%rcx
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
    e3c7:	43 0f b6 04 19       	movzbl (%r9,%r11,1),%eax
    e3cc:	88 42 03             	mov    %al,0x3(%rdx)
      if (!--outlen)
    e3cf:	0f 84 44 04 00 00    	je     e819 <base64_encode+0x779>
    e3d5:	50                   	push   %rax
    e3d6:	48 c7 c0 d1 84 9a 11 	mov    $0x119a84d1,%rax
    e3dd:	48 89 05 5c 55 74 00 	mov    %rax,0x74555c(%rip)        # 753940 <edgeId>
    e3e4:	58                   	pop    %rax
    e3e5:	e8 2e 50 ff ff       	callq  3418 <_storeEdge>
      if (inlen)
    e3ea:	48 83 ee 03          	sub    $0x3,%rsi
    e3ee:	74 1c                	je     e40c <base64_encode+0x36c>
    e3f0:	50                   	push   %rax
    e3f1:	48 b8 26 d4 8c f0 00 	movabs $0xf08cd426,%rax
    e3f8:	00 00 00 
    e3fb:	48 89 05 3e 55 74 00 	mov    %rax,0x74553e(%rip)        # 753940 <edgeId>
    e402:	58                   	pop    %rax
    e403:	e8 10 50 ff ff       	callq  3418 <_storeEdge>
        in += 3;
    e408:	48 83 c7 03          	add    $0x3,%rdi
    e40c:	50                   	push   %rax
    e40d:	48 b8 a1 66 84 ff 00 	movabs $0xff8466a1,%rax
    e414:	00 00 00 
    e417:	48 89 05 22 55 74 00 	mov    %rax,0x745522(%rip)        # 753940 <edgeId>
    e41e:	58                   	pop    %rax
    e41f:	e8 f4 4f ff ff       	callq  3418 <_storeEdge>
    e424:	48 83 c2 04          	add    $0x4,%rdx
    e428:	48 83 e9 04          	sub    $0x4,%rcx
    e42c:	50                   	push   %rax
    e42d:	48 b8 6a 46 f8 ff 00 	movabs $0xfff8466a,%rax
    e434:	00 00 00 
    e437:	48 89 05 02 55 74 00 	mov    %rax,0x745502(%rip)        # 753940 <edgeId>
    e43e:	58                   	pop    %rax
    e43f:	e8 d4 4f ff ff       	callq  3418 <_storeEdge>
  while (inlen && outlen)
    e444:	48 85 f6             	test   %rsi,%rsi
    e447:	0f 84 9b 06 00 00    	je     eae8 <base64_encode+0xa48>
    e44d:	50                   	push   %rax
    e44e:	48 c7 c0 cd 08 ff 3f 	mov    $0x3fff08cd,%rax
    e455:	48 89 05 e4 54 74 00 	mov    %rax,0x7454e4(%rip)        # 753940 <edgeId>
    e45c:	58                   	pop    %rax
    e45d:	e8 b6 4f ff ff       	callq  3418 <_storeEdge>
    e462:	48 85 c9             	test   %rcx,%rcx
    e465:	0f 84 7d 06 00 00    	je     eae8 <base64_encode+0xa48>
    e46b:	50                   	push   %rax
    e46c:	48 c7 c0 33 c2 ff 4f 	mov    $0x4fffc233,%rax
    e473:	48 89 05 c6 54 74 00 	mov    %rax,0x7454c6(%rip)        # 753940 <edgeId>
    e47a:	58                   	pop    %rax
    e47b:	e8 98 4f ff ff       	callq  3418 <_storeEdge>
  return ch;
    e480:	44 0f b6 1f          	movzbl (%rdi),%r11d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e484:	45 89 da             	mov    %r11d,%r10d
    e487:	41 c0 ea 02          	shr    $0x2,%r10b
    e48b:	41 83 e2 3f          	and    $0x3f,%r10d
      if (!--outlen)
    e48f:	48 89 15 82 54 74 00 	mov    %rdx,0x745482(%rip)        # 753918 <tmpquadone>
    e496:	48 89 1d 93 f7 5e 00 	mov    %rbx,0x5ef793(%rip)        # 5fdc30 <tmpquadtwo>
    e49d:	48 8d 15 4c f7 5e 00 	lea    0x5ef74c(%rip),%rdx        # 5fdbf0 <funcinptr>
    e4a4:	48 c7 02 55 00 00 00 	movq   $0x55,(%rdx)
    e4ab:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e4b2:	00 
    e4b3:	48 c7 c3 01 00 00 00 	mov    $0x1,%rbx
    e4ba:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e4be:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e4c5:	00 
    e4c6:	48 89 cb             	mov    %rcx,%rbx
    e4c9:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e4cd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e4d4:	00 
    e4d5:	ff 32                	pushq  (%rdx)
    e4d7:	48 8b 15 3a 54 74 00 	mov    0x74543a(%rip),%rdx        # 753918 <tmpquadone>
    e4de:	48 8b 1d 4b f7 5e 00 	mov    0x5ef74b(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e4e5:	48 c7 05 60 54 74 00 	movq   $0x1,0x745460(%rip)        # 753950 <cmpPassed>
    e4ec:	01 00 00 00 
    e4f0:	e8 bb 4f ff ff       	callq  34b0 <_storeDataFn>
    e4f5:	48 83 f9 01          	cmp    $0x1,%rcx
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e4f9:	43 0f b6 04 11       	movzbl (%r9,%r10,1),%eax
    e4fe:	88 02                	mov    %al,(%rdx)
      if (!--outlen)
    e500:	0f 84 13 03 00 00    	je     e819 <base64_encode+0x779>
    e506:	50                   	push   %rax
    e507:	48 b8 ff 54 9c da 00 	movabs $0xda9c54ff,%rax
    e50e:	00 00 00 
    e511:	48 89 05 28 54 74 00 	mov    %rax,0x745428(%rip)        # 753940 <edgeId>
    e518:	58                   	pop    %rax
    e519:	e8 fa 4e ff ff       	callq  3418 <_storeEdge>
      *out++ = b64c[((to_uchar (in[0]) << 4)
    e51e:	41 c1 e3 04          	shl    $0x4,%r11d
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
    e522:	48 89 15 ef 53 74 00 	mov    %rdx,0x7453ef(%rip)        # 753918 <tmpquadone>
    e529:	48 89 0d 00 f7 5e 00 	mov    %rcx,0x5ef700(%rip)        # 5fdc30 <tmpquadtwo>
    e530:	48 8d 15 b9 f6 5e 00 	lea    0x5ef6b9(%rip),%rdx        # 5fdbf0 <funcinptr>
    e537:	48 c7 02 56 00 00 00 	movq   $0x56,(%rdx)
    e53e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e545:	00 
    e546:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
    e54d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    e551:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e558:	00 
    e559:	48 89 f1             	mov    %rsi,%rcx
    e55c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    e560:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e567:	00 
    e568:	ff 32                	pushq  (%rdx)
    e56a:	48 8b 15 a7 53 74 00 	mov    0x7453a7(%rip),%rdx        # 753918 <tmpquadone>
    e571:	48 8b 0d b8 f6 5e 00 	mov    0x5ef6b8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    e578:	48 c7 05 cd 53 74 00 	movq   $0x1,0x7453cd(%rip)        # 753950 <cmpPassed>
    e57f:	01 00 00 00 
    e583:	e8 28 4f ff ff       	callq  34b0 <_storeDataFn>
    e588:	48 83 fe 01          	cmp    $0x1,%rsi
    e58c:	0f 85 de fb ff ff    	jne    e170 <base64_encode+0xd0>
    e592:	50                   	push   %rax
    e593:	48 c7 c0 a7 e2 d4 76 	mov    $0x76d4e2a7,%rax
    e59a:	48 89 05 9f 53 74 00 	mov    %rax,0x74539f(%rip)        # 753940 <edgeId>
    e5a1:	58                   	pop    %rax
    e5a2:	e8 71 4e ff ff       	callq  3418 <_storeEdge>
      *out++ = b64c[((to_uchar (in[0]) << 4)
    e5a7:	41 83 e3 30          	and    $0x30,%r11d
      if (!--outlen)
    e5ab:	48 89 15 66 53 74 00 	mov    %rdx,0x745366(%rip)        # 753918 <tmpquadone>
    e5b2:	48 89 1d 77 f6 5e 00 	mov    %rbx,0x5ef677(%rip)        # 5fdc30 <tmpquadtwo>
    e5b9:	48 8d 15 30 f6 5e 00 	lea    0x5ef630(%rip),%rdx        # 5fdbf0 <funcinptr>
    e5c0:	48 c7 02 57 00 00 00 	movq   $0x57,(%rdx)
    e5c7:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e5ce:	00 
    e5cf:	48 c7 c3 02 00 00 00 	mov    $0x2,%rbx
    e5d6:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e5da:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e5e1:	00 
    e5e2:	48 89 cb             	mov    %rcx,%rbx
    e5e5:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e5e9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e5f0:	00 
    e5f1:	ff 32                	pushq  (%rdx)
    e5f3:	48 8b 15 1e 53 74 00 	mov    0x74531e(%rip),%rdx        # 753918 <tmpquadone>
    e5fa:	48 8b 1d 2f f6 5e 00 	mov    0x5ef62f(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e601:	48 c7 05 44 53 74 00 	movq   $0x1,0x745344(%rip)        # 753950 <cmpPassed>
    e608:	01 00 00 00 
    e60c:	e8 9f 4e ff ff       	callq  34b0 <_storeDataFn>
    e611:	48 83 f9 02          	cmp    $0x2,%rcx
      *out++ = b64c[((to_uchar (in[0]) << 4)
    e615:	43 0f b6 34 19       	movzbl (%r9,%r11,1),%esi
    e61a:	40 88 72 01          	mov    %sil,0x1(%rdx)
      if (!--outlen)
    e61e:	0f 84 f5 01 00 00    	je     e819 <base64_encode+0x779>
    e624:	50                   	push   %rax
    e625:	48 b8 9c da 6e 93 00 	movabs $0x936eda9c,%rax
    e62c:	00 00 00 
    e62f:	48 89 05 0a 53 74 00 	mov    %rax,0x74530a(%rip)        # 753940 <edgeId>
    e636:	58                   	pop    %rax
    e637:	e8 dc 4d ff ff       	callq  3418 <_storeEdge>
      if (!--outlen)
    e63c:	48 89 15 d5 52 74 00 	mov    %rdx,0x7452d5(%rip)        # 753918 <tmpquadone>
    e643:	48 89 1d e6 f5 5e 00 	mov    %rbx,0x5ef5e6(%rip)        # 5fdc30 <tmpquadtwo>
    e64a:	48 8d 15 9f f5 5e 00 	lea    0x5ef59f(%rip),%rdx        # 5fdbf0 <funcinptr>
    e651:	48 c7 02 58 00 00 00 	movq   $0x58,(%rdx)
    e658:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e65f:	00 
    e660:	48 c7 c3 03 00 00 00 	mov    $0x3,%rbx
    e667:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e66b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e672:	00 
    e673:	48 89 cb             	mov    %rcx,%rbx
    e676:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e67a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e681:	00 
    e682:	ff 32                	pushq  (%rdx)
    e684:	48 8b 15 8d 52 74 00 	mov    0x74528d(%rip),%rdx        # 753918 <tmpquadone>
    e68b:	48 8b 1d 9e f5 5e 00 	mov    0x5ef59e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e692:	48 c7 05 b3 52 74 00 	movq   $0x1,0x7452b3(%rip)        # 753950 <cmpPassed>
    e699:	01 00 00 00 
    e69d:	e8 0e 4e ff ff       	callq  34b0 <_storeDataFn>
    e6a2:	48 83 f9 03          	cmp    $0x3,%rcx
      *out++ =
    e6a6:	c6 42 02 3d          	movb   $0x3d,0x2(%rdx)
      if (!--outlen)
    e6aa:	0f 84 69 01 00 00    	je     e819 <base64_encode+0x779>
    e6b0:	50                   	push   %rax
    e6b1:	48 b8 da 6e 93 9c 00 	movabs $0x9c936eda,%rax
    e6b8:	00 00 00 
    e6bb:	48 89 05 7e 52 74 00 	mov    %rax,0x74527e(%rip)        # 753940 <edgeId>
    e6c2:	58                   	pop    %rax
    e6c3:	e8 50 4d ff ff       	callq  3418 <_storeEdge>
    e6c8:	50                   	push   %rax
    e6c9:	48 b8 b6 db 24 a7 00 	movabs $0xa724dbb6,%rax
    e6d0:	00 00 00 
    e6d3:	48 89 05 66 52 74 00 	mov    %rax,0x745266(%rip)        # 753940 <edgeId>
    e6da:	58                   	pop    %rax
    e6db:	e8 38 4d ff ff       	callq  3418 <_storeEdge>
      if (!--outlen)
    e6e0:	48 89 15 31 52 74 00 	mov    %rdx,0x745231(%rip)        # 753918 <tmpquadone>
    e6e7:	48 89 1d 42 f5 5e 00 	mov    %rbx,0x5ef542(%rip)        # 5fdc30 <tmpquadtwo>
    e6ee:	48 8d 15 fb f4 5e 00 	lea    0x5ef4fb(%rip),%rdx        # 5fdbf0 <funcinptr>
    e6f5:	48 c7 02 59 00 00 00 	movq   $0x59,(%rdx)
    e6fc:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e703:	00 
    e704:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
    e70b:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e70f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e716:	00 
    e717:	48 89 cb             	mov    %rcx,%rbx
    e71a:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e71e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e725:	00 
    e726:	ff 32                	pushq  (%rdx)
    e728:	48 8b 15 e9 51 74 00 	mov    0x7451e9(%rip),%rdx        # 753918 <tmpquadone>
    e72f:	48 8b 1d fa f4 5e 00 	mov    0x5ef4fa(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e736:	48 c7 05 0f 52 74 00 	movq   $0x1,0x74520f(%rip)        # 753950 <cmpPassed>
    e73d:	01 00 00 00 
    e741:	e8 6a 4d ff ff       	callq  34b0 <_storeDataFn>
    e746:	48 83 f9 04          	cmp    $0x4,%rcx
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
    e74a:	c6 42 03 3d          	movb   $0x3d,0x3(%rdx)
      if (!--outlen)
    e74e:	0f 84 c5 00 00 00    	je     e819 <base64_encode+0x779>
    e754:	50                   	push   %rax
    e755:	48 c7 c0 b7 49 4e 3f 	mov    $0x3f4e49b7,%rax
    e75c:	48 89 05 dd 51 74 00 	mov    %rax,0x7451dd(%rip)        # 753940 <edgeId>
    e763:	58                   	pop    %rax
    e764:	e8 af 4c ff ff       	callq  3418 <_storeEdge>
    e769:	31 f6                	xor    %esi,%esi
    e76b:	e9 9c fc ff ff       	jmpq   e40c <base64_encode+0x36c>
    e770:	50                   	push   %rax
    e771:	48 b8 26 39 fd 9c 00 	movabs $0x9cfd3926,%rax
    e778:	00 00 00 
    e77b:	48 89 05 be 51 74 00 	mov    %rax,0x7451be(%rip)        # 753940 <edgeId>
    e782:	58                   	pop    %rax
    e783:	e8 90 4c ff ff       	callq  3418 <_storeEdge>
      *out++ =
    e788:	41 83 e0 3c          	and    $0x3c,%r8d
      if (!--outlen)
    e78c:	48 89 15 85 51 74 00 	mov    %rdx,0x745185(%rip)        # 753918 <tmpquadone>
    e793:	48 89 1d 96 f4 5e 00 	mov    %rbx,0x5ef496(%rip)        # 5fdc30 <tmpquadtwo>
    e79a:	48 8d 15 4f f4 5e 00 	lea    0x5ef44f(%rip),%rdx        # 5fdbf0 <funcinptr>
    e7a1:	48 c7 02 5a 00 00 00 	movq   $0x5a,(%rdx)
    e7a8:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e7af:	00 
    e7b0:	48 c7 c3 03 00 00 00 	mov    $0x3,%rbx
    e7b7:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
    e7bb:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e7c2:	00 
    e7c3:	48 89 cb             	mov    %rcx,%rbx
    e7c6:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
    e7ca:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e7d1:	00 
    e7d2:	ff 32                	pushq  (%rdx)
    e7d4:	48 8b 15 3d 51 74 00 	mov    0x74513d(%rip),%rdx        # 753918 <tmpquadone>
    e7db:	48 8b 1d 4e f4 5e 00 	mov    0x5ef44e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
    e7e2:	48 c7 05 63 51 74 00 	movq   $0x1,0x745163(%rip)        # 753950 <cmpPassed>
    e7e9:	01 00 00 00 
    e7ed:	e8 be 4c ff ff       	callq  34b0 <_storeDataFn>
    e7f2:	48 83 f9 03          	cmp    $0x3,%rcx
      *out++ =
    e7f6:	43 0f b6 04 01       	movzbl (%r9,%r8,1),%eax
    e7fb:	88 42 02             	mov    %al,0x2(%rdx)
      if (!--outlen)
    e7fe:	0f 85 c4 fe ff ff    	jne    e6c8 <base64_encode+0x628>
    e804:	50                   	push   %rax
    e805:	48 c7 c0 4e 3f 27 65 	mov    $0x65273f4e,%rax
    e80c:	48 89 05 2d 51 74 00 	mov    %rax,0x74512d(%rip)        # 753940 <edgeId>
    e813:	58                   	pop    %rax
    e814:	e8 ff 4b ff ff       	callq  3418 <_storeEdge>
    e819:	50                   	push   %rax
    e81a:	48 c7 c0 d3 cf 49 19 	mov    $0x1949cfd3,%rax
    e821:	48 89 05 18 51 74 00 	mov    %rax,0x745118(%rip)        # 753940 <edgeId>
    e828:	58                   	pop    %rax
    e829:	e8 ea 4b ff ff       	callq  3418 <_storeEdge>
}
    e82e:	f3 c3                	repz retq 
    e830:	50                   	push   %rax
    e831:	48 c7 c0 3f 27 65 04 	mov    $0x465273f,%rax
    e838:	48 89 05 01 51 74 00 	mov    %rax,0x745101(%rip)        # 753940 <edgeId>
    e83f:	58                   	pop    %rax
    e840:	e8 d3 4b ff ff       	callq  3418 <_storeEdge>
  while (inlen)
    e845:	4d 85 c0             	test   %r8,%r8
    e848:	4a 8d 34 07          	lea    (%rdi,%r8,1),%rsi
    e84c:	48 8d 05 0d b2 01 00 	lea    0x1b20d(%rip),%rax        # 29a60 <b64c>
    e853:	74 c4                	je     e819 <base64_encode+0x779>
    e855:	50                   	push   %rax
    e856:	48 b8 27 65 04 ce 00 	movabs $0xce046527,%rax
    e85d:	00 00 00 
    e860:	48 89 05 d9 50 74 00 	mov    %rax,0x7450d9(%rip)        # 753940 <edgeId>
    e867:	58                   	pop    %rax
    e868:	e8 ab 4b ff ff       	callq  3418 <_storeEdge>
    e86d:	48 89 f1             	mov    %rsi,%rcx
    e870:	48 29 f9             	sub    %rdi,%rcx
    e873:	83 e1 01             	and    $0x1,%ecx
    e876:	0f 84 04 01 00 00    	je     e980 <base64_encode+0x8e0>
    e87c:	50                   	push   %rax
    e87d:	48 c7 c0 29 23 70 6e 	mov    $0x6e702329,%rax
    e884:	48 89 05 b5 50 74 00 	mov    %rax,0x7450b5(%rip)        # 753940 <edgeId>
    e88b:	58                   	pop    %rax
    e88c:	e8 87 4b ff ff       	callq  3418 <_storeEdge>
  return ch;
    e891:	44 0f b6 1f          	movzbl (%rdi),%r11d
    e895:	44 0f b6 47 01       	movzbl 0x1(%rdi),%r8d
      in += 3;
    e89a:	48 83 c7 03          	add    $0x3,%rdi
    e89e:	48 83 c2 04          	add    $0x4,%rdx
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e8a2:	45 89 d9             	mov    %r11d,%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e8a5:	44 89 c1             	mov    %r8d,%ecx
    e8a8:	41 c1 e3 04          	shl    $0x4,%r11d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e8ac:	41 c0 e9 02          	shr    $0x2,%r9b
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e8b0:	c0 e9 04             	shr    $0x4,%cl
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e8b3:	41 83 e1 3f          	and    $0x3f,%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e8b7:	41 01 cb             	add    %ecx,%r11d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e8ba:	46 0f b6 14 08       	movzbl (%rax,%r9,1),%r10d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e8bf:	41 83 e3 3f          	and    $0x3f,%r11d
    e8c3:	46 0f b6 1c 18       	movzbl (%rax,%r11,1),%r11d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e8c8:	44 88 52 fc          	mov    %r10b,-0x4(%rdx)
  return ch;
    e8cc:	44 0f b6 57 ff       	movzbl -0x1(%rdi),%r10d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e8d1:	44 88 5a fd          	mov    %r11b,-0x3(%rdx)
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e8d5:	45 89 d1             	mov    %r10d,%r9d
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e8d8:	41 83 e2 3f          	and    $0x3f,%r10d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e8dc:	41 c0 e9 06          	shr    $0x6,%r9b
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e8e0:	46 0f b6 1c 10       	movzbl (%rax,%r10,1),%r11d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e8e5:	47 8d 04 81          	lea    (%r9,%r8,4),%r8d
    e8e9:	41 83 e0 3f          	and    $0x3f,%r8d
    e8ed:	42 0f b6 0c 00       	movzbl (%rax,%r8,1),%ecx
    e8f2:	88 4a fe             	mov    %cl,-0x2(%rdx)
  while (inlen)
    e8f5:	48 89 15 1c 50 74 00 	mov    %rdx,0x74501c(%rip)        # 753918 <tmpquadone>
    e8fc:	48 89 0d 2d f3 5e 00 	mov    %rcx,0x5ef32d(%rip)        # 5fdc30 <tmpquadtwo>
    e903:	48 8d 15 e6 f2 5e 00 	lea    0x5ef2e6(%rip),%rdx        # 5fdbf0 <funcinptr>
    e90a:	48 c7 02 5b 00 00 00 	movq   $0x5b,(%rdx)
    e911:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    e918:	00 
    e919:	48 89 f1             	mov    %rsi,%rcx
    e91c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    e920:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    e927:	00 
    e928:	48 89 f9             	mov    %rdi,%rcx
    e92b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    e92f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    e936:	00 
    e937:	ff 32                	pushq  (%rdx)
    e939:	48 8b 15 d8 4f 74 00 	mov    0x744fd8(%rip),%rdx        # 753918 <tmpquadone>
    e940:	48 8b 0d e9 f2 5e 00 	mov    0x5ef2e9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    e947:	48 c7 05 fe 4f 74 00 	movq   $0x1,0x744ffe(%rip)        # 753950 <cmpPassed>
    e94e:	01 00 00 00 
    e952:	e8 59 4b ff ff       	callq  34b0 <_storeDataFn>
    e957:	48 39 f7             	cmp    %rsi,%rdi
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e95a:	44 88 5a ff          	mov    %r11b,-0x1(%rdx)
  while (inlen)
    e95e:	75 20                	jne    e980 <base64_encode+0x8e0>
    e960:	50                   	push   %rax
    e961:	48 c7 c0 83 e9 1a 46 	mov    $0x461ae983,%rax
    e968:	48 89 05 d1 4f 74 00 	mov    %rax,0x744fd1(%rip)        # 753940 <edgeId>
    e96f:	58                   	pop    %rax
    e970:	e8 a3 4a ff ff       	callq  3418 <_storeEdge>
    e975:	f3 c3                	repz retq 
    e977:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    e97e:	00 00 
    e980:	50                   	push   %rax
    e981:	48 b8 4c d7 30 82 00 	movabs $0x8230d74c,%rax
    e988:	00 00 00 
    e98b:	48 89 05 ae 4f 74 00 	mov    %rax,0x744fae(%rip)        # 753940 <edgeId>
    e992:	58                   	pop    %rax
    e993:	e8 80 4a ff ff       	callq  3418 <_storeEdge>
  return ch;
    e998:	44 0f b6 5f 01       	movzbl 0x1(%rdi),%r11d
    e99d:	44 0f b6 17          	movzbl (%rdi),%r10d
      in += 3;
    e9a1:	48 83 c7 06          	add    $0x6,%rdi
    e9a5:	48 83 c2 08          	add    $0x8,%rdx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9a9:	44 89 d9             	mov    %r11d,%ecx
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9ac:	45 89 d1             	mov    %r10d,%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9af:	41 c1 e2 04          	shl    $0x4,%r10d
    e9b3:	c0 e9 04             	shr    $0x4,%cl
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9b6:	41 c0 e9 02          	shr    $0x2,%r9b
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9ba:	41 01 ca             	add    %ecx,%r10d
  return ch;
    e9bd:	0f b6 4f fc          	movzbl -0x4(%rdi),%ecx
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9c1:	41 83 e1 3f          	and    $0x3f,%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9c5:	41 83 e2 3f          	and    $0x3f,%r10d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9c9:	46 0f b6 04 08       	movzbl (%rax,%r9,1),%r8d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9ce:	46 0f b6 14 10       	movzbl (%rax,%r10,1),%r10d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e9d3:	41 89 c9             	mov    %ecx,%r9d
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e9d6:	83 e1 3f             	and    $0x3f,%ecx
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e9d9:	41 c0 e9 06          	shr    $0x6,%r9b
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9dd:	44 88 42 f8          	mov    %r8b,-0x8(%rdx)
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    e9e1:	44 88 52 f9          	mov    %r10b,-0x7(%rdx)
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e9e5:	44 0f b6 14 08       	movzbl (%rax,%rcx,1),%r10d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e9ea:	47 8d 04 99          	lea    (%r9,%r11,4),%r8d
  return ch;
    e9ee:	0f b6 4f fd          	movzbl -0x3(%rdi),%ecx
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    e9f2:	41 83 e0 3f          	and    $0x3f,%r8d
    e9f6:	46 0f b6 1c 00       	movzbl (%rax,%r8,1),%r11d
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    e9fb:	44 88 52 fb          	mov    %r10b,-0x5(%rdx)
      *out++ = b64c[to_uchar (in[0]) >> 2];
    e9ff:	41 89 c9             	mov    %ecx,%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    ea02:	c1 e1 04             	shl    $0x4,%ecx
      *out++ = b64c[to_uchar (in[0]) >> 2];
    ea05:	41 c0 e9 02          	shr    $0x2,%r9b
    ea09:	41 83 e1 3f          	and    $0x3f,%r9d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    ea0d:	44 88 5a fa          	mov    %r11b,-0x6(%rdx)
      *out++ = b64c[to_uchar (in[0]) >> 2];
    ea11:	46 0f b6 04 08       	movzbl (%rax,%r9,1),%r8d
  return ch;
    ea16:	44 0f b6 4f fe       	movzbl -0x2(%rdi),%r9d
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    ea1b:	45 89 cb             	mov    %r9d,%r11d
      *out++ = b64c[to_uchar (in[0]) >> 2];
    ea1e:	44 88 42 fc          	mov    %r8b,-0x4(%rdx)
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    ea22:	41 c0 eb 04          	shr    $0x4,%r11b
    ea26:	44 01 d9             	add    %r11d,%ecx
    ea29:	83 e1 3f             	and    $0x3f,%ecx
    ea2c:	44 0f b6 14 08       	movzbl (%rax,%rcx,1),%r10d
  return ch;
    ea31:	0f b6 4f ff          	movzbl -0x1(%rdi),%ecx
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    ea35:	41 89 c8             	mov    %ecx,%r8d
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    ea38:	83 e1 3f             	and    $0x3f,%ecx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
    ea3b:	44 88 52 fd          	mov    %r10b,-0x3(%rdx)
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    ea3f:	41 c0 e8 06          	shr    $0x6,%r8b
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    ea43:	44 0f b6 14 08       	movzbl (%rax,%rcx,1),%r10d
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
    ea48:	47 8d 0c 88          	lea    (%r8,%r9,4),%r9d
    ea4c:	41 83 e1 3f          	and    $0x3f,%r9d
    ea50:	46 0f b6 1c 08       	movzbl (%rax,%r9,1),%r11d
    ea55:	44 88 5a fe          	mov    %r11b,-0x2(%rdx)
  while (inlen)
    ea59:	48 89 15 b8 4e 74 00 	mov    %rdx,0x744eb8(%rip)        # 753918 <tmpquadone>
    ea60:	48 89 0d c9 f1 5e 00 	mov    %rcx,0x5ef1c9(%rip)        # 5fdc30 <tmpquadtwo>
    ea67:	48 8d 15 82 f1 5e 00 	lea    0x5ef182(%rip),%rdx        # 5fdbf0 <funcinptr>
    ea6e:	48 c7 02 5c 00 00 00 	movq   $0x5c,(%rdx)
    ea75:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    ea7c:	00 
    ea7d:	48 89 f1             	mov    %rsi,%rcx
    ea80:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    ea84:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    ea8b:	00 
    ea8c:	48 89 f9             	mov    %rdi,%rcx
    ea8f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    ea93:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    ea9a:	00 
    ea9b:	ff 32                	pushq  (%rdx)
    ea9d:	48 8b 15 74 4e 74 00 	mov    0x744e74(%rip),%rdx        # 753918 <tmpquadone>
    eaa4:	48 8b 0d 85 f1 5e 00 	mov    0x5ef185(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    eaab:	48 c7 05 9a 4e 74 00 	movq   $0x1,0x744e9a(%rip)        # 753950 <cmpPassed>
    eab2:	01 00 00 00 
    eab6:	e8 f5 49 ff ff       	callq  34b0 <_storeDataFn>
    eabb:	48 39 f7             	cmp    %rsi,%rdi
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
    eabe:	44 88 52 ff          	mov    %r10b,-0x1(%rdx)
  while (inlen)
    eac2:	0f 85 b8 fe ff ff    	jne    e980 <base64_encode+0x8e0>
    eac8:	50                   	push   %rax
    eac9:	48 b8 95 c5 2c 8f 00 	movabs $0x8f2cc595,%rax
    ead0:	00 00 00 
    ead3:	48 89 05 66 4e 74 00 	mov    %rax,0x744e66(%rip)        # 753940 <edgeId>
    eada:	58                   	pop    %rax
    eadb:	e8 38 49 ff ff       	callq  3418 <_storeEdge>
    eae0:	f3 c3                	repz retq 
    eae2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    eae8:	50                   	push   %rax
    eae9:	48 b8 2c 66 79 f4 00 	movabs $0xf479662c,%rax
    eaf0:	00 00 00 
    eaf3:	48 89 05 46 4e 74 00 	mov    %rax,0x744e46(%rip)        # 753940 <edgeId>
    eafa:	58                   	pop    %rax
    eafb:	e8 18 49 ff ff       	callq  3418 <_storeEdge>
  if (outlen)
    eb00:	48 85 c9             	test   %rcx,%rcx
    eb03:	0f 84 10 fd ff ff    	je     e819 <base64_encode+0x779>
    eb09:	50                   	push   %rax
    eb0a:	48 b8 31 cb a3 b7 00 	movabs $0xb7a3cb31,%rax
    eb11:	00 00 00 
    eb14:	48 89 05 25 4e 74 00 	mov    %rax,0x744e25(%rip)        # 753940 <edgeId>
    eb1b:	58                   	pop    %rax
    eb1c:	e8 f7 48 ff ff       	callq  3418 <_storeEdge>
    *out = '\0';
    eb21:	c6 02 00             	movb   $0x0,(%rdx)
    eb24:	c3                   	retq   
    eb25:	90                   	nop
    eb26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    eb2d:	00 00 00 

000000000000eb30 <base64_encode_alloc>:
  size_t outlen = 1 + BASE64_LENGTH (inlen);
    eb30:	48 8d 46 02          	lea    0x2(%rsi),%rax
{
    eb34:	41 56                	push   %r14
    eb36:	41 55                	push   %r13
    eb38:	41 54                	push   %r12
    eb3a:	55                   	push   %rbp
    eb3b:	49 89 d5             	mov    %rdx,%r13
    eb3e:	53                   	push   %rbx
  size_t outlen = 1 + BASE64_LENGTH (inlen);
    eb3f:	48 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rbx
    eb46:	aa aa aa 
    eb49:	48 f7 e3             	mul    %rbx
    eb4c:	48 d1 ea             	shr    %rdx
    eb4f:	48 8d 1c 95 00 00 00 	lea    0x0(,%rdx,4),%rbx
    eb56:	00 
    eb57:	48 8d 6b 01          	lea    0x1(%rbx),%rbp
  if (inlen > outlen)
    eb5b:	48 89 15 b6 4d 74 00 	mov    %rdx,0x744db6(%rip)        # 753918 <tmpquadone>
    eb62:	48 89 0d c7 f0 5e 00 	mov    %rcx,0x5ef0c7(%rip)        # 5fdc30 <tmpquadtwo>
    eb69:	48 8d 15 80 f0 5e 00 	lea    0x5ef080(%rip),%rdx        # 5fdbf0 <funcinptr>
    eb70:	48 c7 02 5d 00 00 00 	movq   $0x5d,(%rdx)
    eb77:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    eb7e:	00 
    eb7f:	48 89 e9             	mov    %rbp,%rcx
    eb82:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    eb86:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    eb8d:	00 
    eb8e:	48 89 f1             	mov    %rsi,%rcx
    eb91:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    eb95:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    eb9c:	00 
    eb9d:	ff 32                	pushq  (%rdx)
    eb9f:	48 8b 15 72 4d 74 00 	mov    0x744d72(%rip),%rdx        # 753918 <tmpquadone>
    eba6:	48 8b 0d 83 f0 5e 00 	mov    0x5ef083(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    ebad:	48 c7 05 98 4d 74 00 	movq   $0x1,0x744d98(%rip)        # 753950 <cmpPassed>
    ebb4:	01 00 00 00 
    ebb8:	e8 f3 48 ff ff       	callq  34b0 <_storeDataFn>
    ebbd:	48 39 ee             	cmp    %rbp,%rsi
    ebc0:	76 4e                	jbe    ec10 <base64_encode_alloc+0xe0>
    ebc2:	50                   	push   %rax
    ebc3:	48 b8 f1 62 28 d3 00 	movabs $0xd32862f1,%rax
    ebca:	00 00 00 
    ebcd:	48 89 05 6c 4d 74 00 	mov    %rax,0x744d6c(%rip)        # 753940 <edgeId>
    ebd4:	58                   	pop    %rax
    ebd5:	e8 3e 48 ff ff       	callq  3418 <_storeEdge>
      *out = NULL;
    ebda:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
    ebe1:	00 
      return 0;
    ebe2:	31 ed                	xor    %ebp,%ebp
    ebe4:	50                   	push   %rax
    ebe5:	48 b8 8b a1 4c cb 00 	movabs $0xcb4ca18b,%rax
    ebec:	00 00 00 
    ebef:	48 89 05 4a 4d 74 00 	mov    %rax,0x744d4a(%rip)        # 753940 <edgeId>
    ebf6:	58                   	pop    %rax
    ebf7:	e8 1c 48 ff ff       	callq  3418 <_storeEdge>
}
    ebfc:	5b                   	pop    %rbx
    ebfd:	48 89 e8             	mov    %rbp,%rax
    ec00:	5d                   	pop    %rbp
    ec01:	41 5c                	pop    %r12
    ec03:	41 5d                	pop    %r13
    ec05:	41 5e                	pop    %r14
    ec07:	c3                   	retq   
    ec08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    ec0f:	00 
    ec10:	50                   	push   %rax
    ec11:	48 b8 b4 cc 5e 83 00 	movabs $0x835eccb4,%rax
    ec18:	00 00 00 
    ec1b:	48 89 05 1e 4d 74 00 	mov    %rax,0x744d1e(%rip)        # 753940 <edgeId>
    ec22:	58                   	pop    %rax
    ec23:	e8 f0 47 ff ff       	callq  3418 <_storeEdge>
    ec28:	49 89 fe             	mov    %rdi,%r14
  *out = malloc (outlen);
    ec2b:	48 89 ef             	mov    %rbp,%rdi
    ec2e:	49 89 f4             	mov    %rsi,%r12
    ec31:	e8 7a 2e ff ff       	callq  1ab0 <malloc@plt>
  if (!*out)
    ec36:	48 85 c0             	test   %rax,%rax
  *out = malloc (outlen);
    ec39:	49 89 45 00          	mov    %rax,0x0(%r13)
  if (!*out)
    ec3d:	74 a5                	je     ebe4 <base64_encode_alloc+0xb4>
    ec3f:	50                   	push   %rax
    ec40:	48 c7 c0 7b 0d fa 4a 	mov    $0x4afa0d7b,%rax
    ec47:	48 89 05 f2 4c 74 00 	mov    %rax,0x744cf2(%rip)        # 753940 <edgeId>
    ec4e:	58                   	pop    %rax
    ec4f:	e8 c4 47 ff ff       	callq  3418 <_storeEdge>
  base64_encode (in, inlen, *out, outlen);
    ec54:	48 89 e9             	mov    %rbp,%rcx
    ec57:	48 89 c2             	mov    %rax,%rdx
  return outlen - 1;
    ec5a:	48 89 dd             	mov    %rbx,%rbp
  base64_encode (in, inlen, *out, outlen);
    ec5d:	4c 89 e6             	mov    %r12,%rsi
    ec60:	4c 89 f7             	mov    %r14,%rdi
    ec63:	e8 38 f4 ff ff       	callq  e0a0 <base64_encode>
}
    ec68:	5b                   	pop    %rbx
    ec69:	48 89 e8             	mov    %rbp,%rax
    ec6c:	5d                   	pop    %rbp
    ec6d:	41 5c                	pop    %r12
    ec6f:	41 5d                	pop    %r13
    ec71:	41 5e                	pop    %r14
    ec73:	c3                   	retq   
    ec74:	66 90                	xchg   %ax,%ax
    ec76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ec7d:	00 00 00 

000000000000ec80 <isbase64>:
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
    ec80:	48 8d 05 d9 ac 01 00 	lea    0x1acd9(%rip),%rax        # 29960 <b64>
    ec87:	40 0f b6 ff          	movzbl %dil,%edi
    ec8b:	0f b6 04 38          	movzbl (%rax,%rdi,1),%eax
    ec8f:	f7 d0                	not    %eax
    ec91:	c0 e8 07             	shr    $0x7,%al
}
    ec94:	c3                   	retq   
    ec95:	90                   	nop
    ec96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    ec9d:	00 00 00 

000000000000eca0 <base64_decode_ctx_init>:
  ctx->i = 0;
    eca0:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
}
    eca6:	c3                   	retq   
    eca7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ecae:	00 00 

000000000000ecb0 <base64_decode_ctx>:

bool
base64_decode_ctx (struct base64_decode_context *ctx,
                   const char *restrict in, size_t inlen,
                   char *restrict out, size_t *outlen)
{
    ecb0:	41 57                	push   %r15
    ecb2:	41 56                	push   %r14
    ecb4:	41 55                	push   %r13
    ecb6:	41 54                	push   %r12
    ecb8:	55                   	push   %rbp
    ecb9:	53                   	push   %rbx
    ecba:	48 89 d5             	mov    %rdx,%rbp
    ecbd:	48 83 ec 68          	sub    $0x68,%rsp
  size_t outleft = *outlen;
    ecc1:	4d 8b 20             	mov    (%r8),%r12
{
    ecc4:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    ecc9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    ecce:	64 48 8b 34 25 28 00 	mov    %fs:0x28,%rsi
    ecd5:	00 00 
    ecd7:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
    ecdc:	31 f6                	xor    %esi,%esi
  bool ignore_newlines = ctx != NULL;
  bool flush_ctx = false;
  unsigned int ctx_i = 0;

  if (ignore_newlines)
    ecde:	48 85 ff             	test   %rdi,%rdi
{
    ece1:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    ece6:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  size_t outleft = *outlen;
    eceb:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
  if (ignore_newlines)
    ecf0:	0f 84 da 30 00 00    	je     11dd0 <base64_decode_ctx+0x3120>
    ecf6:	50                   	push   %rax
    ecf7:	48 b8 29 1e 9b 93 00 	movabs $0x939b1e29,%rax
    ecfe:	00 00 00 
    ed01:	48 89 05 38 4c 74 00 	mov    %rax,0x744c38(%rip)        # 753940 <edgeId>
    ed08:	58                   	pop    %rax
    ed09:	e8 0a 47 ff ff       	callq  3418 <_storeEdge>
    ed0e:	48 85 d2             	test   %rdx,%rdx
    ed11:	8b 17                	mov    (%rdi),%edx
    ed13:	0f 95 44 24 35       	setne  0x35(%rsp)
    ed18:	0f b6 4c 24 35       	movzbl 0x35(%rsp),%ecx
    ed1d:	85 d2                	test   %edx,%edx
    ed1f:	0f 94 c3             	sete   %bl
    ed22:	21 cb                	and    %ecx,%ebx
    {
      ctx_i = ctx->i;
    ed24:	88 4c 24 37          	mov    %cl,0x37(%rsp)
    ed28:	88 5c 24 36          	mov    %bl,0x36(%rsp)
    ed2c:	50                   	push   %rax
    ed2d:	48 c7 c0 36 27 e1 2f 	mov    $0x2fe12736,%rax
    ed34:	48 89 05 05 4c 74 00 	mov    %rax,0x744c05(%rip)        # 753940 <edgeId>
    ed3b:	58                   	pop    %rax
    ed3c:	e8 d7 46 ff ff       	callq  3418 <_storeEdge>
    ed41:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
    ed46:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
          lava_835 |= ((unsigned char *) (in))[0] << (0*8);lava_835 |= ((unsigned char *) (in))[1] << (1*8);lava_835 |= ((unsigned char *) (in))[2] << (2*8);lava_835 |= ((unsigned char *) (in))[3] << (3*8);lava_set(835,lava_835);
          }if (((in_end)) && ((in_end)))  {int lava_526 = 0;
          lava_526 |= ((unsigned char *) (in_end))[0] << (0*8);lava_526 |= ((unsigned char *) (in_end))[1] << (1*8);lava_526 |= ((unsigned char *) (in_end))[2] << (2*8);lava_526 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(526,lava_526);
          int lava_527 = 0;
          lava_527 |= ((unsigned char *) (in_end))[0] << (0*8);lava_527 |= ((unsigned char *) (in_end))[1] << (1*8);lava_527 |= ((unsigned char *) (in_end))[2] << (2*8);lava_527 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(527,lava_527);
          }char * kbcieiubweuhc2145174067 = get_4 (ctx+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))), &in+(lava_get(235))*(0x6c617576==(lava_get(235))||0x7675616c==(lava_get(235))), in_end+(lava_get(526))*(0x6c617453==(lava_get(526))||0x5374616c==(lava_get(526))), &inlen);if (((in)) && ((in)))  {int lava_284 = 0;
    ed4b:	4c 8d 44 24 48       	lea    0x48(%rsp),%r8
    ed50:	48 89 34 24          	mov    %rsi,(%rsp)
    ed54:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    ed59:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
    ed5e:	50                   	push   %rax
    ed5f:	48 b8 84 bf 70 ea 00 	movabs $0xea70bf84,%rax
    ed66:	00 00 00 
    ed69:	48 89 05 d0 4b 74 00 	mov    %rax,0x744bd0(%rip)        # 753940 <edgeId>
    ed70:	58                   	pop    %rax
    ed71:	e8 a2 46 ff ff       	callq  3418 <_storeEdge>
      if (ctx_i == 0 && !flush_ctx)
    ed76:	48 89 15 9b 4b 74 00 	mov    %rdx,0x744b9b(%rip)        # 753918 <tmpquadone>
    ed7d:	48 89 0d ac ee 5e 00 	mov    %rcx,0x5eeeac(%rip)        # 5fdc30 <tmpquadtwo>
    ed84:	48 8d 15 65 ee 5e 00 	lea    0x5eee65(%rip),%rdx        # 5fdbf0 <funcinptr>
    ed8b:	48 c7 02 5e 00 00 00 	movq   $0x5e,(%rdx)
    ed92:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    ed99:	00 
    ed9a:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    eda1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    eda5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    edac:	00 
    edad:	48 8b 4c 24 36       	mov    0x36(%rsp),%rcx
    edb2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    edb6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    edbd:	00 
    edbe:	ff 32                	pushq  (%rdx)
    edc0:	48 8b 15 51 4b 74 00 	mov    0x744b51(%rip),%rdx        # 753918 <tmpquadone>
    edc7:	48 8b 0d 62 ee 5e 00 	mov    0x5eee62(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    edce:	48 c7 05 77 4b 74 00 	movq   $0x1,0x744b77(%rip)        # 753950 <cmpPassed>
    edd5:	01 00 00 00 
    edd9:	e8 d2 46 ff ff       	callq  34b0 <_storeDataFn>
    edde:	80 7c 24 36 00       	cmpb   $0x0,0x36(%rsp)
    ede3:	4d 89 e3             	mov    %r12,%r11
    ede6:	0f 85 a2 0b 00 00    	jne    f98e <base64_decode_ctx+0xcde>
    edec:	50                   	push   %rax
    eded:	48 b8 fe c2 a9 87 00 	movabs $0x87a9c2fe,%rax
    edf4:	00 00 00 
    edf7:	48 89 05 42 4b 74 00 	mov    %rax,0x744b42(%rip)        # 753940 <edgeId>
    edfe:	58                   	pop    %rax
    edff:	e8 14 46 ff ff       	callq  3418 <_storeEdge>
    ee04:	0f 1f 40 00          	nopl   0x0(%rax)
    ee08:	50                   	push   %rax
    ee09:	48 b8 2f 9c 7a c8 00 	movabs $0xc87a9c2f,%rax
    ee10:	00 00 00 
    ee13:	48 89 05 26 4b 74 00 	mov    %rax,0x744b26(%rip)        # 753940 <edgeId>
    ee1a:	58                   	pop    %rax
    ee1b:	e8 f8 45 ff ff       	callq  3418 <_storeEdge>
      if (inlen == 0 && !flush_ctx)
    ee20:	48 85 ed             	test   %rbp,%rbp
    ee23:	41 0f 94 c7          	sete   %r15b
    ee27:	44 22 7c 24 35       	and    0x35(%rsp),%r15b
    ee2c:	0f 85 5e 0f 00 00    	jne    fd90 <base64_decode_ctx+0x10e0>
    ee32:	50                   	push   %rax
    ee33:	48 b8 e1 d4 43 d6 00 	movabs $0xd643d4e1,%rax
    ee3a:	00 00 00 
    ee3d:	48 89 05 fc 4a 74 00 	mov    %rax,0x744afc(%rip)        # 753940 <edgeId>
    ee44:	58                   	pop    %rax
    ee45:	e8 ce 45 ff ff       	callq  3418 <_storeEdge>
    ee4a:	50                   	push   %rax
    ee4b:	48 c7 c0 70 ea 21 6b 	mov    $0x6b21ea70,%rax
    ee52:	48 89 05 e7 4a 74 00 	mov    %rax,0x744ae7(%rip)        # 753940 <edgeId>
    ee59:	58                   	pop    %rax
    ee5a:	e8 b9 45 ff ff       	callq  3418 <_storeEdge>
      if (inlen && *in == '\n' && ignore_newlines)
    ee5f:	48 85 ed             	test   %rbp,%rbp
    ee62:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
    ee67:	0f 84 83 0f 00 00    	je     fdf0 <base64_decode_ctx+0x1140>
    ee6d:	50                   	push   %rax
    ee6e:	48 c7 c0 a7 1e b2 06 	mov    $0x6b21ea7,%rax
    ee75:	48 89 05 c4 4a 74 00 	mov    %rax,0x744ac4(%rip)        # 753940 <edgeId>
    ee7c:	58                   	pop    %rax
    ee7d:	e8 96 45 ff ff       	callq  3418 <_storeEdge>
    ee82:	48 89 15 8f 4a 74 00 	mov    %rdx,0x744a8f(%rip)        # 753918 <tmpquadone>
    ee89:	48 89 0d a0 ed 5e 00 	mov    %rcx,0x5eeda0(%rip)        # 5fdc30 <tmpquadtwo>
    ee90:	48 8d 15 59 ed 5e 00 	lea    0x5eed59(%rip),%rdx        # 5fdbf0 <funcinptr>
    ee97:	48 c7 02 5f 00 00 00 	movq   $0x5f,(%rdx)
    ee9e:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    eea5:	00 
    eea6:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
    eead:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    eeb1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    eeb8:	00 
    eeb9:	48 8b 0b             	mov    (%rbx),%rcx
    eebc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    eec0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    eec7:	00 
    eec8:	ff 32                	pushq  (%rdx)
    eeca:	48 8b 15 47 4a 74 00 	mov    0x744a47(%rip),%rdx        # 753918 <tmpquadone>
    eed1:	48 8b 0d 58 ed 5e 00 	mov    0x5eed58(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    eed8:	48 c7 05 6d 4a 74 00 	movq   $0x1,0x744a6d(%rip)        # 753950 <cmpPassed>
    eedf:	01 00 00 00 
    eee3:	e8 c8 45 ff ff       	callq  34b0 <_storeDataFn>
    eee8:	80 3b 0a             	cmpb   $0xa,(%rbx)
    eeeb:	0f 84 9f 2d 00 00    	je     11c90 <base64_decode_ctx+0x2fe0>
    eef1:	50                   	push   %rax
    eef2:	48 b8 d4 43 d6 a0 00 	movabs $0xa0d643d4,%rax
    eef9:	00 00 00 
    eefc:	48 89 05 3d 4a 74 00 	mov    %rax,0x744a3d(%rip)        # 753940 <edgeId>
    ef03:	58                   	pop    %rax
    ef04:	e8 0f 45 ff ff       	callq  3418 <_storeEdge>
      out -= outleft_save - outleft;
    ef09:	4d 29 e3             	sub    %r12,%r11
    ef0c:	4c 01 5c 24 40       	add    %r11,0x40(%rsp)
        if (ignore_newlines)
    ef11:	48 89 15 00 4a 74 00 	mov    %rdx,0x744a00(%rip)        # 753918 <tmpquadone>
    ef18:	48 89 0d 11 ed 5e 00 	mov    %rcx,0x5eed11(%rip)        # 5fdc30 <tmpquadtwo>
    ef1f:	48 8d 15 ca ec 5e 00 	lea    0x5eecca(%rip),%rdx        # 5fdbf0 <funcinptr>
    ef26:	48 c7 02 60 00 00 00 	movq   $0x60,(%rdx)
    ef2d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    ef34:	00 
    ef35:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    ef3c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    ef40:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    ef47:	00 
    ef48:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    ef4d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    ef51:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    ef58:	00 
    ef59:	ff 32                	pushq  (%rdx)
    ef5b:	48 8b 15 b6 49 74 00 	mov    0x7449b6(%rip),%rdx        # 753918 <tmpquadone>
    ef62:	48 8b 0d c7 ec 5e 00 	mov    0x5eecc7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    ef69:	48 c7 05 dc 49 74 00 	movq   $0x1,0x7449dc(%rip)        # 753950 <cmpPassed>
    ef70:	01 00 00 00 
    ef74:	e8 37 45 ff ff       	callq  34b0 <_storeDataFn>
    ef79:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
        char const *in_end = in + inlen;
    ef7f:	48 8d 0c 2b          	lea    (%rbx,%rbp,1),%rcx
      outleft = outleft_save;
    ef83:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
        char const *in_end = in + inlen;
    ef88:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
        if (ignore_newlines)
    ef8d:	0f 85 2e 0f 00 00    	jne    fec1 <base64_decode_ctx+0x1211>
    ef93:	50                   	push   %rax
    ef94:	48 b8 6b d0 67 a7 00 	movabs $0xa767d06b,%rax
    ef9b:	00 00 00 
    ef9e:	48 89 05 9b 49 74 00 	mov    %rax,0x74499b(%rip)        # 753940 <edgeId>
    efa5:	58                   	pop    %rax
    efa6:	e8 6d 44 ff ff       	callq  3418 <_storeEdge>
    efab:	50                   	push   %rax
    efac:	48 b8 1a f4 d9 e9 00 	movabs $0xe9d9f41a,%rax
    efb3:	00 00 00 
    efb6:	48 89 05 83 49 74 00 	mov    %rax,0x744983(%rip)        # 753940 <edgeId>
    efbd:	58                   	pop    %rax
    efbe:	e8 55 44 ff ff       	callq  3418 <_storeEdge>
          *n_non_newline = 4;
    efc3:	49 89 de             	mov    %rbx,%r14
    efc6:	50                   	push   %rax
    efc7:	48 b8 f4 d9 e9 d1 00 	movabs $0xd1e9d9f4,%rax
    efce:	00 00 00 
    efd1:	48 89 05 68 49 74 00 	mov    %rax,0x744968(%rip)        # 753940 <edgeId>
    efd8:	58                   	pop    %rax
    efd9:	e8 3a 44 ff ff       	callq  3418 <_storeEdge>
          non_nl = in;  /* Might have nl in this case. */

        /* If the input is empty or consists solely of newlines (0 non-newlines),
           then we're done.  Likewise if there are fewer than 4 bytes when not
           flushing context and not treating newlines as garbage.  */
        if (inlen == 0 || (inlen < 4 && !flush_ctx && ignore_newlines))
    efde:	48 89 15 33 49 74 00 	mov    %rdx,0x744933(%rip)        # 753918 <tmpquadone>
    efe5:	48 89 0d 44 ec 5e 00 	mov    %rcx,0x5eec44(%rip)        # 5fdc30 <tmpquadtwo>
    efec:	48 8d 15 fd eb 5e 00 	lea    0x5eebfd(%rip),%rdx        # 5fdbf0 <funcinptr>
    eff3:	48 c7 02 61 00 00 00 	movq   $0x61,(%rdx)
    effa:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    f001:	00 
    f002:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
    f009:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f00d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f014:	00 
    f015:	48 89 e9             	mov    %rbp,%rcx
    f018:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f01c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f023:	00 
    f024:	ff 32                	pushq  (%rdx)
    f026:	48 8b 15 eb 48 74 00 	mov    0x7448eb(%rip),%rdx        # 753918 <tmpquadone>
    f02d:	48 8b 0d fc eb 5e 00 	mov    0x5eebfc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f034:	48 c7 05 11 49 74 00 	movq   $0x1,0x744911(%rip)        # 753950 <cmpPassed>
    f03b:	01 00 00 00 
    f03f:	e8 6c 44 ff ff       	callq  34b0 <_storeDataFn>
    f044:	48 83 fd 03          	cmp    $0x3,%rbp
    f048:	0f 87 a3 00 00 00    	ja     f0f1 <base64_decode_ctx+0x441>
    f04e:	50                   	push   %rax
    f04f:	48 b8 b3 d3 a3 ef 00 	movabs $0xefa3d3b3,%rax
    f056:	00 00 00 
    f059:	48 89 05 e0 48 74 00 	mov    %rax,0x7448e0(%rip)        # 753940 <edgeId>
    f060:	58                   	pop    %rax
    f061:	e8 b2 43 ff ff       	callq  3418 <_storeEdge>
    f066:	48 89 15 ab 48 74 00 	mov    %rdx,0x7448ab(%rip)        # 753918 <tmpquadone>
    f06d:	48 89 0d bc eb 5e 00 	mov    %rcx,0x5eebbc(%rip)        # 5fdc30 <tmpquadtwo>
    f074:	48 8d 15 75 eb 5e 00 	lea    0x5eeb75(%rip),%rdx        # 5fdbf0 <funcinptr>
    f07b:	48 c7 02 62 00 00 00 	movq   $0x62,(%rdx)
    f082:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    f089:	00 
    f08a:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    f091:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f095:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f09c:	00 
    f09d:	48 8b 4c 24 37       	mov    0x37(%rsp),%rcx
    f0a2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f0a6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f0ad:	00 
    f0ae:	ff 32                	pushq  (%rdx)
    f0b0:	48 8b 15 61 48 74 00 	mov    0x744861(%rip),%rdx        # 753918 <tmpquadone>
    f0b7:	48 8b 0d 72 eb 5e 00 	mov    0x5eeb72(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f0be:	48 c7 05 87 48 74 00 	movq   $0x1,0x744887(%rip)        # 753950 <cmpPassed>
    f0c5:	01 00 00 00 
    f0c9:	e8 e2 43 ff ff       	callq  34b0 <_storeDataFn>
    f0ce:	80 7c 24 37 00       	cmpb   $0x0,0x37(%rsp)
    f0d3:	0f 85 19 2a 00 00    	jne    11af2 <base64_decode_ctx+0x2e42>
    f0d9:	50                   	push   %rax
    f0da:	48 b8 76 7a f4 dd 00 	movabs $0xddf47a76,%rax
    f0e1:	00 00 00 
    f0e4:	48 89 05 55 48 74 00 	mov    %rax,0x744855(%rip)        # 753940 <edgeId>
    f0eb:	58                   	pop    %rax
    f0ec:	e8 27 43 ff ff       	callq  3418 <_storeEdge>
    f0f1:	50                   	push   %rax
    f0f2:	48 b8 3b 3d fa ee 00 	movabs $0xeefa3d3b,%rax
    f0f9:	00 00 00 
    f0fc:	48 89 05 3d 48 74 00 	mov    %rax,0x74483d(%rip)        # 753940 <edgeId>
    f103:	58                   	pop    %rax
    f104:	e8 0f 43 ff ff       	callq  3418 <_storeEdge>
          {
            inlen = 0;
            break;
          }
        if (!({if (((non_nl)) && ((non_nl)))  {int lava_805 = 0;
        lava_805 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_805 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_805 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_805 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(805,lava_805);
    f109:	8b 33                	mov    (%rbx),%esi
    f10b:	bf 25 03 00 00       	mov    $0x325,%edi
    f110:	e8 6b dd ff ff       	callq  ce80 <lava_set>
        int lava_583 = 0;
        lava_583 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_583 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_583 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_583 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(583,lava_583);
    f115:	8b 33                	mov    (%rbx),%esi
    f117:	bf 47 02 00 00       	mov    $0x247,%edi
    f11c:	e8 5f dd ff ff       	callq  ce80 <lava_set>
        int lava_842 = 0;
        lava_842 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_842 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_842 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_842 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(842,lava_842);
    f121:	8b 33                	mov    (%rbx),%esi
    f123:	bf 4a 03 00 00       	mov    $0x34a,%edi
    f128:	e8 53 dd ff ff       	callq  ce80 <lava_set>
        }_Bool kbcieiubweuhc468703135 = decode_4 (non_nl+(lava_get(386))*(0x6c6174df==(lava_get(386))||0xdf74616c==(lava_get(386)))+(lava_get(284))*(0x6c617545==(lava_get(284))||0x4575616c==(lava_get(284))), inlen+(lava_get(274))*(0x6c61754f==(lava_get(274))||0x4f75616c==(lava_get(274)))+(lava_get(527))*(0x6c617452==(lava_get(527))||0x5274616c==(lava_get(527))), &out+(lava_get(276))*(0x6c61754d==(lava_get(276))||0x4d75616c==(lava_get(276))), &outleft+(lava_get(278))*(0x6c61754b==(lava_get(278))||0x4b75616c==(lava_get(278))));if (((non_nl)) && ((non_nl)))  {int lava_521 = 0;
    f12d:	bf 16 01 00 00       	mov    $0x116,%edi
    f132:	e8 59 dd ff ff       	callq  ce90 <lava_get>
    f137:	bf 16 01 00 00       	mov    $0x116,%edi
    f13c:	41 89 c4             	mov    %eax,%r12d
    f13f:	e8 4c dd ff ff       	callq  ce90 <lava_get>
    f144:	48 89 15 cd 47 74 00 	mov    %rdx,0x7447cd(%rip)        # 753918 <tmpquadone>
    f14b:	48 89 0d de ea 5e 00 	mov    %rcx,0x5eeade(%rip)        # 5fdc30 <tmpquadtwo>
    f152:	48 8d 15 97 ea 5e 00 	lea    0x5eea97(%rip),%rdx        # 5fdbf0 <funcinptr>
    f159:	48 c7 02 63 00 00 00 	movq   $0x63,(%rdx)
    f160:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f167:	00 
    f168:	48 c7 c1 4b 75 61 6c 	mov    $0x6c61754b,%rcx
    f16f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f173:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f17a:	00 
    f17b:	48 89 c1             	mov    %rax,%rcx
    f17e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f182:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f189:	00 
    f18a:	ff 32                	pushq  (%rdx)
    f18c:	48 8b 15 85 47 74 00 	mov    0x744785(%rip),%rdx        # 753918 <tmpquadone>
    f193:	48 8b 0d 96 ea 5e 00 	mov    0x5eea96(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f19a:	48 c7 05 ab 47 74 00 	movq   $0x1,0x7447ab(%rip)        # 753950 <cmpPassed>
    f1a1:	01 00 00 00 
    f1a5:	e8 06 43 ff ff       	callq  34b0 <_storeDataFn>
    f1aa:	3d 4b 75 61 6c       	cmp    $0x6c61754b,%eax
    f1af:	0f 84 97 00 00 00    	je     f24c <base64_decode_ctx+0x59c>
    f1b5:	50                   	push   %rax
    f1b6:	48 b8 07 41 9c fa 00 	movabs $0xfa9c4107,%rax
    f1bd:	00 00 00 
    f1c0:	48 89 05 79 47 74 00 	mov    %rax,0x744779(%rip)        # 753940 <edgeId>
    f1c7:	58                   	pop    %rax
    f1c8:	e8 4b 42 ff ff       	callq  3418 <_storeEdge>
    f1cd:	bf 16 01 00 00       	mov    $0x116,%edi
    f1d2:	e8 b9 dc ff ff       	callq  ce90 <lava_get>
    f1d7:	48 89 15 3a 47 74 00 	mov    %rdx,0x74473a(%rip)        # 753918 <tmpquadone>
    f1de:	48 89 0d 4b ea 5e 00 	mov    %rcx,0x5eea4b(%rip)        # 5fdc30 <tmpquadtwo>
    f1e5:	48 8d 15 04 ea 5e 00 	lea    0x5eea04(%rip),%rdx        # 5fdbf0 <funcinptr>
    f1ec:	48 c7 02 64 00 00 00 	movq   $0x64,(%rdx)
    f1f3:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f1fa:	00 
    f1fb:	48 c7 c1 6c 61 75 4b 	mov    $0x4b75616c,%rcx
    f202:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f206:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f20d:	00 
    f20e:	48 89 c1             	mov    %rax,%rcx
    f211:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f215:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f21c:	00 
    f21d:	ff 32                	pushq  (%rdx)
    f21f:	48 8b 15 f2 46 74 00 	mov    0x7446f2(%rip),%rdx        # 753918 <tmpquadone>
    f226:	48 8b 0d 03 ea 5e 00 	mov    0x5eea03(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f22d:	48 c7 05 18 47 74 00 	movq   $0x1,0x744718(%rip)        # 753950 <cmpPassed>
    f234:	01 00 00 00 
    f238:	e8 73 42 ff ff       	callq  34b0 <_storeDataFn>
    f23d:	3d 6c 61 75 4b       	cmp    $0x4b75616c,%eax
    f242:	0f 94 c1             	sete   %cl
    f245:	0f b6 f1             	movzbl %cl,%esi
    f248:	44 0f af e6          	imul   %esi,%r12d
    f24c:	50                   	push   %rax
    f24d:	48 c7 c0 20 4e 7d 71 	mov    $0x717d4e20,%rax
    f254:	48 89 05 e5 46 74 00 	mov    %rax,0x7446e5(%rip)        # 753940 <edgeId>
    f25b:	58                   	pop    %rax
    f25c:	e8 b7 41 ff ff       	callq  3418 <_storeEdge>
    f261:	48 8b 3c 24          	mov    (%rsp),%rdi
    f265:	4e 8d 3c e7          	lea    (%rdi,%r12,8),%r15
    f269:	bf 14 01 00 00       	mov    $0x114,%edi
    f26e:	e8 1d dc ff ff       	callq  ce90 <lava_get>
    f273:	bf 14 01 00 00       	mov    $0x114,%edi
    f278:	41 89 c5             	mov    %eax,%r13d
    f27b:	e8 10 dc ff ff       	callq  ce90 <lava_get>
    f280:	48 89 15 91 46 74 00 	mov    %rdx,0x744691(%rip)        # 753918 <tmpquadone>
    f287:	48 89 0d a2 e9 5e 00 	mov    %rcx,0x5ee9a2(%rip)        # 5fdc30 <tmpquadtwo>
    f28e:	48 8d 15 5b e9 5e 00 	lea    0x5ee95b(%rip),%rdx        # 5fdbf0 <funcinptr>
    f295:	48 c7 02 65 00 00 00 	movq   $0x65,(%rdx)
    f29c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f2a3:	00 
    f2a4:	48 c7 c1 4d 75 61 6c 	mov    $0x6c61754d,%rcx
    f2ab:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f2af:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f2b6:	00 
    f2b7:	48 89 c1             	mov    %rax,%rcx
    f2ba:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f2be:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f2c5:	00 
    f2c6:	ff 32                	pushq  (%rdx)
    f2c8:	48 8b 15 49 46 74 00 	mov    0x744649(%rip),%rdx        # 753918 <tmpquadone>
    f2cf:	48 8b 0d 5a e9 5e 00 	mov    0x5ee95a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f2d6:	48 c7 05 6f 46 74 00 	movq   $0x1,0x74466f(%rip)        # 753950 <cmpPassed>
    f2dd:	01 00 00 00 
    f2e1:	e8 ca 41 ff ff       	callq  34b0 <_storeDataFn>
    f2e6:	3d 4d 75 61 6c       	cmp    $0x6c61754d,%eax
    f2eb:	0f 84 99 00 00 00    	je     f38a <base64_decode_ctx+0x6da>
    f2f1:	50                   	push   %rax
    f2f2:	48 b8 d4 17 87 89 00 	movabs $0x898717d4,%rax
    f2f9:	00 00 00 
    f2fc:	48 89 05 3d 46 74 00 	mov    %rax,0x74463d(%rip)        # 753940 <edgeId>
    f303:	58                   	pop    %rax
    f304:	e8 0f 41 ff ff       	callq  3418 <_storeEdge>
    f309:	bf 14 01 00 00       	mov    $0x114,%edi
    f30e:	e8 7d db ff ff       	callq  ce90 <lava_get>
    f313:	48 89 15 fe 45 74 00 	mov    %rdx,0x7445fe(%rip)        # 753918 <tmpquadone>
    f31a:	48 89 0d 0f e9 5e 00 	mov    %rcx,0x5ee90f(%rip)        # 5fdc30 <tmpquadtwo>
    f321:	48 8d 15 c8 e8 5e 00 	lea    0x5ee8c8(%rip),%rdx        # 5fdbf0 <funcinptr>
    f328:	48 c7 02 66 00 00 00 	movq   $0x66,(%rdx)
    f32f:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f336:	00 
    f337:	48 c7 c1 6c 61 75 4d 	mov    $0x4d75616c,%rcx
    f33e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f342:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f349:	00 
    f34a:	48 89 c1             	mov    %rax,%rcx
    f34d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f351:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f358:	00 
    f359:	ff 32                	pushq  (%rdx)
    f35b:	48 8b 15 b6 45 74 00 	mov    0x7445b6(%rip),%rdx        # 753918 <tmpquadone>
    f362:	48 8b 0d c7 e8 5e 00 	mov    0x5ee8c7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f369:	48 c7 05 dc 45 74 00 	movq   $0x1,0x7445dc(%rip)        # 753950 <cmpPassed>
    f370:	01 00 00 00 
    f374:	e8 37 41 ff ff       	callq  34b0 <_storeDataFn>
    f379:	3d 6c 61 75 4d       	cmp    $0x4d75616c,%eax
    f37e:	41 0f 94 c0          	sete   %r8b
    f382:	45 0f b6 d0          	movzbl %r8b,%r10d
    f386:	45 0f af ea          	imul   %r10d,%r13d
    f38a:	50                   	push   %rax
    f38b:	48 c7 c0 8b c3 c4 12 	mov    $0x12c4c38b,%rax
    f392:	48 89 05 a7 45 74 00 	mov    %rax,0x7445a7(%rip)        # 753940 <edgeId>
    f399:	58                   	pop    %rax
    f39a:	e8 79 40 ff ff       	callq  3418 <_storeEdge>
    f39f:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    f3a4:	bf 12 01 00 00       	mov    $0x112,%edi
    f3a9:	4b 8d 04 eb          	lea    (%r11,%r13,8),%rax
    f3ad:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    f3b2:	e8 d9 da ff ff       	callq  ce90 <lava_get>
    f3b7:	bf 12 01 00 00       	mov    $0x112,%edi
    f3bc:	41 89 c4             	mov    %eax,%r12d
    f3bf:	e8 cc da ff ff       	callq  ce90 <lava_get>
    f3c4:	48 89 15 4d 45 74 00 	mov    %rdx,0x74454d(%rip)        # 753918 <tmpquadone>
    f3cb:	48 89 0d 5e e8 5e 00 	mov    %rcx,0x5ee85e(%rip)        # 5fdc30 <tmpquadtwo>
    f3d2:	48 8d 15 17 e8 5e 00 	lea    0x5ee817(%rip),%rdx        # 5fdbf0 <funcinptr>
    f3d9:	48 c7 02 67 00 00 00 	movq   $0x67,(%rdx)
    f3e0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f3e7:	00 
    f3e8:	48 c7 c1 4f 75 61 6c 	mov    $0x6c61754f,%rcx
    f3ef:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f3f3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f3fa:	00 
    f3fb:	48 89 c1             	mov    %rax,%rcx
    f3fe:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f402:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f409:	00 
    f40a:	ff 32                	pushq  (%rdx)
    f40c:	48 8b 15 05 45 74 00 	mov    0x744505(%rip),%rdx        # 753918 <tmpquadone>
    f413:	48 8b 0d 16 e8 5e 00 	mov    0x5ee816(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f41a:	48 c7 05 2b 45 74 00 	movq   $0x1,0x74452b(%rip)        # 753950 <cmpPassed>
    f421:	01 00 00 00 
    f425:	e8 86 40 ff ff       	callq  34b0 <_storeDataFn>
    f42a:	3d 4f 75 61 6c       	cmp    $0x6c61754f,%eax
    f42f:	0f 84 98 00 00 00    	je     f4cd <base64_decode_ctx+0x81d>
    f435:	50                   	push   %rax
    f436:	48 b8 26 96 28 a3 00 	movabs $0xa3289626,%rax
    f43d:	00 00 00 
    f440:	48 89 05 f9 44 74 00 	mov    %rax,0x7444f9(%rip)        # 753940 <edgeId>
    f447:	58                   	pop    %rax
    f448:	e8 cb 3f ff ff       	callq  3418 <_storeEdge>
    f44d:	bf 12 01 00 00       	mov    $0x112,%edi
    f452:	e8 39 da ff ff       	callq  ce90 <lava_get>
    f457:	48 89 15 ba 44 74 00 	mov    %rdx,0x7444ba(%rip)        # 753918 <tmpquadone>
    f45e:	48 89 0d cb e7 5e 00 	mov    %rcx,0x5ee7cb(%rip)        # 5fdc30 <tmpquadtwo>
    f465:	48 8d 15 84 e7 5e 00 	lea    0x5ee784(%rip),%rdx        # 5fdbf0 <funcinptr>
    f46c:	48 c7 02 68 00 00 00 	movq   $0x68,(%rdx)
    f473:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f47a:	00 
    f47b:	48 c7 c1 6c 61 75 4f 	mov    $0x4f75616c,%rcx
    f482:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f486:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f48d:	00 
    f48e:	48 89 c1             	mov    %rax,%rcx
    f491:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f495:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f49c:	00 
    f49d:	ff 32                	pushq  (%rdx)
    f49f:	48 8b 15 72 44 74 00 	mov    0x744472(%rip),%rdx        # 753918 <tmpquadone>
    f4a6:	48 8b 0d 83 e7 5e 00 	mov    0x5ee783(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f4ad:	48 c7 05 98 44 74 00 	movq   $0x1,0x744498(%rip)        # 753950 <cmpPassed>
    f4b4:	01 00 00 00 
    f4b8:	e8 f3 3f ff ff       	callq  34b0 <_storeDataFn>
    f4bd:	3d 6c 61 75 4f       	cmp    $0x4f75616c,%eax
    f4c2:	0f 94 c2             	sete   %dl
    f4c5:	44 0f b6 ca          	movzbl %dl,%r9d
    f4c9:	45 0f af e1          	imul   %r9d,%r12d
    f4cd:	50                   	push   %rax
    f4ce:	48 b8 4b 94 51 ee 00 	movabs $0xee51944b,%rax
    f4d5:	00 00 00 
    f4d8:	48 89 05 61 44 74 00 	mov    %rax,0x744461(%rip)        # 753940 <edgeId>
    f4df:	58                   	pop    %rax
    f4e0:	e8 33 3f ff ff       	callq  3418 <_storeEdge>
    f4e5:	bf 0f 02 00 00       	mov    $0x20f,%edi
    f4ea:	4c 01 e5             	add    %r12,%rbp
    f4ed:	e8 9e d9 ff ff       	callq  ce90 <lava_get>
    f4f2:	bf 0f 02 00 00       	mov    $0x20f,%edi
    f4f7:	41 89 c4             	mov    %eax,%r12d
    f4fa:	e8 91 d9 ff ff       	callq  ce90 <lava_get>
    f4ff:	48 89 15 12 44 74 00 	mov    %rdx,0x744412(%rip)        # 753918 <tmpquadone>
    f506:	48 89 0d 23 e7 5e 00 	mov    %rcx,0x5ee723(%rip)        # 5fdc30 <tmpquadtwo>
    f50d:	48 8d 15 dc e6 5e 00 	lea    0x5ee6dc(%rip),%rdx        # 5fdbf0 <funcinptr>
    f514:	48 c7 02 69 00 00 00 	movq   $0x69,(%rdx)
    f51b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f522:	00 
    f523:	48 c7 c1 52 74 61 6c 	mov    $0x6c617452,%rcx
    f52a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f52e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f535:	00 
    f536:	48 89 c1             	mov    %rax,%rcx
    f539:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f53d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f544:	00 
    f545:	ff 32                	pushq  (%rdx)
    f547:	48 8b 15 ca 43 74 00 	mov    0x7443ca(%rip),%rdx        # 753918 <tmpquadone>
    f54e:	48 8b 0d db e6 5e 00 	mov    0x5ee6db(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f555:	48 c7 05 f0 43 74 00 	movq   $0x1,0x7443f0(%rip)        # 753950 <cmpPassed>
    f55c:	01 00 00 00 
    f560:	e8 4b 3f ff ff       	callq  34b0 <_storeDataFn>
    f565:	3d 52 74 61 6c       	cmp    $0x6c617452,%eax
    f56a:	0f 84 97 00 00 00    	je     f607 <base64_decode_ctx+0x957>
    f570:	50                   	push   %rax
    f571:	48 b8 19 e5 ce b3 00 	movabs $0xb3cee519,%rax
    f578:	00 00 00 
    f57b:	48 89 05 be 43 74 00 	mov    %rax,0x7443be(%rip)        # 753940 <edgeId>
    f582:	58                   	pop    %rax
    f583:	e8 90 3e ff ff       	callq  3418 <_storeEdge>
    f588:	bf 0f 02 00 00       	mov    $0x20f,%edi
    f58d:	e8 fe d8 ff ff       	callq  ce90 <lava_get>
    f592:	48 89 15 7f 43 74 00 	mov    %rdx,0x74437f(%rip)        # 753918 <tmpquadone>
    f599:	48 89 0d 90 e6 5e 00 	mov    %rcx,0x5ee690(%rip)        # 5fdc30 <tmpquadtwo>
    f5a0:	48 8d 15 49 e6 5e 00 	lea    0x5ee649(%rip),%rdx        # 5fdbf0 <funcinptr>
    f5a7:	48 c7 02 6a 00 00 00 	movq   $0x6a,(%rdx)
    f5ae:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f5b5:	00 
    f5b6:	48 c7 c1 6c 61 74 52 	mov    $0x5274616c,%rcx
    f5bd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f5c1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f5c8:	00 
    f5c9:	48 89 c1             	mov    %rax,%rcx
    f5cc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f5d0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f5d7:	00 
    f5d8:	ff 32                	pushq  (%rdx)
    f5da:	48 8b 15 37 43 74 00 	mov    0x744337(%rip),%rdx        # 753918 <tmpquadone>
    f5e1:	48 8b 0d 48 e6 5e 00 	mov    0x5ee648(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f5e8:	48 c7 05 5d 43 74 00 	movq   $0x1,0x74435d(%rip)        # 753950 <cmpPassed>
    f5ef:	01 00 00 00 
    f5f3:	e8 b8 3e ff ff       	callq  34b0 <_storeDataFn>
    f5f8:	3d 6c 61 74 52       	cmp    $0x5274616c,%eax
    f5fd:	0f 94 c1             	sete   %cl
    f600:	0f b6 f1             	movzbl %cl,%esi
    f603:	44 0f af e6          	imul   %esi,%r12d
    f607:	50                   	push   %rax
    f608:	48 b8 72 e7 59 c2 00 	movabs $0xc259e772,%rax
    f60f:	00 00 00 
    f612:	48 89 05 27 43 74 00 	mov    %rax,0x744327(%rip)        # 753940 <edgeId>
    f619:	58                   	pop    %rax
    f61a:	e8 f9 3d ff ff       	callq  3418 <_storeEdge>
    f61f:	bf 82 01 00 00       	mov    $0x182,%edi
    f624:	49 01 ec             	add    %rbp,%r12
    f627:	e8 64 d8 ff ff       	callq  ce90 <lava_get>
    f62c:	bf 82 01 00 00       	mov    $0x182,%edi
    f631:	41 89 c5             	mov    %eax,%r13d
    f634:	e8 57 d8 ff ff       	callq  ce90 <lava_get>
    f639:	48 89 15 d8 42 74 00 	mov    %rdx,0x7442d8(%rip)        # 753918 <tmpquadone>
    f640:	48 89 0d e9 e5 5e 00 	mov    %rcx,0x5ee5e9(%rip)        # 5fdc30 <tmpquadtwo>
    f647:	48 8d 15 a2 e5 5e 00 	lea    0x5ee5a2(%rip),%rdx        # 5fdbf0 <funcinptr>
    f64e:	48 c7 02 6b 00 00 00 	movq   $0x6b,(%rdx)
    f655:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f65c:	00 
    f65d:	48 c7 c1 df 74 61 6c 	mov    $0x6c6174df,%rcx
    f664:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f668:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f66f:	00 
    f670:	48 89 c1             	mov    %rax,%rcx
    f673:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f677:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f67e:	00 
    f67f:	ff 32                	pushq  (%rdx)
    f681:	48 8b 15 90 42 74 00 	mov    0x744290(%rip),%rdx        # 753918 <tmpquadone>
    f688:	48 8b 0d a1 e5 5e 00 	mov    0x5ee5a1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f68f:	48 c7 05 b6 42 74 00 	movq   $0x1,0x7442b6(%rip)        # 753950 <cmpPassed>
    f696:	01 00 00 00 
    f69a:	e8 11 3e ff ff       	callq  34b0 <_storeDataFn>
    f69f:	3d df 74 61 6c       	cmp    $0x6c6174df,%eax
    f6a4:	0f 84 96 00 00 00    	je     f740 <base64_decode_ctx+0xa90>
    f6aa:	50                   	push   %rax
    f6ab:	48 c7 c0 3c 4b f8 5a 	mov    $0x5af84b3c,%rax
    f6b2:	48 89 05 87 42 74 00 	mov    %rax,0x744287(%rip)        # 753940 <edgeId>
    f6b9:	58                   	pop    %rax
    f6ba:	e8 59 3d ff ff       	callq  3418 <_storeEdge>
    f6bf:	bf 82 01 00 00       	mov    $0x182,%edi
    f6c4:	e8 c7 d7 ff ff       	callq  ce90 <lava_get>
    f6c9:	48 89 15 48 42 74 00 	mov    %rdx,0x744248(%rip)        # 753918 <tmpquadone>
    f6d0:	48 89 0d 59 e5 5e 00 	mov    %rcx,0x5ee559(%rip)        # 5fdc30 <tmpquadtwo>
    f6d7:	48 8d 15 12 e5 5e 00 	lea    0x5ee512(%rip),%rdx        # 5fdbf0 <funcinptr>
    f6de:	48 c7 02 6c 00 00 00 	movq   $0x6c,(%rdx)
    f6e5:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f6ec:	00 
    f6ed:	48 c7 c1 6c 61 74 df 	mov    $0xffffffffdf74616c,%rcx
    f6f4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f6f8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f6ff:	00 
    f700:	48 89 c1             	mov    %rax,%rcx
    f703:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f707:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f70e:	00 
    f70f:	ff 32                	pushq  (%rdx)
    f711:	48 8b 15 00 42 74 00 	mov    0x744200(%rip),%rdx        # 753918 <tmpquadone>
    f718:	48 8b 0d 11 e5 5e 00 	mov    0x5ee511(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f71f:	48 c7 05 26 42 74 00 	movq   $0x1,0x744226(%rip)        # 753950 <cmpPassed>
    f726:	01 00 00 00 
    f72a:	e8 81 3d ff ff       	callq  34b0 <_storeDataFn>
    f72f:	3d 6c 61 74 df       	cmp    $0xdf74616c,%eax
    f734:	40 0f 94 c5          	sete   %bpl
    f738:	40 0f b6 fd          	movzbl %bpl,%edi
    f73c:	44 0f af ef          	imul   %edi,%r13d
    f740:	50                   	push   %rax
    f741:	48 b8 25 7c 2d 9a 00 	movabs $0x9a2d7c25,%rax
    f748:	00 00 00 
    f74b:	48 89 05 ee 41 74 00 	mov    %rax,0x7441ee(%rip)        # 753940 <edgeId>
    f752:	58                   	pop    %rax
    f753:	e8 c0 3c ff ff       	callq  3418 <_storeEdge>
    f758:	bf 1c 01 00 00       	mov    $0x11c,%edi
    f75d:	e8 2e d7 ff ff       	callq  ce90 <lava_get>
    f762:	bf 1c 01 00 00       	mov    $0x11c,%edi
    f767:	89 c5                	mov    %eax,%ebp
    f769:	e8 22 d7 ff ff       	callq  ce90 <lava_get>
    f76e:	48 89 15 a3 41 74 00 	mov    %rdx,0x7441a3(%rip)        # 753918 <tmpquadone>
    f775:	48 89 0d b4 e4 5e 00 	mov    %rcx,0x5ee4b4(%rip)        # 5fdc30 <tmpquadtwo>
    f77c:	48 8d 15 6d e4 5e 00 	lea    0x5ee46d(%rip),%rdx        # 5fdbf0 <funcinptr>
    f783:	48 c7 02 6d 00 00 00 	movq   $0x6d,(%rdx)
    f78a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f791:	00 
    f792:	48 c7 c1 45 75 61 6c 	mov    $0x6c617545,%rcx
    f799:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f79d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f7a4:	00 
    f7a5:	48 89 c1             	mov    %rax,%rcx
    f7a8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f7ac:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f7b3:	00 
    f7b4:	ff 32                	pushq  (%rdx)
    f7b6:	48 8b 15 5b 41 74 00 	mov    0x74415b(%rip),%rdx        # 753918 <tmpquadone>
    f7bd:	48 8b 0d 6c e4 5e 00 	mov    0x5ee46c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f7c4:	48 c7 05 81 41 74 00 	movq   $0x1,0x744181(%rip)        # 753950 <cmpPassed>
    f7cb:	01 00 00 00 
    f7cf:	e8 dc 3c ff ff       	callq  34b0 <_storeDataFn>
    f7d4:	3d 45 75 61 6c       	cmp    $0x6c617545,%eax
    f7d9:	0f 84 99 00 00 00    	je     f878 <base64_decode_ctx+0xbc8>
    f7df:	50                   	push   %rax
    f7e0:	48 b8 5f 8b 26 d0 00 	movabs $0xd0268b5f,%rax
    f7e7:	00 00 00 
    f7ea:	48 89 05 4f 41 74 00 	mov    %rax,0x74414f(%rip)        # 753940 <edgeId>
    f7f1:	58                   	pop    %rax
    f7f2:	e8 21 3c ff ff       	callq  3418 <_storeEdge>
    f7f7:	bf 1c 01 00 00       	mov    $0x11c,%edi
    f7fc:	e8 8f d6 ff ff       	callq  ce90 <lava_get>
    f801:	48 89 15 10 41 74 00 	mov    %rdx,0x744110(%rip)        # 753918 <tmpquadone>
    f808:	48 89 0d 21 e4 5e 00 	mov    %rcx,0x5ee421(%rip)        # 5fdc30 <tmpquadtwo>
    f80f:	48 8d 15 da e3 5e 00 	lea    0x5ee3da(%rip),%rdx        # 5fdbf0 <funcinptr>
    f816:	48 c7 02 6e 00 00 00 	movq   $0x6e,(%rdx)
    f81d:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    f824:	00 
    f825:	48 c7 c1 6c 61 75 45 	mov    $0x4575616c,%rcx
    f82c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f830:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f837:	00 
    f838:	48 89 c1             	mov    %rax,%rcx
    f83b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f83f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f846:	00 
    f847:	ff 32                	pushq  (%rdx)
    f849:	48 8b 15 c8 40 74 00 	mov    0x7440c8(%rip),%rdx        # 753918 <tmpquadone>
    f850:	48 8b 0d d9 e3 5e 00 	mov    0x5ee3d9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f857:	48 c7 05 ee 40 74 00 	movq   $0x1,0x7440ee(%rip)        # 753950 <cmpPassed>
    f85e:	01 00 00 00 
    f862:	e8 49 3c ff ff       	callq  34b0 <_storeDataFn>
    f867:	3d 6c 61 75 45       	cmp    $0x4575616c,%eax
    f86c:	41 0f 94 c0          	sete   %r8b
    f870:	45 0f b6 d0          	movzbl %r8b,%r10d
    f874:	41 0f af ea          	imul   %r10d,%ebp
    f878:	50                   	push   %rax
    f879:	48 c7 c0 45 13 68 7d 	mov    $0x7d681345,%rax
    f880:	48 89 05 b9 40 74 00 	mov    %rax,0x7440b9(%rip)        # 753940 <edgeId>
    f887:	58                   	pop    %rax
    f888:	e8 8b 3b ff ff       	callq  3418 <_storeEdge>
    f88d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    f892:	89 ef                	mov    %ebp,%edi
    f894:	4c 89 f9             	mov    %r15,%rcx
    f897:	4c 01 ef             	add    %r13,%rdi
    f89a:	4c 89 e6             	mov    %r12,%rsi
    f89d:	48 01 df             	add    %rbx,%rdi
    f8a0:	e8 3b dd ff ff       	callq  d5e0 <decode_4>
lava_521 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_521 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_521 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_521 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(521,lava_521);
    f8a5:	8b 33                	mov    (%rbx),%esi
    f8a7:	bf 09 02 00 00       	mov    $0x209,%edi
        }_Bool kbcieiubweuhc468703135 = decode_4 (non_nl+(lava_get(386))*(0x6c6174df==(lava_get(386))||0xdf74616c==(lava_get(386)))+(lava_get(284))*(0x6c617545==(lava_get(284))||0x4575616c==(lava_get(284))), inlen+(lava_get(274))*(0x6c61754f==(lava_get(274))||0x4f75616c==(lava_get(274)))+(lava_get(527))*(0x6c617452==(lava_get(527))||0x5274616c==(lava_get(527))), &out+(lava_get(276))*(0x6c61754d==(lava_get(276))||0x4d75616c==(lava_get(276))), &outleft+(lava_get(278))*(0x6c61754b==(lava_get(278))||0x4b75616c==(lava_get(278))));if (((non_nl)) && ((non_nl)))  {int lava_521 = 0;
    f8ac:	41 89 c7             	mov    %eax,%r15d
lava_521 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_521 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_521 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_521 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(521,lava_521);
    f8af:	e8 cc d5 ff ff       	callq  ce80 <lava_set>
int lava_806 = 0;
lava_806 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_806 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_806 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_806 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(806,lava_806);
    f8b4:	8b 33                	mov    (%rbx),%esi
    f8b6:	bf 26 03 00 00       	mov    $0x326,%edi
    f8bb:	e8 c0 d5 ff ff       	callq  ce80 <lava_set>
int lava_584 = 0;
lava_584 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_584 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_584 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_584 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(584,lava_584);
    f8c0:	8b 33                	mov    (%rbx),%esi
    f8c2:	bf 48 02 00 00       	mov    $0x248,%edi
    f8c7:	e8 b4 d5 ff ff       	callq  ce80 <lava_set>
int lava_843 = 0;
lava_843 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_843 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_843 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_843 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(843,lava_843);
    f8cc:	8b 33                	mov    (%rbx),%esi
    f8ce:	bf 4b 03 00 00       	mov    $0x34b,%edi
    f8d3:	e8 a8 d5 ff ff       	callq  ce80 <lava_set>
        if (!({if (((non_nl)) && ((non_nl)))  {int lava_805 = 0;
    f8d8:	45 84 ff             	test   %r15b,%r15b
    f8db:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
    f8e0:	0f 84 42 25 00 00    	je     11e28 <base64_decode_ctx+0x3178>
    f8e6:	50                   	push   %rax
    f8e7:	48 c7 c0 34 ce 73 29 	mov    $0x2973ce34,%rax
    f8ee:	48 89 05 4b 40 74 00 	mov    %rax,0x74404b(%rip)        # 753940 <edgeId>
    f8f5:	58                   	pop    %rax
    f8f6:	e8 1d 3b ff ff       	callq  3418 <_storeEdge>
}kbcieiubweuhc468703135;}))
          break;

        inlen = in_end - in;
    f8fb:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    f900:	4d 89 e3             	mov    %r12,%r11
    f903:	4c 29 f5             	sub    %r14,%rbp
      if (ctx_i == 0 && !flush_ctx)
    f906:	48 89 15 0b 40 74 00 	mov    %rdx,0x74400b(%rip)        # 753918 <tmpquadone>
    f90d:	48 89 0d 1c e3 5e 00 	mov    %rcx,0x5ee31c(%rip)        # 5fdc30 <tmpquadtwo>
    f914:	48 8d 15 d5 e2 5e 00 	lea    0x5ee2d5(%rip),%rdx        # 5fdbf0 <funcinptr>
    f91b:	48 c7 02 6f 00 00 00 	movq   $0x6f,(%rdx)
    f922:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
    f929:	00 
    f92a:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    f931:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    f935:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    f93c:	00 
    f93d:	48 8b 4c 24 36       	mov    0x36(%rsp),%rcx
    f942:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    f946:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    f94d:	00 
    f94e:	ff 32                	pushq  (%rdx)
    f950:	48 8b 15 c1 3f 74 00 	mov    0x743fc1(%rip),%rdx        # 753918 <tmpquadone>
    f957:	48 8b 0d d2 e2 5e 00 	mov    0x5ee2d2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    f95e:	48 c7 05 e7 3f 74 00 	movq   $0x1,0x743fe7(%rip)        # 753950 <cmpPassed>
    f965:	01 00 00 00 
    f969:	e8 42 3b ff ff       	callq  34b0 <_storeDataFn>
    f96e:	80 7c 24 36 00       	cmpb   $0x0,0x36(%rsp)
    f973:	0f 84 8f f4 ff ff    	je     ee08 <base64_decode_ctx+0x158>
    f979:	50                   	push   %rax
    f97a:	48 c7 c0 79 2e 45 7f 	mov    $0x7f452e79,%rax
    f981:	48 89 05 b8 3f 74 00 	mov    %rax,0x743fb8(%rip)        # 753940 <edgeId>
    f988:	58                   	pop    %rax
    f989:	e8 8a 3a ff ff       	callq  3418 <_storeEdge>
    f98e:	50                   	push   %rax
    f98f:	48 c7 c0 9e 4b d1 5f 	mov    $0x5fd14b9e,%rax
    f996:	48 89 05 a3 3f 74 00 	mov    %rax,0x743fa3(%rip)        # 753940 <edgeId>
    f99d:	58                   	pop    %rax
    f99e:	e8 75 3a ff ff       	callq  3418 <_storeEdge>
    f9a3:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
    f9a8:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
    f9ad:	eb 7a                	jmp    fa29 <base64_decode_ctx+0xd79>
    f9af:	90                   	nop
    f9b0:	50                   	push   %rax
    f9b1:	48 c7 c0 97 a2 bf 12 	mov    $0x12bfa297,%rax
    f9b8:	48 89 05 81 3f 74 00 	mov    %rax,0x743f81(%rip)        # 753940 <edgeId>
    f9bf:	58                   	pop    %rax
    f9c0:	e8 53 3a ff ff       	callq  3418 <_storeEdge>
lava_573 |= ((unsigned char *) (in))[0] << (0*8);lava_573 |= ((unsigned char *) (in))[1] << (1*8);lava_573 |= ((unsigned char *) (in))[2] << (2*8);lava_573 |= ((unsigned char *) (in))[3] << (3*8);lava_set(573,lava_573);
    f9c5:	8b 33                	mov    (%rbx),%esi
    f9c7:	bf 3d 02 00 00       	mov    $0x23d,%edi
    f9cc:	48 83 c3 04          	add    $0x4,%rbx
    f9d0:	e8 ab d4 ff ff       	callq  ce80 <lava_set>
lava_832 |= ((unsigned char *) (in))[0] << (0*8);lava_832 |= ((unsigned char *) (in))[1] << (1*8);lava_832 |= ((unsigned char *) (in))[2] << (2*8);lava_832 |= ((unsigned char *) (in))[3] << (3*8);lava_set(832,lava_832);
    f9d5:	8b 73 fc             	mov    -0x4(%rbx),%esi
    f9d8:	bf 40 03 00 00       	mov    $0x340,%edi
    f9dd:	e8 9e d4 ff ff       	callq  ce80 <lava_set>
              if (!({if (((in)) && ((in)))  {int lava_1 = 0;
    f9e2:	45 84 f6             	test   %r14b,%r14b
    f9e5:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
    f9ea:	0f 84 18 f4 ff ff    	je     ee08 <base64_decode_ctx+0x158>
    f9f0:	50                   	push   %rax
    f9f1:	48 b8 2b a1 89 d9 00 	movabs $0xd989a12b,%rax
    f9f8:	00 00 00 
    f9fb:	48 89 05 3e 3f 74 00 	mov    %rax,0x743f3e(%rip)        # 753940 <edgeId>
    fa02:	58                   	pop    %rax
    fa03:	e8 10 3a ff ff       	callq  3418 <_storeEdge>
    fa08:	50                   	push   %rax
    fa09:	48 c7 c0 95 d0 c4 6c 	mov    $0x6cc4d095,%rax
    fa10:	48 89 05 29 3f 74 00 	mov    %rax,0x743f29(%rip)        # 753940 <edgeId>
    fa17:	58                   	pop    %rax
    fa18:	e8 fb 39 ff ff       	callq  3418 <_storeEdge>
              in += 4;
    fa1d:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
              inlen -= 4;
    fa22:	48 83 ed 04          	sub    $0x4,%rbp
              outleft_save = outleft;
    fa26:	4d 89 dc             	mov    %r11,%r12
    fa29:	50                   	push   %rax
    fa2a:	48 c7 c0 68 62 36 44 	mov    $0x44366268,%rax
    fa31:	48 89 05 08 3f 74 00 	mov    %rax,0x743f08(%rip)        # 753940 <edgeId>
    fa38:	58                   	pop    %rax
    fa39:	e8 da 39 ff ff       	callq  3418 <_storeEdge>
              if (!({if (((in)) && ((in)))  {int lava_1 = 0;
    fa3e:	48 85 db             	test   %rbx,%rbx
    fa41:	74 39                	je     fa7c <base64_decode_ctx+0xdcc>
    fa43:	50                   	push   %rax
    fa44:	48 c7 c0 26 66 43 04 	mov    $0x4436626,%rax
    fa4b:	48 89 05 ee 3e 74 00 	mov    %rax,0x743eee(%rip)        # 753940 <edgeId>
    fa52:	58                   	pop    %rax
    fa53:	e8 c0 39 ff ff       	callq  3418 <_storeEdge>
              lava_1 |= ((unsigned char *) (in))[0] << (0*8);lava_1 |= ((unsigned char *) (in))[1] << (1*8);lava_1 |= ((unsigned char *) (in))[2] << (2*8);lava_1 |= ((unsigned char *) (in))[3] << (3*8);lava_set(1,lava_1);
    fa58:	8b 33                	mov    (%rbx),%esi
    fa5a:	bf 01 00 00 00       	mov    $0x1,%edi
    fa5f:	e8 1c d4 ff ff       	callq  ce80 <lava_set>
              lava_572 |= ((unsigned char *) (in))[0] << (0*8);lava_572 |= ((unsigned char *) (in))[1] << (1*8);lava_572 |= ((unsigned char *) (in))[2] << (2*8);lava_572 |= ((unsigned char *) (in))[3] << (3*8);lava_set(572,lava_572);
    fa64:	8b 33                	mov    (%rbx),%esi
    fa66:	bf 3c 02 00 00       	mov    $0x23c,%edi
    fa6b:	e8 10 d4 ff ff       	callq  ce80 <lava_set>
              lava_831 |= ((unsigned char *) (in))[0] << (0*8);lava_831 |= ((unsigned char *) (in))[1] << (1*8);lava_831 |= ((unsigned char *) (in))[2] << (2*8);lava_831 |= ((unsigned char *) (in))[3] << (3*8);lava_set(831,lava_831);
    fa70:	8b 33                	mov    (%rbx),%esi
    fa72:	bf 3f 03 00 00       	mov    $0x33f,%edi
    fa77:	e8 04 d4 ff ff       	callq  ce80 <lava_set>
    fa7c:	50                   	push   %rax
    fa7d:	48 c7 c0 10 41 0f 33 	mov    $0x330f4110,%rax
    fa84:	48 89 05 b5 3e 74 00 	mov    %rax,0x743eb5(%rip)        # 753940 <edgeId>
    fa8b:	58                   	pop    %rax
    fa8c:	e8 87 39 ff ff       	callq  3418 <_storeEdge>
              }_Bool kbcieiubweuhc233665123 = decode_4 (in+(lava_get(1))*(0x6c617660==(lava_get(1))||0x6076616c==(lava_get(1))), inlen+(lava_get(521))*(0x6c617458==(lava_get(521))||0x5874616c==(lava_get(521))), &out, &outleft);if (((in)) && ((in)))  {int lava_573 = 0;
    fa91:	bf 09 02 00 00       	mov    $0x209,%edi
    fa96:	e8 f5 d3 ff ff       	callq  ce90 <lava_get>
    fa9b:	bf 09 02 00 00       	mov    $0x209,%edi
    faa0:	41 89 c6             	mov    %eax,%r14d
    faa3:	e8 e8 d3 ff ff       	callq  ce90 <lava_get>
    faa8:	48 89 15 69 3e 74 00 	mov    %rdx,0x743e69(%rip)        # 753918 <tmpquadone>
    faaf:	48 89 0d 7a e1 5e 00 	mov    %rcx,0x5ee17a(%rip)        # 5fdc30 <tmpquadtwo>
    fab6:	48 8d 15 33 e1 5e 00 	lea    0x5ee133(%rip),%rdx        # 5fdbf0 <funcinptr>
    fabd:	48 c7 02 70 00 00 00 	movq   $0x70,(%rdx)
    fac4:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    facb:	00 
    facc:	48 c7 c1 58 74 61 6c 	mov    $0x6c617458,%rcx
    fad3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    fad7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    fade:	00 
    fadf:	48 89 c1             	mov    %rax,%rcx
    fae2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    fae6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    faed:	00 
    faee:	ff 32                	pushq  (%rdx)
    faf0:	48 8b 15 21 3e 74 00 	mov    0x743e21(%rip),%rdx        # 753918 <tmpquadone>
    faf7:	48 8b 0d 32 e1 5e 00 	mov    0x5ee132(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    fafe:	48 c7 05 47 3e 74 00 	movq   $0x1,0x743e47(%rip)        # 753950 <cmpPassed>
    fb05:	01 00 00 00 
    fb09:	e8 a2 39 ff ff       	callq  34b0 <_storeDataFn>
    fb0e:	3d 58 74 61 6c       	cmp    $0x6c617458,%eax
    fb13:	0f 84 96 00 00 00    	je     fbaf <base64_decode_ctx+0xeff>
    fb19:	50                   	push   %rax
    fb1a:	48 c7 c0 e8 61 e6 64 	mov    $0x64e661e8,%rax
    fb21:	48 89 05 18 3e 74 00 	mov    %rax,0x743e18(%rip)        # 753940 <edgeId>
    fb28:	58                   	pop    %rax
    fb29:	e8 ea 38 ff ff       	callq  3418 <_storeEdge>
    fb2e:	bf 09 02 00 00       	mov    $0x209,%edi
    fb33:	e8 58 d3 ff ff       	callq  ce90 <lava_get>
    fb38:	48 89 15 d9 3d 74 00 	mov    %rdx,0x743dd9(%rip)        # 753918 <tmpquadone>
    fb3f:	48 89 0d ea e0 5e 00 	mov    %rcx,0x5ee0ea(%rip)        # 5fdc30 <tmpquadtwo>
    fb46:	48 8d 15 a3 e0 5e 00 	lea    0x5ee0a3(%rip),%rdx        # 5fdbf0 <funcinptr>
    fb4d:	48 c7 02 71 00 00 00 	movq   $0x71,(%rdx)
    fb54:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    fb5b:	00 
    fb5c:	48 c7 c1 6c 61 74 58 	mov    $0x5874616c,%rcx
    fb63:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    fb67:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    fb6e:	00 
    fb6f:	48 89 c1             	mov    %rax,%rcx
    fb72:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    fb76:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    fb7d:	00 
    fb7e:	ff 32                	pushq  (%rdx)
    fb80:	48 8b 15 91 3d 74 00 	mov    0x743d91(%rip),%rdx        # 753918 <tmpquadone>
    fb87:	48 8b 0d a2 e0 5e 00 	mov    0x5ee0a2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    fb8e:	48 c7 05 b7 3d 74 00 	movq   $0x1,0x743db7(%rip)        # 753950 <cmpPassed>
    fb95:	01 00 00 00 
    fb99:	e8 12 39 ff ff       	callq  34b0 <_storeDataFn>
    fb9e:	3d 6c 61 74 58       	cmp    $0x5874616c,%eax
    fba3:	41 0f 94 c1          	sete   %r9b
    fba7:	45 0f b6 d1          	movzbl %r9b,%r10d
    fbab:	45 0f af f2          	imul   %r10d,%r14d
    fbaf:	50                   	push   %rax
    fbb0:	48 b8 30 73 32 91 00 	movabs $0x91327330,%rax
    fbb7:	00 00 00 
    fbba:	48 89 05 7f 3d 74 00 	mov    %rax,0x743d7f(%rip)        # 753940 <edgeId>
    fbc1:	58                   	pop    %rax
    fbc2:	e8 51 38 ff ff       	callq  3418 <_storeEdge>
    fbc7:	bf 01 00 00 00       	mov    $0x1,%edi
    fbcc:	49 01 ee             	add    %rbp,%r14
    fbcf:	e8 bc d2 ff ff       	callq  ce90 <lava_get>
    fbd4:	bf 01 00 00 00       	mov    $0x1,%edi
    fbd9:	41 89 c5             	mov    %eax,%r13d
    fbdc:	e8 af d2 ff ff       	callq  ce90 <lava_get>
    fbe1:	48 89 15 30 3d 74 00 	mov    %rdx,0x743d30(%rip)        # 753918 <tmpquadone>
    fbe8:	48 89 0d 41 e0 5e 00 	mov    %rcx,0x5ee041(%rip)        # 5fdc30 <tmpquadtwo>
    fbef:	48 8d 15 fa df 5e 00 	lea    0x5edffa(%rip),%rdx        # 5fdbf0 <funcinptr>
    fbf6:	48 c7 02 72 00 00 00 	movq   $0x72,(%rdx)
    fbfd:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    fc04:	00 
    fc05:	48 c7 c1 60 76 61 6c 	mov    $0x6c617660,%rcx
    fc0c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    fc10:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    fc17:	00 
    fc18:	48 89 c1             	mov    %rax,%rcx
    fc1b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    fc1f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    fc26:	00 
    fc27:	ff 32                	pushq  (%rdx)
    fc29:	48 8b 15 e8 3c 74 00 	mov    0x743ce8(%rip),%rdx        # 753918 <tmpquadone>
    fc30:	48 8b 0d f9 df 5e 00 	mov    0x5edff9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    fc37:	48 c7 05 0e 3d 74 00 	movq   $0x1,0x743d0e(%rip)        # 753950 <cmpPassed>
    fc3e:	01 00 00 00 
    fc42:	e8 69 38 ff ff       	callq  34b0 <_storeDataFn>
    fc47:	3d 60 76 61 6c       	cmp    $0x6c617660,%eax
    fc4c:	0f 84 99 00 00 00    	je     fceb <base64_decode_ctx+0x103b>
    fc52:	50                   	push   %rax
    fc53:	48 b8 4e 26 72 a7 00 	movabs $0xa772264e,%rax
    fc5a:	00 00 00 
    fc5d:	48 89 05 dc 3c 74 00 	mov    %rax,0x743cdc(%rip)        # 753940 <edgeId>
    fc64:	58                   	pop    %rax
    fc65:	e8 ae 37 ff ff       	callq  3418 <_storeEdge>
    fc6a:	bf 01 00 00 00       	mov    $0x1,%edi
    fc6f:	e8 1c d2 ff ff       	callq  ce90 <lava_get>
    fc74:	48 89 15 9d 3c 74 00 	mov    %rdx,0x743c9d(%rip)        # 753918 <tmpquadone>
    fc7b:	48 89 0d ae df 5e 00 	mov    %rcx,0x5edfae(%rip)        # 5fdc30 <tmpquadtwo>
    fc82:	48 8d 15 67 df 5e 00 	lea    0x5edf67(%rip),%rdx        # 5fdbf0 <funcinptr>
    fc89:	48 c7 02 73 00 00 00 	movq   $0x73,(%rdx)
    fc90:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    fc97:	00 
    fc98:	48 c7 c1 6c 61 76 60 	mov    $0x6076616c,%rcx
    fc9f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    fca3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    fcaa:	00 
    fcab:	48 89 c1             	mov    %rax,%rcx
    fcae:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    fcb2:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    fcb9:	00 
    fcba:	ff 32                	pushq  (%rdx)
    fcbc:	48 8b 15 55 3c 74 00 	mov    0x743c55(%rip),%rdx        # 753918 <tmpquadone>
    fcc3:	48 8b 0d 66 df 5e 00 	mov    0x5edf66(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    fcca:	48 c7 05 7b 3c 74 00 	movq   $0x1,0x743c7b(%rip)        # 753950 <cmpPassed>
    fcd1:	01 00 00 00 
    fcd5:	e8 d6 37 ff ff       	callq  34b0 <_storeDataFn>
    fcda:	3d 6c 61 76 60       	cmp    $0x6076616c,%eax
    fcdf:	41 0f 94 c3          	sete   %r11b
    fce3:	41 0f b6 c3          	movzbl %r11b,%eax
    fce7:	44 0f af e8          	imul   %eax,%r13d
    fceb:	50                   	push   %rax
    fcec:	48 b8 13 b9 d3 e1 00 	movabs $0xe1d3b913,%rax
    fcf3:	00 00 00 
    fcf6:	48 89 05 43 3c 74 00 	mov    %rax,0x743c43(%rip)        # 753940 <edgeId>
    fcfd:	58                   	pop    %rax
    fcfe:	e8 15 37 ff ff       	callq  3418 <_storeEdge>
    fd03:	48 8b 0c 24          	mov    (%rsp),%rcx
    fd07:	44 89 ef             	mov    %r13d,%edi
    fd0a:	4c 89 f6             	mov    %r14,%rsi
    fd0d:	48 01 df             	add    %rbx,%rdi
    fd10:	4c 89 fa             	mov    %r15,%rdx
    fd13:	e8 c8 d8 ff ff       	callq  d5e0 <decode_4>
    fd18:	48 85 db             	test   %rbx,%rbx
    fd1b:	41 89 c6             	mov    %eax,%r14d
    fd1e:	0f 85 8c fc ff ff    	jne    f9b0 <base64_decode_ctx+0xd00>
    fd24:	50                   	push   %rax
    fd25:	48 b8 3b 1d de 8c 00 	movabs $0x8cde1d3b,%rax
    fd2c:	00 00 00 
    fd2f:	48 89 05 0a 3c 74 00 	mov    %rax,0x743c0a(%rip)        # 753940 <edgeId>
    fd36:	58                   	pop    %rax
    fd37:	e8 dc 36 ff ff       	callq  3418 <_storeEdge>
              if (!({if (((in)) && ((in)))  {int lava_1 = 0;
    fd3c:	84 c0                	test   %al,%al
    fd3e:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
    fd43:	bb 04 00 00 00       	mov    $0x4,%ebx
    fd48:	0f 85 ba fc ff ff    	jne    fa08 <base64_decode_ctx+0xd58>
    fd4e:	50                   	push   %rax
    fd4f:	48 b8 74 78 33 ca 00 	movabs $0xca337874,%rax
    fd56:	00 00 00 
    fd59:	48 89 05 e0 3b 74 00 	mov    %rax,0x743be0(%rip)        # 753940 <edgeId>
    fd60:	58                   	pop    %rax
    fd61:	e8 b2 36 ff ff       	callq  3418 <_storeEdge>
      if (inlen == 0 && !flush_ctx)
    fd66:	48 85 ed             	test   %rbp,%rbp
    fd69:	41 0f 94 c7          	sete   %r15b
    fd6d:	44 22 7c 24 35       	and    0x35(%rsp),%r15b
    fd72:	0f 84 d2 f0 ff ff    	je     ee4a <base64_decode_ctx+0x19a>
    fd78:	50                   	push   %rax
    fd79:	48 b8 e1 cd 28 a3 00 	movabs $0xa328cde1,%rax
    fd80:	00 00 00 
    fd83:	48 89 05 b6 3b 74 00 	mov    %rax,0x743bb6(%rip)        # 753940 <edgeId>
    fd8a:	58                   	pop    %rax
    fd8b:	e8 88 36 ff ff       	callq  3418 <_storeEdge>
    fd90:	50                   	push   %rax
    fd91:	48 c7 c0 de 8c 32 6a 	mov    $0x6a328cde,%rax
    fd98:	48 89 05 a1 3b 74 00 	mov    %rax,0x743ba1(%rip)        # 753940 <edgeId>
    fd9f:	58                   	pop    %rax
    fda0:	e8 73 36 ff ff       	callq  3418 <_storeEdge>
      }
    }

  *outlen -= outleft;
    fda5:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx

  return inlen == 0;
}
    fdaa:	44 89 f8             	mov    %r15d,%eax
  *outlen -= outleft;
    fdad:	4c 29 1b             	sub    %r11,(%rbx)
}
    fdb0:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
    fdb5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    fdbc:	00 00 
    fdbe:	0f 85 84 20 00 00    	jne    11e48 <base64_decode_ctx+0x3198>
    fdc4:	50                   	push   %rax
    fdc5:	48 b8 51 46 ed e2 00 	movabs $0xe2ed4651,%rax
    fdcc:	00 00 00 
    fdcf:	48 89 05 6a 3b 74 00 	mov    %rax,0x743b6a(%rip)        # 753940 <edgeId>
    fdd6:	58                   	pop    %rax
    fdd7:	e8 3c 36 ff ff       	callq  3418 <_storeEdge>
    fddc:	48 83 c4 68          	add    $0x68,%rsp
    fde0:	5b                   	pop    %rbx
    fde1:	5d                   	pop    %rbp
    fde2:	41 5c                	pop    %r12
    fde4:	41 5d                	pop    %r13
    fde6:	41 5e                	pop    %r14
    fde8:	41 5f                	pop    %r15
    fdea:	c3                   	retq   
    fdeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fdf0:	50                   	push   %rax
    fdf1:	48 c7 c0 2e 8e 4b 0f 	mov    $0xf4b8e2e,%rax
    fdf8:	48 89 05 41 3b 74 00 	mov    %rax,0x743b41(%rip)        # 753940 <edgeId>
    fdff:	58                   	pop    %rax
    fe00:	e8 13 36 ff ff       	callq  3418 <_storeEdge>
      out -= outleft_save - outleft;
    fe05:	4d 29 e3             	sub    %r12,%r11
    fe08:	4c 01 5c 24 40       	add    %r11,0x40(%rsp)
        if (ignore_newlines)
    fe0d:	48 89 15 04 3b 74 00 	mov    %rdx,0x743b04(%rip)        # 753918 <tmpquadone>
    fe14:	48 89 0d 15 de 5e 00 	mov    %rcx,0x5ede15(%rip)        # 5fdc30 <tmpquadtwo>
    fe1b:	48 8d 15 ce dd 5e 00 	lea    0x5eddce(%rip),%rdx        # 5fdbf0 <funcinptr>
    fe22:	48 c7 02 74 00 00 00 	movq   $0x74,(%rdx)
    fe29:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
    fe30:	00 
    fe31:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
    fe38:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    fe3c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    fe43:	00 
    fe44:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    fe49:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    fe4d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    fe54:	00 
    fe55:	ff 32                	pushq  (%rdx)
    fe57:	48 8b 15 ba 3a 74 00 	mov    0x743aba(%rip),%rdx        # 753918 <tmpquadone>
    fe5e:	48 8b 0d cb dd 5e 00 	mov    0x5eddcb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    fe65:	48 c7 05 e0 3a 74 00 	movq   $0x1,0x743ae0(%rip)        # 753950 <cmpPassed>
    fe6c:	01 00 00 00 
    fe70:	e8 3b 36 ff ff       	callq  34b0 <_storeDataFn>
    fe75:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
      outleft = outleft_save;
    fe7b:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
        if (ignore_newlines)
    fe80:	0f 84 7a 1f 00 00    	je     11e00 <base64_decode_ctx+0x3150>
    fe86:	50                   	push   %rax
    fe87:	48 c7 c0 97 1e 58 11 	mov    $0x11581e97,%rax
    fe8e:	48 89 05 ab 3a 74 00 	mov    %rax,0x743aab(%rip)        # 753940 <edgeId>
    fe95:	58                   	pop    %rax
    fe96:	e8 7d 35 ff ff       	callq  3418 <_storeEdge>
          non_nl = ({if (((in)) && ((in)))  {int lava_798 = 0;
    fe9b:	48 85 db             	test   %rbx,%rbx
        char const *in_end = in + inlen;
    fe9e:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
          non_nl = ({if (((in)) && ((in)))  {int lava_798 = 0;
    fea3:	0f 84 bf 1d 00 00    	je     11c68 <base64_decode_ctx+0x2fb8>
    fea9:	50                   	push   %rax
    feaa:	48 b8 0f ac 88 f7 00 	movabs $0xf788ac0f,%rax
    feb1:	00 00 00 
    feb4:	48 89 05 85 3a 74 00 	mov    %rax,0x743a85(%rip)        # 753940 <edgeId>
    febb:	58                   	pop    %rax
    febc:	e8 57 35 ff ff       	callq  3418 <_storeEdge>
    fec1:	50                   	push   %rax
    fec2:	48 c7 c0 03 2b e2 7d 	mov    $0x7de22b03,%rax
    fec9:	48 89 05 70 3a 74 00 	mov    %rax,0x743a70(%rip)        # 753940 <edgeId>
    fed0:	58                   	pop    %rax
    fed1:	e8 42 35 ff ff       	callq  3418 <_storeEdge>
          lava_798 |= ((unsigned char *) (in))[0] << (0*8);lava_798 |= ((unsigned char *) (in))[1] << (1*8);lava_798 |= ((unsigned char *) (in))[2] << (2*8);lava_798 |= ((unsigned char *) (in))[3] << (3*8);lava_set(798,lava_798);
    fed6:	8b 33                	mov    (%rbx),%esi
    fed8:	bf 1e 03 00 00       	mov    $0x31e,%edi
    fedd:	e8 9e cf ff ff       	callq  ce80 <lava_set>
          lava_576 |= ((unsigned char *) (in))[0] << (0*8);lava_576 |= ((unsigned char *) (in))[1] << (1*8);lava_576 |= ((unsigned char *) (in))[2] << (2*8);lava_576 |= ((unsigned char *) (in))[3] << (3*8);lava_set(576,lava_576);
    fee2:	8b 33                	mov    (%rbx),%esi
    fee4:	bf 40 02 00 00       	mov    $0x240,%edi
    fee9:	e8 92 cf ff ff       	callq  ce80 <lava_set>
          lava_835 |= ((unsigned char *) (in))[0] << (0*8);lava_835 |= ((unsigned char *) (in))[1] << (1*8);lava_835 |= ((unsigned char *) (in))[2] << (2*8);lava_835 |= ((unsigned char *) (in))[3] << (3*8);lava_set(835,lava_835);
    feee:	8b 33                	mov    (%rbx),%esi
    fef0:	bf 43 03 00 00       	mov    $0x343,%edi
    fef5:	e8 86 cf ff ff       	callq  ce80 <lava_set>
          }if (((in_end)) && ((in_end)))  {int lava_526 = 0;
    fefa:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    feff:	48 85 ed             	test   %rbp,%rbp
    ff02:	74 2f                	je     ff33 <base64_decode_ctx+0x1283>
    ff04:	50                   	push   %rax
    ff05:	48 c7 c0 f7 45 29 2e 	mov    $0x2e2945f7,%rax
    ff0c:	48 89 05 2d 3a 74 00 	mov    %rax,0x743a2d(%rip)        # 753940 <edgeId>
    ff13:	58                   	pop    %rax
    ff14:	e8 ff 34 ff ff       	callq  3418 <_storeEdge>
          lava_526 |= ((unsigned char *) (in_end))[0] << (0*8);lava_526 |= ((unsigned char *) (in_end))[1] << (1*8);lava_526 |= ((unsigned char *) (in_end))[2] << (2*8);lava_526 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(526,lava_526);
    ff19:	8b 75 00             	mov    0x0(%rbp),%esi
    ff1c:	bf 0e 02 00 00       	mov    $0x20e,%edi
    ff21:	e8 5a cf ff ff       	callq  ce80 <lava_set>
          lava_527 |= ((unsigned char *) (in_end))[0] << (0*8);lava_527 |= ((unsigned char *) (in_end))[1] << (1*8);lava_527 |= ((unsigned char *) (in_end))[2] << (2*8);lava_527 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(527,lava_527);
    ff26:	8b 75 00             	mov    0x0(%rbp),%esi
    ff29:	bf 0f 02 00 00       	mov    $0x20f,%edi
    ff2e:	e8 4d cf ff ff       	callq  ce80 <lava_set>
    ff33:	50                   	push   %rax
    ff34:	48 b8 4a 71 79 91 00 	movabs $0x9179714a,%rax
    ff3b:	00 00 00 
    ff3e:	48 89 05 fb 39 74 00 	mov    %rax,0x7439fb(%rip)        # 753940 <edgeId>
    ff45:	58                   	pop    %rax
    ff46:	e8 cd 34 ff ff       	callq  3418 <_storeEdge>
          }char * kbcieiubweuhc2145174067 = get_4 (ctx+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))), &in+(lava_get(235))*(0x6c617576==(lava_get(235))||0x7675616c==(lava_get(235))), in_end+(lava_get(526))*(0x6c617453==(lava_get(526))||0x5374616c==(lava_get(526))), &inlen);if (((in)) && ((in)))  {int lava_284 = 0;
    ff4b:	bf 0e 02 00 00       	mov    $0x20e,%edi
    ff50:	e8 3b cf ff ff       	callq  ce90 <lava_get>
    ff55:	bf 0e 02 00 00       	mov    $0x20e,%edi
    ff5a:	41 89 c5             	mov    %eax,%r13d
    ff5d:	e8 2e cf ff ff       	callq  ce90 <lava_get>
    ff62:	48 89 15 af 39 74 00 	mov    %rdx,0x7439af(%rip)        # 753918 <tmpquadone>
    ff69:	48 89 0d c0 dc 5e 00 	mov    %rcx,0x5edcc0(%rip)        # 5fdc30 <tmpquadtwo>
    ff70:	48 8d 15 79 dc 5e 00 	lea    0x5edc79(%rip),%rdx        # 5fdbf0 <funcinptr>
    ff77:	48 c7 02 75 00 00 00 	movq   $0x75,(%rdx)
    ff7e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
    ff85:	00 
    ff86:	48 c7 c1 53 74 61 6c 	mov    $0x6c617453,%rcx
    ff8d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
    ff91:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
    ff98:	00 
    ff99:	48 89 c1             	mov    %rax,%rcx
    ff9c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    ffa0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
    ffa7:	00 
    ffa8:	ff 32                	pushq  (%rdx)
    ffaa:	48 8b 15 67 39 74 00 	mov    0x743967(%rip),%rdx        # 753918 <tmpquadone>
    ffb1:	48 8b 0d 78 dc 5e 00 	mov    0x5edc78(%rip),%rcx        # 5fdc30 <tmpquadtwo>
    ffb8:	48 c7 05 8d 39 74 00 	movq   $0x1,0x74398d(%rip)        # 753950 <cmpPassed>
    ffbf:	01 00 00 00 
    ffc3:	e8 e8 34 ff ff       	callq  34b0 <_storeDataFn>
    ffc8:	3d 53 74 61 6c       	cmp    $0x6c617453,%eax
    ffcd:	0f 84 99 00 00 00    	je     1006c <base64_decode_ctx+0x13bc>
    ffd3:	50                   	push   %rax
    ffd4:	48 b8 2e 2f 92 9f 00 	movabs $0x9f922f2e,%rax
    ffdb:	00 00 00 
    ffde:	48 89 05 5b 39 74 00 	mov    %rax,0x74395b(%rip)        # 753940 <edgeId>
    ffe5:	58                   	pop    %rax
    ffe6:	e8 2d 34 ff ff       	callq  3418 <_storeEdge>
    ffeb:	bf 0e 02 00 00       	mov    $0x20e,%edi
    fff0:	e8 9b ce ff ff       	callq  ce90 <lava_get>
    fff5:	48 89 15 1c 39 74 00 	mov    %rdx,0x74391c(%rip)        # 753918 <tmpquadone>
    fffc:	48 89 0d 2d dc 5e 00 	mov    %rcx,0x5edc2d(%rip)        # 5fdc30 <tmpquadtwo>
   10003:	48 8d 15 e6 db 5e 00 	lea    0x5edbe6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1000a:	48 c7 02 76 00 00 00 	movq   $0x76,(%rdx)
   10011:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10018:	00 
   10019:	48 c7 c1 6c 61 74 53 	mov    $0x5374616c,%rcx
   10020:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10024:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1002b:	00 
   1002c:	48 89 c1             	mov    %rax,%rcx
   1002f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10033:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   1003a:	00 
   1003b:	ff 32                	pushq  (%rdx)
   1003d:	48 8b 15 d4 38 74 00 	mov    0x7438d4(%rip),%rdx        # 753918 <tmpquadone>
   10044:	48 8b 0d e5 db 5e 00 	mov    0x5edbe5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1004b:	48 c7 05 fa 38 74 00 	movq   $0x1,0x7438fa(%rip)        # 753950 <cmpPassed>
   10052:	01 00 00 00 
   10056:	e8 55 34 ff ff       	callq  34b0 <_storeDataFn>
   1005b:	3d 6c 61 74 53       	cmp    $0x5374616c,%eax
   10060:	40 0f 94 c6          	sete   %sil
   10064:	40 0f b6 fe          	movzbl %sil,%edi
   10068:	44 0f af ef          	imul   %edi,%r13d
   1006c:	50                   	push   %rax
   1006d:	48 b8 17 c9 4f df 00 	movabs $0xdf4fc917,%rax
   10074:	00 00 00 
   10077:	48 89 05 c2 38 74 00 	mov    %rax,0x7438c2(%rip)        # 753940 <edgeId>
   1007e:	58                   	pop    %rax
   1007f:	e8 94 33 ff ff       	callq  3418 <_storeEdge>
   10084:	bf eb 00 00 00       	mov    $0xeb,%edi
   10089:	4c 03 6c 24 08       	add    0x8(%rsp),%r13
   1008e:	e8 fd cd ff ff       	callq  ce90 <lava_get>
   10093:	bf eb 00 00 00       	mov    $0xeb,%edi
   10098:	41 89 c6             	mov    %eax,%r14d
   1009b:	e8 f0 cd ff ff       	callq  ce90 <lava_get>
   100a0:	48 89 15 71 38 74 00 	mov    %rdx,0x743871(%rip)        # 753918 <tmpquadone>
   100a7:	48 89 0d 82 db 5e 00 	mov    %rcx,0x5edb82(%rip)        # 5fdc30 <tmpquadtwo>
   100ae:	48 8d 15 3b db 5e 00 	lea    0x5edb3b(%rip),%rdx        # 5fdbf0 <funcinptr>
   100b5:	48 c7 02 77 00 00 00 	movq   $0x77,(%rdx)
   100bc:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   100c3:	00 
   100c4:	48 c7 c1 76 75 61 6c 	mov    $0x6c617576,%rcx
   100cb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   100cf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   100d6:	00 
   100d7:	48 89 c1             	mov    %rax,%rcx
   100da:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   100de:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   100e5:	00 
   100e6:	ff 32                	pushq  (%rdx)
   100e8:	48 8b 15 29 38 74 00 	mov    0x743829(%rip),%rdx        # 753918 <tmpquadone>
   100ef:	48 8b 0d 3a db 5e 00 	mov    0x5edb3a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   100f6:	48 c7 05 4f 38 74 00 	movq   $0x1,0x74384f(%rip)        # 753950 <cmpPassed>
   100fd:	01 00 00 00 
   10101:	e8 aa 33 ff ff       	callq  34b0 <_storeDataFn>
   10106:	3d 76 75 61 6c       	cmp    $0x6c617576,%eax
   1010b:	0f 84 96 00 00 00    	je     101a7 <base64_decode_ctx+0x14f7>
   10111:	50                   	push   %rax
   10112:	48 c7 c0 f9 e9 3b 42 	mov    $0x423be9f9,%rax
   10119:	48 89 05 20 38 74 00 	mov    %rax,0x743820(%rip)        # 753940 <edgeId>
   10120:	58                   	pop    %rax
   10121:	e8 f2 32 ff ff       	callq  3418 <_storeEdge>
   10126:	bf eb 00 00 00       	mov    $0xeb,%edi
   1012b:	e8 60 cd ff ff       	callq  ce90 <lava_get>
   10130:	48 89 15 e1 37 74 00 	mov    %rdx,0x7437e1(%rip)        # 753918 <tmpquadone>
   10137:	48 89 0d f2 da 5e 00 	mov    %rcx,0x5edaf2(%rip)        # 5fdc30 <tmpquadtwo>
   1013e:	48 8d 15 ab da 5e 00 	lea    0x5edaab(%rip),%rdx        # 5fdbf0 <funcinptr>
   10145:	48 c7 02 78 00 00 00 	movq   $0x78,(%rdx)
   1014c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10153:	00 
   10154:	48 c7 c1 6c 61 75 76 	mov    $0x7675616c,%rcx
   1015b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1015f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10166:	00 
   10167:	48 89 c1             	mov    %rax,%rcx
   1016a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1016e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10175:	00 
   10176:	ff 32                	pushq  (%rdx)
   10178:	48 8b 15 99 37 74 00 	mov    0x743799(%rip),%rdx        # 753918 <tmpquadone>
   1017f:	48 8b 0d aa da 5e 00 	mov    0x5edaaa(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10186:	48 c7 05 bf 37 74 00 	movq   $0x1,0x7437bf(%rip)        # 753950 <cmpPassed>
   1018d:	01 00 00 00 
   10191:	e8 1a 33 ff ff       	callq  34b0 <_storeDataFn>
   10196:	3d 6c 61 75 76       	cmp    $0x7675616c,%eax
   1019b:	41 0f 94 c0          	sete   %r8b
   1019f:	45 0f b6 c8          	movzbl %r8b,%r9d
   101a3:	45 0f af f1          	imul   %r9d,%r14d
   101a7:	50                   	push   %rax
   101a8:	48 b8 f4 1d a1 92 00 	movabs $0x92a11df4,%rax
   101af:	00 00 00 
   101b2:	48 89 05 87 37 74 00 	mov    %rax,0x743787(%rip)        # 753940 <edgeId>
   101b9:	58                   	pop    %rax
   101ba:	e8 59 32 ff ff       	callq  3418 <_storeEdge>
   101bf:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
   101c4:	bf de 00 00 00       	mov    $0xde,%edi
   101c9:	4f 8d 3c f2          	lea    (%r10,%r14,8),%r15
   101cd:	e8 be cc ff ff       	callq  ce90 <lava_get>
   101d2:	bf de 00 00 00       	mov    $0xde,%edi
   101d7:	41 89 c4             	mov    %eax,%r12d
   101da:	e8 b1 cc ff ff       	callq  ce90 <lava_get>
   101df:	48 89 15 32 37 74 00 	mov    %rdx,0x743732(%rip)        # 753918 <tmpquadone>
   101e6:	48 89 0d 43 da 5e 00 	mov    %rcx,0x5eda43(%rip)        # 5fdc30 <tmpquadtwo>
   101ed:	48 8d 15 fc d9 5e 00 	lea    0x5ed9fc(%rip),%rdx        # 5fdbf0 <funcinptr>
   101f4:	48 c7 02 79 00 00 00 	movq   $0x79,(%rdx)
   101fb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10202:	00 
   10203:	48 c7 c1 83 75 61 6c 	mov    $0x6c617583,%rcx
   1020a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1020e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10215:	00 
   10216:	48 89 c1             	mov    %rax,%rcx
   10219:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1021d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10224:	00 
   10225:	ff 32                	pushq  (%rdx)
   10227:	48 8b 15 ea 36 74 00 	mov    0x7436ea(%rip),%rdx        # 753918 <tmpquadone>
   1022e:	48 8b 0d fb d9 5e 00 	mov    0x5ed9fb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10235:	48 c7 05 10 37 74 00 	movq   $0x1,0x743710(%rip)        # 753950 <cmpPassed>
   1023c:	01 00 00 00 
   10240:	e8 6b 32 ff ff       	callq  34b0 <_storeDataFn>
   10245:	3d 83 75 61 6c       	cmp    $0x6c617583,%eax
   1024a:	0f 84 96 00 00 00    	je     102e6 <base64_decode_ctx+0x1636>
   10250:	50                   	push   %rax
   10251:	48 c7 c0 08 95 dc 02 	mov    $0x2dc9508,%rax
   10258:	48 89 05 e1 36 74 00 	mov    %rax,0x7436e1(%rip)        # 753940 <edgeId>
   1025f:	58                   	pop    %rax
   10260:	e8 b3 31 ff ff       	callq  3418 <_storeEdge>
   10265:	bf de 00 00 00       	mov    $0xde,%edi
   1026a:	e8 21 cc ff ff       	callq  ce90 <lava_get>
   1026f:	48 89 15 a2 36 74 00 	mov    %rdx,0x7436a2(%rip)        # 753918 <tmpquadone>
   10276:	48 89 0d b3 d9 5e 00 	mov    %rcx,0x5ed9b3(%rip)        # 5fdc30 <tmpquadtwo>
   1027d:	48 8d 15 6c d9 5e 00 	lea    0x5ed96c(%rip),%rdx        # 5fdbf0 <funcinptr>
   10284:	48 c7 02 7a 00 00 00 	movq   $0x7a,(%rdx)
   1028b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10292:	00 
   10293:	48 c7 c1 6c 61 75 83 	mov    $0xffffffff8375616c,%rcx
   1029a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1029e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   102a5:	00 
   102a6:	48 89 c1             	mov    %rax,%rcx
   102a9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   102ad:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   102b4:	00 
   102b5:	ff 32                	pushq  (%rdx)
   102b7:	48 8b 15 5a 36 74 00 	mov    0x74365a(%rip),%rdx        # 753918 <tmpquadone>
   102be:	48 8b 0d 6b d9 5e 00 	mov    0x5ed96b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   102c5:	48 c7 05 80 36 74 00 	movq   $0x1,0x743680(%rip)        # 753950 <cmpPassed>
   102cc:	01 00 00 00 
   102d0:	e8 db 31 ff ff       	callq  34b0 <_storeDataFn>
   102d5:	3d 6c 61 75 83       	cmp    $0x8375616c,%eax
   102da:	41 0f 94 c3          	sete   %r11b
   102de:	41 0f b6 c3          	movzbl %r11b,%eax
   102e2:	44 0f af e0          	imul   %eax,%r12d
   102e6:	50                   	push   %rax
   102e7:	48 b8 4a 6e 01 d2 00 	movabs $0xd2016e4a,%rax
   102ee:	00 00 00 
   102f1:	48 89 05 48 36 74 00 	mov    %rax,0x743648(%rip)        # 753940 <edgeId>
   102f8:	58                   	pop    %rax
   102f9:	e8 1a 31 ff ff       	callq  3418 <_storeEdge>
   102fe:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   10303:	49 8b 1f             	mov    (%r15),%rbx
   10306:	4e 8d 34 e1          	lea    (%rcx,%r12,8),%r14
  if (ctx->i == 4)
   1030a:	41 8b 2e             	mov    (%r14),%ebp
   1030d:	48 89 15 04 36 74 00 	mov    %rdx,0x743604(%rip)        # 753918 <tmpquadone>
   10314:	48 89 0d 15 d9 5e 00 	mov    %rcx,0x5ed915(%rip)        # 5fdc30 <tmpquadtwo>
   1031b:	48 8d 15 ce d8 5e 00 	lea    0x5ed8ce(%rip),%rdx        # 5fdbf0 <funcinptr>
   10322:	48 c7 02 7b 00 00 00 	movq   $0x7b,(%rdx)
   10329:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10330:	00 
   10331:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10338:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1033c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10343:	00 
   10344:	48 89 e9             	mov    %rbp,%rcx
   10347:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1034b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10352:	00 
   10353:	ff 32                	pushq  (%rdx)
   10355:	48 8b 15 bc 35 74 00 	mov    0x7435bc(%rip),%rdx        # 753918 <tmpquadone>
   1035c:	48 8b 0d cd d8 5e 00 	mov    0x5ed8cd(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10363:	48 c7 05 e2 35 74 00 	movq   $0x1,0x7435e2(%rip)        # 753950 <cmpPassed>
   1036a:	01 00 00 00 
   1036e:	e8 3d 31 ff ff       	callq  34b0 <_storeDataFn>
   10373:	83 fd 04             	cmp    $0x4,%ebp
   10376:	0f 84 a4 17 00 00    	je     11b20 <base64_decode_ctx+0x2e70>
   1037c:	50                   	push   %rax
   1037d:	48 c7 c0 2d 40 ba 4a 	mov    $0x4aba402d,%rax
   10384:	48 89 05 b5 35 74 00 	mov    %rax,0x7435b5(%rip)        # 753940 <edgeId>
   1038b:	58                   	pop    %rax
   1038c:	e8 87 30 ff ff       	callq  3418 <_storeEdge>
  if (ctx->i == 0)
   10391:	85 ed                	test   %ebp,%ebp
   10393:	0f 84 a6 17 00 00    	je     11b3f <base64_decode_ctx+0x2e8f>
   10399:	50                   	push   %rax
   1039a:	48 c7 c0 05 48 57 29 	mov    $0x29574805,%rax
   103a1:	48 89 05 98 35 74 00 	mov    %rax,0x743598(%rip)        # 753940 <edgeId>
   103a8:	58                   	pop    %rax
   103a9:	e8 6a 30 ff ff       	callq  3418 <_storeEdge>
   103ae:	50                   	push   %rax
   103af:	48 b8 02 a4 ab 94 00 	movabs $0x94aba402,%rax
   103b6:	00 00 00 
   103b9:	48 89 05 80 35 74 00 	mov    %rax,0x743580(%rip)        # 753940 <edgeId>
   103c0:	58                   	pop    %rax
   103c1:	e8 52 30 ff ff       	callq  3418 <_storeEdge>
    while (p < in_end)
   103c6:	48 89 15 4b 35 74 00 	mov    %rdx,0x74354b(%rip)        # 753918 <tmpquadone>
   103cd:	48 89 0d 5c d8 5e 00 	mov    %rcx,0x5ed85c(%rip)        # 5fdc30 <tmpquadtwo>
   103d4:	48 8d 15 15 d8 5e 00 	lea    0x5ed815(%rip),%rdx        # 5fdbf0 <funcinptr>
   103db:	48 c7 02 7c 00 00 00 	movq   $0x7c,(%rdx)
   103e2:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   103e9:	00 
   103ea:	48 89 d9             	mov    %rbx,%rcx
   103ed:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   103f1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   103f8:	00 
   103f9:	4c 89 e9             	mov    %r13,%rcx
   103fc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10400:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10407:	00 
   10408:	ff 32                	pushq  (%rdx)
   1040a:	48 8b 15 07 35 74 00 	mov    0x743507(%rip),%rdx        # 753918 <tmpquadone>
   10411:	48 8b 0d 18 d8 5e 00 	mov    0x5ed818(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10418:	48 c7 05 2d 35 74 00 	movq   $0x1,0x74352d(%rip)        # 753950 <cmpPassed>
   1041f:	01 00 00 00 
   10423:	e8 88 30 ff ff       	callq  34b0 <_storeDataFn>
   10428:	49 39 dd             	cmp    %rbx,%r13
   1042b:	0f 86 ec 15 00 00    	jbe    11a1d <base64_decode_ctx+0x2d6d>
   10431:	50                   	push   %rax
   10432:	48 b8 20 5d a5 dc 00 	movabs $0xdca55d20,%rax
   10439:	00 00 00 
   1043c:	48 89 05 fd 34 74 00 	mov    %rax,0x7434fd(%rip)        # 753940 <edgeId>
   10443:	58                   	pop    %rax
   10444:	e8 cf 2f ff ff       	callq  3418 <_storeEdge>
   10449:	4c 89 ea             	mov    %r13,%rdx
   1044c:	48 29 da             	sub    %rbx,%rdx
   1044f:	83 e2 07             	and    $0x7,%edx
   10452:	0f 84 6c 0c 00 00    	je     110c4 <base64_decode_ctx+0x2414>
   10458:	50                   	push   %rax
   10459:	48 c7 c0 d2 55 ca 5d 	mov    $0x5dca55d2,%rax
   10460:	48 89 05 d9 34 74 00 	mov    %rax,0x7434d9(%rip)        # 753940 <edgeId>
   10467:	58                   	pop    %rax
   10468:	e8 ab 2f ff ff       	callq  3418 <_storeEdge>
   1046d:	48 89 0d a4 34 74 00 	mov    %rcx,0x7434a4(%rip)        # 753918 <tmpquadone>
   10474:	48 89 1d b5 d7 5e 00 	mov    %rbx,0x5ed7b5(%rip)        # 5fdc30 <tmpquadtwo>
   1047b:	48 8d 0d 6e d7 5e 00 	lea    0x5ed76e(%rip),%rcx        # 5fdbf0 <funcinptr>
   10482:	48 c7 01 7d 00 00 00 	movq   $0x7d,(%rcx)
   10489:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   10490:	00 
   10491:	48 c7 c3 01 00 00 00 	mov    $0x1,%rbx
   10498:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1049c:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   104a3:	00 
   104a4:	48 89 d3             	mov    %rdx,%rbx
   104a7:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   104ab:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   104b2:	00 
   104b3:	ff 31                	pushq  (%rcx)
   104b5:	48 8b 0d 5c 34 74 00 	mov    0x74345c(%rip),%rcx        # 753918 <tmpquadone>
   104bc:	48 8b 1d 6d d7 5e 00 	mov    0x5ed76d(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   104c3:	48 c7 05 82 34 74 00 	movq   $0x1,0x743482(%rip)        # 753950 <cmpPassed>
   104ca:	01 00 00 00 
   104ce:	e8 dd 2f ff ff       	callq  34b0 <_storeDataFn>
   104d3:	48 83 fa 01          	cmp    $0x1,%rdx
   104d7:	0f 84 03 0a 00 00    	je     10ee0 <base64_decode_ctx+0x2230>
   104dd:	50                   	push   %rax
   104de:	48 b8 74 95 72 d7 00 	movabs $0xd7729574,%rax
   104e5:	00 00 00 
   104e8:	48 89 05 51 34 74 00 	mov    %rax,0x743451(%rip)        # 753940 <edgeId>
   104ef:	58                   	pop    %rax
   104f0:	e8 23 2f ff ff       	callq  3418 <_storeEdge>
   104f5:	48 89 0d 1c 34 74 00 	mov    %rcx,0x74341c(%rip)        # 753918 <tmpquadone>
   104fc:	48 89 1d 2d d7 5e 00 	mov    %rbx,0x5ed72d(%rip)        # 5fdc30 <tmpquadtwo>
   10503:	48 8d 0d e6 d6 5e 00 	lea    0x5ed6e6(%rip),%rcx        # 5fdbf0 <funcinptr>
   1050a:	48 c7 01 7e 00 00 00 	movq   $0x7e,(%rcx)
   10511:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   10518:	00 
   10519:	48 c7 c3 02 00 00 00 	mov    $0x2,%rbx
   10520:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   10524:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1052b:	00 
   1052c:	48 89 d3             	mov    %rdx,%rbx
   1052f:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   10533:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   1053a:	00 
   1053b:	ff 31                	pushq  (%rcx)
   1053d:	48 8b 0d d4 33 74 00 	mov    0x7433d4(%rip),%rcx        # 753918 <tmpquadone>
   10544:	48 8b 1d e5 d6 5e 00 	mov    0x5ed6e5(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1054b:	48 c7 05 fa 33 74 00 	movq   $0x1,0x7433fa(%rip)        # 753950 <cmpPassed>
   10552:	01 00 00 00 
   10556:	e8 55 2f ff ff       	callq  34b0 <_storeDataFn>
   1055b:	48 83 fa 02          	cmp    $0x2,%rdx
   1055f:	0f 84 42 08 00 00    	je     10da7 <base64_decode_ctx+0x20f7>
   10565:	50                   	push   %rax
   10566:	48 b8 5d a5 dc b5 00 	movabs $0xb5dca55d,%rax
   1056d:	00 00 00 
   10570:	48 89 05 c9 33 74 00 	mov    %rax,0x7433c9(%rip)        # 753940 <edgeId>
   10577:	58                   	pop    %rax
   10578:	e8 9b 2e ff ff       	callq  3418 <_storeEdge>
   1057d:	48 89 0d 94 33 74 00 	mov    %rcx,0x743394(%rip)        # 753918 <tmpquadone>
   10584:	48 89 1d a5 d6 5e 00 	mov    %rbx,0x5ed6a5(%rip)        # 5fdc30 <tmpquadtwo>
   1058b:	48 8d 0d 5e d6 5e 00 	lea    0x5ed65e(%rip),%rcx        # 5fdbf0 <funcinptr>
   10592:	48 c7 01 7f 00 00 00 	movq   $0x7f,(%rcx)
   10599:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   105a0:	00 
   105a1:	48 c7 c3 03 00 00 00 	mov    $0x3,%rbx
   105a8:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   105ac:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   105b3:	00 
   105b4:	48 89 d3             	mov    %rdx,%rbx
   105b7:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   105bb:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   105c2:	00 
   105c3:	ff 31                	pushq  (%rcx)
   105c5:	48 8b 0d 4c 33 74 00 	mov    0x74334c(%rip),%rcx        # 753918 <tmpquadone>
   105cc:	48 8b 1d 5d d6 5e 00 	mov    0x5ed65d(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   105d3:	48 c7 05 72 33 74 00 	movq   $0x1,0x743372(%rip)        # 753950 <cmpPassed>
   105da:	01 00 00 00 
   105de:	e8 cd 2e ff ff       	callq  34b0 <_storeDataFn>
   105e3:	48 83 fa 03          	cmp    $0x3,%rdx
   105e7:	0f 84 7f 06 00 00    	je     10c6c <base64_decode_ctx+0x1fbc>
   105ed:	50                   	push   %rax
   105ee:	48 c7 c0 57 29 77 2d 	mov    $0x2d772957,%rax
   105f5:	48 89 05 44 33 74 00 	mov    %rax,0x743344(%rip)        # 753940 <edgeId>
   105fc:	58                   	pop    %rax
   105fd:	e8 16 2e ff ff       	callq  3418 <_storeEdge>
   10602:	48 89 0d 0f 33 74 00 	mov    %rcx,0x74330f(%rip)        # 753918 <tmpquadone>
   10609:	48 89 1d 20 d6 5e 00 	mov    %rbx,0x5ed620(%rip)        # 5fdc30 <tmpquadtwo>
   10610:	48 8d 0d d9 d5 5e 00 	lea    0x5ed5d9(%rip),%rcx        # 5fdbf0 <funcinptr>
   10617:	48 c7 01 80 00 00 00 	movq   $0x80,(%rcx)
   1061e:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   10625:	00 
   10626:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
   1062d:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   10631:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   10638:	00 
   10639:	48 89 d3             	mov    %rdx,%rbx
   1063c:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   10640:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   10647:	00 
   10648:	ff 31                	pushq  (%rcx)
   1064a:	48 8b 0d c7 32 74 00 	mov    0x7432c7(%rip),%rcx        # 753918 <tmpquadone>
   10651:	48 8b 1d d8 d5 5e 00 	mov    0x5ed5d8(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   10658:	48 c7 05 ed 32 74 00 	movq   $0x1,0x7432ed(%rip)        # 753950 <cmpPassed>
   1065f:	01 00 00 00 
   10663:	e8 48 2e ff ff       	callq  34b0 <_storeDataFn>
   10668:	48 83 fa 04          	cmp    $0x4,%rdx
   1066c:	0f 84 c3 04 00 00    	je     10b35 <base64_decode_ctx+0x1e85>
   10672:	50                   	push   %rax
   10673:	48 c7 c0 55 ca 5d 4b 	mov    $0x4b5dca55,%rax
   1067a:	48 89 05 bf 32 74 00 	mov    %rax,0x7432bf(%rip)        # 753940 <edgeId>
   10681:	58                   	pop    %rax
   10682:	e8 91 2d ff ff       	callq  3418 <_storeEdge>
   10687:	48 89 0d 8a 32 74 00 	mov    %rcx,0x74328a(%rip)        # 753918 <tmpquadone>
   1068e:	48 89 1d 9b d5 5e 00 	mov    %rbx,0x5ed59b(%rip)        # 5fdc30 <tmpquadtwo>
   10695:	48 8d 0d 54 d5 5e 00 	lea    0x5ed554(%rip),%rcx        # 5fdbf0 <funcinptr>
   1069c:	48 c7 01 81 00 00 00 	movq   $0x81,(%rcx)
   106a3:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   106aa:	00 
   106ab:	48 c7 c3 05 00 00 00 	mov    $0x5,%rbx
   106b2:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   106b6:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   106bd:	00 
   106be:	48 89 d3             	mov    %rdx,%rbx
   106c1:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   106c5:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   106cc:	00 
   106cd:	ff 31                	pushq  (%rcx)
   106cf:	48 8b 0d 42 32 74 00 	mov    0x743242(%rip),%rcx        # 753918 <tmpquadone>
   106d6:	48 8b 1d 53 d5 5e 00 	mov    0x5ed553(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   106dd:	48 c7 05 68 32 74 00 	movq   $0x1,0x743268(%rip)        # 753950 <cmpPassed>
   106e4:	01 00 00 00 
   106e8:	e8 c3 2d ff ff       	callq  34b0 <_storeDataFn>
   106ed:	48 83 fa 05          	cmp    $0x5,%rdx
   106f1:	0f 84 fe 02 00 00    	je     109f5 <base64_decode_ctx+0x1d45>
   106f7:	50                   	push   %rax
   106f8:	48 b8 95 72 d7 92 00 	movabs $0x92d77295,%rax
   106ff:	00 00 00 
   10702:	48 89 05 37 32 74 00 	mov    %rax,0x743237(%rip)        # 753940 <edgeId>
   10709:	58                   	pop    %rax
   1070a:	e8 09 2d ff ff       	callq  3418 <_storeEdge>
   1070f:	48 89 0d 02 32 74 00 	mov    %rcx,0x743202(%rip)        # 753918 <tmpquadone>
   10716:	48 89 1d 13 d5 5e 00 	mov    %rbx,0x5ed513(%rip)        # 5fdc30 <tmpquadtwo>
   1071d:	48 8d 0d cc d4 5e 00 	lea    0x5ed4cc(%rip),%rcx        # 5fdbf0 <funcinptr>
   10724:	48 c7 01 82 00 00 00 	movq   $0x82,(%rcx)
   1072b:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   10732:	00 
   10733:	48 c7 c3 06 00 00 00 	mov    $0x6,%rbx
   1073a:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1073e:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   10745:	00 
   10746:	48 89 d3             	mov    %rdx,%rbx
   10749:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1074d:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   10754:	00 
   10755:	ff 31                	pushq  (%rcx)
   10757:	48 8b 0d ba 31 74 00 	mov    0x7431ba(%rip),%rcx        # 753918 <tmpquadone>
   1075e:	48 8b 1d cb d4 5e 00 	mov    0x5ed4cb(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   10765:	48 c7 05 e0 31 74 00 	movq   $0x1,0x7431e0(%rip)        # 753950 <cmpPassed>
   1076c:	01 00 00 00 
   10770:	e8 3b 2d ff ff       	callq  34b0 <_storeDataFn>
   10775:	48 83 fa 06          	cmp    $0x6,%rdx
   10779:	0f 84 39 01 00 00    	je     108b8 <base64_decode_ctx+0x1c08>
   1077f:	50                   	push   %rax
   10780:	48 b8 a5 dc b5 a4 00 	movabs $0xa4b5dca5,%rax
   10787:	00 00 00 
   1078a:	48 89 05 af 31 74 00 	mov    %rax,0x7431af(%rip)        # 753940 <edgeId>
   10791:	58                   	pop    %rax
   10792:	e8 81 2c ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10797:	48 83 c3 01          	add    $0x1,%rbx
   1079b:	0f b6 73 ff          	movzbl -0x1(%rbx),%esi
        if (c != '\n')
   1079f:	48 89 15 72 31 74 00 	mov    %rdx,0x743172(%rip)        # 753918 <tmpquadone>
   107a6:	48 89 0d 83 d4 5e 00 	mov    %rcx,0x5ed483(%rip)        # 5fdc30 <tmpquadtwo>
   107ad:	48 8d 15 3c d4 5e 00 	lea    0x5ed43c(%rip),%rdx        # 5fdbf0 <funcinptr>
   107b4:	48 c7 02 83 00 00 00 	movq   $0x83,(%rdx)
   107bb:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   107c2:	00 
   107c3:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   107ca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   107ce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   107d5:	00 
   107d6:	48 89 f1             	mov    %rsi,%rcx
   107d9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   107dd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   107e4:	00 
   107e5:	ff 32                	pushq  (%rdx)
   107e7:	48 8b 15 2a 31 74 00 	mov    0x74312a(%rip),%rdx        # 753918 <tmpquadone>
   107ee:	48 8b 0d 3b d4 5e 00 	mov    0x5ed43b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   107f5:	48 c7 05 50 31 74 00 	movq   $0x1,0x743150(%rip)        # 753950 <cmpPassed>
   107fc:	01 00 00 00 
   10800:	e8 ab 2c ff ff       	callq  34b0 <_storeDataFn>
   10805:	40 80 fe 0a          	cmp    $0xa,%sil
   10809:	0f 84 a9 00 00 00    	je     108b8 <base64_decode_ctx+0x1c08>
   1080f:	50                   	push   %rax
   10810:	48 c7 c0 77 2d 69 2e 	mov    $0x2e692d77,%rax
   10817:	48 89 05 22 31 74 00 	mov    %rax,0x743122(%rip)        # 753940 <edgeId>
   1081e:	58                   	pop    %rax
   1081f:	e8 f4 2b ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10824:	8d 7d 01             	lea    0x1(%rbp),%edi
            if (ctx->i == 4)
   10827:	48 89 15 ea 30 74 00 	mov    %rdx,0x7430ea(%rip)        # 753918 <tmpquadone>
   1082e:	48 89 0d fb d3 5e 00 	mov    %rcx,0x5ed3fb(%rip)        # 5fdc30 <tmpquadtwo>
   10835:	48 8d 15 b4 d3 5e 00 	lea    0x5ed3b4(%rip),%rdx        # 5fdbf0 <funcinptr>
   1083c:	48 c7 02 84 00 00 00 	movq   $0x84,(%rdx)
   10843:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1084a:	00 
   1084b:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10852:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10856:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1085d:	00 
   1085e:	48 89 f9             	mov    %rdi,%rcx
   10861:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10865:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   1086c:	00 
   1086d:	ff 32                	pushq  (%rdx)
   1086f:	48 8b 15 a2 30 74 00 	mov    0x7430a2(%rip),%rdx        # 753918 <tmpquadone>
   10876:	48 8b 0d b3 d3 5e 00 	mov    0x5ed3b3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1087d:	48 c7 05 c8 30 74 00 	movq   $0x1,0x7430c8(%rip)        # 753950 <cmpPassed>
   10884:	01 00 00 00 
   10888:	e8 23 2c ff ff       	callq  34b0 <_storeDataFn>
   1088d:	83 ff 04             	cmp    $0x4,%edi
            ctx->buf[ctx->i++] = c;
   10890:	41 89 3e             	mov    %edi,(%r14)
   10893:	41 88 74 2e 04       	mov    %sil,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   10898:	0f 84 62 11 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   1089e:	50                   	push   %rax
   1089f:	48 b8 96 34 17 8a 00 	movabs $0x8a173496,%rax
   108a6:	00 00 00 
   108a9:	48 89 05 90 30 74 00 	mov    %rax,0x743090(%rip)        # 753940 <edgeId>
   108b0:	58                   	pop    %rax
   108b1:	e8 62 2b ff ff       	callq  3418 <_storeEdge>
   108b6:	89 fd                	mov    %edi,%ebp
   108b8:	50                   	push   %rax
   108b9:	48 c7 c0 92 e6 42 71 	mov    $0x7142e692,%rax
   108c0:	48 89 05 79 30 74 00 	mov    %rax,0x743079(%rip)        # 753940 <edgeId>
   108c7:	58                   	pop    %rax
   108c8:	e8 4b 2b ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   108cd:	48 83 c3 01          	add    $0x1,%rbx
   108d1:	44 0f b6 43 ff       	movzbl -0x1(%rbx),%r8d
        if (c != '\n')
   108d6:	48 89 15 3b 30 74 00 	mov    %rdx,0x74303b(%rip)        # 753918 <tmpquadone>
   108dd:	48 89 0d 4c d3 5e 00 	mov    %rcx,0x5ed34c(%rip)        # 5fdc30 <tmpquadtwo>
   108e4:	48 8d 15 05 d3 5e 00 	lea    0x5ed305(%rip),%rdx        # 5fdbf0 <funcinptr>
   108eb:	48 c7 02 85 00 00 00 	movq   $0x85,(%rdx)
   108f2:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   108f9:	00 
   108fa:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   10901:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10905:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1090c:	00 
   1090d:	4c 89 c1             	mov    %r8,%rcx
   10910:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10914:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   1091b:	00 
   1091c:	ff 32                	pushq  (%rdx)
   1091e:	48 8b 15 f3 2f 74 00 	mov    0x742ff3(%rip),%rdx        # 753918 <tmpquadone>
   10925:	48 8b 0d 04 d3 5e 00 	mov    0x5ed304(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1092c:	48 c7 05 19 30 74 00 	movq   $0x1,0x743019(%rip)        # 753950 <cmpPassed>
   10933:	01 00 00 00 
   10937:	e8 74 2b ff ff       	callq  34b0 <_storeDataFn>
   1093c:	41 80 f8 0a          	cmp    $0xa,%r8b
   10940:	0f 84 af 00 00 00    	je     109f5 <base64_decode_ctx+0x1d45>
   10946:	50                   	push   %rax
   10947:	48 b8 cd 85 e2 e6 00 	movabs $0xe6e285cd,%rax
   1094e:	00 00 00 
   10951:	48 89 05 e8 2f 74 00 	mov    %rax,0x742fe8(%rip)        # 753940 <edgeId>
   10958:	58                   	pop    %rax
   10959:	e8 ba 2a ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   1095e:	44 8d 4d 01          	lea    0x1(%rbp),%r9d
            if (ctx->i == 4)
   10962:	48 89 15 af 2f 74 00 	mov    %rdx,0x742faf(%rip)        # 753918 <tmpquadone>
   10969:	48 89 0d c0 d2 5e 00 	mov    %rcx,0x5ed2c0(%rip)        # 5fdc30 <tmpquadtwo>
   10970:	48 8d 15 79 d2 5e 00 	lea    0x5ed279(%rip),%rdx        # 5fdbf0 <funcinptr>
   10977:	48 c7 02 86 00 00 00 	movq   $0x86,(%rdx)
   1097e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10985:	00 
   10986:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   1098d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10991:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10998:	00 
   10999:	4c 89 c9             	mov    %r9,%rcx
   1099c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   109a0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   109a7:	00 
   109a8:	ff 32                	pushq  (%rdx)
   109aa:	48 8b 15 67 2f 74 00 	mov    0x742f67(%rip),%rdx        # 753918 <tmpquadone>
   109b1:	48 8b 0d 78 d2 5e 00 	mov    0x5ed278(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   109b8:	48 c7 05 8d 2f 74 00 	movq   $0x1,0x742f8d(%rip)        # 753950 <cmpPassed>
   109bf:	01 00 00 00 
   109c3:	e8 e8 2a ff ff       	callq  34b0 <_storeDataFn>
   109c8:	41 83 f9 04          	cmp    $0x4,%r9d
            ctx->buf[ctx->i++] = c;
   109cc:	45 89 0e             	mov    %r9d,(%r14)
   109cf:	45 88 44 2e 04       	mov    %r8b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   109d4:	0f 84 26 10 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   109da:	50                   	push   %rax
   109db:	48 b8 42 71 f3 c0 00 	movabs $0xc0f37142,%rax
   109e2:	00 00 00 
   109e5:	48 89 05 54 2f 74 00 	mov    %rax,0x742f54(%rip)        # 753940 <edgeId>
   109ec:	58                   	pop    %rax
   109ed:	e8 26 2a ff ff       	callq  3418 <_storeEdge>
   109f2:	44 89 cd             	mov    %r9d,%ebp
   109f5:	50                   	push   %rax
   109f6:	48 b8 28 6e 1e d8 00 	movabs $0xd81e6e28,%rax
   109fd:	00 00 00 
   10a00:	48 89 05 39 2f 74 00 	mov    %rax,0x742f39(%rip)        # 753940 <edgeId>
   10a07:	58                   	pop    %rax
   10a08:	e8 0b 2a ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10a0d:	48 83 c3 01          	add    $0x1,%rbx
   10a11:	44 0f b6 53 ff       	movzbl -0x1(%rbx),%r10d
        if (c != '\n')
   10a16:	48 89 15 fb 2e 74 00 	mov    %rdx,0x742efb(%rip)        # 753918 <tmpquadone>
   10a1d:	48 89 0d 0c d2 5e 00 	mov    %rcx,0x5ed20c(%rip)        # 5fdc30 <tmpquadtwo>
   10a24:	48 8d 15 c5 d1 5e 00 	lea    0x5ed1c5(%rip),%rdx        # 5fdbf0 <funcinptr>
   10a2b:	48 c7 02 87 00 00 00 	movq   $0x87,(%rdx)
   10a32:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   10a39:	00 
   10a3a:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   10a41:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10a45:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10a4c:	00 
   10a4d:	4c 89 d1             	mov    %r10,%rcx
   10a50:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10a54:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10a5b:	00 
   10a5c:	ff 32                	pushq  (%rdx)
   10a5e:	48 8b 15 b3 2e 74 00 	mov    0x742eb3(%rip),%rdx        # 753918 <tmpquadone>
   10a65:	48 8b 0d c4 d1 5e 00 	mov    0x5ed1c4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10a6c:	48 c7 05 d9 2e 74 00 	movq   $0x1,0x742ed9(%rip)        # 753950 <cmpPassed>
   10a73:	01 00 00 00 
   10a77:	e8 34 2a ff ff       	callq  34b0 <_storeDataFn>
   10a7c:	41 80 fa 0a          	cmp    $0xa,%r10b
   10a80:	0f 84 af 00 00 00    	je     10b35 <base64_decode_ctx+0x1e85>
   10a86:	50                   	push   %rax
   10a87:	48 b8 dc 3c b0 dd 00 	movabs $0xddb03cdc,%rax
   10a8e:	00 00 00 
   10a91:	48 89 05 a8 2e 74 00 	mov    %rax,0x742ea8(%rip)        # 753940 <edgeId>
   10a98:	58                   	pop    %rax
   10a99:	e8 7a 29 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10a9e:	44 8d 65 01          	lea    0x1(%rbp),%r12d
            if (ctx->i == 4)
   10aa2:	48 89 15 6f 2e 74 00 	mov    %rdx,0x742e6f(%rip)        # 753918 <tmpquadone>
   10aa9:	48 89 0d 80 d1 5e 00 	mov    %rcx,0x5ed180(%rip)        # 5fdc30 <tmpquadtwo>
   10ab0:	48 8d 15 39 d1 5e 00 	lea    0x5ed139(%rip),%rdx        # 5fdbf0 <funcinptr>
   10ab7:	48 c7 02 88 00 00 00 	movq   $0x88,(%rdx)
   10abe:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10ac5:	00 
   10ac6:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10acd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10ad1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10ad8:	00 
   10ad9:	4c 89 e1             	mov    %r12,%rcx
   10adc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10ae0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10ae7:	00 
   10ae8:	ff 32                	pushq  (%rdx)
   10aea:	48 8b 15 27 2e 74 00 	mov    0x742e27(%rip),%rdx        # 753918 <tmpquadone>
   10af1:	48 8b 0d 38 d1 5e 00 	mov    0x5ed138(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10af8:	48 c7 05 4d 2e 74 00 	movq   $0x1,0x742e4d(%rip)        # 753950 <cmpPassed>
   10aff:	01 00 00 00 
   10b03:	e8 a8 29 ff ff       	callq  34b0 <_storeDataFn>
   10b08:	41 83 fc 04          	cmp    $0x4,%r12d
            ctx->buf[ctx->i++] = c;
   10b0c:	45 89 26             	mov    %r12d,(%r14)
   10b0f:	45 88 54 2e 04       	mov    %r10b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   10b14:	0f 84 e6 0e 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   10b1a:	50                   	push   %rax
   10b1b:	48 b8 1e d8 6e f7 00 	movabs $0xf76ed81e,%rax
   10b22:	00 00 00 
   10b25:	48 89 05 14 2e 74 00 	mov    %rax,0x742e14(%rip)        # 753940 <edgeId>
   10b2c:	58                   	pop    %rax
   10b2d:	e8 e6 28 ff ff       	callq  3418 <_storeEdge>
   10b32:	44 89 e5             	mov    %r12d,%ebp
   10b35:	50                   	push   %rax
   10b36:	48 c7 c0 03 db ed 7e 	mov    $0x7eeddb03,%rax
   10b3d:	48 89 05 fc 2d 74 00 	mov    %rax,0x742dfc(%rip)        # 753940 <edgeId>
   10b44:	58                   	pop    %rax
   10b45:	e8 ce 28 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10b4a:	48 83 c3 01          	add    $0x1,%rbx
   10b4e:	44 0f b6 5b ff       	movzbl -0x1(%rbx),%r11d
        if (c != '\n')
   10b53:	48 89 15 be 2d 74 00 	mov    %rdx,0x742dbe(%rip)        # 753918 <tmpquadone>
   10b5a:	48 89 0d cf d0 5e 00 	mov    %rcx,0x5ed0cf(%rip)        # 5fdc30 <tmpquadtwo>
   10b61:	48 8d 15 88 d0 5e 00 	lea    0x5ed088(%rip),%rdx        # 5fdbf0 <funcinptr>
   10b68:	48 c7 02 89 00 00 00 	movq   $0x89,(%rdx)
   10b6f:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   10b76:	00 
   10b77:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   10b7e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10b82:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10b89:	00 
   10b8a:	4c 89 d9             	mov    %r11,%rcx
   10b8d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10b91:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10b98:	00 
   10b99:	ff 32                	pushq  (%rdx)
   10b9b:	48 8b 15 76 2d 74 00 	mov    0x742d76(%rip),%rdx        # 753918 <tmpquadone>
   10ba2:	48 8b 0d 87 d0 5e 00 	mov    0x5ed087(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10ba9:	48 c7 05 9c 2d 74 00 	movq   $0x1,0x742d9c(%rip)        # 753950 <cmpPassed>
   10bb0:	01 00 00 00 
   10bb4:	e8 f7 28 ff ff       	callq  34b0 <_storeDataFn>
   10bb9:	41 80 fb 0a          	cmp    $0xa,%r11b
   10bbd:	0f 84 a9 00 00 00    	je     10c6c <base64_decode_ctx+0x1fbc>
   10bc3:	50                   	push   %rax
   10bc4:	48 b8 b6 db fd da 00 	movabs $0xdafddbb6,%rax
   10bcb:	00 00 00 
   10bce:	48 89 05 6b 2d 74 00 	mov    %rax,0x742d6b(%rip)        # 753940 <edgeId>
   10bd5:	58                   	pop    %rax
   10bd6:	e8 3d 28 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10bdb:	8d 45 01             	lea    0x1(%rbp),%eax
            if (ctx->i == 4)
   10bde:	48 89 15 33 2d 74 00 	mov    %rdx,0x742d33(%rip)        # 753918 <tmpquadone>
   10be5:	48 89 0d 44 d0 5e 00 	mov    %rcx,0x5ed044(%rip)        # 5fdc30 <tmpquadtwo>
   10bec:	48 8d 15 fd cf 5e 00 	lea    0x5ecffd(%rip),%rdx        # 5fdbf0 <funcinptr>
   10bf3:	48 c7 02 8a 00 00 00 	movq   $0x8a,(%rdx)
   10bfa:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10c01:	00 
   10c02:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10c09:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10c0d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10c14:	00 
   10c15:	48 89 c1             	mov    %rax,%rcx
   10c18:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10c1c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   10c23:	00 
   10c24:	ff 32                	pushq  (%rdx)
   10c26:	48 8b 15 eb 2c 74 00 	mov    0x742ceb(%rip),%rdx        # 753918 <tmpquadone>
   10c2d:	48 8b 0d fc cf 5e 00 	mov    0x5ecffc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10c34:	48 c7 05 11 2d 74 00 	movq   $0x1,0x742d11(%rip)        # 753950 <cmpPassed>
   10c3b:	01 00 00 00 
   10c3f:	e8 6c 28 ff ff       	callq  34b0 <_storeDataFn>
   10c44:	83 f8 04             	cmp    $0x4,%eax
            ctx->buf[ctx->i++] = c;
   10c47:	41 89 06             	mov    %eax,(%r14)
   10c4a:	45 88 5c 2e 04       	mov    %r11b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   10c4f:	0f 84 ab 0d 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   10c55:	50                   	push   %rax
   10c56:	48 c7 c0 ed 7e ed 4a 	mov    $0x4aed7eed,%rax
   10c5d:	48 89 05 dc 2c 74 00 	mov    %rax,0x742cdc(%rip)        # 753940 <edgeId>
   10c64:	58                   	pop    %rax
   10c65:	e8 ae 27 ff ff       	callq  3418 <_storeEdge>
   10c6a:	89 c5                	mov    %eax,%ebp
   10c6c:	50                   	push   %rax
   10c6d:	48 b8 dd af 5d a9 00 	movabs $0xa95dafdd,%rax
   10c74:	00 00 00 
   10c77:	48 89 05 c2 2c 74 00 	mov    %rax,0x742cc2(%rip)        # 753940 <edgeId>
   10c7e:	58                   	pop    %rax
   10c7f:	e8 94 27 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10c84:	48 83 c3 01          	add    $0x1,%rbx
   10c88:	0f b6 4b ff          	movzbl -0x1(%rbx),%ecx
        if (c != '\n')
   10c8c:	48 89 15 85 2c 74 00 	mov    %rdx,0x742c85(%rip)        # 753918 <tmpquadone>
   10c93:	48 89 1d 96 cf 5e 00 	mov    %rbx,0x5ecf96(%rip)        # 5fdc30 <tmpquadtwo>
   10c9a:	48 8d 15 4f cf 5e 00 	lea    0x5ecf4f(%rip),%rdx        # 5fdbf0 <funcinptr>
   10ca1:	48 c7 02 8b 00 00 00 	movq   $0x8b,(%rdx)
   10ca8:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   10caf:	00 
   10cb0:	48 c7 c3 0a 00 00 00 	mov    $0xa,%rbx
   10cb7:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   10cbb:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10cc2:	00 
   10cc3:	48 89 cb             	mov    %rcx,%rbx
   10cc6:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   10cca:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   10cd1:	00 
   10cd2:	ff 32                	pushq  (%rdx)
   10cd4:	48 8b 15 3d 2c 74 00 	mov    0x742c3d(%rip),%rdx        # 753918 <tmpquadone>
   10cdb:	48 8b 1d 4e cf 5e 00 	mov    0x5ecf4e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   10ce2:	48 c7 05 63 2c 74 00 	movq   $0x1,0x742c63(%rip)        # 753950 <cmpPassed>
   10ce9:	01 00 00 00 
   10ced:	e8 be 27 ff ff       	callq  34b0 <_storeDataFn>
   10cf2:	80 f9 0a             	cmp    $0xa,%cl
   10cf5:	0f 84 ac 00 00 00    	je     10da7 <base64_decode_ctx+0x20f7>
   10cfb:	50                   	push   %rax
   10cfc:	48 b8 5f bb 52 ef 00 	movabs $0xef52bb5f,%rax
   10d03:	00 00 00 
   10d06:	48 89 05 33 2c 74 00 	mov    %rax,0x742c33(%rip)        # 753940 <edgeId>
   10d0d:	58                   	pop    %rax
   10d0e:	e8 05 27 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10d13:	8d 55 01             	lea    0x1(%rbp),%edx
            if (ctx->i == 4)
   10d16:	48 89 0d fb 2b 74 00 	mov    %rcx,0x742bfb(%rip)        # 753918 <tmpquadone>
   10d1d:	48 89 1d 0c cf 5e 00 	mov    %rbx,0x5ecf0c(%rip)        # 5fdc30 <tmpquadtwo>
   10d24:	48 8d 0d c5 ce 5e 00 	lea    0x5ecec5(%rip),%rcx        # 5fdbf0 <funcinptr>
   10d2b:	48 c7 01 8c 00 00 00 	movq   $0x8c,(%rcx)
   10d32:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
   10d39:	00 
   10d3a:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
   10d41:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   10d45:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   10d4c:	00 
   10d4d:	48 89 d3             	mov    %rdx,%rbx
   10d50:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   10d54:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   10d5b:	00 
   10d5c:	ff 31                	pushq  (%rcx)
   10d5e:	48 8b 0d b3 2b 74 00 	mov    0x742bb3(%rip),%rcx        # 753918 <tmpquadone>
   10d65:	48 8b 1d c4 ce 5e 00 	mov    0x5ecec4(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   10d6c:	48 c7 05 d9 2b 74 00 	movq   $0x1,0x742bd9(%rip)        # 753950 <cmpPassed>
   10d73:	01 00 00 00 
   10d77:	e8 34 27 ff ff       	callq  34b0 <_storeDataFn>
   10d7c:	83 fa 04             	cmp    $0x4,%edx
            ctx->buf[ctx->i++] = c;
   10d7f:	41 89 16             	mov    %edx,(%r14)
   10d82:	41 88 4c 2e 04       	mov    %cl,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   10d87:	0f 84 73 0c 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   10d8d:	50                   	push   %rax
   10d8e:	48 b8 5d a9 77 a7 00 	movabs $0xa777a95d,%rax
   10d95:	00 00 00 
   10d98:	48 89 05 a1 2b 74 00 	mov    %rax,0x742ba1(%rip)        # 753940 <edgeId>
   10d9f:	58                   	pop    %rax
   10da0:	e8 73 26 ff ff       	callq  3418 <_storeEdge>
   10da5:	89 d5                	mov    %edx,%ebp
   10da7:	50                   	push   %rax
   10da8:	48 c7 c0 2b f5 ee 34 	mov    $0x34eef52b,%rax
   10daf:	48 89 05 8a 2b 74 00 	mov    %rax,0x742b8a(%rip)        # 753940 <edgeId>
   10db6:	58                   	pop    %rax
   10db7:	e8 5c 26 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10dbc:	48 83 c3 01          	add    $0x1,%rbx
   10dc0:	0f b6 73 ff          	movzbl -0x1(%rbx),%esi
        if (c != '\n')
   10dc4:	48 89 15 4d 2b 74 00 	mov    %rdx,0x742b4d(%rip)        # 753918 <tmpquadone>
   10dcb:	48 89 0d 5e ce 5e 00 	mov    %rcx,0x5ece5e(%rip)        # 5fdc30 <tmpquadtwo>
   10dd2:	48 8d 15 17 ce 5e 00 	lea    0x5ece17(%rip),%rdx        # 5fdbf0 <funcinptr>
   10dd9:	48 c7 02 8d 00 00 00 	movq   $0x8d,(%rdx)
   10de0:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   10de7:	00 
   10de8:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   10def:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10df3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10dfa:	00 
   10dfb:	48 89 f1             	mov    %rsi,%rcx
   10dfe:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10e02:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   10e09:	00 
   10e0a:	ff 32                	pushq  (%rdx)
   10e0c:	48 8b 15 05 2b 74 00 	mov    0x742b05(%rip),%rdx        # 753918 <tmpquadone>
   10e13:	48 8b 0d 16 ce 5e 00 	mov    0x5ece16(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10e1a:	48 c7 05 2b 2b 74 00 	movq   $0x1,0x742b2b(%rip)        # 753950 <cmpPassed>
   10e21:	01 00 00 00 
   10e25:	e8 86 26 ff ff       	callq  34b0 <_storeDataFn>
   10e2a:	40 80 fe 0a          	cmp    $0xa,%sil
   10e2e:	0f 84 ac 00 00 00    	je     10ee0 <base64_decode_ctx+0x2230>
   10e34:	50                   	push   %rax
   10e35:	48 b8 ea dd 69 88 00 	movabs $0x8869ddea,%rax
   10e3c:	00 00 00 
   10e3f:	48 89 05 fa 2a 74 00 	mov    %rax,0x742afa(%rip)        # 753940 <edgeId>
   10e46:	58                   	pop    %rax
   10e47:	e8 cc 25 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10e4c:	8d 7d 01             	lea    0x1(%rbp),%edi
            if (ctx->i == 4)
   10e4f:	48 89 15 c2 2a 74 00 	mov    %rdx,0x742ac2(%rip)        # 753918 <tmpquadone>
   10e56:	48 89 0d d3 cd 5e 00 	mov    %rcx,0x5ecdd3(%rip)        # 5fdc30 <tmpquadtwo>
   10e5d:	48 8d 15 8c cd 5e 00 	lea    0x5ecd8c(%rip),%rdx        # 5fdbf0 <funcinptr>
   10e64:	48 c7 02 8e 00 00 00 	movq   $0x8e,(%rdx)
   10e6b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10e72:	00 
   10e73:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10e7a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10e7e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10e85:	00 
   10e86:	48 89 f9             	mov    %rdi,%rcx
   10e89:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10e8d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   10e94:	00 
   10e95:	ff 32                	pushq  (%rdx)
   10e97:	48 8b 15 7a 2a 74 00 	mov    0x742a7a(%rip),%rdx        # 753918 <tmpquadone>
   10e9e:	48 8b 0d 8b cd 5e 00 	mov    0x5ecd8b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10ea5:	48 c7 05 a0 2a 74 00 	movq   $0x1,0x742aa0(%rip)        # 753950 <cmpPassed>
   10eac:	01 00 00 00 
   10eb0:	e8 fb 25 ff ff       	callq  34b0 <_storeDataFn>
   10eb5:	83 ff 04             	cmp    $0x4,%edi
            ctx->buf[ctx->i++] = c;
   10eb8:	41 89 3e             	mov    %edi,(%r14)
   10ebb:	41 88 74 2e 04       	mov    %sil,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   10ec0:	0f 84 3a 0b 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   10ec6:	50                   	push   %rax
   10ec7:	48 b8 ee 34 44 87 00 	movabs $0x874434ee,%rax
   10ece:	00 00 00 
   10ed1:	48 89 05 68 2a 74 00 	mov    %rax,0x742a68(%rip)        # 753940 <edgeId>
   10ed8:	58                   	pop    %rax
   10ed9:	e8 3a 25 ff ff       	callq  3418 <_storeEdge>
   10ede:	89 fd                	mov    %edi,%ebp
   10ee0:	50                   	push   %rax
   10ee1:	48 b8 9d 86 e8 d0 00 	movabs $0xd0e8869d,%rax
   10ee8:	00 00 00 
   10eeb:	48 89 05 4e 2a 74 00 	mov    %rax,0x742a4e(%rip)        # 753940 <edgeId>
   10ef2:	58                   	pop    %rax
   10ef3:	e8 20 25 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   10ef8:	48 83 c3 01          	add    $0x1,%rbx
   10efc:	44 0f b6 4b ff       	movzbl -0x1(%rbx),%r9d
        if (c != '\n')
   10f01:	48 89 15 10 2a 74 00 	mov    %rdx,0x742a10(%rip)        # 753918 <tmpquadone>
   10f08:	48 89 0d 21 cd 5e 00 	mov    %rcx,0x5ecd21(%rip)        # 5fdc30 <tmpquadtwo>
   10f0f:	48 8d 15 da cc 5e 00 	lea    0x5eccda(%rip),%rdx        # 5fdbf0 <funcinptr>
   10f16:	48 c7 02 8f 00 00 00 	movq   $0x8f,(%rdx)
   10f1d:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   10f24:	00 
   10f25:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   10f2c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10f30:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10f37:	00 
   10f38:	4c 89 c9             	mov    %r9,%rcx
   10f3b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10f3f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   10f46:	00 
   10f47:	ff 32                	pushq  (%rdx)
   10f49:	48 8b 15 c8 29 74 00 	mov    0x7429c8(%rip),%rdx        # 753918 <tmpquadone>
   10f50:	48 8b 0d d9 cc 5e 00 	mov    0x5eccd9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10f57:	48 c7 05 ee 29 74 00 	movq   $0x1,0x7429ee(%rip)        # 753950 <cmpPassed>
   10f5e:	01 00 00 00 
   10f62:	e8 49 25 ff ff       	callq  34b0 <_storeDataFn>
   10f67:	41 80 f9 0a          	cmp    $0xa,%r9b
   10f6b:	0f 84 be 00 00 00    	je     1102f <base64_decode_ctx+0x237f>
   10f71:	50                   	push   %rax
   10f72:	48 c7 c0 0d d1 a1 73 	mov    $0x73a1d10d,%rax
   10f79:	48 89 05 c0 29 74 00 	mov    %rax,0x7429c0(%rip)        # 753940 <edgeId>
   10f80:	58                   	pop    %rax
   10f81:	e8 92 24 ff ff       	callq  3418 <_storeEdge>
   10f86:	50                   	push   %rax
   10f87:	48 c7 c0 86 e8 d0 39 	mov    $0x39d0e886,%rax
   10f8e:	48 89 05 ab 29 74 00 	mov    %rax,0x7429ab(%rip)        # 753940 <edgeId>
   10f95:	58                   	pop    %rax
   10f96:	e8 7d 24 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   10f9b:	44 8d 45 01          	lea    0x1(%rbp),%r8d
            if (ctx->i == 4)
   10f9f:	48 89 15 72 29 74 00 	mov    %rdx,0x742972(%rip)        # 753918 <tmpquadone>
   10fa6:	48 89 0d 83 cc 5e 00 	mov    %rcx,0x5ecc83(%rip)        # 5fdc30 <tmpquadtwo>
   10fad:	48 8d 15 3c cc 5e 00 	lea    0x5ecc3c(%rip),%rdx        # 5fdbf0 <funcinptr>
   10fb4:	48 c7 02 90 00 00 00 	movq   $0x90,(%rdx)
   10fbb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   10fc2:	00 
   10fc3:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   10fca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   10fce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   10fd5:	00 
   10fd6:	4c 89 c1             	mov    %r8,%rcx
   10fd9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   10fdd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   10fe4:	00 
   10fe5:	ff 32                	pushq  (%rdx)
   10fe7:	48 8b 15 2a 29 74 00 	mov    0x74292a(%rip),%rdx        # 753918 <tmpquadone>
   10fee:	48 8b 0d 3b cc 5e 00 	mov    0x5ecc3b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   10ff5:	48 c7 05 50 29 74 00 	movq   $0x1,0x742950(%rip)        # 753950 <cmpPassed>
   10ffc:	01 00 00 00 
   11000:	e8 ab 24 ff ff       	callq  34b0 <_storeDataFn>
   11005:	41 83 f8 04          	cmp    $0x4,%r8d
            ctx->buf[ctx->i++] = c;
   11009:	45 89 06             	mov    %r8d,(%r14)
   1100c:	45 88 4c 2e 04       	mov    %r9b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   11011:	0f 84 e9 09 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   11017:	50                   	push   %rax
   11018:	48 c7 c0 74 e8 9c 2f 	mov    $0x2f9ce874,%rax
   1101f:	48 89 05 1a 29 74 00 	mov    %rax,0x74291a(%rip)        # 753940 <edgeId>
   11026:	58                   	pop    %rax
   11027:	e8 ec 23 ff ff       	callq  3418 <_storeEdge>
   1102c:	44 89 c5             	mov    %r8d,%ebp
   1102f:	50                   	push   %rax
   11030:	48 c7 c0 1d 3a e7 4b 	mov    $0x4be73a1d,%rax
   11037:	48 89 05 02 29 74 00 	mov    %rax,0x742902(%rip)        # 753940 <edgeId>
   1103e:	58                   	pop    %rax
   1103f:	e8 d4 23 ff ff       	callq  3418 <_storeEdge>
    while (p < in_end)
   11044:	48 89 15 cd 28 74 00 	mov    %rdx,0x7428cd(%rip)        # 753918 <tmpquadone>
   1104b:	48 89 0d de cb 5e 00 	mov    %rcx,0x5ecbde(%rip)        # 5fdc30 <tmpquadtwo>
   11052:	48 8d 15 97 cb 5e 00 	lea    0x5ecb97(%rip),%rdx        # 5fdbf0 <funcinptr>
   11059:	48 c7 02 91 00 00 00 	movq   $0x91,(%rdx)
   11060:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   11067:	00 
   11068:	48 89 d9             	mov    %rbx,%rcx
   1106b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1106f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11076:	00 
   11077:	4c 89 e9             	mov    %r13,%rcx
   1107a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1107e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11085:	00 
   11086:	ff 32                	pushq  (%rdx)
   11088:	48 8b 15 89 28 74 00 	mov    0x742889(%rip),%rdx        # 753918 <tmpquadone>
   1108f:	48 8b 0d 9a cb 5e 00 	mov    0x5ecb9a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11096:	48 c7 05 af 28 74 00 	movq   $0x1,0x7428af(%rip)        # 753950 <cmpPassed>
   1109d:	01 00 00 00 
   110a1:	e8 0a 24 ff ff       	callq  34b0 <_storeDataFn>
   110a6:	49 39 dd             	cmp    %rbx,%r13
   110a9:	0f 84 89 09 00 00    	je     11a38 <base64_decode_ctx+0x2d88>
   110af:	50                   	push   %rax
   110b0:	48 c7 c0 a1 73 be 24 	mov    $0x24be73a1,%rax
   110b7:	48 89 05 82 28 74 00 	mov    %rax,0x742882(%rip)        # 753940 <edgeId>
   110be:	58                   	pop    %rax
   110bf:	e8 54 23 ff ff       	callq  3418 <_storeEdge>
   110c4:	50                   	push   %rax
   110c5:	48 c7 c0 e8 9c 2f 49 	mov    $0x492f9ce8,%rax
   110cc:	48 89 05 6d 28 74 00 	mov    %rax,0x74286d(%rip)        # 753940 <edgeId>
   110d3:	58                   	pop    %rax
   110d4:	e8 3f 23 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   110d9:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
   110dd:	45 0f b6 51 ff       	movzbl -0x1(%r9),%r10d
   110e2:	4c 89 cb             	mov    %r9,%rbx
        if (c != '\n')
   110e5:	48 89 15 2c 28 74 00 	mov    %rdx,0x74282c(%rip)        # 753918 <tmpquadone>
   110ec:	48 89 0d 3d cb 5e 00 	mov    %rcx,0x5ecb3d(%rip)        # 5fdc30 <tmpquadtwo>
   110f3:	48 8d 15 f6 ca 5e 00 	lea    0x5ecaf6(%rip),%rdx        # 5fdbf0 <funcinptr>
   110fa:	48 c7 02 92 00 00 00 	movq   $0x92,(%rdx)
   11101:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   11108:	00 
   11109:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   11110:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11114:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1111b:	00 
   1111c:	4c 89 d1             	mov    %r10,%rcx
   1111f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11123:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1112a:	00 
   1112b:	ff 32                	pushq  (%rdx)
   1112d:	48 8b 15 e4 27 74 00 	mov    0x7427e4(%rip),%rdx        # 753918 <tmpquadone>
   11134:	48 8b 0d f5 ca 5e 00 	mov    0x5ecaf5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1113b:	48 c7 05 0a 28 74 00 	movq   $0x1,0x74280a(%rip)        # 753950 <cmpPassed>
   11142:	01 00 00 00 
   11146:	e8 65 23 ff ff       	callq  34b0 <_storeDataFn>
   1114b:	41 80 fa 0a          	cmp    $0xa,%r10b
   1114f:	0f 84 ac 00 00 00    	je     11201 <base64_decode_ctx+0x2551>
   11155:	50                   	push   %rax
   11156:	48 c7 c0 e7 4b 52 19 	mov    $0x19524be7,%rax
   1115d:	48 89 05 dc 27 74 00 	mov    %rax,0x7427dc(%rip)        # 753940 <edgeId>
   11164:	58                   	pop    %rax
   11165:	e8 ae 22 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   1116a:	44 8d 65 01          	lea    0x1(%rbp),%r12d
            if (ctx->i == 4)
   1116e:	48 89 15 a3 27 74 00 	mov    %rdx,0x7427a3(%rip)        # 753918 <tmpquadone>
   11175:	48 89 0d b4 ca 5e 00 	mov    %rcx,0x5ecab4(%rip)        # 5fdc30 <tmpquadtwo>
   1117c:	48 8d 15 6d ca 5e 00 	lea    0x5eca6d(%rip),%rdx        # 5fdbf0 <funcinptr>
   11183:	48 c7 02 93 00 00 00 	movq   $0x93,(%rdx)
   1118a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   11191:	00 
   11192:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   11199:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1119d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   111a4:	00 
   111a5:	4c 89 e1             	mov    %r12,%rcx
   111a8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   111ac:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   111b3:	00 
   111b4:	ff 32                	pushq  (%rdx)
   111b6:	48 8b 15 5b 27 74 00 	mov    0x74275b(%rip),%rdx        # 753918 <tmpquadone>
   111bd:	48 8b 0d 6c ca 5e 00 	mov    0x5eca6c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   111c4:	48 c7 05 81 27 74 00 	movq   $0x1,0x742781(%rip)        # 753950 <cmpPassed>
   111cb:	01 00 00 00 
   111cf:	e8 dc 22 ff ff       	callq  34b0 <_storeDataFn>
   111d4:	41 83 fc 04          	cmp    $0x4,%r12d
            ctx->buf[ctx->i++] = c;
   111d8:	45 89 26             	mov    %r12d,(%r14)
   111db:	45 88 54 2e 04       	mov    %r10b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   111e0:	0f 84 1a 08 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   111e6:	50                   	push   %rax
   111e7:	48 b8 25 a9 0c 84 00 	movabs $0x840ca925,%rax
   111ee:	00 00 00 
   111f1:	48 89 05 48 27 74 00 	mov    %rax,0x742748(%rip)        # 753940 <edgeId>
   111f8:	58                   	pop    %rax
   111f9:	e8 1a 22 ff ff       	callq  3418 <_storeEdge>
   111fe:	44 89 e5             	mov    %r12d,%ebp
   11201:	50                   	push   %rax
   11202:	48 c7 c0 49 2a 03 21 	mov    $0x21032a49,%rax
   11209:	48 89 05 30 27 74 00 	mov    %rax,0x742730(%rip)        # 753940 <edgeId>
   11210:	58                   	pop    %rax
   11211:	e8 02 22 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   11216:	49 8d 59 01          	lea    0x1(%r9),%rbx
   1121a:	44 0f b6 5b ff       	movzbl -0x1(%rbx),%r11d
        if (c != '\n')
   1121f:	48 89 15 f2 26 74 00 	mov    %rdx,0x7426f2(%rip)        # 753918 <tmpquadone>
   11226:	48 89 0d 03 ca 5e 00 	mov    %rcx,0x5eca03(%rip)        # 5fdc30 <tmpquadtwo>
   1122d:	48 8d 15 bc c9 5e 00 	lea    0x5ec9bc(%rip),%rdx        # 5fdbf0 <funcinptr>
   11234:	48 c7 02 94 00 00 00 	movq   $0x94,(%rdx)
   1123b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   11242:	00 
   11243:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   1124a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1124e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11255:	00 
   11256:	4c 89 d9             	mov    %r11,%rcx
   11259:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1125d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11264:	00 
   11265:	ff 32                	pushq  (%rdx)
   11267:	48 8b 15 aa 26 74 00 	mov    0x7426aa(%rip),%rdx        # 753918 <tmpquadone>
   1126e:	48 8b 0d bb c9 5e 00 	mov    0x5ec9bb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11275:	48 c7 05 d0 26 74 00 	movq   $0x1,0x7426d0(%rip)        # 753950 <cmpPassed>
   1127c:	01 00 00 00 
   11280:	e8 2b 22 ff ff       	callq  34b0 <_storeDataFn>
   11285:	41 80 fb 0a          	cmp    $0xa,%r11b
   11289:	0f 84 a9 00 00 00    	je     11338 <base64_decode_ctx+0x2688>
   1128f:	50                   	push   %rax
   11290:	48 c7 c0 2a 03 21 40 	mov    $0x4021032a,%rax
   11297:	48 89 05 a2 26 74 00 	mov    %rax,0x7426a2(%rip)        # 753940 <edgeId>
   1129e:	58                   	pop    %rax
   1129f:	e8 74 21 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   112a4:	8d 45 01             	lea    0x1(%rbp),%eax
            if (ctx->i == 4)
   112a7:	48 89 15 6a 26 74 00 	mov    %rdx,0x74266a(%rip)        # 753918 <tmpquadone>
   112ae:	48 89 0d 7b c9 5e 00 	mov    %rcx,0x5ec97b(%rip)        # 5fdc30 <tmpquadtwo>
   112b5:	48 8d 15 34 c9 5e 00 	lea    0x5ec934(%rip),%rdx        # 5fdbf0 <funcinptr>
   112bc:	48 c7 02 95 00 00 00 	movq   $0x95,(%rdx)
   112c3:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   112ca:	00 
   112cb:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   112d2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   112d6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   112dd:	00 
   112de:	48 89 c1             	mov    %rax,%rcx
   112e1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   112e5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   112ec:	00 
   112ed:	ff 32                	pushq  (%rdx)
   112ef:	48 8b 15 22 26 74 00 	mov    0x742622(%rip),%rdx        # 753918 <tmpquadone>
   112f6:	48 8b 0d 33 c9 5e 00 	mov    0x5ec933(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   112fd:	48 c7 05 48 26 74 00 	movq   $0x1,0x742648(%rip)        # 753950 <cmpPassed>
   11304:	01 00 00 00 
   11308:	e8 a3 21 ff ff       	callq  34b0 <_storeDataFn>
   1130d:	83 f8 04             	cmp    $0x4,%eax
            ctx->buf[ctx->i++] = c;
   11310:	41 89 06             	mov    %eax,(%r14)
   11313:	45 88 5c 2e 04       	mov    %r11b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   11318:	0f 84 e2 06 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   1131e:	50                   	push   %rax
   1131f:	48 b8 81 10 20 d5 00 	movabs $0xd5201081,%rax
   11326:	00 00 00 
   11329:	48 89 05 10 26 74 00 	mov    %rax,0x742610(%rip)        # 753940 <edgeId>
   11330:	58                   	pop    %rax
   11331:	e8 e2 20 ff ff       	callq  3418 <_storeEdge>
   11336:	89 c5                	mov    %eax,%ebp
   11338:	50                   	push   %rax
   11339:	48 c7 c0 20 04 48 35 	mov    $0x35480420,%rax
   11340:	48 89 05 f9 25 74 00 	mov    %rax,0x7425f9(%rip)        # 753940 <edgeId>
   11347:	58                   	pop    %rax
   11348:	e8 cb 20 ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   1134d:	49 8d 59 02          	lea    0x2(%r9),%rbx
   11351:	0f b6 53 ff          	movzbl -0x1(%rbx),%edx
        if (c != '\n')
   11355:	48 89 0d bc 25 74 00 	mov    %rcx,0x7425bc(%rip)        # 753918 <tmpquadone>
   1135c:	48 89 1d cd c8 5e 00 	mov    %rbx,0x5ec8cd(%rip)        # 5fdc30 <tmpquadtwo>
   11363:	48 8d 0d 86 c8 5e 00 	lea    0x5ec886(%rip),%rcx        # 5fdbf0 <funcinptr>
   1136a:	48 c7 01 96 00 00 00 	movq   $0x96,(%rcx)
   11371:	48 c7 41 08 62 00 00 	movq   $0x62,0x8(%rcx)
   11378:	00 
   11379:	48 c7 c3 0a 00 00 00 	mov    $0xa,%rbx
   11380:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   11384:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1138b:	00 
   1138c:	48 89 d3             	mov    %rdx,%rbx
   1138f:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   11393:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1139a:	00 
   1139b:	ff 31                	pushq  (%rcx)
   1139d:	48 8b 0d 74 25 74 00 	mov    0x742574(%rip),%rcx        # 753918 <tmpquadone>
   113a4:	48 8b 1d 85 c8 5e 00 	mov    0x5ec885(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   113ab:	48 c7 05 9a 25 74 00 	movq   $0x1,0x74259a(%rip)        # 753950 <cmpPassed>
   113b2:	01 00 00 00 
   113b6:	e8 f5 20 ff ff       	callq  34b0 <_storeDataFn>
   113bb:	80 fa 0a             	cmp    $0xa,%dl
   113be:	0f 84 a6 00 00 00    	je     1146a <base64_decode_ctx+0x27ba>
   113c4:	50                   	push   %rax
   113c5:	48 c7 c0 04 48 35 02 	mov    $0x2354804,%rax
   113cc:	48 89 05 6d 25 74 00 	mov    %rax,0x74256d(%rip)        # 753940 <edgeId>
   113d3:	58                   	pop    %rax
   113d4:	e8 3f 20 ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   113d9:	8d 4d 01             	lea    0x1(%rbp),%ecx
            if (ctx->i == 4)
   113dc:	48 89 15 35 25 74 00 	mov    %rdx,0x742535(%rip)        # 753918 <tmpquadone>
   113e3:	48 89 1d 46 c8 5e 00 	mov    %rbx,0x5ec846(%rip)        # 5fdc30 <tmpquadtwo>
   113ea:	48 8d 15 ff c7 5e 00 	lea    0x5ec7ff(%rip),%rdx        # 5fdbf0 <funcinptr>
   113f1:	48 c7 02 97 00 00 00 	movq   $0x97,(%rdx)
   113f8:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   113ff:	00 
   11400:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
   11407:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1140b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11412:	00 
   11413:	48 89 cb             	mov    %rcx,%rbx
   11416:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1141a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11421:	00 
   11422:	ff 32                	pushq  (%rdx)
   11424:	48 8b 15 ed 24 74 00 	mov    0x7424ed(%rip),%rdx        # 753918 <tmpquadone>
   1142b:	48 8b 1d fe c7 5e 00 	mov    0x5ec7fe(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   11432:	48 c7 05 13 25 74 00 	movq   $0x1,0x742513(%rip)        # 753950 <cmpPassed>
   11439:	01 00 00 00 
   1143d:	e8 6e 20 ff ff       	callq  34b0 <_storeDataFn>
   11442:	83 f9 04             	cmp    $0x4,%ecx
            ctx->buf[ctx->i++] = c;
   11445:	41 89 0e             	mov    %ecx,(%r14)
   11448:	41 88 54 2e 04       	mov    %dl,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   1144d:	0f 84 ad 05 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   11453:	50                   	push   %rax
   11454:	48 c7 c0 a4 1a 81 67 	mov    $0x67811aa4,%rax
   1145b:	48 89 05 de 24 74 00 	mov    %rax,0x7424de(%rip)        # 753940 <edgeId>
   11462:	58                   	pop    %rax
   11463:	e8 b0 1f ff ff       	callq  3418 <_storeEdge>
   11468:	89 cd                	mov    %ecx,%ebp
   1146a:	50                   	push   %rax
   1146b:	48 c7 c0 a9 46 e0 19 	mov    $0x19e046a9,%rax
   11472:	48 89 05 c7 24 74 00 	mov    %rax,0x7424c7(%rip)        # 753940 <edgeId>
   11479:	58                   	pop    %rax
   1147a:	e8 99 1f ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   1147f:	49 8d 59 03          	lea    0x3(%r9),%rbx
   11483:	0f b6 73 ff          	movzbl -0x1(%rbx),%esi
        if (c != '\n')
   11487:	48 89 15 8a 24 74 00 	mov    %rdx,0x74248a(%rip)        # 753918 <tmpquadone>
   1148e:	48 89 0d 9b c7 5e 00 	mov    %rcx,0x5ec79b(%rip)        # 5fdc30 <tmpquadtwo>
   11495:	48 8d 15 54 c7 5e 00 	lea    0x5ec754(%rip),%rdx        # 5fdbf0 <funcinptr>
   1149c:	48 c7 02 98 00 00 00 	movq   $0x98,(%rdx)
   114a3:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   114aa:	00 
   114ab:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   114b2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   114b6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   114bd:	00 
   114be:	48 89 f1             	mov    %rsi,%rcx
   114c1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   114c5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   114cc:	00 
   114cd:	ff 32                	pushq  (%rdx)
   114cf:	48 8b 15 42 24 74 00 	mov    0x742442(%rip),%rdx        # 753918 <tmpquadone>
   114d6:	48 8b 0d 53 c7 5e 00 	mov    0x5ec753(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   114dd:	48 c7 05 68 24 74 00 	movq   $0x1,0x742468(%rip)        # 753950 <cmpPassed>
   114e4:	01 00 00 00 
   114e8:	e8 c3 1f ff ff       	callq  34b0 <_storeDataFn>
   114ed:	40 80 fe 0a          	cmp    $0xa,%sil
   114f1:	0f 84 a9 00 00 00    	je     115a0 <base64_decode_ctx+0x28f0>
   114f7:	50                   	push   %rax
   114f8:	48 b8 46 e0 19 aa 00 	movabs $0xaa19e046,%rax
   114ff:	00 00 00 
   11502:	48 89 05 37 24 74 00 	mov    %rax,0x742437(%rip)        # 753940 <edgeId>
   11509:	58                   	pop    %rax
   1150a:	e8 09 1f ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   1150f:	8d 7d 01             	lea    0x1(%rbp),%edi
            if (ctx->i == 4)
   11512:	48 89 15 ff 23 74 00 	mov    %rdx,0x7423ff(%rip)        # 753918 <tmpquadone>
   11519:	48 89 0d 10 c7 5e 00 	mov    %rcx,0x5ec710(%rip)        # 5fdc30 <tmpquadtwo>
   11520:	48 8d 15 c9 c6 5e 00 	lea    0x5ec6c9(%rip),%rdx        # 5fdbf0 <funcinptr>
   11527:	48 c7 02 99 00 00 00 	movq   $0x99,(%rdx)
   1152e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   11535:	00 
   11536:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   1153d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11541:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11548:	00 
   11549:	48 89 f9             	mov    %rdi,%rcx
   1154c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11550:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11557:	00 
   11558:	ff 32                	pushq  (%rdx)
   1155a:	48 8b 15 b7 23 74 00 	mov    0x7423b7(%rip),%rdx        # 753918 <tmpquadone>
   11561:	48 8b 0d c8 c6 5e 00 	mov    0x5ec6c8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11568:	48 c7 05 dd 23 74 00 	movq   $0x1,0x7423dd(%rip)        # 753950 <cmpPassed>
   1156f:	01 00 00 00 
   11573:	e8 38 1f ff ff       	callq  34b0 <_storeDataFn>
   11578:	83 ff 04             	cmp    $0x4,%edi
            ctx->buf[ctx->i++] = c;
   1157b:	41 89 3e             	mov    %edi,(%r14)
   1157e:	41 88 74 2e 04       	mov    %sil,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   11583:	0f 84 77 04 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   11589:	50                   	push   %rax
   1158a:	48 c7 c0 f0 0c d5 29 	mov    $0x29d50cf0,%rax
   11591:	48 89 05 a8 23 74 00 	mov    %rax,0x7423a8(%rip)        # 753940 <edgeId>
   11598:	58                   	pop    %rax
   11599:	e8 7a 1e ff ff       	callq  3418 <_storeEdge>
   1159e:	89 fd                	mov    %edi,%ebp
   115a0:	50                   	push   %rax
   115a1:	48 c7 c0 3c 43 75 4a 	mov    $0x4a75433c,%rax
   115a8:	48 89 05 91 23 74 00 	mov    %rax,0x742391(%rip)        # 753940 <edgeId>
   115af:	58                   	pop    %rax
   115b0:	e8 63 1e ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   115b5:	49 8d 59 04          	lea    0x4(%r9),%rbx
   115b9:	44 0f b6 43 ff       	movzbl -0x1(%rbx),%r8d
        if (c != '\n')
   115be:	48 89 15 53 23 74 00 	mov    %rdx,0x742353(%rip)        # 753918 <tmpquadone>
   115c5:	48 89 0d 64 c6 5e 00 	mov    %rcx,0x5ec664(%rip)        # 5fdc30 <tmpquadtwo>
   115cc:	48 8d 15 1d c6 5e 00 	lea    0x5ec61d(%rip),%rdx        # 5fdbf0 <funcinptr>
   115d3:	48 c7 02 9a 00 00 00 	movq   $0x9a,(%rdx)
   115da:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   115e1:	00 
   115e2:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   115e9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   115ed:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   115f4:	00 
   115f5:	4c 89 c1             	mov    %r8,%rcx
   115f8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   115fc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11603:	00 
   11604:	ff 32                	pushq  (%rdx)
   11606:	48 8b 15 0b 23 74 00 	mov    0x74230b(%rip),%rdx        # 753918 <tmpquadone>
   1160d:	48 8b 0d 1c c6 5e 00 	mov    0x5ec61c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11614:	48 c7 05 31 23 74 00 	movq   $0x1,0x742331(%rip)        # 753950 <cmpPassed>
   1161b:	01 00 00 00 
   1161f:	e8 8c 1e ff ff       	callq  34b0 <_storeDataFn>
   11624:	41 80 f8 0a          	cmp    $0xa,%r8b
   11628:	0f 84 af 00 00 00    	je     116dd <base64_decode_ctx+0x2a2d>
   1162e:	50                   	push   %rax
   1162f:	48 b8 43 75 4a 97 00 	movabs $0x974a7543,%rax
   11636:	00 00 00 
   11639:	48 89 05 00 23 74 00 	mov    %rax,0x742300(%rip)        # 753940 <edgeId>
   11640:	58                   	pop    %rax
   11641:	e8 d2 1d ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   11646:	44 8d 55 01          	lea    0x1(%rbp),%r10d
            if (ctx->i == 4)
   1164a:	48 89 15 c7 22 74 00 	mov    %rdx,0x7422c7(%rip)        # 753918 <tmpquadone>
   11651:	48 89 0d d8 c5 5e 00 	mov    %rcx,0x5ec5d8(%rip)        # 5fdc30 <tmpquadtwo>
   11658:	48 8d 15 91 c5 5e 00 	lea    0x5ec591(%rip),%rdx        # 5fdbf0 <funcinptr>
   1165f:	48 c7 02 9b 00 00 00 	movq   $0x9b,(%rdx)
   11666:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1166d:	00 
   1166e:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   11675:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11679:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11680:	00 
   11681:	4c 89 d1             	mov    %r10,%rcx
   11684:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11688:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1168f:	00 
   11690:	ff 32                	pushq  (%rdx)
   11692:	48 8b 15 7f 22 74 00 	mov    0x74227f(%rip),%rdx        # 753918 <tmpquadone>
   11699:	48 8b 0d 90 c5 5e 00 	mov    0x5ec590(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   116a0:	48 c7 05 a5 22 74 00 	movq   $0x1,0x7422a5(%rip)        # 753950 <cmpPassed>
   116a7:	01 00 00 00 
   116ab:	e8 00 1e ff ff       	callq  34b0 <_storeDataFn>
   116b0:	41 83 fa 04          	cmp    $0x4,%r10d
            ctx->buf[ctx->i++] = c;
   116b4:	45 89 16             	mov    %r10d,(%r14)
   116b7:	45 88 44 2e 04       	mov    %r8b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   116bc:	0f 84 3e 03 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   116c2:	50                   	push   %rax
   116c3:	48 b8 9d d2 e5 98 00 	movabs $0x98e5d29d,%rax
   116ca:	00 00 00 
   116cd:	48 89 05 6c 22 74 00 	mov    %rax,0x74226c(%rip)        # 753940 <edgeId>
   116d4:	58                   	pop    %rax
   116d5:	e8 3e 1d ff ff       	callq  3418 <_storeEdge>
   116da:	44 89 d5             	mov    %r10d,%ebp
   116dd:	50                   	push   %rax
   116de:	48 c7 c0 a7 74 39 66 	mov    $0x663974a7,%rax
   116e5:	48 89 05 54 22 74 00 	mov    %rax,0x742254(%rip)        # 753940 <edgeId>
   116ec:	58                   	pop    %rax
   116ed:	e8 26 1d ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   116f2:	49 8d 59 05          	lea    0x5(%r9),%rbx
   116f6:	44 0f b6 63 ff       	movzbl -0x1(%rbx),%r12d
        if (c != '\n')
   116fb:	48 89 15 16 22 74 00 	mov    %rdx,0x742216(%rip)        # 753918 <tmpquadone>
   11702:	48 89 0d 27 c5 5e 00 	mov    %rcx,0x5ec527(%rip)        # 5fdc30 <tmpquadtwo>
   11709:	48 8d 15 e0 c4 5e 00 	lea    0x5ec4e0(%rip),%rdx        # 5fdbf0 <funcinptr>
   11710:	48 c7 02 9c 00 00 00 	movq   $0x9c,(%rdx)
   11717:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1171e:	00 
   1171f:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   11726:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1172a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11731:	00 
   11732:	4c 89 e1             	mov    %r12,%rcx
   11735:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11739:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11740:	00 
   11741:	ff 32                	pushq  (%rdx)
   11743:	48 8b 15 ce 21 74 00 	mov    0x7421ce(%rip),%rdx        # 753918 <tmpquadone>
   1174a:	48 8b 0d df c4 5e 00 	mov    0x5ec4df(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11751:	48 c7 05 f4 21 74 00 	movq   $0x1,0x7421f4(%rip)        # 753950 <cmpPassed>
   11758:	01 00 00 00 
   1175c:	e8 4f 1d ff ff       	callq  34b0 <_storeDataFn>
   11761:	41 80 fc 0a          	cmp    $0xa,%r12b
   11765:	0f 84 af 00 00 00    	je     1181a <base64_decode_ctx+0x2b6a>
   1176b:	50                   	push   %rax
   1176c:	48 b8 74 39 66 ab 00 	movabs $0xab663974,%rax
   11773:	00 00 00 
   11776:	48 89 05 c3 21 74 00 	mov    %rax,0x7421c3(%rip)        # 753940 <edgeId>
   1177d:	58                   	pop    %rax
   1177e:	e8 95 1c ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   11783:	44 8d 5d 01          	lea    0x1(%rbp),%r11d
            if (ctx->i == 4)
   11787:	48 89 15 8a 21 74 00 	mov    %rdx,0x74218a(%rip)        # 753918 <tmpquadone>
   1178e:	48 89 0d 9b c4 5e 00 	mov    %rcx,0x5ec49b(%rip)        # 5fdc30 <tmpquadtwo>
   11795:	48 8d 15 54 c4 5e 00 	lea    0x5ec454(%rip),%rdx        # 5fdbf0 <funcinptr>
   1179c:	48 c7 02 9d 00 00 00 	movq   $0x9d,(%rdx)
   117a3:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   117aa:	00 
   117ab:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   117b2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   117b6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   117bd:	00 
   117be:	4c 89 d9             	mov    %r11,%rcx
   117c1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   117c5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   117cc:	00 
   117cd:	ff 32                	pushq  (%rdx)
   117cf:	48 8b 15 42 21 74 00 	mov    0x742142(%rip),%rdx        # 753918 <tmpquadone>
   117d6:	48 8b 0d 53 c4 5e 00 	mov    0x5ec453(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   117dd:	48 c7 05 68 21 74 00 	movq   $0x1,0x742168(%rip)        # 753950 <cmpPassed>
   117e4:	01 00 00 00 
   117e8:	e8 c3 1c ff ff       	callq  34b0 <_storeDataFn>
   117ed:	41 83 fb 04          	cmp    $0x4,%r11d
            ctx->buf[ctx->i++] = c;
   117f1:	45 89 1e             	mov    %r11d,(%r14)
   117f4:	45 88 64 2e 04       	mov    %r12b,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   117f9:	0f 84 01 02 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   117ff:	50                   	push   %rax
   11800:	48 b8 1c b3 55 be 00 	movabs $0xbe55b31c,%rax
   11807:	00 00 00 
   1180a:	48 89 05 2f 21 74 00 	mov    %rax,0x74212f(%rip)        # 753940 <edgeId>
   11811:	58                   	pop    %rax
   11812:	e8 01 1c ff ff       	callq  3418 <_storeEdge>
   11817:	44 89 dd             	mov    %r11d,%ebp
   1181a:	50                   	push   %rax
   1181b:	48 c7 c0 c7 6c 95 6f 	mov    $0x6f956cc7,%rax
   11822:	48 89 05 17 21 74 00 	mov    %rax,0x742117(%rip)        # 753940 <edgeId>
   11829:	58                   	pop    %rax
   1182a:	e8 e9 1b ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   1182f:	49 8d 59 06          	lea    0x6(%r9),%rbx
   11833:	0f b6 43 ff          	movzbl -0x1(%rbx),%eax
        if (c != '\n')
   11837:	48 89 15 da 20 74 00 	mov    %rdx,0x7420da(%rip)        # 753918 <tmpquadone>
   1183e:	48 89 0d eb c3 5e 00 	mov    %rcx,0x5ec3eb(%rip)        # 5fdc30 <tmpquadtwo>
   11845:	48 8d 15 a4 c3 5e 00 	lea    0x5ec3a4(%rip),%rdx        # 5fdbf0 <funcinptr>
   1184c:	48 c7 02 9e 00 00 00 	movq   $0x9e,(%rdx)
   11853:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1185a:	00 
   1185b:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   11862:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11866:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1186d:	00 
   1186e:	48 89 c1             	mov    %rax,%rcx
   11871:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11875:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1187c:	00 
   1187d:	ff 32                	pushq  (%rdx)
   1187f:	48 8b 15 92 20 74 00 	mov    0x742092(%rip),%rdx        # 753918 <tmpquadone>
   11886:	48 8b 0d a3 c3 5e 00 	mov    0x5ec3a3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1188d:	48 c7 05 b8 20 74 00 	movq   $0x1,0x7420b8(%rip)        # 753950 <cmpPassed>
   11894:	01 00 00 00 
   11898:	e8 13 1c ff ff       	callq  34b0 <_storeDataFn>
   1189d:	3c 0a                	cmp    $0xa,%al
   1189f:	0f 84 a9 00 00 00    	je     1194e <base64_decode_ctx+0x2c9e>
   118a5:	50                   	push   %rax
   118a6:	48 b8 6c 95 6f a3 00 	movabs $0xa36f956c,%rax
   118ad:	00 00 00 
   118b0:	48 89 05 89 20 74 00 	mov    %rax,0x742089(%rip)        # 753940 <edgeId>
   118b7:	58                   	pop    %rax
   118b8:	e8 5b 1b ff ff       	callq  3418 <_storeEdge>
            ctx->buf[ctx->i++] = c;
   118bd:	8d 55 01             	lea    0x1(%rbp),%edx
            if (ctx->i == 4)
   118c0:	48 89 0d 51 20 74 00 	mov    %rcx,0x742051(%rip)        # 753918 <tmpquadone>
   118c7:	48 89 1d 62 c3 5e 00 	mov    %rbx,0x5ec362(%rip)        # 5fdc30 <tmpquadtwo>
   118ce:	48 8d 0d 1b c3 5e 00 	lea    0x5ec31b(%rip),%rcx        # 5fdbf0 <funcinptr>
   118d5:	48 c7 01 9f 00 00 00 	movq   $0x9f,(%rcx)
   118dc:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
   118e3:	00 
   118e4:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
   118eb:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   118ef:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   118f6:	00 
   118f7:	48 89 d3             	mov    %rdx,%rbx
   118fa:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   118fe:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   11905:	00 
   11906:	ff 31                	pushq  (%rcx)
   11908:	48 8b 0d 09 20 74 00 	mov    0x742009(%rip),%rcx        # 753918 <tmpquadone>
   1190f:	48 8b 1d 1a c3 5e 00 	mov    0x5ec31a(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   11916:	48 c7 05 2f 20 74 00 	movq   $0x1,0x74202f(%rip)        # 753950 <cmpPassed>
   1191d:	01 00 00 00 
   11921:	e8 8a 1b ff ff       	callq  34b0 <_storeDataFn>
   11926:	83 fa 04             	cmp    $0x4,%edx
            ctx->buf[ctx->i++] = c;
   11929:	41 89 16             	mov    %edx,(%r14)
   1192c:	41 88 44 2e 04       	mov    %al,0x4(%r14,%rbp,1)
            if (ctx->i == 4)
   11931:	0f 84 c9 00 00 00    	je     11a00 <base64_decode_ctx+0x2d50>
   11937:	50                   	push   %rax
   11938:	48 c7 c0 ca b7 51 6f 	mov    $0x6f51b7ca,%rax
   1193f:	48 89 05 fa 1f 74 00 	mov    %rax,0x741ffa(%rip)        # 753940 <edgeId>
   11946:	58                   	pop    %rax
   11947:	e8 cc 1a ff ff       	callq  3418 <_storeEdge>
   1194c:	89 d5                	mov    %edx,%ebp
   1194e:	50                   	push   %rax
   1194f:	48 c7 c0 f2 6d d4 5b 	mov    $0x5bd46df2,%rax
   11956:	48 89 05 e3 1f 74 00 	mov    %rax,0x741fe3(%rip)        # 753940 <edgeId>
   1195d:	58                   	pop    %rax
   1195e:	e8 b5 1a ff ff       	callq  3418 <_storeEdge>
        char c = *p++;
   11963:	49 8d 59 07          	lea    0x7(%r9),%rbx
   11967:	44 0f b6 4b ff       	movzbl -0x1(%rbx),%r9d
        if (c != '\n')
   1196c:	48 89 15 a5 1f 74 00 	mov    %rdx,0x741fa5(%rip)        # 753918 <tmpquadone>
   11973:	48 89 0d b6 c2 5e 00 	mov    %rcx,0x5ec2b6(%rip)        # 5fdc30 <tmpquadtwo>
   1197a:	48 8d 15 6f c2 5e 00 	lea    0x5ec26f(%rip),%rdx        # 5fdbf0 <funcinptr>
   11981:	48 c7 02 a0 00 00 00 	movq   $0xa0,(%rdx)
   11988:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1198f:	00 
   11990:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   11997:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1199b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   119a2:	00 
   119a3:	4c 89 c9             	mov    %r9,%rcx
   119a6:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   119aa:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   119b1:	00 
   119b2:	ff 32                	pushq  (%rdx)
   119b4:	48 8b 15 5d 1f 74 00 	mov    0x741f5d(%rip),%rdx        # 753918 <tmpquadone>
   119bb:	48 8b 0d 6e c2 5e 00 	mov    0x5ec26e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   119c2:	48 c7 05 83 1f 74 00 	movq   $0x1,0x741f83(%rip)        # 753950 <cmpPassed>
   119c9:	01 00 00 00 
   119cd:	e8 de 1a ff ff       	callq  34b0 <_storeDataFn>
   119d2:	41 80 f9 0a          	cmp    $0xa,%r9b
   119d6:	0f 85 aa f5 ff ff    	jne    10f86 <base64_decode_ctx+0x22d6>
   119dc:	50                   	push   %rax
   119dd:	48 c7 c0 6d d4 5b 5f 	mov    $0x5f5bd46d,%rax
   119e4:	48 89 05 55 1f 74 00 	mov    %rax,0x741f55(%rip)        # 753940 <edgeId>
   119eb:	58                   	pop    %rax
   119ec:	e8 27 1a ff ff       	callq  3418 <_storeEdge>
   119f1:	e9 39 f6 ff ff       	jmpq   1102f <base64_decode_ctx+0x237f>
   119f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   119fd:	00 00 00 
   11a00:	50                   	push   %rax
   11a01:	48 b8 46 bd f5 c5 00 	movabs $0xc5f5bd46,%rax
   11a08:	00 00 00 
   11a0b:	48 89 05 2e 1f 74 00 	mov    %rax,0x741f2e(%rip)        # 753940 <edgeId>
   11a12:	58                   	pop    %rax
   11a13:	e8 00 1a ff ff       	callq  3418 <_storeEdge>
            if (ctx->i == 4)
   11a18:	bd 04 00 00 00       	mov    $0x4,%ebp
   11a1d:	50                   	push   %rax
   11a1e:	48 b8 d4 5b 5f bc 00 	movabs $0xbc5f5bd4,%rax
   11a25:	00 00 00 
   11a28:	48 89 05 11 1f 74 00 	mov    %rax,0x741f11(%rip)        # 753940 <edgeId>
   11a2f:	58                   	pop    %rax
   11a30:	e8 e3 19 ff ff       	callq  3418 <_storeEdge>
   11a35:	49 89 dd             	mov    %rbx,%r13
   11a38:	50                   	push   %rax
   11a39:	48 c7 c0 7a eb 8b 57 	mov    $0x578beb7a,%rax
   11a40:	48 89 05 f9 1e 74 00 	mov    %rax,0x741ef9(%rip)        # 753940 <edgeId>
   11a47:	58                   	pop    %rax
   11a48:	e8 cb 19 ff ff       	callq  3418 <_storeEdge>
    return ctx->buf;
   11a4d:	49 8d 5e 04          	lea    0x4(%r14),%rbx
    *in = p;
   11a51:	4d 89 2f             	mov    %r13,(%r15)
   11a54:	50                   	push   %rax
   11a55:	48 b8 d6 17 af f4 00 	movabs $0xf4af17d6,%rax
   11a5c:	00 00 00 
   11a5f:	48 89 05 da 1e 74 00 	mov    %rax,0x741eda(%rip)        # 753940 <edgeId>
   11a66:	58                   	pop    %rax
   11a67:	e8 ac 19 ff ff       	callq  3418 <_storeEdge>
          }char * kbcieiubweuhc2145174067 = get_4 (ctx+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))), &in+(lava_get(235))*(0x6c617576==(lava_get(235))||0x7675616c==(lava_get(235))), in_end+(lava_get(526))*(0x6c617453==(lava_get(526))||0x5374616c==(lava_get(526))), &inlen);if (((in)) && ((in)))  {int lava_284 = 0;
   11a6c:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
   11a71:	4d 85 f6             	test   %r14,%r14
   11a74:	74 22                	je     11a98 <base64_decode_ctx+0x2de8>
   11a76:	50                   	push   %rax
   11a77:	48 c7 c0 2f 5e e9 4b 	mov    $0x4be95e2f,%rax
   11a7e:	48 89 05 bb 1e 74 00 	mov    %rax,0x741ebb(%rip)        # 753940 <edgeId>
   11a85:	58                   	pop    %rax
   11a86:	e8 8d 19 ff ff       	callq  3418 <_storeEdge>
lava_284 |= ((unsigned char *) (in))[0] << (0*8);lava_284 |= ((unsigned char *) (in))[1] << (1*8);lava_284 |= ((unsigned char *) (in))[2] << (2*8);lava_284 |= ((unsigned char *) (in))[3] << (3*8);lava_set(284,lava_284);
   11a8b:	41 8b 36             	mov    (%r14),%esi
   11a8e:	bf 1c 01 00 00       	mov    $0x11c,%edi
   11a93:	e8 e8 b3 ff ff       	callq  ce80 <lava_set>
   11a98:	50                   	push   %rax
   11a99:	48 b8 5e e9 4b ec 00 	movabs $0xec4be95e,%rax
   11aa0:	00 00 00 
   11aa3:	48 89 05 96 1e 74 00 	mov    %rax,0x741e96(%rip)        # 753940 <edgeId>
   11aaa:	58                   	pop    %rax
   11aab:	e8 68 19 ff ff       	callq  3418 <_storeEdge>
lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(804,lava_804);
   11ab0:	8b 33                	mov    (%rbx),%esi
   11ab2:	bf 24 03 00 00       	mov    $0x324,%edi
   11ab7:	e8 c4 b3 ff ff       	callq  ce80 <lava_set>
lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(582,lava_582);
   11abc:	8b 33                	mov    (%rbx),%esi
   11abe:	bf 46 02 00 00       	mov    $0x246,%edi
   11ac3:	e8 b8 b3 ff ff       	callq  ce80 <lava_set>
lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(841,lava_841);
   11ac8:	8b 33                	mov    (%rbx),%esi
   11aca:	bf 49 03 00 00       	mov    $0x349,%edi
   11acf:	e8 ac b3 ff ff       	callq  ce80 <lava_set>
        if (inlen == 0 || (inlen < 4 && !flush_ctx && ignore_newlines))
   11ad4:	48 85 ed             	test   %rbp,%rbp
   11ad7:	0f 85 e9 d4 ff ff    	jne    efc6 <base64_decode_ctx+0x316>
   11add:	50                   	push   %rax
   11ade:	48 c7 c0 b1 ab da 3d 	mov    $0x3ddaabb1,%rax
   11ae5:	48 89 05 54 1e 74 00 	mov    %rax,0x741e54(%rip)        # 753940 <edgeId>
   11aec:	58                   	pop    %rax
   11aed:	e8 26 19 ff ff       	callq  3418 <_storeEdge>
   11af2:	50                   	push   %rax
   11af3:	48 c7 c0 d8 55 ed 1e 	mov    $0x1eed55d8,%rax
   11afa:	48 89 05 3f 1e 74 00 	mov    %rax,0x741e3f(%rip)        # 753940 <edgeId>
   11b01:	58                   	pop    %rax
   11b02:	e8 11 19 ff ff       	callq  3418 <_storeEdge>
   11b07:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
          *n_non_newline = 4;
   11b0c:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   11b12:	e9 79 e2 ff ff       	jmpq   fd90 <base64_decode_ctx+0x10e0>
   11b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   11b1e:	00 00 
   11b20:	50                   	push   %rax
   11b21:	48 b8 d5 ee 91 fd 00 	movabs $0xfd91eed5,%rax
   11b28:	00 00 00 
   11b2b:	48 89 05 0e 1e 74 00 	mov    %rax,0x741e0e(%rip)        # 753940 <edgeId>
   11b32:	58                   	pop    %rax
   11b33:	e8 e0 18 ff ff       	callq  3418 <_storeEdge>
    ctx->i = 0;
   11b38:	41 c7 06 00 00 00 00 	movl   $0x0,(%r14)
   11b3f:	50                   	push   %rax
   11b40:	48 c7 c0 ed 1e d9 0f 	mov    $0xfd91eed,%rax
   11b47:	48 89 05 f2 1d 74 00 	mov    %rax,0x741df2(%rip)        # 753940 <edgeId>
   11b4e:	58                   	pop    %rax
   11b4f:	e8 c4 18 ff ff       	callq  3418 <_storeEdge>
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
   11b54:	4c 89 ed             	mov    %r13,%rbp
   11b57:	48 29 dd             	sub    %rbx,%rbp
   11b5a:	48 89 15 b7 1d 74 00 	mov    %rdx,0x741db7(%rip)        # 753918 <tmpquadone>
   11b61:	48 89 0d c8 c0 5e 00 	mov    %rcx,0x5ec0c8(%rip)        # 5fdc30 <tmpquadtwo>
   11b68:	48 8d 15 81 c0 5e 00 	lea    0x5ec081(%rip),%rdx        # 5fdbf0 <funcinptr>
   11b6f:	48 c7 02 a1 00 00 00 	movq   $0xa1,(%rdx)
   11b76:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   11b7d:	00 
   11b7e:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
   11b85:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11b89:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11b90:	00 
   11b91:	48 89 e9             	mov    %rbp,%rcx
   11b94:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11b98:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11b9f:	00 
   11ba0:	ff 32                	pushq  (%rdx)
   11ba2:	48 8b 15 6f 1d 74 00 	mov    0x741d6f(%rip),%rdx        # 753918 <tmpquadone>
   11ba9:	48 8b 0d 80 c0 5e 00 	mov    0x5ec080(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11bb0:	48 c7 05 95 1d 74 00 	movq   $0x1,0x741d95(%rip)        # 753950 <cmpPassed>
   11bb7:	01 00 00 00 
   11bbb:	e8 f0 18 ff ff       	callq  34b0 <_storeDataFn>
   11bc0:	48 83 fd 03          	cmp    $0x3,%rbp
   11bc4:	0f 8e 7e 01 00 00    	jle    11d48 <base64_decode_ctx+0x3098>
   11bca:	50                   	push   %rax
   11bcb:	48 b8 3d b2 1f fa 00 	movabs $0xfa1fb23d,%rax
   11bd2:	00 00 00 
   11bd5:	48 89 05 64 1d 74 00 	mov    %rax,0x741d64(%rip)        # 753940 <edgeId>
   11bdc:	58                   	pop    %rax
   11bdd:	e8 36 18 ff ff       	callq  3418 <_storeEdge>
   11be2:	48 85 db             	test   %rbx,%rbx
   11be5:	74 30                	je     11c17 <base64_decode_ctx+0x2f67>
   11be7:	50                   	push   %rax
   11be8:	48 b8 47 f6 43 df 00 	movabs $0xdf43f647,%rax
   11bef:	00 00 00 
   11bf2:	48 89 05 47 1d 74 00 	mov    %rax,0x741d47(%rip)        # 753940 <edgeId>
   11bf9:	58                   	pop    %rax
   11bfa:	e8 19 18 ff ff       	callq  3418 <_storeEdge>
      lava_774 |= ((unsigned char *) (t))[0] << (0*8);lava_774 |= ((unsigned char *) (t))[1] << (1*8);lava_774 |= ((unsigned char *) (t))[2] << (2*8);lava_774 |= ((unsigned char *) (t))[3] << (3*8);lava_set(774,lava_774);
   11bff:	8b 33                	mov    (%rbx),%esi
   11c01:	bf 06 03 00 00       	mov    $0x306,%edi
   11c06:	e8 75 b2 ff ff       	callq  ce80 <lava_set>
      lava_386 |= ((unsigned char *) (t))[0] << (0*8);lava_386 |= ((unsigned char *) (t))[1] << (1*8);lava_386 |= ((unsigned char *) (t))[2] << (2*8);lava_386 |= ((unsigned char *) (t))[3] << (3*8);lava_set(386,lava_386);
   11c0b:	8b 33                	mov    (%rbx),%esi
   11c0d:	bf 82 01 00 00       	mov    $0x182,%edi
   11c12:	e8 69 b2 ff ff       	callq  ce80 <lava_set>
   11c17:	50                   	push   %rax
   11c18:	48 c7 c0 1f fa ee 2d 	mov    $0x2deefa1f,%rax
   11c1f:	48 89 05 1a 1d 74 00 	mov    %rax,0x741d1a(%rip)        # 753940 <edgeId>
   11c26:	58                   	pop    %rax
   11c27:	e8 ec 17 ff ff       	callq  3418 <_storeEdge>
      }void * kbcieiubweuhc1365180540 = memchr (t, '\n', 4);kbcieiubweuhc1365180540;}) == NULL)
   11c2c:	ba 04 00 00 00       	mov    $0x4,%edx
   11c31:	be 0a 00 00 00       	mov    $0xa,%esi
   11c36:	48 89 df             	mov    %rbx,%rdi
   11c39:	e8 f2 fd fe ff       	callq  1a30 <memchr@plt>
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
   11c3e:	48 85 c0             	test   %rax,%rax
   11c41:	0f 84 59 01 00 00    	je     11da0 <base64_decode_ctx+0x30f0>
   11c47:	50                   	push   %rax
   11c48:	48 c7 c0 df bd 05 4a 	mov    $0x4a05bddf,%rax
   11c4f:	48 89 05 ea 1c 74 00 	mov    %rax,0x741cea(%rip)        # 753940 <edgeId>
   11c56:	58                   	pop    %rax
   11c57:	e8 bc 17 ff ff       	callq  3418 <_storeEdge>
   11c5c:	41 8b 2e             	mov    (%r14),%ebp
   11c5f:	e9 4a e7 ff ff       	jmpq   103ae <base64_decode_ctx+0x16fe>
   11c64:	0f 1f 40 00          	nopl   0x0(%rax)
   11c68:	50                   	push   %rax
   11c69:	48 b8 f7 16 28 f5 00 	movabs $0xf52816f7,%rax
   11c70:	00 00 00 
   11c73:	48 89 05 c6 1c 74 00 	mov    %rax,0x741cc6(%rip)        # 753940 <edgeId>
   11c7a:	58                   	pop    %rax
   11c7b:	e8 98 17 ff ff       	callq  3418 <_storeEdge>
        char const *in_end = in + inlen;
   11c80:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
   11c85:	e9 a9 e2 ff ff       	jmpq   ff33 <base64_decode_ctx+0x1283>
   11c8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   11c90:	50                   	push   %rax
   11c91:	48 b8 02 a5 1e 8a 00 	movabs $0x8a1ea502,%rax
   11c98:	00 00 00 
   11c9b:	48 89 05 9e 1c 74 00 	mov    %rax,0x741c9e(%rip)        # 753940 <edgeId>
   11ca2:	58                   	pop    %rax
   11ca3:	e8 70 17 ff ff       	callq  3418 <_storeEdge>
      if (inlen && *in == '\n' && ignore_newlines)
   11ca8:	48 89 15 69 1c 74 00 	mov    %rdx,0x741c69(%rip)        # 753918 <tmpquadone>
   11caf:	48 89 0d 7a bf 5e 00 	mov    %rcx,0x5ebf7a(%rip)        # 5fdc30 <tmpquadtwo>
   11cb6:	48 8d 15 33 bf 5e 00 	lea    0x5ebf33(%rip),%rdx        # 5fdbf0 <funcinptr>
   11cbd:	48 c7 02 a2 00 00 00 	movq   $0xa2,(%rdx)
   11cc4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   11ccb:	00 
   11ccc:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   11cd3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   11cd7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   11cde:	00 
   11cdf:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   11ce4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   11ce8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   11cef:	00 
   11cf0:	ff 32                	pushq  (%rdx)
   11cf2:	48 8b 15 1f 1c 74 00 	mov    0x741c1f(%rip),%rdx        # 753918 <tmpquadone>
   11cf9:	48 8b 0d 30 bf 5e 00 	mov    0x5ebf30(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   11d00:	48 c7 05 45 1c 74 00 	movq   $0x1,0x741c45(%rip)        # 753950 <cmpPassed>
   11d07:	01 00 00 00 
   11d0b:	e8 a0 17 ff ff       	callq  34b0 <_storeDataFn>
   11d10:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
   11d16:	74 50                	je     11d68 <base64_decode_ctx+0x30b8>
   11d18:	50                   	push   %rax
   11d19:	48 c7 c0 50 ea a1 28 	mov    $0x28a1ea50,%rax
   11d20:	48 89 05 19 1c 74 00 	mov    %rax,0x741c19(%rip)        # 753940 <edgeId>
   11d27:	58                   	pop    %rax
   11d28:	e8 eb 16 ff ff       	callq  3418 <_storeEdge>
          ++in;
   11d2d:	48 83 c3 01          	add    $0x1,%rbx
          --inlen;
   11d31:	48 83 ed 01          	sub    $0x1,%rbp
          continue;
   11d35:	4d 89 dc             	mov    %r11,%r12
          ++in;
   11d38:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
          continue;
   11d3d:	e9 1c d0 ff ff       	jmpq   ed5e <base64_decode_ctx+0xae>
   11d42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   11d48:	50                   	push   %rax
   11d49:	48 c7 c0 a1 28 6f 7e 	mov    $0x7e6f28a1,%rax
   11d50:	48 89 05 e9 1b 74 00 	mov    %rax,0x741be9(%rip)        # 753940 <edgeId>
   11d57:	58                   	pop    %rax
   11d58:	e8 bb 16 ff ff       	callq  3418 <_storeEdge>
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
   11d5d:	31 ed                	xor    %ebp,%ebp
   11d5f:	e9 4a e6 ff ff       	jmpq   103ae <base64_decode_ctx+0x16fe>
   11d64:	0f 1f 40 00          	nopl   0x0(%rax)
   11d68:	50                   	push   %rax
   11d69:	48 c7 c0 f2 e6 b7 55 	mov    $0x55b7e6f2,%rax
   11d70:	48 89 05 c9 1b 74 00 	mov    %rax,0x741bc9(%rip)        # 753940 <edgeId>
   11d77:	58                   	pop    %rax
   11d78:	e8 9b 16 ff ff       	callq  3418 <_storeEdge>
        char const *in_end = in + inlen;
   11d7d:	4c 8d 3c 2b          	lea    (%rbx,%rbp,1),%r15
      out -= outleft_save - outleft;
   11d81:	4d 29 e3             	sub    %r12,%r11
      outleft = outleft_save;
   11d84:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
      out -= outleft_save - outleft;
   11d89:	4c 01 5c 24 40       	add    %r11,0x40(%rsp)
        char const *in_end = in + inlen;
   11d8e:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
   11d93:	e9 13 d2 ff ff       	jmpq   efab <base64_decode_ctx+0x2fb>
   11d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   11d9f:	00 
   11da0:	50                   	push   %rax
   11da1:	48 c7 c0 56 d1 8c 28 	mov    $0x288cd156,%rax
   11da8:	48 89 05 91 1b 74 00 	mov    %rax,0x741b91(%rip)        # 753940 <edgeId>
   11daf:	58                   	pop    %rax
   11db0:	e8 63 16 ff ff       	callq  3418 <_storeEdge>
          *in += 4;
   11db5:	4c 8d 6b 04          	lea    0x4(%rbx),%r13
          *n_non_newline = 4;
   11db9:	bd 04 00 00 00       	mov    $0x4,%ebp
          *in += 4;
   11dbe:	4d 89 2f             	mov    %r13,(%r15)
   11dc1:	e9 8e fc ff ff       	jmpq   11a54 <base64_decode_ctx+0x2da4>
   11dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   11dcd:	00 00 00 
   11dd0:	50                   	push   %rax
   11dd1:	48 b8 46 14 8f 84 00 	movabs $0x848f1446,%rax
   11dd8:	00 00 00 
   11ddb:	48 89 05 5e 1b 74 00 	mov    %rax,0x741b5e(%rip)        # 753940 <edgeId>
   11de2:	58                   	pop    %rax
   11de3:	e8 30 16 ff ff       	callq  3418 <_storeEdge>
   11de8:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
   11ded:	c6 44 24 36 01       	movb   $0x1,0x36(%rsp)
   11df2:	c6 44 24 35 01       	movb   $0x1,0x35(%rsp)
   11df7:	e9 30 cf ff ff       	jmpq   ed2c <base64_decode_ctx+0x7c>
   11dfc:	0f 1f 40 00          	nopl   0x0(%rax)
   11e00:	50                   	push   %rax
   11e01:	48 c7 c0 3c 12 ba 66 	mov    $0x66ba123c,%rax
   11e08:	48 89 05 31 1b 74 00 	mov    %rax,0x741b31(%rip)        # 753940 <edgeId>
   11e0f:	58                   	pop    %rax
   11e10:	e8 03 16 ff ff       	callq  3418 <_storeEdge>
        if (ignore_newlines)
   11e15:	4d 89 e3             	mov    %r12,%r11
   11e18:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   11e1e:	e9 6d df ff ff       	jmpq   fd90 <base64_decode_ctx+0x10e0>
   11e23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   11e28:	50                   	push   %rax
   11e29:	48 b8 84 ae d9 c4 00 	movabs $0xc4d9ae84,%rax
   11e30:	00 00 00 
   11e33:	48 89 05 06 1b 74 00 	mov    %rax,0x741b06(%rip)        # 753940 <edgeId>
   11e3a:	58                   	pop    %rax
   11e3b:	e8 d8 15 ff ff       	callq  3418 <_storeEdge>
   11e40:	4d 89 e3             	mov    %r12,%r11
   11e43:	e9 48 df ff ff       	jmpq   fd90 <base64_decode_ctx+0x10e0>
   11e48:	50                   	push   %rax
   11e49:	48 b8 ba 66 13 f3 00 	movabs $0xf31366ba,%rax
   11e50:	00 00 00 
   11e53:	48 89 05 e6 1a 74 00 	mov    %rax,0x741ae6(%rip)        # 753940 <edgeId>
   11e5a:	58                   	pop    %rax
   11e5b:	e8 b8 15 ff ff       	callq  3418 <_storeEdge>
}
   11e60:	e8 eb fa fe ff       	callq  1950 <__stack_chk_fail@plt>
   11e65:	90                   	nop
   11e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   11e6d:	00 00 00 

0000000000011e70 <base64_decode_alloc_ctx>:
   undefined. */
bool
base64_decode_alloc_ctx (struct base64_decode_context *ctx,
                         const char *in, size_t inlen, char **out,
                         size_t *outlen)
{
   11e70:	41 56                	push   %r14
   11e72:	41 55                	push   %r13
   11e74:	49 89 d6             	mov    %rdx,%r14
   11e77:	41 54                	push   %r12
   11e79:	55                   	push   %rbp
   11e7a:	49 89 fc             	mov    %rdi,%r12
   11e7d:	53                   	push   %rbx
   11e7e:	49 89 f5             	mov    %rsi,%r13
   11e81:	48 89 cb             	mov    %rcx,%rbx
   11e84:	4c 89 c5             	mov    %r8,%rbp
   11e87:	48 83 ec 20          	sub    $0x20,%rsp
   11e8b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   11e92:	00 00 
   11e94:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   11e99:	31 c0                	xor    %eax,%eax
  /* This may allocate a few bytes too many, depending on input,
     but it's not worth the extra CPU time to compute the exact size.
     The exact size is 3 * (inlen + (ctx ? ctx->i : 0)) / 4, minus 1 if the
     input ends with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 3;
   11e9b:	48 89 d0             	mov    %rdx,%rax
   11e9e:	48 c1 e8 02          	shr    $0x2,%rax
   11ea2:	48 8d 7c 40 03       	lea    0x3(%rax,%rax,2),%rdi
   11ea7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)

  *out = malloc (needlen);
   11eac:	e8 ff fb fe ff       	callq  1ab0 <malloc@plt>
  if (!*out)
   11eb1:	48 85 c0             	test   %rax,%rax
  *out = malloc (needlen);
   11eb4:	48 89 03             	mov    %rax,(%rbx)
  if (!*out)
   11eb7:	74 77                	je     11f30 <base64_decode_alloc_ctx+0xc0>
   11eb9:	50                   	push   %rax
   11eba:	48 b8 99 7e 55 93 00 	movabs $0x93557e99,%rax
   11ec1:	00 00 00 
   11ec4:	48 89 05 75 1a 74 00 	mov    %rax,0x741a75(%rip)        # 753940 <edgeId>
   11ecb:	58                   	pop    %rax
   11ecc:	e8 47 15 ff ff       	callq  3418 <_storeEdge>
    return true;

  if (!base64_decode_ctx (ctx, in, inlen, *out, &needlen))
   11ed1:	4c 8d 44 24 10       	lea    0x10(%rsp),%r8
   11ed6:	48 89 c1             	mov    %rax,%rcx
   11ed9:	4c 89 f2             	mov    %r14,%rdx
   11edc:	4c 89 ee             	mov    %r13,%rsi
   11edf:	4c 89 e7             	mov    %r12,%rdi
   11ee2:	e8 c9 cd ff ff       	callq  ecb0 <base64_decode_ctx>
   11ee7:	84 c0                	test   %al,%al
   11ee9:	0f 84 a9 00 00 00    	je     11f98 <base64_decode_alloc_ctx+0x128>
   11eef:	50                   	push   %rax
   11ef0:	48 c7 c0 5f d5 a4 48 	mov    $0x48a4d55f,%rax
   11ef7:	48 89 05 42 1a 74 00 	mov    %rax,0x741a42(%rip)        # 753940 <edgeId>
   11efe:	58                   	pop    %rax
   11eff:	e8 14 15 ff ff       	callq  3418 <_storeEdge>
      free (*out);
      *out = NULL;
      return false;
    }

  if (outlen)
   11f04:	48 85 ed             	test   %rbp,%rbp
   11f07:	74 27                	je     11f30 <base64_decode_alloc_ctx+0xc0>
   11f09:	50                   	push   %rax
   11f0a:	48 b8 ab 9a 14 a9 00 	movabs $0xa9149aab,%rax
   11f11:	00 00 00 
   11f14:	48 89 05 25 1a 74 00 	mov    %rax,0x741a25(%rip)        # 753940 <edgeId>
   11f1b:	58                   	pop    %rax
   11f1c:	e8 f7 14 ff ff       	callq  3418 <_storeEdge>
    *outlen = needlen;
   11f21:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
   11f26:	48 89 55 00          	mov    %rdx,0x0(%rbp)
   11f2a:	eb 1e                	jmp    11f4a <base64_decode_alloc_ctx+0xda>
   11f2c:	0f 1f 40 00          	nopl   0x0(%rax)
   11f30:	50                   	push   %rax
   11f31:	48 c7 c0 35 29 52 0f 	mov    $0xf522935,%rax
   11f38:	48 89 05 01 1a 74 00 	mov    %rax,0x741a01(%rip)        # 753940 <edgeId>
   11f3f:	58                   	pop    %rax
   11f40:	e8 d3 14 ff ff       	callq  3418 <_storeEdge>
    return true;
   11f45:	b8 01 00 00 00       	mov    $0x1,%eax
   11f4a:	50                   	push   %rax
   11f4b:	48 c7 c0 26 45 ea 21 	mov    $0x21ea4526,%rax
   11f52:	48 89 05 e7 19 74 00 	mov    %rax,0x7419e7(%rip)        # 753940 <edgeId>
   11f59:	58                   	pop    %rax
   11f5a:	e8 b9 14 ff ff       	callq  3418 <_storeEdge>

  return true;
}
   11f5f:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
   11f64:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   11f6b:	00 00 
   11f6d:	75 5b                	jne    11fca <base64_decode_alloc_ctx+0x15a>
   11f6f:	50                   	push   %rax
   11f70:	48 c7 c0 52 a4 1e 42 	mov    $0x421ea452,%rax
   11f77:	48 89 05 c2 19 74 00 	mov    %rax,0x7419c2(%rip)        # 753940 <edgeId>
   11f7e:	58                   	pop    %rax
   11f7f:	e8 94 14 ff ff       	callq  3418 <_storeEdge>
   11f84:	48 83 c4 20          	add    $0x20,%rsp
   11f88:	5b                   	pop    %rbx
   11f89:	5d                   	pop    %rbp
   11f8a:	41 5c                	pop    %r12
   11f8c:	41 5d                	pop    %r13
   11f8e:	41 5e                	pop    %r14
   11f90:	c3                   	retq   
   11f91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11f98:	50                   	push   %rax
   11f99:	48 b8 84 fe 0c 90 00 	movabs $0x900cfe84,%rax
   11fa0:	00 00 00 
   11fa3:	48 89 05 96 19 74 00 	mov    %rax,0x741996(%rip)        # 753940 <edgeId>
   11faa:	58                   	pop    %rax
   11fab:	e8 68 14 ff ff       	callq  3418 <_storeEdge>
      free (*out);
   11fb0:	48 8b 3b             	mov    (%rbx),%rdi
   11fb3:	88 44 24 0f          	mov    %al,0xf(%rsp)
   11fb7:	e8 b4 f8 fe ff       	callq  1870 <free@plt>
      *out = NULL;
   11fbc:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
      return false;
   11fc3:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
   11fc8:	eb 80                	jmp    11f4a <base64_decode_alloc_ctx+0xda>
   11fca:	50                   	push   %rax
   11fcb:	48 b8 cf 00 69 cb 00 	movabs $0xcb6900cf,%rax
   11fd2:	00 00 00 
   11fd5:	48 89 05 64 19 74 00 	mov    %rax,0x741964(%rip)        # 753940 <edgeId>
   11fdc:	58                   	pop    %rax
   11fdd:	e8 36 14 ff ff       	callq  3418 <_storeEdge>
}
   11fe2:	e8 69 f9 fe ff       	callq  1950 <__stack_chk_fail@plt>
   11fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   11fee:	00 00 

0000000000011ff0 <close_stdout_set_file_name>:
/* Set the file name to be reported in the event an error is detected
   by close_stdout.  */
void
close_stdout_set_file_name (const char *file)
{
  file_name = file;
   11ff0:	48 89 3d 09 ba 5e 00 	mov    %rdi,0x5eba09(%rip)        # 5fda00 <file_name>
}
   11ff7:	c3                   	retq   
   11ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   11fff:	00 

0000000000012000 <close_stdout_set_ignore_EPIPE>:
   and should not lead to a diagnostic message.  */

void
close_stdout_set_ignore_EPIPE (bool ignore)
{
  ignore_EPIPE = ignore;
   12000:	40 88 3d f1 b9 5e 00 	mov    %dil,0x5eb9f1(%rip)        # 5fd9f8 <ignore_EPIPE>
}
   12007:	c3                   	retq   
   12008:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1200f:	00 

0000000000012010 <close_stdout>:
   tools (most notably 'make' and other build-management systems) depend
   on being able to detect failure in other tools via their exit status.  */

void
close_stdout (void)
{
   12010:	55                   	push   %rbp
   12011:	53                   	push   %rbx
   12012:	48 83 ec 08          	sub    $0x8,%rsp
  if (close_stream (stdout) != 0
   12016:	48 8b 3d 6b b0 21 00 	mov    0x21b06b(%rip),%rdi        # 22d088 <stdout@@GLIBC_2.2.5>
   1201d:	e8 0e 4f 01 00       	callq  26f30 <close_stream>
   12022:	85 c0                	test   %eax,%eax
   12024:	0f 84 2f 01 00 00    	je     12159 <close_stdout+0x149>
   1202a:	50                   	push   %rax
   1202b:	48 c7 c0 76 54 a4 65 	mov    $0x65a45476,%rax
   12032:	48 89 05 07 19 74 00 	mov    %rax,0x741907(%rip)        # 753940 <edgeId>
   12039:	58                   	pop    %rax
   1203a:	e8 01 1b ff ff       	callq  3b40 <_storeEdge>
   1203f:	e8 4c f8 fe ff       	callq  1890 <__errno_location@plt>
      && !(ignore_EPIPE && errno == EPIPE))
   12044:	48 89 15 cd 18 74 00 	mov    %rdx,0x7418cd(%rip)        # 753918 <tmpquadone>
   1204b:	48 89 0d de bb 5e 00 	mov    %rcx,0x5ebbde(%rip)        # 5fdc30 <tmpquadtwo>
   12052:	48 8d 15 97 bb 5e 00 	lea    0x5ebb97(%rip),%rdx        # 5fdbf0 <funcinptr>
   12059:	48 c7 02 45 01 00 00 	movq   $0x145,(%rdx)
   12060:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12067:	00 
   12068:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1206f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12073:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1207a:	00 
   1207b:	48 8b 0d 76 b9 5e 00 	mov    0x5eb976(%rip),%rcx        # 5fd9f8 <ignore_EPIPE>
   12082:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12086:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   1208d:	00 
   1208e:	ff 32                	pushq  (%rdx)
   12090:	48 8b 15 81 18 74 00 	mov    0x741881(%rip),%rdx        # 753918 <tmpquadone>
   12097:	48 8b 0d 92 bb 5e 00 	mov    0x5ebb92(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1209e:	48 c7 05 a7 18 74 00 	movq   $0x1,0x7418a7(%rip)        # 753950 <cmpPassed>
   120a5:	01 00 00 00 
   120a9:	e8 2a 1b ff ff       	callq  3bd8 <_storeDataFn>
   120ae:	80 3d 43 b9 5e 00 00 	cmpb   $0x0,0x5eb943(%rip)        # 5fd9f8 <ignore_EPIPE>
   120b5:	48 89 c3             	mov    %rax,%rbx
   120b8:	0f 84 e3 00 00 00    	je     121a1 <close_stdout+0x191>
   120be:	50                   	push   %rax
   120bf:	48 b8 51 91 96 cd 00 	movabs $0xcd969151,%rax
   120c6:	00 00 00 
   120c9:	48 89 05 70 18 74 00 	mov    %rax,0x741870(%rip)        # 753940 <edgeId>
   120d0:	58                   	pop    %rax
   120d1:	e8 6a 1a ff ff       	callq  3b40 <_storeEdge>
   120d6:	48 89 15 3b 18 74 00 	mov    %rdx,0x74183b(%rip)        # 753918 <tmpquadone>
   120dd:	48 89 0d 4c bb 5e 00 	mov    %rcx,0x5ebb4c(%rip)        # 5fdc30 <tmpquadtwo>
   120e4:	48 8d 15 05 bb 5e 00 	lea    0x5ebb05(%rip),%rdx        # 5fdbf0 <funcinptr>
   120eb:	48 c7 02 46 01 00 00 	movq   $0x146,(%rdx)
   120f2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   120f9:	00 
   120fa:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
   12101:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12105:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1210c:	00 
   1210d:	48 8b 08             	mov    (%rax),%rcx
   12110:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12114:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   1211b:	00 
   1211c:	ff 32                	pushq  (%rdx)
   1211e:	48 8b 15 f3 17 74 00 	mov    0x7417f3(%rip),%rdx        # 753918 <tmpquadone>
   12125:	48 8b 0d 04 bb 5e 00 	mov    0x5ebb04(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1212c:	48 c7 05 19 18 74 00 	movq   $0x1,0x741819(%rip)        # 753950 <cmpPassed>
   12133:	01 00 00 00 
   12137:	e8 9c 1a ff ff       	callq  3bd8 <_storeDataFn>
   1213c:	83 38 20             	cmpl   $0x20,(%rax)
   1213f:	75 60                	jne    121a1 <close_stdout+0x191>
   12141:	50                   	push   %rax
   12142:	48 b8 2a d2 b2 99 00 	movabs $0x99b2d22a,%rax
   12149:	00 00 00 
   1214c:	48 89 05 ed 17 74 00 	mov    %rax,0x7417ed(%rip)        # 753940 <edgeId>
   12153:	58                   	pop    %rax
   12154:	e8 e7 19 ff ff       	callq  3b40 <_storeEdge>
   12159:	50                   	push   %rax
   1215a:	48 c7 c0 15 69 d9 4c 	mov    $0x4cd96915,%rax
   12161:	48 89 05 d8 17 74 00 	mov    %rax,0x7417d8(%rip)        # 753940 <edgeId>
   12168:	58                   	pop    %rax
   12169:	e8 d2 19 ff ff       	callq  3b40 <_storeEdge>
        error (0, errno, "%s", write_error);

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
   1216e:	48 8b 3d 4b af 21 00 	mov    0x21af4b(%rip),%rdi        # 22d0c0 <stderr@@GLIBC_2.2.5>
   12175:	e8 b6 4d 01 00       	callq  26f30 <close_stream>
   1217a:	85 c0                	test   %eax,%eax
   1217c:	0f 85 8b 00 00 00    	jne    1220d <close_stdout+0x1fd>
   12182:	50                   	push   %rax
   12183:	48 b8 a4 65 33 fd 00 	movabs $0xfd3365a4,%rax
   1218a:	00 00 00 
   1218d:	48 89 05 ac 17 74 00 	mov    %rax,0x7417ac(%rip)        # 753940 <edgeId>
   12194:	58                   	pop    %rax
   12195:	e8 a6 19 ff ff       	callq  3b40 <_storeEdge>
     _exit (exit_failure);
}
   1219a:	48 83 c4 08          	add    $0x8,%rsp
   1219e:	5b                   	pop    %rbx
   1219f:	5d                   	pop    %rbp
   121a0:	c3                   	retq   
   121a1:	50                   	push   %rax
   121a2:	48 b8 d9 4c 3f d2 00 	movabs $0xd23f4cd9,%rax
   121a9:	00 00 00 
   121ac:	48 89 05 8d 17 74 00 	mov    %rax,0x74178d(%rip)        # 753940 <edgeId>
   121b3:	58                   	pop    %rax
   121b4:	e8 87 19 ff ff       	callq  3b40 <_storeEdge>
      char const *write_error = _("write error");
   121b9:	48 8d 35 c4 71 01 00 	lea    0x171c4(%rip),%rsi        # 29384 <_IO_stdin_used+0x4>
   121c0:	31 ff                	xor    %edi,%edi
   121c2:	ba 05 00 00 00       	mov    $0x5,%edx
   121c7:	e8 54 f7 fe ff       	callq  1920 <dcgettext@plt>
      if (file_name)
   121cc:	48 8b 3d 2d b8 5e 00 	mov    0x5eb82d(%rip),%rdi        # 5fda00 <file_name>
      char const *write_error = _("write error");
   121d3:	48 89 c5             	mov    %rax,%rbp
      if (file_name)
   121d6:	48 85 ff             	test   %rdi,%rdi
   121d9:	74 55                	je     12230 <close_stdout+0x220>
   121db:	50                   	push   %rax
   121dc:	48 c7 c0 3f d2 eb 4c 	mov    $0x4cebd23f,%rax
   121e3:	48 89 05 56 17 74 00 	mov    %rax,0x741756(%rip)        # 753940 <edgeId>
   121ea:	58                   	pop    %rax
   121eb:	e8 50 19 ff ff       	callq  3b40 <_storeEdge>
        error (0, errno, "%s: %s", quotearg_colon (file_name),
   121f0:	e8 2b be 00 00       	callq  1e020 <quotearg_colon>
   121f5:	8b 33                	mov    (%rbx),%esi
   121f7:	48 8d 15 a2 78 01 00 	lea    0x178a2(%rip),%rdx        # 29aa0 <b64c+0x40>
   121fe:	48 89 c1             	mov    %rax,%rcx
   12201:	49 89 e8             	mov    %rbp,%r8
   12204:	31 ff                	xor    %edi,%edi
   12206:	31 c0                	xor    %eax,%eax
   12208:	e8 63 f9 fe ff       	callq  1b70 <error@plt>
   1220d:	50                   	push   %rax
   1220e:	48 b8 bd ce 64 eb 00 	movabs $0xeb64cebd,%rax
   12215:	00 00 00 
   12218:	48 89 05 21 17 74 00 	mov    %rax,0x741721(%rip)        # 753940 <edgeId>
   1221f:	58                   	pop    %rax
   12220:	e8 1b 19 ff ff       	callq  3b40 <_storeEdge>
     _exit (exit_failure);
   12225:	8b 3d ed ad 21 00    	mov    0x21aded(%rip),%edi        # 22d018 <exit_failure>
   1222b:	e8 80 f6 fe ff       	callq  18b0 <_exit@plt>
   12230:	50                   	push   %rax
   12231:	48 c7 c0 3a 93 ad 5b 	mov    $0x5bad933a,%rax
   12238:	48 89 05 01 17 74 00 	mov    %rax,0x741701(%rip)        # 753940 <edgeId>
   1223f:	58                   	pop    %rax
   12240:	e8 fb 18 ff ff       	callq  3b40 <_storeEdge>
        error (0, errno, "%s", write_error);
   12245:	8b 33                	mov    (%rbx),%esi
   12247:	48 8d 15 15 72 01 00 	lea    0x17215(%rip),%rdx        # 29463 <_IO_stdin_used+0xe3>
   1224e:	48 89 c1             	mov    %rax,%rcx
   12251:	31 ff                	xor    %edi,%edi
   12253:	31 c0                	xor    %eax,%eax
   12255:	e8 16 f9 fe ff       	callq  1b70 <error@plt>
   1225a:	eb b1                	jmp    1220d <close_stdout+0x1fd>
   1225c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000012260 <fdadvise>:

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
   12260:	e9 bb f7 fe ff       	jmpq   1a20 <posix_fadvise@plt>
   12265:	90                   	nop
   12266:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1226d:	00 00 00 

0000000000012270 <fadvise>:
}

void
fadvise (FILE *fp, fadvice_t advice)
{
  if (fp)
   12270:	48 85 ff             	test   %rdi,%rdi
   12273:	74 2b                	je     122a0 <fadvise+0x30>
   12275:	50                   	push   %rax
   12276:	48 c7 c0 62 cc 4c 60 	mov    $0x604ccc62,%rax
   1227d:	48 89 05 bc 16 74 00 	mov    %rax,0x7416bc(%rip)        # 753940 <edgeId>
   12284:	58                   	pop    %rax
   12285:	e8 06 27 ff ff       	callq  4990 <_storeEdge>
{
   1228a:	53                   	push   %rbx
   1228b:	89 f3                	mov    %esi,%ebx
    fdadvise (fileno (fp), 0, 0, advice);
   1228d:	e8 0e f8 fe ff       	callq  1aa0 <fileno@plt>
  ignore_value (posix_fadvise (fd, offset, len, advice));
   12292:	89 d9                	mov    %ebx,%ecx
   12294:	31 d2                	xor    %edx,%edx
   12296:	31 f6                	xor    %esi,%esi
}
   12298:	5b                   	pop    %rbx
  ignore_value (posix_fadvise (fd, offset, len, advice));
   12299:	89 c7                	mov    %eax,%edi
   1229b:	e9 80 f7 fe ff       	jmpq   1a20 <posix_fadvise@plt>
   122a0:	50                   	push   %rax
   122a1:	48 b8 d9 51 91 96 00 	movabs $0x969151d9,%rax
   122a8:	00 00 00 
   122ab:	48 89 05 8e 16 74 00 	mov    %rax,0x74168e(%rip)        # 753940 <edgeId>
   122b2:	58                   	pop    %rax
   122b3:	e8 d8 26 ff ff       	callq  4990 <_storeEdge>
   122b8:	f3 c3                	repz retq 
   122ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000122c0 <set_program_name>:
  const char *slash;
  const char *base;

  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
   122c0:	48 85 ff             	test   %rdi,%rdi
{
   122c3:	53                   	push   %rbx
  if (argv0 == NULL)
   122c4:	0f 84 78 01 00 00    	je     12442 <set_program_name+0x182>
   122ca:	50                   	push   %rax
   122cb:	48 b8 c4 98 99 c0 00 	movabs $0xc09998c4,%rax
   122d2:	00 00 00 
   122d5:	48 89 05 64 16 74 00 	mov    %rax,0x741664(%rip)        # 753940 <edgeId>
   122dc:	58                   	pop    %rax
   122dd:	e8 d6 2d ff ff       	callq  50b8 <_storeEdge>
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
             stderr);
      abort ();
    }

  slash = strrchr (argv0, '/');
   122e2:	be 2f 00 00 00       	mov    $0x2f,%esi
   122e7:	48 89 fb             	mov    %rdi,%rbx
   122ea:	e8 c1 f6 fe ff       	callq  19b0 <strrchr@plt>
  base = (slash != NULL ? slash + 1 : argv0);
   122ef:	48 85 c0             	test   %rax,%rax
   122f2:	0f 84 22 01 00 00    	je     1241a <set_program_name+0x15a>
   122f8:	50                   	push   %rax
   122f9:	48 b8 98 99 c0 ec 00 	movabs $0xecc09998,%rax
   12300:	00 00 00 
   12303:	48 89 05 36 16 74 00 	mov    %rax,0x741636(%rip)        # 753940 <edgeId>
   1230a:	58                   	pop    %rax
   1230b:	e8 a8 2d ff ff       	callq  50b8 <_storeEdge>
   12310:	4c 8d 40 01          	lea    0x1(%rax),%r8
  if (base - argv0 >= 7 && strncmp (base - 7, "/.libs/", 7) == 0)
   12314:	4c 89 c2             	mov    %r8,%rdx
   12317:	48 29 da             	sub    %rbx,%rdx
   1231a:	48 89 0d f7 15 74 00 	mov    %rcx,0x7415f7(%rip)        # 753918 <tmpquadone>
   12321:	48 89 1d 08 b9 5e 00 	mov    %rbx,0x5eb908(%rip)        # 5fdc30 <tmpquadtwo>
   12328:	48 8d 0d c1 b8 5e 00 	lea    0x5eb8c1(%rip),%rcx        # 5fdbf0 <funcinptr>
   1232f:	48 c7 01 ae 09 00 00 	movq   $0x9ae,(%rcx)
   12336:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1233d:	00 
   1233e:	48 c7 c3 06 00 00 00 	mov    $0x6,%rbx
   12345:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   12349:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   12350:	00 
   12351:	48 89 d3             	mov    %rdx,%rbx
   12354:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   12358:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   1235f:	00 
   12360:	ff 31                	pushq  (%rcx)
   12362:	48 8b 0d af 15 74 00 	mov    0x7415af(%rip),%rcx        # 753918 <tmpquadone>
   12369:	48 8b 1d c0 b8 5e 00 	mov    0x5eb8c0(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   12370:	48 c7 05 d5 15 74 00 	movq   $0x1,0x7415d5(%rip)        # 753950 <cmpPassed>
   12377:	01 00 00 00 
   1237b:	e8 d0 2d ff ff       	callq  5150 <_storeDataFn>
   12380:	48 83 fa 06          	cmp    $0x6,%rdx
   12384:	0f 8e 90 00 00 00    	jle    1241a <set_program_name+0x15a>
   1238a:	50                   	push   %rax
   1238b:	48 b8 99 c0 ec a8 00 	movabs $0xa8ecc099,%rax
   12392:	00 00 00 
   12395:	48 89 05 a4 15 74 00 	mov    %rax,0x7415a4(%rip)        # 753940 <edgeId>
   1239c:	58                   	pop    %rax
   1239d:	e8 16 2d ff ff       	callq  50b8 <_storeEdge>
   123a2:	48 8d 70 fa          	lea    -0x6(%rax),%rsi
   123a6:	48 8d 3d 33 77 01 00 	lea    0x17733(%rip),%rdi        # 29ae0 <b64c+0x80>
   123ad:	b9 07 00 00 00       	mov    $0x7,%ecx
   123b2:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
   123b4:	41 0f 97 c1          	seta   %r9b
   123b8:	41 80 d9 00          	sbb    $0x0,%r9b
   123bc:	45 84 c9             	test   %r9b,%r9b
   123bf:	75 59                	jne    1241a <set_program_name+0x15a>
   123c1:	50                   	push   %rax
   123c2:	48 c7 c0 c0 ec a8 48 	mov    $0x48a8ecc0,%rax
   123c9:	48 89 05 70 15 74 00 	mov    %rax,0x741570(%rip)        # 753940 <edgeId>
   123d0:	58                   	pop    %rax
   123d1:	e8 e2 2c ff ff       	callq  50b8 <_storeEdge>
    {
      argv0 = base;
      if (strncmp (base, "lt-", 3) == 0)
   123d6:	48 8d 3d 0b 77 01 00 	lea    0x1770b(%rip),%rdi        # 29ae8 <b64c+0x88>
   123dd:	b9 03 00 00 00       	mov    $0x3,%ecx
   123e2:	4c 89 c6             	mov    %r8,%rsi
   123e5:	4c 89 c3             	mov    %r8,%rbx
   123e8:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
   123ea:	41 0f 97 c2          	seta   %r10b
   123ee:	41 80 da 00          	sbb    $0x0,%r10b
   123f2:	45 84 d2             	test   %r10b,%r10b
   123f5:	75 23                	jne    1241a <set_program_name+0x15a>
   123f7:	50                   	push   %rax
   123f8:	48 b8 1d 15 69 d9 00 	movabs $0xd969151d,%rax
   123ff:	00 00 00 
   12402:	48 89 05 37 15 74 00 	mov    %rax,0x741537(%rip)        # 753940 <edgeId>
   12409:	58                   	pop    %rax
   1240a:	e8 a9 2c ff ff       	callq  50b8 <_storeEdge>
        {
          argv0 = base + 3;
   1240f:	48 8d 58 04          	lea    0x4(%rax),%rbx
          /* On glibc systems, remove the "lt-" prefix from the variable
             program_invocation_short_name.  */
#if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME
          program_invocation_short_name = (char *) argv0;
   12413:	48 89 1d 66 ac 21 00 	mov    %rbx,0x21ac66(%rip)        # 22d080 <__progname@@GLIBC_2.2.5>
   1241a:	50                   	push   %rax
   1241b:	48 b8 2a d2 b2 99 00 	movabs $0x99b2d22a,%rax
   12422:	00 00 00 
   12425:	48 89 05 14 15 74 00 	mov    %rax,0x741514(%rip)        # 753940 <edgeId>
   1242c:	58                   	pop    %rax
   1242d:	e8 86 2c ff ff       	callq  50b8 <_storeEdge>
         /some/hidden/place/bin/cp: `foo' and `foo' are the same file
     not
         cp: `foo' and `foo' are the same file
   */

  program_name = argv0;
   12432:	48 89 1d e7 b5 5e 00 	mov    %rbx,0x5eb5e7(%rip)        # 5fda20 <program_name>

  /* On glibc systems, the error() function comes from libc and uses the
     variable program_invocation_name, not program_name.  So set this variable
     as well.  */
#if HAVE_DECL_PROGRAM_INVOCATION_NAME
  program_invocation_name = (char *) argv0;
   12439:	48 89 1d 68 ac 21 00 	mov    %rbx,0x21ac68(%rip)        # 22d0a8 <__progname_full@@GLIBC_2.2.5>
#endif
}
   12440:	5b                   	pop    %rbx
   12441:	c3                   	retq   
   12442:	50                   	push   %rax
   12443:	48 c7 c0 2d 9b e9 47 	mov    $0x47e99b2d,%rax
   1244a:	48 89 05 ef 14 74 00 	mov    %rax,0x7414ef(%rip)        # 753940 <edgeId>
   12451:	58                   	pop    %rax
   12452:	e8 61 2c ff ff       	callq  50b8 <_storeEdge>
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
   12457:	48 8b 0d 62 ac 21 00 	mov    0x21ac62(%rip),%rcx        # 22d0c0 <stderr@@GLIBC_2.2.5>
   1245e:	48 8d 3d 43 76 01 00 	lea    0x17643(%rip),%rdi        # 29aa8 <b64c+0x48>
   12465:	ba 37 00 00 00       	mov    $0x37,%edx
   1246a:	be 01 00 00 00       	mov    $0x1,%esi
   1246f:	e8 9c f7 fe ff       	callq  1c10 <fwrite@plt>
      abort ();
   12474:	e8 07 f4 fe ff       	callq  1880 <abort@plt>
   12479:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000012480 <gettext_quote.part.1>:
/* MSGID approximates a quotation mark.  Return its translation if it
   has one; otherwise, return either it or "\"", depending on S.

   S is either clocale_quoting_style or locale_quoting_style.  */
static char const *
gettext_quote (char const *msgid, enum quoting_style s)
   12480:	55                   	push   %rbp
   12481:	53                   	push   %rbx
   12482:	48 89 fd             	mov    %rdi,%rbp
   12485:	89 f3                	mov    %esi,%ebx
   12487:	48 83 ec 08          	sub    $0x8,%rsp
        BIG5-HKSCS   0xA1 0xA5            EUC-CN       0xA1 0xAE
        GBK          0xA1 0xAE            Georgian-PS  0x91
        PT154        0x91

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
   1248b:	e8 70 5d 01 00       	callq  28200 <locale_charset>
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
   12490:	0f b6 10             	movzbl (%rax),%edx
   12493:	83 e2 df             	and    $0xffffffdf,%edx
   12496:	48 89 0d 7b 14 74 00 	mov    %rcx,0x74147b(%rip)        # 753918 <tmpquadone>
   1249d:	48 89 1d 8c b7 5e 00 	mov    %rbx,0x5eb78c(%rip)        # 5fdc30 <tmpquadtwo>
   124a4:	48 8d 0d 45 b7 5e 00 	lea    0x5eb745(%rip),%rcx        # 5fdbf0 <funcinptr>
   124ab:	48 c7 01 d2 09 00 00 	movq   $0x9d2,(%rcx)
   124b2:	48 c7 41 08 62 00 00 	movq   $0x62,0x8(%rcx)
   124b9:	00 
   124ba:	48 c7 c3 55 00 00 00 	mov    $0x55,%rbx
   124c1:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   124c5:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   124cc:	00 
   124cd:	48 89 d3             	mov    %rdx,%rbx
   124d0:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   124d4:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   124db:	00 
   124dc:	ff 31                	pushq  (%rcx)
   124de:	48 8b 0d 33 14 74 00 	mov    0x741433(%rip),%rcx        # 753918 <tmpquadone>
   124e5:	48 8b 1d 44 b7 5e 00 	mov    0x5eb744(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   124ec:	48 c7 05 59 14 74 00 	movq   $0x1,0x741459(%rip)        # 753950 <cmpPassed>
   124f3:	01 00 00 00 
   124f7:	e8 7c 33 ff ff       	callq  5878 <_storeDataFn>
   124fc:	80 fa 55             	cmp    $0x55,%dl
   124ff:	0f 84 9b 05 00 00    	je     12aa0 <gettext_quote.part.1+0x620>
   12505:	50                   	push   %rax
   12506:	48 b8 99 c0 ec a8 00 	movabs $0xa8ecc099,%rax
   1250d:	00 00 00 
   12510:	48 89 05 29 14 74 00 	mov    %rax,0x741429(%rip)        # 753940 <edgeId>
   12517:	58                   	pop    %rax
   12518:	e8 c3 32 ff ff       	callq  57e0 <_storeEdge>
   1251d:	48 89 0d f4 13 74 00 	mov    %rcx,0x7413f4(%rip)        # 753918 <tmpquadone>
   12524:	48 89 1d 05 b7 5e 00 	mov    %rbx,0x5eb705(%rip)        # 5fdc30 <tmpquadtwo>
   1252b:	48 8d 0d be b6 5e 00 	lea    0x5eb6be(%rip),%rcx        # 5fdbf0 <funcinptr>
   12532:	48 c7 01 d3 09 00 00 	movq   $0x9d3,(%rcx)
   12539:	48 c7 41 08 62 00 00 	movq   $0x62,0x8(%rcx)
   12540:	00 
   12541:	48 c7 c3 47 00 00 00 	mov    $0x47,%rbx
   12548:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1254c:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   12553:	00 
   12554:	48 89 d3             	mov    %rdx,%rbx
   12557:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1255b:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   12562:	00 
   12563:	ff 31                	pushq  (%rcx)
   12565:	48 8b 0d ac 13 74 00 	mov    0x7413ac(%rip),%rcx        # 753918 <tmpquadone>
   1256c:	48 8b 1d bd b6 5e 00 	mov    0x5eb6bd(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   12573:	48 c7 05 d2 13 74 00 	movq   $0x1,0x7413d2(%rip)        # 753950 <cmpPassed>
   1257a:	01 00 00 00 
   1257e:	e8 f5 32 ff ff       	callq  5878 <_storeDataFn>
   12583:	80 fa 47             	cmp    $0x47,%dl
   12586:	0f 84 b4 00 00 00    	je     12640 <gettext_quote.part.1+0x1c0>
   1258c:	50                   	push   %rax
   1258d:	48 b8 81 d9 51 91 00 	movabs $0x9151d981,%rax
   12594:	00 00 00 
   12597:	48 89 05 a2 13 74 00 	mov    %rax,0x7413a2(%rip)        # 753940 <edgeId>
   1259e:	58                   	pop    %rax
   1259f:	e8 3c 32 ff ff       	callq  57e0 <_storeEdge>
   125a4:	50                   	push   %rax
   125a5:	48 b8 60 76 54 a4 00 	movabs $0xa4547660,%rax
   125ac:	00 00 00 
   125af:	48 89 05 8a 13 74 00 	mov    %rax,0x74138a(%rip)        # 753940 <edgeId>
   125b6:	58                   	pop    %rax
   125b7:	e8 24 32 ff ff       	callq  57e0 <_storeEdge>
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
   125bc:	48 8d 05 38 75 01 00 	lea    0x17538(%rip),%rax        # 29afb <b64c+0x9b>
   125c3:	4c 8d 0d 33 75 01 00 	lea    0x17533(%rip),%r9        # 29afd <b64c+0x9d>
   125ca:	48 89 15 47 13 74 00 	mov    %rdx,0x741347(%rip)        # 753918 <tmpquadone>
   125d1:	48 89 0d 58 b6 5e 00 	mov    %rcx,0x5eb658(%rip)        # 5fdc30 <tmpquadtwo>
   125d8:	48 8d 15 11 b6 5e 00 	lea    0x5eb611(%rip),%rdx        # 5fdbf0 <funcinptr>
   125df:	48 c7 02 d4 09 00 00 	movq   $0x9d4,(%rdx)
   125e6:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   125ed:	00 
   125ee:	48 c7 c1 07 00 00 00 	mov    $0x7,%rcx
   125f5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   125f9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12600:	00 
   12601:	48 89 d9             	mov    %rbx,%rcx
   12604:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12608:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1260f:	00 
   12610:	ff 32                	pushq  (%rdx)
   12612:	48 8b 15 ff 12 74 00 	mov    0x7412ff(%rip),%rdx        # 753918 <tmpquadone>
   12619:	48 8b 0d 10 b6 5e 00 	mov    0x5eb610(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12620:	48 c7 05 25 13 74 00 	movq   $0x1,0x741325(%rip)        # 753950 <cmpPassed>
   12627:	01 00 00 00 
   1262b:	e8 48 32 ff ff       	callq  5878 <_storeDataFn>
   12630:	83 fb 07             	cmp    $0x7,%ebx
   12633:	49 0f 45 c1          	cmovne %r9,%rax
}
   12637:	48 83 c4 08          	add    $0x8,%rsp
   1263b:	5b                   	pop    %rbx
   1263c:	5d                   	pop    %rbp
   1263d:	c3                   	retq   
   1263e:	66 90                	xchg   %ax,%ax
   12640:	50                   	push   %rax
   12641:	48 b8 48 cb 66 fa 00 	movabs $0xfa66cb48,%rax
   12648:	00 00 00 
   1264b:	48 89 05 ee 12 74 00 	mov    %rax,0x7412ee(%rip)        # 753940 <edgeId>
   12652:	58                   	pop    %rax
   12653:	e8 88 31 ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[1], s21))
   12658:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
   1265c:	83 e1 df             	and    $0xffffffdf,%ecx
   1265f:	48 89 15 b2 12 74 00 	mov    %rdx,0x7412b2(%rip)        # 753918 <tmpquadone>
   12666:	48 89 1d c3 b5 5e 00 	mov    %rbx,0x5eb5c3(%rip)        # 5fdc30 <tmpquadtwo>
   1266d:	48 8d 15 7c b5 5e 00 	lea    0x5eb57c(%rip),%rdx        # 5fdbf0 <funcinptr>
   12674:	48 c7 02 d5 09 00 00 	movq   $0x9d5,(%rdx)
   1267b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12682:	00 
   12683:	48 c7 c3 42 00 00 00 	mov    $0x42,%rbx
   1268a:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1268e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12695:	00 
   12696:	48 89 cb             	mov    %rcx,%rbx
   12699:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1269d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   126a4:	00 
   126a5:	ff 32                	pushq  (%rdx)
   126a7:	48 8b 15 6a 12 74 00 	mov    0x74126a(%rip),%rdx        # 753918 <tmpquadone>
   126ae:	48 8b 1d 7b b5 5e 00 	mov    0x5eb57b(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   126b5:	48 c7 05 90 12 74 00 	movq   $0x1,0x741290(%rip)        # 753950 <cmpPassed>
   126bc:	01 00 00 00 
   126c0:	e8 b3 31 ff ff       	callq  5878 <_storeDataFn>
   126c5:	80 f9 42             	cmp    $0x42,%cl
   126c8:	0f 85 d6 fe ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   126ce:	50                   	push   %rax
   126cf:	48 b8 d9 4c 3f d2 00 	movabs $0xd23f4cd9,%rax
   126d6:	00 00 00 
   126d9:	48 89 05 60 12 74 00 	mov    %rax,0x741260(%rip)        # 753940 <edgeId>
   126e0:	58                   	pop    %rax
   126e1:	e8 fa 30 ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[2], s22))
   126e6:	48 89 15 2b 12 74 00 	mov    %rdx,0x74122b(%rip)        # 753918 <tmpquadone>
   126ed:	48 89 0d 3c b5 5e 00 	mov    %rcx,0x5eb53c(%rip)        # 5fdc30 <tmpquadtwo>
   126f4:	48 8d 15 f5 b4 5e 00 	lea    0x5eb4f5(%rip),%rdx        # 5fdbf0 <funcinptr>
   126fb:	48 c7 02 d6 09 00 00 	movq   $0x9d6,(%rdx)
   12702:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12709:	00 
   1270a:	48 c7 c1 31 00 00 00 	mov    $0x31,%rcx
   12711:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12715:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1271c:	00 
   1271d:	48 8b 48 02          	mov    0x2(%rax),%rcx
   12721:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12725:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1272c:	00 
   1272d:	ff 32                	pushq  (%rdx)
   1272f:	48 8b 15 e2 11 74 00 	mov    0x7411e2(%rip),%rdx        # 753918 <tmpquadone>
   12736:	48 8b 0d f3 b4 5e 00 	mov    0x5eb4f3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1273d:	48 c7 05 08 12 74 00 	movq   $0x1,0x741208(%rip)        # 753950 <cmpPassed>
   12744:	01 00 00 00 
   12748:	e8 2b 31 ff ff       	callq  5878 <_storeDataFn>
   1274d:	80 78 02 31          	cmpb   $0x31,0x2(%rax)
   12751:	0f 85 4d fe ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12757:	50                   	push   %rax
   12758:	48 b8 33 fd 48 af 00 	movabs $0xaf48fd33,%rax
   1275f:	00 00 00 
   12762:	48 89 05 d7 11 74 00 	mov    %rax,0x7411d7(%rip)        # 753940 <edgeId>
   12769:	58                   	pop    %rax
   1276a:	e8 71 30 ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[3], s23))
   1276f:	48 89 15 a2 11 74 00 	mov    %rdx,0x7411a2(%rip)        # 753918 <tmpquadone>
   12776:	48 89 0d b3 b4 5e 00 	mov    %rcx,0x5eb4b3(%rip)        # 5fdc30 <tmpquadtwo>
   1277d:	48 8d 15 6c b4 5e 00 	lea    0x5eb46c(%rip),%rdx        # 5fdbf0 <funcinptr>
   12784:	48 c7 02 d7 09 00 00 	movq   $0x9d7,(%rdx)
   1278b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12792:	00 
   12793:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
   1279a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1279e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   127a5:	00 
   127a6:	48 8b 48 03          	mov    0x3(%rax),%rcx
   127aa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   127ae:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   127b5:	00 
   127b6:	ff 32                	pushq  (%rdx)
   127b8:	48 8b 15 59 11 74 00 	mov    0x741159(%rip),%rdx        # 753918 <tmpquadone>
   127bf:	48 8b 0d 6a b4 5e 00 	mov    0x5eb46a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   127c6:	48 c7 05 7f 11 74 00 	movq   $0x1,0x74117f(%rip)        # 753950 <cmpPassed>
   127cd:	01 00 00 00 
   127d1:	e8 a2 30 ff ff       	callq  5878 <_storeDataFn>
   127d6:	80 78 03 38          	cmpb   $0x38,0x3(%rax)
   127da:	0f 85 c4 fd ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   127e0:	50                   	push   %rax
   127e1:	48 b8 f4 23 bd ce 00 	movabs $0xcebd23f4,%rax
   127e8:	00 00 00 
   127eb:	48 89 05 4e 11 74 00 	mov    %rax,0x74114e(%rip)        # 753940 <edgeId>
   127f2:	58                   	pop    %rax
   127f3:	e8 e8 2f ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[4], s24))
   127f8:	48 89 15 19 11 74 00 	mov    %rdx,0x741119(%rip)        # 753918 <tmpquadone>
   127ff:	48 89 0d 2a b4 5e 00 	mov    %rcx,0x5eb42a(%rip)        # 5fdc30 <tmpquadtwo>
   12806:	48 8d 15 e3 b3 5e 00 	lea    0x5eb3e3(%rip),%rdx        # 5fdbf0 <funcinptr>
   1280d:	48 c7 02 d8 09 00 00 	movq   $0x9d8,(%rdx)
   12814:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1281b:	00 
   1281c:	48 c7 c1 30 00 00 00 	mov    $0x30,%rcx
   12823:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12827:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1282e:	00 
   1282f:	48 8b 48 04          	mov    0x4(%rax),%rcx
   12833:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12837:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1283e:	00 
   1283f:	ff 32                	pushq  (%rdx)
   12841:	48 8b 15 d0 10 74 00 	mov    0x7410d0(%rip),%rdx        # 753918 <tmpquadone>
   12848:	48 8b 0d e1 b3 5e 00 	mov    0x5eb3e1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1284f:	48 c7 05 f6 10 74 00 	movq   $0x1,0x7410f6(%rip)        # 753950 <cmpPassed>
   12856:	01 00 00 00 
   1285a:	e8 19 30 ff ff       	callq  5878 <_storeDataFn>
   1285f:	80 78 04 30          	cmpb   $0x30,0x4(%rax)
   12863:	0f 85 3b fd ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12869:	50                   	push   %rax
   1286a:	48 b8 8f f4 3a 93 00 	movabs $0x933af48f,%rax
   12871:	00 00 00 
   12874:	48 89 05 c5 10 74 00 	mov    %rax,0x7410c5(%rip)        # 753940 <edgeId>
   1287b:	58                   	pop    %rax
   1287c:	e8 5f 2f ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[5], s25))
   12881:	48 89 15 90 10 74 00 	mov    %rdx,0x741090(%rip)        # 753918 <tmpquadone>
   12888:	48 89 0d a1 b3 5e 00 	mov    %rcx,0x5eb3a1(%rip)        # 5fdc30 <tmpquadtwo>
   1288f:	48 8d 15 5a b3 5e 00 	lea    0x5eb35a(%rip),%rdx        # 5fdbf0 <funcinptr>
   12896:	48 c7 02 d9 09 00 00 	movq   $0x9d9,(%rdx)
   1289d:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   128a4:	00 
   128a5:	48 c7 c1 33 00 00 00 	mov    $0x33,%rcx
   128ac:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   128b0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   128b7:	00 
   128b8:	48 8b 48 05          	mov    0x5(%rax),%rcx
   128bc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   128c0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   128c7:	00 
   128c8:	ff 32                	pushq  (%rdx)
   128ca:	48 8b 15 47 10 74 00 	mov    0x741047(%rip),%rdx        # 753918 <tmpquadone>
   128d1:	48 8b 0d 58 b3 5e 00 	mov    0x5eb358(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   128d8:	48 c7 05 6d 10 74 00 	movq   $0x1,0x74106d(%rip)        # 753950 <cmpPassed>
   128df:	01 00 00 00 
   128e3:	e8 90 2f ff ff       	callq  5878 <_storeDataFn>
   128e8:	80 78 05 33          	cmpb   $0x33,0x5(%rax)
   128ec:	0f 85 b2 fc ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   128f2:	50                   	push   %rax
   128f3:	48 b8 d2 eb 4c b6 00 	movabs $0xb64cebd2,%rax
   128fa:	00 00 00 
   128fd:	48 89 05 3c 10 74 00 	mov    %rax,0x74103c(%rip)        # 753940 <edgeId>
   12904:	58                   	pop    %rax
   12905:	e8 d6 2e ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[6], s26))
   1290a:	48 89 15 07 10 74 00 	mov    %rdx,0x741007(%rip)        # 753918 <tmpquadone>
   12911:	48 89 0d 18 b3 5e 00 	mov    %rcx,0x5eb318(%rip)        # 5fdc30 <tmpquadtwo>
   12918:	48 8d 15 d1 b2 5e 00 	lea    0x5eb2d1(%rip),%rdx        # 5fdbf0 <funcinptr>
   1291f:	48 c7 02 da 09 00 00 	movq   $0x9da,(%rdx)
   12926:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1292d:	00 
   1292e:	48 c7 c1 30 00 00 00 	mov    $0x30,%rcx
   12935:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12939:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12940:	00 
   12941:	48 8b 48 06          	mov    0x6(%rax),%rcx
   12945:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12949:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12950:	00 
   12951:	ff 32                	pushq  (%rdx)
   12953:	48 8b 15 be 0f 74 00 	mov    0x740fbe(%rip),%rdx        # 753918 <tmpquadone>
   1295a:	48 8b 0d cf b2 5e 00 	mov    0x5eb2cf(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12961:	48 c7 05 e4 0f 74 00 	movq   $0x1,0x740fe4(%rip)        # 753950 <cmpPassed>
   12968:	01 00 00 00 
   1296c:	e8 07 2f ff ff       	callq  5878 <_storeDataFn>
   12971:	80 78 06 30          	cmpb   $0x30,0x6(%rax)
   12975:	0f 85 29 fc ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   1297b:	50                   	push   %rax
   1297c:	48 b8 af 33 d9 ba 00 	movabs $0xbad933af,%rax
   12983:	00 00 00 
   12986:	48 89 05 b3 0f 74 00 	mov    %rax,0x740fb3(%rip)        # 753940 <edgeId>
   1298d:	58                   	pop    %rax
   1298e:	e8 4d 2e ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[7], s27))
   12993:	48 89 15 7e 0f 74 00 	mov    %rdx,0x740f7e(%rip)        # 753918 <tmpquadone>
   1299a:	48 89 0d 8f b2 5e 00 	mov    %rcx,0x5eb28f(%rip)        # 5fdc30 <tmpquadtwo>
   129a1:	48 8d 15 48 b2 5e 00 	lea    0x5eb248(%rip),%rdx        # 5fdbf0 <funcinptr>
   129a8:	48 c7 02 db 09 00 00 	movq   $0x9db,(%rdx)
   129af:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   129b6:	00 
   129b7:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   129be:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   129c2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   129c9:	00 
   129ca:	48 8b 48 07          	mov    0x7(%rax),%rcx
   129ce:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   129d2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   129d9:	00 
   129da:	ff 32                	pushq  (%rdx)
   129dc:	48 8b 15 35 0f 74 00 	mov    0x740f35(%rip),%rdx        # 753918 <tmpquadone>
   129e3:	48 8b 0d 46 b2 5e 00 	mov    0x5eb246(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   129ea:	48 c7 05 5b 0f 74 00 	movq   $0x1,0x740f5b(%rip)        # 753950 <cmpPassed>
   129f1:	01 00 00 00 
   129f5:	e8 7e 2e ff ff       	callq  5878 <_storeDataFn>
   129fa:	80 78 07 00          	cmpb   $0x0,0x7(%rax)
   129fe:	0f 85 a0 fb ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12a04:	50                   	push   %rax
   12a05:	48 c7 c0 ce 64 eb 56 	mov    $0x56eb64ce,%rax
   12a0c:	48 89 05 2d 0f 74 00 	mov    %rax,0x740f2d(%rip)        # 753940 <edgeId>
   12a13:	58                   	pop    %rax
   12a14:	e8 c7 2d ff ff       	callq  57e0 <_storeEdge>
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";
   12a19:	48 89 15 f8 0e 74 00 	mov    %rdx,0x740ef8(%rip)        # 753918 <tmpquadone>
   12a20:	48 89 0d 09 b2 5e 00 	mov    %rcx,0x5eb209(%rip)        # 5fdc30 <tmpquadtwo>
   12a27:	48 8d 15 c2 b1 5e 00 	lea    0x5eb1c2(%rip),%rdx        # 5fdbf0 <funcinptr>
   12a2e:	48 c7 02 dc 09 00 00 	movq   $0x9dc,(%rdx)
   12a35:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12a3c:	00 
   12a3d:	48 c7 c1 60 00 00 00 	mov    $0x60,%rcx
   12a44:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12a48:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12a4f:	00 
   12a50:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
   12a54:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12a58:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12a5f:	00 
   12a60:	ff 32                	pushq  (%rdx)
   12a62:	48 8b 15 af 0e 74 00 	mov    0x740eaf(%rip),%rdx        # 753918 <tmpquadone>
   12a69:	48 8b 0d c0 b1 5e 00 	mov    0x5eb1c0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12a70:	48 c7 05 d5 0e 74 00 	movq   $0x1,0x740ed5(%rip)        # 753950 <cmpPassed>
   12a77:	01 00 00 00 
   12a7b:	e8 f8 2d ff ff       	callq  5878 <_storeDataFn>
   12a80:	80 7d 00 60          	cmpb   $0x60,0x0(%rbp)
   12a84:	48 8d 05 69 70 01 00 	lea    0x17069(%rip),%rax        # 29af4 <b64c+0x94>
   12a8b:	48 8d 35 66 70 01 00 	lea    0x17066(%rip),%rsi        # 29af8 <b64c+0x98>
   12a92:	48 0f 45 c6          	cmovne %rsi,%rax
}
   12a96:	48 83 c4 08          	add    $0x8,%rsp
   12a9a:	5b                   	pop    %rbx
   12a9b:	5d                   	pop    %rbp
   12a9c:	c3                   	retq   
   12a9d:	0f 1f 00             	nopl   (%rax)
   12aa0:	50                   	push   %rax
   12aa1:	48 c7 c0 12 5e 87 32 	mov    $0x32875e12,%rax
   12aa8:	48 89 05 91 0e 74 00 	mov    %rax,0x740e91(%rip)        # 753940 <edgeId>
   12aaf:	58                   	pop    %rax
   12ab0:	e8 2b 2d ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[1], s21))
   12ab5:	0f b6 78 01          	movzbl 0x1(%rax),%edi
   12ab9:	83 e7 df             	and    $0xffffffdf,%edi
   12abc:	48 89 15 55 0e 74 00 	mov    %rdx,0x740e55(%rip)        # 753918 <tmpquadone>
   12ac3:	48 89 0d 66 b1 5e 00 	mov    %rcx,0x5eb166(%rip)        # 5fdc30 <tmpquadtwo>
   12aca:	48 8d 15 1f b1 5e 00 	lea    0x5eb11f(%rip),%rdx        # 5fdbf0 <funcinptr>
   12ad1:	48 c7 02 dd 09 00 00 	movq   $0x9dd,(%rdx)
   12ad8:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12adf:	00 
   12ae0:	48 c7 c1 54 00 00 00 	mov    $0x54,%rcx
   12ae7:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12aeb:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12af2:	00 
   12af3:	48 89 f9             	mov    %rdi,%rcx
   12af6:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12afa:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12b01:	00 
   12b02:	ff 32                	pushq  (%rdx)
   12b04:	48 8b 15 0d 0e 74 00 	mov    0x740e0d(%rip),%rdx        # 753918 <tmpquadone>
   12b0b:	48 8b 0d 1e b1 5e 00 	mov    0x5eb11e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12b12:	48 c7 05 33 0e 74 00 	movq   $0x1,0x740e33(%rip)        # 753950 <cmpPassed>
   12b19:	01 00 00 00 
   12b1d:	e8 56 2d ff ff       	callq  5878 <_storeDataFn>
   12b22:	40 80 ff 54          	cmp    $0x54,%dil
   12b26:	0f 85 78 fa ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12b2c:	50                   	push   %rax
   12b2d:	48 b8 eb 50 86 87 00 	movabs $0x878650eb,%rax
   12b34:	00 00 00 
   12b37:	48 89 05 02 0e 74 00 	mov    %rax,0x740e02(%rip)        # 753940 <edgeId>
   12b3e:	58                   	pop    %rax
   12b3f:	e8 9c 2c ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[2], s22))
   12b44:	44 0f b6 40 02       	movzbl 0x2(%rax),%r8d
   12b49:	41 83 e0 df          	and    $0xffffffdf,%r8d
   12b4d:	48 89 15 c4 0d 74 00 	mov    %rdx,0x740dc4(%rip)        # 753918 <tmpquadone>
   12b54:	48 89 0d d5 b0 5e 00 	mov    %rcx,0x5eb0d5(%rip)        # 5fdc30 <tmpquadtwo>
   12b5b:	48 8d 15 8e b0 5e 00 	lea    0x5eb08e(%rip),%rdx        # 5fdbf0 <funcinptr>
   12b62:	48 c7 02 de 09 00 00 	movq   $0x9de,(%rdx)
   12b69:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12b70:	00 
   12b71:	48 c7 c1 46 00 00 00 	mov    $0x46,%rcx
   12b78:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12b7c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12b83:	00 
   12b84:	4c 89 c1             	mov    %r8,%rcx
   12b87:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12b8b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12b92:	00 
   12b93:	ff 32                	pushq  (%rdx)
   12b95:	48 8b 15 7c 0d 74 00 	mov    0x740d7c(%rip),%rdx        # 753918 <tmpquadone>
   12b9c:	48 8b 0d 8d b0 5e 00 	mov    0x5eb08d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12ba3:	48 c7 05 a2 0d 74 00 	movq   $0x1,0x740da2(%rip)        # 753950 <cmpPassed>
   12baa:	01 00 00 00 
   12bae:	e8 c5 2c ff ff       	callq  5878 <_storeDataFn>
   12bb3:	41 80 f8 46          	cmp    $0x46,%r8b
   12bb7:	0f 85 e7 f9 ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12bbd:	50                   	push   %rax
   12bbe:	48 b8 50 86 87 e5 00 	movabs $0xe5878650,%rax
   12bc5:	00 00 00 
   12bc8:	48 89 05 71 0d 74 00 	mov    %rax,0x740d71(%rip)        # 753940 <edgeId>
   12bcf:	58                   	pop    %rax
   12bd0:	e8 0b 2c ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[3], s23))
   12bd5:	48 89 15 3c 0d 74 00 	mov    %rdx,0x740d3c(%rip)        # 753918 <tmpquadone>
   12bdc:	48 89 0d 4d b0 5e 00 	mov    %rcx,0x5eb04d(%rip)        # 5fdc30 <tmpquadtwo>
   12be3:	48 8d 15 06 b0 5e 00 	lea    0x5eb006(%rip),%rdx        # 5fdbf0 <funcinptr>
   12bea:	48 c7 02 df 09 00 00 	movq   $0x9df,(%rdx)
   12bf1:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12bf8:	00 
   12bf9:	48 c7 c1 2d 00 00 00 	mov    $0x2d,%rcx
   12c00:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12c04:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12c0b:	00 
   12c0c:	48 8b 48 03          	mov    0x3(%rax),%rcx
   12c10:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12c14:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12c1b:	00 
   12c1c:	ff 32                	pushq  (%rdx)
   12c1e:	48 8b 15 f3 0c 74 00 	mov    0x740cf3(%rip),%rdx        # 753918 <tmpquadone>
   12c25:	48 8b 0d 04 b0 5e 00 	mov    0x5eb004(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12c2c:	48 c7 05 19 0d 74 00 	movq   $0x1,0x740d19(%rip)        # 753950 <cmpPassed>
   12c33:	01 00 00 00 
   12c37:	e8 3c 2c ff ff       	callq  5878 <_storeDataFn>
   12c3c:	80 78 03 2d          	cmpb   $0x2d,0x3(%rax)
   12c40:	0f 85 5e f9 ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12c46:	50                   	push   %rax
   12c47:	48 b8 19 1e 96 8b 00 	movabs $0x8b961e19,%rax
   12c4e:	00 00 00 
   12c51:	48 89 05 e8 0c 74 00 	mov    %rax,0x740ce8(%rip)        # 753940 <edgeId>
   12c58:	58                   	pop    %rax
   12c59:	e8 82 2b ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[4], s24))
   12c5e:	48 89 15 b3 0c 74 00 	mov    %rdx,0x740cb3(%rip)        # 753918 <tmpquadone>
   12c65:	48 89 0d c4 af 5e 00 	mov    %rcx,0x5eafc4(%rip)        # 5fdc30 <tmpquadtwo>
   12c6c:	48 8d 15 7d af 5e 00 	lea    0x5eaf7d(%rip),%rdx        # 5fdbf0 <funcinptr>
   12c73:	48 c7 02 e0 09 00 00 	movq   $0x9e0,(%rdx)
   12c7a:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12c81:	00 
   12c82:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
   12c89:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12c8d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12c94:	00 
   12c95:	48 8b 48 04          	mov    0x4(%rax),%rcx
   12c99:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12c9d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12ca4:	00 
   12ca5:	ff 32                	pushq  (%rdx)
   12ca7:	48 8b 15 6a 0c 74 00 	mov    0x740c6a(%rip),%rdx        # 753918 <tmpquadone>
   12cae:	48 8b 0d 7b af 5e 00 	mov    0x5eaf7b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12cb5:	48 c7 05 90 0c 74 00 	movq   $0x1,0x740c90(%rip)        # 753950 <cmpPassed>
   12cbc:	01 00 00 00 
   12cc0:	e8 b3 2b ff ff       	callq  5878 <_storeDataFn>
   12cc5:	80 78 04 38          	cmpb   $0x38,0x4(%rax)
   12cc9:	0f 85 d5 f8 ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12ccf:	50                   	push   %rax
   12cd0:	48 b8 78 58 2e 8a 00 	movabs $0x8a2e5878,%rax
   12cd7:	00 00 00 
   12cda:	48 89 05 5f 0c 74 00 	mov    %rax,0x740c5f(%rip)        # 753940 <edgeId>
   12ce1:	58                   	pop    %rax
   12ce2:	e8 f9 2a ff ff       	callq  57e0 <_storeEdge>
  if (CASEEQ (s1[5], s25))
   12ce7:	48 89 15 2a 0c 74 00 	mov    %rdx,0x740c2a(%rip)        # 753918 <tmpquadone>
   12cee:	48 89 0d 3b af 5e 00 	mov    %rcx,0x5eaf3b(%rip)        # 5fdc30 <tmpquadtwo>
   12cf5:	48 8d 15 f4 ae 5e 00 	lea    0x5eaef4(%rip),%rdx        # 5fdbf0 <funcinptr>
   12cfc:	48 c7 02 e1 09 00 00 	movq   $0x9e1,(%rdx)
   12d03:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12d0a:	00 
   12d0b:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   12d12:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12d16:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12d1d:	00 
   12d1e:	48 8b 48 05          	mov    0x5(%rax),%rcx
   12d22:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12d26:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12d2d:	00 
   12d2e:	ff 32                	pushq  (%rdx)
   12d30:	48 8b 15 e1 0b 74 00 	mov    0x740be1(%rip),%rdx        # 753918 <tmpquadone>
   12d37:	48 8b 0d f2 ae 5e 00 	mov    0x5eaef2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12d3e:	48 c7 05 07 0c 74 00 	movq   $0x1,0x740c07(%rip)        # 753950 <cmpPassed>
   12d45:	01 00 00 00 
   12d49:	e8 2a 2b ff ff       	callq  5878 <_storeDataFn>
   12d4e:	80 78 05 00          	cmpb   $0x0,0x5(%rax)
   12d52:	0f 85 4c f8 ff ff    	jne    125a4 <gettext_quote.part.1+0x124>
   12d58:	50                   	push   %rax
   12d59:	48 b8 61 b9 28 d2 00 	movabs $0xd228b961,%rax
   12d60:	00 00 00 
   12d63:	48 89 05 d6 0b 74 00 	mov    %rax,0x740bd6(%rip)        # 753940 <edgeId>
   12d6a:	58                   	pop    %rax
   12d6b:	e8 70 2a ff ff       	callq  57e0 <_storeEdge>
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
   12d70:	48 89 15 a1 0b 74 00 	mov    %rdx,0x740ba1(%rip)        # 753918 <tmpquadone>
   12d77:	48 89 0d b2 ae 5e 00 	mov    %rcx,0x5eaeb2(%rip)        # 5fdc30 <tmpquadtwo>
   12d7e:	48 8d 15 6b ae 5e 00 	lea    0x5eae6b(%rip),%rdx        # 5fdbf0 <funcinptr>
   12d85:	48 c7 02 e2 09 00 00 	movq   $0x9e2,(%rdx)
   12d8c:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   12d93:	00 
   12d94:	48 c7 c1 60 00 00 00 	mov    $0x60,%rcx
   12d9b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12d9f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12da6:	00 
   12da7:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
   12dab:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12daf:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12db6:	00 
   12db7:	ff 32                	pushq  (%rdx)
   12db9:	48 8b 15 58 0b 74 00 	mov    0x740b58(%rip),%rdx        # 753918 <tmpquadone>
   12dc0:	48 8b 0d 69 ae 5e 00 	mov    0x5eae69(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12dc7:	48 c7 05 7e 0b 74 00 	movq   $0x1,0x740b7e(%rip)        # 753950 <cmpPassed>
   12dce:	01 00 00 00 
   12dd2:	e8 a1 2a ff ff       	callq  5878 <_storeDataFn>
   12dd7:	80 7d 00 60          	cmpb   $0x60,0x0(%rbp)
   12ddb:	48 8d 05 0a 6d 01 00 	lea    0x16d0a(%rip),%rax        # 29aec <b64c+0x8c>
   12de2:	4c 8d 15 07 6d 01 00 	lea    0x16d07(%rip),%r10        # 29af0 <b64c+0x90>
   12de9:	49 0f 45 c2          	cmovne %r10,%rax
}
   12ded:	48 83 c4 08          	add    $0x8,%rsp
   12df1:	5b                   	pop    %rbx
   12df2:	5d                   	pop    %rbp
   12df3:	c3                   	retq   
   12df4:	66 90                	xchg   %ax,%ax
   12df6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   12dfd:	00 00 00 

0000000000012e00 <quotearg_buffer_restyled>:
                          char const *arg, size_t argsize,
                          enum quoting_style quoting_style, int flags,
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
   12e00:	41 57                	push   %r15
   12e02:	41 56                	push   %r14
   12e04:	45 89 c6             	mov    %r8d,%r14d
   12e07:	41 55                	push   %r13
   12e09:	41 54                	push   %r12
   12e0b:	49 89 d4             	mov    %rdx,%r12
   12e0e:	55                   	push   %rbp
   12e0f:	53                   	push   %rbx
   12e10:	48 89 cd             	mov    %rcx,%rbp
   12e13:	44 89 cb             	mov    %r9d,%ebx
   12e16:	49 89 f5             	mov    %rsi,%r13
   12e19:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
   12e20:	83 e3 02             	and    $0x2,%ebx
{
   12e23:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
   12e2a:	00 
   12e2b:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
   12e32:	00 
   12e33:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
   12e3a:	00 
   12e3b:	48 89 3c 24          	mov    %rdi,(%rsp)
   12e3f:	44 89 44 24 38       	mov    %r8d,0x38(%rsp)
   12e44:	44 89 4c 24 3c       	mov    %r9d,0x3c(%rsp)
   12e49:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   12e4e:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   12e53:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12e5a:	00 00 
   12e5c:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
   12e63:	00 
   12e64:	31 c0                	xor    %eax,%eax
   12e66:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  bool unibyte_locale = MB_CUR_MAX == 1;
   12e6b:	e8 c0 ea fe ff       	callq  1930 <__ctype_get_mb_cur_max@plt>
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
   12e70:	48 89 15 a1 0a 74 00 	mov    %rdx,0x740aa1(%rip)        # 753918 <tmpquadone>
   12e77:	48 89 0d b2 ad 5e 00 	mov    %rcx,0x5eadb2(%rip)        # 5fdc30 <tmpquadtwo>
   12e7e:	48 8d 15 6b ad 5e 00 	lea    0x5ead6b(%rip),%rdx        # 5fdbf0 <funcinptr>
   12e85:	48 c7 02 e3 09 00 00 	movq   $0x9e3,(%rdx)
   12e8c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   12e93:	00 
   12e94:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   12e9b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12e9f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12ea6:	00 
   12ea7:	4c 89 f1             	mov    %r14,%rcx
   12eaa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12eae:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12eb5:	00 
   12eb6:	ff 32                	pushq  (%rdx)
   12eb8:	48 8b 15 59 0a 74 00 	mov    0x740a59(%rip),%rdx        # 753918 <tmpquadone>
   12ebf:	48 8b 0d 6a ad 5e 00 	mov    0x5ead6a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   12ec6:	48 c7 05 7f 0a 74 00 	movq   $0x1,0x740a7f(%rip)        # 753950 <cmpPassed>
   12ecd:	01 00 00 00 
   12ed1:	e8 a2 29 ff ff       	callq  5878 <_storeDataFn>
   12ed6:	41 83 fe 08          	cmp    $0x8,%r14d
  bool unibyte_locale = MB_CUR_MAX == 1;
   12eda:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  switch (quoting_style)
   12edf:	0f 87 fa 78 00 00    	ja     1a7df <quotearg_buffer_restyled+0x79df>
   12ee5:	50                   	push   %rax
   12ee6:	48 b8 7f a4 d0 af 00 	movabs $0xafd0a47f,%rax
   12eed:	00 00 00 
   12ef0:	48 89 05 49 0a 74 00 	mov    %rax,0x740a49(%rip)        # 753940 <edgeId>
   12ef7:	58                   	pop    %rax
   12ef8:	e8 e3 28 ff ff       	callq  57e0 <_storeEdge>
   12efd:	48 8d 3d 3c 6c 01 00 	lea    0x16c3c(%rip),%rdi        # 29b40 <b64c+0xe0>
   12f04:	44 89 f6             	mov    %r14d,%esi
   12f07:	4c 63 04 b7          	movslq (%rdi,%rsi,4),%r8
   12f0b:	49 01 f8             	add    %rdi,%r8
   12f0e:	41 ff e0             	jmpq   *%r8
   12f11:	50                   	push   %rax
   12f12:	48 c7 c0 fd ca 46 11 	mov    $0x1146cafd,%rax
   12f19:	48 89 05 20 0a 74 00 	mov    %rax,0x740a20(%rip)        # 753940 <edgeId>
   12f20:	58                   	pop    %rax
   12f21:	e8 ba 28 ff ff       	callq  57e0 <_storeEdge>
   12f26:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   12f2b:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
  size_t len = 0;
   12f30:	45 31 ff             	xor    %r15d,%r15d
  switch (quoting_style)
   12f33:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   12f38:	c6 44 24 7c 00       	movb   $0x0,0x7c(%rsp)
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
      elide_outer_quotes = false;
   12f3d:	c6 44 24 7d 00       	movb   $0x0,0x7d(%rsp)
      backslash_escapes = true;
   12f42:	c6 44 24 69 01       	movb   $0x1,0x69(%rsp)
  size_t quote_string_len = 0;
   12f47:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
   12f4e:	00 00 
  char const *quote_string = 0;
   12f50:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
   12f57:	00 00 
   12f59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   12f60:	50                   	push   %rax
   12f61:	48 b8 28 c2 17 9f 00 	movabs $0x9f17c228,%rax
   12f68:	00 00 00 
   12f6b:	48 89 05 ce 09 74 00 	mov    %rax,0x7409ce(%rip)        # 753940 <edgeId>
   12f72:	58                   	pop    %rax
   12f73:	e8 68 28 ff ff       	callq  57e0 <_storeEdge>
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              break;

            case c_quoting_style:
              if ((flags & QA_SPLIT_TRIGRAPHS)
   12f78:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
      switch (c)
   12f7c:	4c 8d 35 f9 6b 01 00 	lea    0x16bf9(%rip),%r14        # 29b7c <b64c+0x11c>
  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
   12f83:	31 db                	xor    %ebx,%ebx
   12f85:	4d 89 eb             	mov    %r13,%r11
   12f88:	4d 89 e1             	mov    %r12,%r9
              if ((flags & QA_SPLIT_TRIGRAPHS)
   12f8b:	89 c2                	mov    %eax,%edx
          else if (flags & QA_ELIDE_NULL_BYTES)
   12f8d:	83 e0 01             	and    $0x1,%eax
              if ((flags & QA_SPLIT_TRIGRAPHS)
   12f90:	83 e2 04             	and    $0x4,%edx
          else if (flags & QA_ELIDE_NULL_BYTES)
   12f93:	89 44 24 6c          	mov    %eax,0x6c(%rsp)
              if ((flags & QA_SPLIT_TRIGRAPHS)
   12f97:	89 54 24 78          	mov    %edx,0x78(%rsp)
   12f9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   12fa0:	50                   	push   %rax
   12fa1:	48 c7 c0 4f 54 8c 2a 	mov    $0x2a8c544f,%rax
   12fa8:	48 89 05 91 09 74 00 	mov    %rax,0x740991(%rip)        # 753940 <edgeId>
   12faf:	58                   	pop    %rax
   12fb0:	e8 2b 28 ff ff       	callq  57e0 <_storeEdge>
  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
   12fb5:	48 89 15 5c 09 74 00 	mov    %rdx,0x74095c(%rip)        # 753918 <tmpquadone>
   12fbc:	48 89 0d 6d ac 5e 00 	mov    %rcx,0x5eac6d(%rip)        # 5fdc30 <tmpquadtwo>
   12fc3:	48 8d 15 26 ac 5e 00 	lea    0x5eac26(%rip),%rdx        # 5fdbf0 <funcinptr>
   12fca:	48 c7 02 e4 09 00 00 	movq   $0x9e4,(%rdx)
   12fd1:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   12fd8:	00 
   12fd9:	48 89 d9             	mov    %rbx,%rcx
   12fdc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   12fe0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   12fe7:	00 
   12fe8:	48 89 e9             	mov    %rbp,%rcx
   12feb:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   12fef:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   12ff6:	00 
   12ff7:	ff 32                	pushq  (%rdx)
   12ff9:	48 8b 15 18 09 74 00 	mov    0x740918(%rip),%rdx        # 753918 <tmpquadone>
   13000:	48 8b 0d 29 ac 5e 00 	mov    0x5eac29(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13007:	48 c7 05 3e 09 74 00 	movq   $0x1,0x74093e(%rip)        # 753950 <cmpPassed>
   1300e:	01 00 00 00 
   13012:	e8 61 28 ff ff       	callq  5878 <_storeDataFn>
   13017:	48 39 dd             	cmp    %rbx,%rbp
   1301a:	41 0f 95 c4          	setne  %r12b
   1301e:	48 89 15 f3 08 74 00 	mov    %rdx,0x7408f3(%rip)        # 753918 <tmpquadone>
   13025:	48 89 0d 04 ac 5e 00 	mov    %rcx,0x5eac04(%rip)        # 5fdc30 <tmpquadtwo>
   1302c:	48 8d 15 bd ab 5e 00 	lea    0x5eabbd(%rip),%rdx        # 5fdbf0 <funcinptr>
   13033:	48 c7 02 e5 09 00 00 	movq   $0x9e5,(%rdx)
   1303a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13041:	00 
   13042:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   13049:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1304d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13054:	00 
   13055:	48 89 e9             	mov    %rbp,%rcx
   13058:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1305c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13063:	00 
   13064:	ff 32                	pushq  (%rdx)
   13066:	48 8b 15 ab 08 74 00 	mov    0x7408ab(%rip),%rdx        # 753918 <tmpquadone>
   1306d:	48 8b 0d bc ab 5e 00 	mov    0x5eabbc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13074:	48 c7 05 d1 08 74 00 	movq   $0x1,0x7408d1(%rip)        # 753950 <cmpPassed>
   1307b:	01 00 00 00 
   1307f:	e8 f4 27 ff ff       	callq  5878 <_storeDataFn>
   13084:	48 83 fd ff          	cmp    $0xffffffffffffffff,%rbp
   13088:	0f 85 85 00 00 00    	jne    13113 <quotearg_buffer_restyled+0x313>
   1308e:	50                   	push   %rax
   1308f:	48 c7 c0 51 31 aa 24 	mov    $0x24aa3151,%rax
   13096:	48 89 05 a3 08 74 00 	mov    %rax,0x7408a3(%rip)        # 753940 <edgeId>
   1309d:	58                   	pop    %rax
   1309e:	e8 3d 27 ff ff       	callq  57e0 <_storeEdge>
   130a3:	48 89 15 6e 08 74 00 	mov    %rdx,0x74086e(%rip)        # 753918 <tmpquadone>
   130aa:	48 89 0d 7f ab 5e 00 	mov    %rcx,0x5eab7f(%rip)        # 5fdc30 <tmpquadtwo>
   130b1:	48 8d 15 38 ab 5e 00 	lea    0x5eab38(%rip),%rdx        # 5fdbf0 <funcinptr>
   130b8:	48 c7 02 e6 09 00 00 	movq   $0x9e6,(%rdx)
   130bf:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   130c6:	00 
   130c7:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   130ce:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   130d2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   130d9:	00 
   130da:	49 8b 0c 19          	mov    (%r9,%rbx,1),%rcx
   130de:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   130e2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   130e9:	00 
   130ea:	ff 32                	pushq  (%rdx)
   130ec:	48 8b 15 25 08 74 00 	mov    0x740825(%rip),%rdx        # 753918 <tmpquadone>
   130f3:	48 8b 0d 36 ab 5e 00 	mov    0x5eab36(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   130fa:	48 c7 05 4b 08 74 00 	movq   $0x1,0x74084b(%rip)        # 753950 <cmpPassed>
   13101:	01 00 00 00 
   13105:	e8 6e 27 ff ff       	callq  5878 <_storeDataFn>
   1310a:	41 80 3c 19 00       	cmpb   $0x0,(%r9,%rbx,1)
   1310f:	41 0f 95 c4          	setne  %r12b
   13113:	50                   	push   %rax
   13114:	48 c7 c0 15 a3 4a 12 	mov    $0x124aa315,%rax
   1311b:	48 89 05 1e 08 74 00 	mov    %rax,0x74081e(%rip)        # 753940 <edgeId>
   13122:	58                   	pop    %rax
   13123:	e8 b8 26 ff ff       	callq  57e0 <_storeEdge>
   13128:	45 84 e4             	test   %r12b,%r12b
   1312b:	0f 84 6f 54 00 00    	je     185a0 <quotearg_buffer_restyled+0x57a0>
   13131:	50                   	push   %rax
   13132:	48 b8 62 54 49 c2 00 	movabs $0xc2495462,%rax
   13139:	00 00 00 
   1313c:	48 89 05 fd 07 74 00 	mov    %rax,0x7407fd(%rip)        # 753940 <edgeId>
   13143:	58                   	pop    %rax
   13144:	e8 97 26 ff ff       	callq  57e0 <_storeEdge>
      if (backslash_escapes
   13149:	48 89 15 c8 07 74 00 	mov    %rdx,0x7407c8(%rip)        # 753918 <tmpquadone>
   13150:	48 89 0d d9 aa 5e 00 	mov    %rcx,0x5eaad9(%rip)        # 5fdc30 <tmpquadtwo>
   13157:	48 8d 15 92 aa 5e 00 	lea    0x5eaa92(%rip),%rdx        # 5fdbf0 <funcinptr>
   1315e:	48 c7 02 e7 09 00 00 	movq   $0x9e7,(%rdx)
   13165:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1316c:	00 
   1316d:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13174:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13178:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1317f:	00 
   13180:	48 8b 4c 24 7c       	mov    0x7c(%rsp),%rcx
   13185:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13189:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13190:	00 
   13191:	ff 32                	pushq  (%rdx)
   13193:	48 8b 15 7e 07 74 00 	mov    0x74077e(%rip),%rdx        # 753918 <tmpquadone>
   1319a:	48 8b 0d 8f aa 5e 00 	mov    0x5eaa8f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   131a1:	48 c7 05 a4 07 74 00 	movq   $0x1,0x7407a4(%rip)        # 753950 <cmpPassed>
   131a8:	01 00 00 00 
   131ac:	e8 c7 26 ff ff       	callq  5878 <_storeDataFn>
   131b1:	80 7c 24 7c 00       	cmpb   $0x0,0x7c(%rsp)
   131b6:	4d 8d 04 19          	lea    (%r9,%rbx,1),%r8
   131ba:	0f 84 20 31 00 00    	je     162e0 <quotearg_buffer_restyled+0x34e0>
   131c0:	50                   	push   %rax
   131c1:	48 c7 c0 51 25 09 03 	mov    $0x3092551,%rax
   131c8:	48 89 05 71 07 74 00 	mov    %rax,0x740771(%rip)        # 753940 <edgeId>
   131cf:	58                   	pop    %rax
   131d0:	e8 0b 26 ff ff       	callq  57e0 <_storeEdge>
          && (i + quote_string_len
   131d5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
                  ? (argsize = strlen (arg)) : argsize))
   131da:	48 89 15 37 07 74 00 	mov    %rdx,0x740737(%rip)        # 753918 <tmpquadone>
   131e1:	48 89 0d 48 aa 5e 00 	mov    %rcx,0x5eaa48(%rip)        # 5fdc30 <tmpquadtwo>
   131e8:	48 8d 15 01 aa 5e 00 	lea    0x5eaa01(%rip),%rdx        # 5fdbf0 <funcinptr>
   131ef:	48 c7 02 e8 09 00 00 	movq   $0x9e8,(%rdx)
   131f6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   131fd:	00 
   131fe:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   13205:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13209:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13210:	00 
   13211:	48 89 e9             	mov    %rbp,%rcx
   13214:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13218:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1321f:	00 
   13220:	ff 32                	pushq  (%rdx)
   13222:	48 8b 15 ef 06 74 00 	mov    0x7406ef(%rip),%rdx        # 753918 <tmpquadone>
   13229:	48 8b 0d 00 aa 5e 00 	mov    0x5eaa00(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13230:	48 c7 05 15 07 74 00 	movq   $0x1,0x740715(%rip)        # 753950 <cmpPassed>
   13237:	01 00 00 00 
   1323b:	e8 38 26 ff ff       	callq  5878 <_storeDataFn>
   13240:	48 83 fd ff          	cmp    $0xffffffffffffffff,%rbp
          && (i + quote_string_len
   13244:	4c 8d 2c 33          	lea    (%rbx,%rsi,1),%r13
                  ? (argsize = strlen (arg)) : argsize))
   13248:	0f 85 c2 00 00 00    	jne    13310 <quotearg_buffer_restyled+0x510>
   1324e:	50                   	push   %rax
   1324f:	48 c7 c0 25 09 03 1e 	mov    $0x1e030925,%rax
   13256:	48 89 05 e3 06 74 00 	mov    %rax,0x7406e3(%rip)        # 753940 <edgeId>
   1325d:	58                   	pop    %rax
   1325e:	e8 7d 25 ff ff       	callq  57e0 <_storeEdge>
   13263:	48 89 15 ae 06 74 00 	mov    %rdx,0x7406ae(%rip)        # 753918 <tmpquadone>
   1326a:	48 89 0d bf a9 5e 00 	mov    %rcx,0x5ea9bf(%rip)        # 5fdc30 <tmpquadtwo>
   13271:	48 8d 15 78 a9 5e 00 	lea    0x5ea978(%rip),%rdx        # 5fdbf0 <funcinptr>
   13278:	48 c7 02 e9 09 00 00 	movq   $0x9e9,(%rdx)
   1327f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13286:	00 
   13287:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   1328e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13292:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13299:	00 
   1329a:	48 89 f1             	mov    %rsi,%rcx
   1329d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   132a1:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   132a8:	00 
   132a9:	ff 32                	pushq  (%rdx)
   132ab:	48 8b 15 66 06 74 00 	mov    0x740666(%rip),%rdx        # 753918 <tmpquadone>
   132b2:	48 8b 0d 77 a9 5e 00 	mov    0x5ea977(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   132b9:	48 c7 05 8c 06 74 00 	movq   $0x1,0x74068c(%rip)        # 753950 <cmpPassed>
   132c0:	01 00 00 00 
   132c4:	e8 af 25 ff ff       	callq  5878 <_storeDataFn>
   132c9:	48 83 fe 01          	cmp    $0x1,%rsi
   132cd:	76 41                	jbe    13310 <quotearg_buffer_restyled+0x510>
   132cf:	50                   	push   %rax
   132d0:	48 b8 49 c2 80 c7 00 	movabs $0xc780c249,%rax
   132d7:	00 00 00 
   132da:	48 89 05 5f 06 74 00 	mov    %rax,0x74065f(%rip)        # 753940 <edgeId>
   132e1:	58                   	pop    %rax
   132e2:	e8 f9 24 ff ff       	callq  57e0 <_storeEdge>
   132e7:	4c 89 cf             	mov    %r9,%rdi
   132ea:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   132ef:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
   132f4:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
   132f9:	e8 42 e6 fe ff       	callq  1940 <strlen@plt>
   132fe:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
   13303:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
   13308:	48 89 c5             	mov    %rax,%rbp
   1330b:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
   13310:	50                   	push   %rax
   13311:	48 c7 c0 03 1e 7b 0a 	mov    $0xa7b1e03,%rax
   13318:	48 89 05 21 06 74 00 	mov    %rax,0x740621(%rip)        # 753940 <edgeId>
   1331f:	58                   	pop    %rax
   13320:	e8 bb 24 ff ff       	callq  57e0 <_storeEdge>
          && (i + quote_string_len
   13325:	48 89 15 ec 05 74 00 	mov    %rdx,0x7405ec(%rip)        # 753918 <tmpquadone>
   1332c:	48 89 0d fd a8 5e 00 	mov    %rcx,0x5ea8fd(%rip)        # 5fdc30 <tmpquadtwo>
   13333:	48 8d 15 b6 a8 5e 00 	lea    0x5ea8b6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1333a:	48 c7 02 ea 09 00 00 	movq   $0x9ea,(%rdx)
   13341:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13348:	00 
   13349:	48 89 e9             	mov    %rbp,%rcx
   1334c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13350:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13357:	00 
   13358:	4c 89 e9             	mov    %r13,%rcx
   1335b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1335f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13366:	00 
   13367:	ff 32                	pushq  (%rdx)
   13369:	48 8b 15 a8 05 74 00 	mov    0x7405a8(%rip),%rdx        # 753918 <tmpquadone>
   13370:	48 8b 0d b9 a8 5e 00 	mov    0x5ea8b9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13377:	48 c7 05 ce 05 74 00 	movq   $0x1,0x7405ce(%rip)        # 753950 <cmpPassed>
   1337e:	01 00 00 00 
   13382:	e8 f1 24 ff ff       	callq  5878 <_storeDataFn>
   13387:	49 39 ed             	cmp    %rbp,%r13
   1338a:	0f 87 50 2f 00 00    	ja     162e0 <quotearg_buffer_restyled+0x34e0>
   13390:	50                   	push   %rax
   13391:	48 c7 c0 c0 63 4f 01 	mov    $0x14f63c0,%rax
   13398:	48 89 05 a1 05 74 00 	mov    %rax,0x7405a1(%rip)        # 753940 <edgeId>
   1339f:	58                   	pop    %rax
   133a0:	e8 3b 24 ff ff       	callq  57e0 <_storeEdge>
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
   133a5:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   133aa:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   133af:	4c 89 c7             	mov    %r8,%rdi
   133b2:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
   133b7:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
   133bc:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
   133c1:	e8 8a e6 fe ff       	callq  1a50 <memcmp@plt>
   133c6:	85 c0                	test   %eax,%eax
   133c8:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
   133cd:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
   133d2:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   133d7:	0f 85 03 2f 00 00    	jne    162e0 <quotearg_buffer_restyled+0x34e0>
   133dd:	50                   	push   %rax
   133de:	48 b8 3d 05 94 ef 00 	movabs $0xef94053d,%rax
   133e5:	00 00 00 
   133e8:	48 89 05 51 05 74 00 	mov    %rax,0x740551(%rip)        # 753940 <edgeId>
   133ef:	58                   	pop    %rax
   133f0:	e8 eb 23 ff ff       	callq  57e0 <_storeEdge>
          if (elide_outer_quotes)
   133f5:	48 89 15 1c 05 74 00 	mov    %rdx,0x74051c(%rip)        # 753918 <tmpquadone>
   133fc:	48 89 0d 2d a8 5e 00 	mov    %rcx,0x5ea82d(%rip)        # 5fdc30 <tmpquadtwo>
   13403:	48 8d 15 e6 a7 5e 00 	lea    0x5ea7e6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1340a:	48 c7 02 eb 09 00 00 	movq   $0x9eb,(%rdx)
   13411:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13418:	00 
   13419:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13420:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13424:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1342b:	00 
   1342c:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   13431:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13435:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1343c:	00 
   1343d:	ff 32                	pushq  (%rdx)
   1343f:	48 8b 15 d2 04 74 00 	mov    0x7404d2(%rip),%rdx        # 753918 <tmpquadone>
   13446:	48 8b 0d e3 a7 5e 00 	mov    0x5ea7e3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1344d:	48 c7 05 f8 04 74 00 	movq   $0x1,0x7404f8(%rip)        # 753950 <cmpPassed>
   13454:	01 00 00 00 
   13458:	e8 1b 24 ff ff       	callq  5878 <_storeDataFn>
   1345d:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   13462:	0f 85 b8 0b 00 00    	jne    14020 <quotearg_buffer_restyled+0x1220>
   13468:	50                   	push   %rax
   13469:	48 c7 c0 53 40 f9 0e 	mov    $0xef94053,%rax
   13470:	48 89 05 c9 04 74 00 	mov    %rax,0x7404c9(%rip)        # 753940 <edgeId>
   13477:	58                   	pop    %rax
   13478:	e8 63 23 ff ff       	callq  57e0 <_storeEdge>
          is_right_quote = true;
   1347d:	44 0f b6 54 24 7c    	movzbl 0x7c(%rsp),%r10d
   13483:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13488:	50                   	push   %rax
   13489:	48 c7 c0 02 ca 77 70 	mov    $0x7077ca02,%rax
   13490:	48 89 05 a9 04 74 00 	mov    %rax,0x7404a9(%rip)        # 753940 <edgeId>
   13497:	58                   	pop    %rax
   13498:	e8 43 23 ff ff       	callq  57e0 <_storeEdge>
      c = arg[i];
   1349d:	45 0f b6 28          	movzbl (%r8),%r13d
      switch (c)
   134a1:	48 89 15 70 04 74 00 	mov    %rdx,0x740470(%rip)        # 753918 <tmpquadone>
   134a8:	48 89 0d 81 a7 5e 00 	mov    %rcx,0x5ea781(%rip)        # 5fdc30 <tmpquadtwo>
   134af:	48 8d 15 3a a7 5e 00 	lea    0x5ea73a(%rip),%rdx        # 5fdbf0 <funcinptr>
   134b6:	48 c7 02 ec 09 00 00 	movq   $0x9ec,(%rdx)
   134bd:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   134c4:	00 
   134c5:	48 c7 c1 7e 00 00 00 	mov    $0x7e,%rcx
   134cc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   134d0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   134d7:	00 
   134d8:	4c 89 e9             	mov    %r13,%rcx
   134db:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   134df:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   134e6:	00 
   134e7:	ff 32                	pushq  (%rdx)
   134e9:	48 8b 15 28 04 74 00 	mov    0x740428(%rip),%rdx        # 753918 <tmpquadone>
   134f0:	48 8b 0d 39 a7 5e 00 	mov    0x5ea739(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   134f7:	48 c7 05 4e 04 74 00 	movq   $0x1,0x74044e(%rip)        # 753950 <cmpPassed>
   134fe:	01 00 00 00 
   13502:	e8 71 23 ff ff       	callq  5878 <_storeDataFn>
   13507:	41 80 fd 7e          	cmp    $0x7e,%r13b
   1350b:	0f 87 df 16 00 00    	ja     14bf0 <quotearg_buffer_restyled+0x1df0>
   13511:	50                   	push   %rax
   13512:	48 c7 c0 94 ef e0 36 	mov    $0x36e0ef94,%rax
   13519:	48 89 05 20 04 74 00 	mov    %rax,0x740420(%rip)        # 753940 <edgeId>
   13520:	58                   	pop    %rax
   13521:	e8 ba 22 ff ff       	callq  57e0 <_storeEdge>
   13526:	41 0f b6 c5          	movzbl %r13b,%eax
   1352a:	49 63 14 86          	movslq (%r14,%rax,4),%rdx
   1352e:	4c 01 f2             	add    %r14,%rdx
   13531:	ff e2                	jmpq   *%rdx
   13533:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13538:	50                   	push   %rax
   13539:	48 c7 c0 d4 f8 47 13 	mov    $0x1347f8d4,%rax
   13540:	48 89 05 f9 03 74 00 	mov    %rax,0x7403f9(%rip)        # 753940 <edgeId>
   13547:	58                   	pop    %rax
   13548:	e8 93 22 ff ff       	callq  57e0 <_storeEdge>
          switch (quoting_style)
   1354d:	44 8b 64 24 38       	mov    0x38(%rsp),%r12d
   13552:	48 89 15 bf 03 74 00 	mov    %rdx,0x7403bf(%rip)        # 753918 <tmpquadone>
   13559:	48 89 0d d0 a6 5e 00 	mov    %rcx,0x5ea6d0(%rip)        # 5fdc30 <tmpquadtwo>
   13560:	48 8d 15 89 a6 5e 00 	lea    0x5ea689(%rip),%rdx        # 5fdbf0 <funcinptr>
   13567:	48 c7 02 ed 09 00 00 	movq   $0x9ed,(%rdx)
   1356e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   13575:	00 
   13576:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   1357d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13581:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13588:	00 
   13589:	4c 89 e1             	mov    %r12,%rcx
   1358c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13590:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13597:	00 
   13598:	ff 32                	pushq  (%rdx)
   1359a:	48 8b 15 77 03 74 00 	mov    0x740377(%rip),%rdx        # 753918 <tmpquadone>
   135a1:	48 8b 0d 88 a6 5e 00 	mov    0x5ea688(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   135a8:	48 c7 05 9d 03 74 00 	movq   $0x1,0x74039d(%rip)        # 753950 <cmpPassed>
   135af:	01 00 00 00 
   135b3:	e8 c0 22 ff ff       	callq  5878 <_storeDataFn>
   135b8:	41 83 fc 02          	cmp    $0x2,%r12d
   135bc:	0f 84 3e 2d 00 00    	je     16300 <quotearg_buffer_restyled+0x3500>
   135c2:	50                   	push   %rax
   135c3:	48 b8 8d 7f 34 a1 00 	movabs $0xa1347f8d,%rax
   135ca:	00 00 00 
   135cd:	48 89 05 6c 03 74 00 	mov    %rax,0x74036c(%rip)        # 753940 <edgeId>
   135d4:	58                   	pop    %rax
   135d5:	e8 06 22 ff ff       	callq  57e0 <_storeEdge>
   135da:	48 89 15 37 03 74 00 	mov    %rdx,0x740337(%rip)        # 753918 <tmpquadone>
   135e1:	48 89 0d 48 a6 5e 00 	mov    %rcx,0x5ea648(%rip)        # 5fdc30 <tmpquadtwo>
   135e8:	48 8d 15 01 a6 5e 00 	lea    0x5ea601(%rip),%rdx        # 5fdbf0 <funcinptr>
   135ef:	48 c7 02 ee 09 00 00 	movq   $0x9ee,(%rdx)
   135f6:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   135fd:	00 
   135fe:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
   13605:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13609:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13610:	00 
   13611:	4c 89 e1             	mov    %r12,%rcx
   13614:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13618:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1361f:	00 
   13620:	ff 32                	pushq  (%rdx)
   13622:	48 8b 15 ef 02 74 00 	mov    0x7402ef(%rip),%rdx        # 753918 <tmpquadone>
   13629:	48 8b 0d 00 a6 5e 00 	mov    0x5ea600(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13630:	48 c7 05 15 03 74 00 	movq   $0x1,0x740315(%rip)        # 753950 <cmpPassed>
   13637:	01 00 00 00 
   1363b:	e8 38 22 ff ff       	callq  5878 <_storeDataFn>
   13640:	41 83 fc 03          	cmp    $0x3,%r12d
   13644:	0f 85 56 2d 00 00    	jne    163a0 <quotearg_buffer_restyled+0x35a0>
   1364a:	50                   	push   %rax
   1364b:	48 b8 e3 1f 4d a8 00 	movabs $0xa84d1fe3,%rax
   13652:	00 00 00 
   13655:	48 89 05 e4 02 74 00 	mov    %rax,0x7402e4(%rip)        # 753940 <edgeId>
   1365c:	58                   	pop    %rax
   1365d:	e8 7e 21 ff ff       	callq  57e0 <_storeEdge>
              if ((flags & QA_SPLIT_TRIGRAPHS)
   13662:	8b 7c 24 78          	mov    0x78(%rsp),%edi
   13666:	85 ff                	test   %edi,%edi
   13668:	0f 84 32 2d 00 00    	je     163a0 <quotearg_buffer_restyled+0x35a0>
   1366e:	50                   	push   %rax
   1366f:	48 b8 fe d1 84 9a 00 	movabs $0x9a84d1fe,%rax
   13676:	00 00 00 
   13679:	48 89 05 c0 02 74 00 	mov    %rax,0x7402c0(%rip)        # 753940 <edgeId>
   13680:	58                   	pop    %rax
   13681:	e8 5a 21 ff ff       	callq  57e0 <_storeEdge>
                  && i + 2 < argsize && arg[i + 1] == '?')
   13686:	48 8d 4b 02          	lea    0x2(%rbx),%rcx
                    break;

                  default:
                    break;
                  }
              break;
   1368a:	41 bd 3f 00 00 00    	mov    $0x3f,%r13d
                  && i + 2 < argsize && arg[i + 1] == '?')
   13690:	48 89 15 81 02 74 00 	mov    %rdx,0x740281(%rip)        # 753918 <tmpquadone>
   13697:	48 89 1d 92 a5 5e 00 	mov    %rbx,0x5ea592(%rip)        # 5fdc30 <tmpquadtwo>
   1369e:	48 8d 15 4b a5 5e 00 	lea    0x5ea54b(%rip),%rdx        # 5fdbf0 <funcinptr>
   136a5:	48 c7 02 ef 09 00 00 	movq   $0x9ef,(%rdx)
   136ac:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   136b3:	00 
   136b4:	48 89 eb             	mov    %rbp,%rbx
   136b7:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   136bb:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   136c2:	00 
   136c3:	48 89 cb             	mov    %rcx,%rbx
   136c6:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   136ca:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   136d1:	00 
   136d2:	ff 32                	pushq  (%rdx)
   136d4:	48 8b 15 3d 02 74 00 	mov    0x74023d(%rip),%rdx        # 753918 <tmpquadone>
   136db:	48 8b 1d 4e a5 5e 00 	mov    0x5ea54e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   136e2:	48 c7 05 63 02 74 00 	movq   $0x1,0x740263(%rip)        # 753950 <cmpPassed>
   136e9:	01 00 00 00 
   136ed:	e8 86 21 ff ff       	callq  5878 <_storeDataFn>
   136f2:	48 39 e9             	cmp    %rbp,%rcx
   136f5:	0f 83 75 04 00 00    	jae    13b70 <quotearg_buffer_restyled+0xd70>
   136fb:	50                   	push   %rax
   136fc:	48 c7 c0 d1 84 9a 11 	mov    $0x119a84d1,%rax
   13703:	48 89 05 36 02 74 00 	mov    %rax,0x740236(%rip)        # 753940 <edgeId>
   1370a:	58                   	pop    %rax
   1370b:	e8 d0 20 ff ff       	callq  57e0 <_storeEdge>
   13710:	48 89 15 01 02 74 00 	mov    %rdx,0x740201(%rip)        # 753918 <tmpquadone>
   13717:	48 89 0d 12 a5 5e 00 	mov    %rcx,0x5ea512(%rip)        # 5fdc30 <tmpquadtwo>
   1371e:	48 8d 15 cb a4 5e 00 	lea    0x5ea4cb(%rip),%rdx        # 5fdbf0 <funcinptr>
   13725:	48 c7 02 f0 09 00 00 	movq   $0x9f0,(%rdx)
   1372c:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13733:	00 
   13734:	48 c7 c1 3f 00 00 00 	mov    $0x3f,%rcx
   1373b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1373f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13746:	00 
   13747:	49 8b 4c 19 01       	mov    0x1(%r9,%rbx,1),%rcx
   1374c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13750:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13757:	00 
   13758:	ff 32                	pushq  (%rdx)
   1375a:	48 8b 15 b7 01 74 00 	mov    0x7401b7(%rip),%rdx        # 753918 <tmpquadone>
   13761:	48 8b 0d c8 a4 5e 00 	mov    0x5ea4c8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13768:	48 c7 05 dd 01 74 00 	movq   $0x1,0x7401dd(%rip)        # 753950 <cmpPassed>
   1376f:	01 00 00 00 
   13773:	e8 00 21 ff ff       	callq  5878 <_storeDataFn>
   13778:	41 80 7c 19 01 3f    	cmpb   $0x3f,0x1(%r9,%rbx,1)
   1377e:	0f 85 ec 03 00 00    	jne    13b70 <quotearg_buffer_restyled+0xd70>
   13784:	50                   	push   %rax
   13785:	48 b8 4d a8 19 e1 00 	movabs $0xe119a84d,%rax
   1378c:	00 00 00 
   1378f:	48 89 05 aa 01 74 00 	mov    %rax,0x7401aa(%rip)        # 753940 <edgeId>
   13796:	58                   	pop    %rax
   13797:	e8 44 20 ff ff       	callq  57e0 <_storeEdge>
   1379c:	45 0f b6 2c 09       	movzbl (%r9,%rcx,1),%r13d
   137a1:	48 89 15 70 01 74 00 	mov    %rdx,0x740170(%rip)        # 753918 <tmpquadone>
   137a8:	48 89 0d 81 a4 5e 00 	mov    %rcx,0x5ea481(%rip)        # 5fdc30 <tmpquadtwo>
   137af:	48 8d 15 3a a4 5e 00 	lea    0x5ea43a(%rip),%rdx        # 5fdbf0 <funcinptr>
   137b6:	48 c7 02 f1 09 00 00 	movq   $0x9f1,(%rdx)
   137bd:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   137c4:	00 
   137c5:	48 c7 c1 3e 00 00 00 	mov    $0x3e,%rcx
   137cc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   137d0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   137d7:	00 
   137d8:	4c 89 e9             	mov    %r13,%rcx
   137db:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   137df:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   137e6:	00 
   137e7:	ff 32                	pushq  (%rdx)
   137e9:	48 8b 15 28 01 74 00 	mov    0x740128(%rip),%rdx        # 753918 <tmpquadone>
   137f0:	48 8b 0d 39 a4 5e 00 	mov    0x5ea439(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   137f7:	48 c7 05 4e 01 74 00 	movq   $0x1,0x74014e(%rip)        # 753950 <cmpPassed>
   137fe:	01 00 00 00 
   13802:	e8 71 20 ff ff       	callq  5878 <_storeDataFn>
   13807:	41 80 fd 3e          	cmp    $0x3e,%r13b
   1380b:	0f 87 8f 2b 00 00    	ja     163a0 <quotearg_buffer_restyled+0x35a0>
   13811:	50                   	push   %rax
   13812:	48 b8 84 9a 11 fe 00 	movabs $0xfe119a84,%rax
   13819:	00 00 00 
   1381c:	48 89 05 1d 01 74 00 	mov    %rax,0x74011d(%rip)        # 753940 <edgeId>
   13823:	58                   	pop    %rax
   13824:	e8 b7 1f ff ff       	callq  57e0 <_storeEdge>
   13829:	48 be 00 00 00 00 82 	movabs $0x7000a38200000000,%rsi
   13830:	a3 00 70 
   13833:	4c 0f a3 ee          	bt     %r13,%rsi
   13837:	0f 83 63 2b 00 00    	jae    163a0 <quotearg_buffer_restyled+0x35a0>
   1383d:	50                   	push   %rax
   1383e:	48 b8 50 33 c2 ff 00 	movabs $0xffc23350,%rax
   13845:	00 00 00 
   13848:	48 89 05 f1 00 74 00 	mov    %rax,0x7400f1(%rip)        # 753940 <edgeId>
   1384f:	58                   	pop    %rax
   13850:	e8 8b 1f ff ff       	callq  57e0 <_storeEdge>
                    if (elide_outer_quotes)
   13855:	48 89 15 bc 00 74 00 	mov    %rdx,0x7400bc(%rip)        # 753918 <tmpquadone>
   1385c:	48 89 0d cd a3 5e 00 	mov    %rcx,0x5ea3cd(%rip)        # 5fdc30 <tmpquadtwo>
   13863:	48 8d 15 86 a3 5e 00 	lea    0x5ea386(%rip),%rdx        # 5fdbf0 <funcinptr>
   1386a:	48 c7 02 f2 09 00 00 	movq   $0x9f2,(%rdx)
   13871:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13878:	00 
   13879:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13880:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13884:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1388b:	00 
   1388c:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   13891:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13895:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1389c:	00 
   1389d:	ff 32                	pushq  (%rdx)
   1389f:	48 8b 15 72 00 74 00 	mov    0x740072(%rip),%rdx        # 753918 <tmpquadone>
   138a6:	48 8b 0d 83 a3 5e 00 	mov    0x5ea383(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   138ad:	48 c7 05 98 00 74 00 	movq   $0x1,0x740098(%rip)        # 753950 <cmpPassed>
   138b4:	01 00 00 00 
   138b8:	e8 bb 1f ff ff       	callq  5878 <_storeDataFn>
   138bd:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   138c2:	0f 85 58 07 00 00    	jne    14020 <quotearg_buffer_restyled+0x1220>
   138c8:	50                   	push   %rax
   138c9:	48 b8 6a 46 f8 ff 00 	movabs $0xfff8466a,%rax
   138d0:	00 00 00 
   138d3:	48 89 05 66 00 74 00 	mov    %rax,0x740066(%rip)        # 753940 <edgeId>
   138da:	58                   	pop    %rax
   138db:	e8 00 1f ff ff       	callq  57e0 <_storeEdge>
                    STORE ('?');
   138e0:	48 89 15 31 00 74 00 	mov    %rdx,0x740031(%rip)        # 753918 <tmpquadone>
   138e7:	48 89 0d 42 a3 5e 00 	mov    %rcx,0x5ea342(%rip)        # 5fdc30 <tmpquadtwo>
   138ee:	48 8d 15 fb a2 5e 00 	lea    0x5ea2fb(%rip),%rdx        # 5fdbf0 <funcinptr>
   138f5:	48 c7 02 f3 09 00 00 	movq   $0x9f3,(%rdx)
   138fc:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13903:	00 
   13904:	4c 89 d9             	mov    %r11,%rcx
   13907:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1390b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13912:	00 
   13913:	4c 89 f9             	mov    %r15,%rcx
   13916:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1391a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13921:	00 
   13922:	ff 32                	pushq  (%rdx)
   13924:	48 8b 15 ed ff 73 00 	mov    0x73ffed(%rip),%rdx        # 753918 <tmpquadone>
   1392b:	48 8b 0d fe a2 5e 00 	mov    0x5ea2fe(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13932:	48 c7 05 13 00 74 00 	movq   $0x1,0x740013(%rip)        # 753950 <cmpPassed>
   13939:	01 00 00 00 
   1393d:	e8 36 1f ff ff       	callq  5878 <_storeDataFn>
   13942:	4d 39 df             	cmp    %r11,%r15
   13945:	73 21                	jae    13968 <quotearg_buffer_restyled+0xb68>
   13947:	50                   	push   %rax
   13948:	48 b8 66 84 ff 9f 00 	movabs $0x9fff8466,%rax
   1394f:	00 00 00 
   13952:	48 89 05 e7 ff 73 00 	mov    %rax,0x73ffe7(%rip)        # 753940 <edgeId>
   13959:	58                   	pop    %rax
   1395a:	e8 81 1e ff ff       	callq  57e0 <_storeEdge>
   1395f:	48 8b 1c 24          	mov    (%rsp),%rbx
   13963:	42 c6 04 3b 3f       	movb   $0x3f,(%rbx,%r15,1)
   13968:	50                   	push   %rax
   13969:	48 c7 c0 23 fc ff 54 	mov    $0x54fffc23,%rax
   13970:	48 89 05 c9 ff 73 00 	mov    %rax,0x73ffc9(%rip)        # 753940 <edgeId>
   13977:	58                   	pop    %rax
   13978:	e8 63 1e ff ff       	callq  57e0 <_storeEdge>
   1397d:	49 8d 47 01          	lea    0x1(%r15),%rax
                    STORE ('"');
   13981:	48 89 15 90 ff 73 00 	mov    %rdx,0x73ff90(%rip)        # 753918 <tmpquadone>
   13988:	48 89 0d a1 a2 5e 00 	mov    %rcx,0x5ea2a1(%rip)        # 5fdc30 <tmpquadtwo>
   1398f:	48 8d 15 5a a2 5e 00 	lea    0x5ea25a(%rip),%rdx        # 5fdbf0 <funcinptr>
   13996:	48 c7 02 f4 09 00 00 	movq   $0x9f4,(%rdx)
   1399d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   139a4:	00 
   139a5:	48 89 c1             	mov    %rax,%rcx
   139a8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   139ac:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   139b3:	00 
   139b4:	4c 89 d9             	mov    %r11,%rcx
   139b7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   139bb:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   139c2:	00 
   139c3:	ff 32                	pushq  (%rdx)
   139c5:	48 8b 15 4c ff 73 00 	mov    0x73ff4c(%rip),%rdx        # 753918 <tmpquadone>
   139cc:	48 8b 0d 5d a2 5e 00 	mov    0x5ea25d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   139d3:	48 c7 05 72 ff 73 00 	movq   $0x1,0x73ff72(%rip)        # 753950 <cmpPassed>
   139da:	01 00 00 00 
   139de:	e8 95 1e ff ff       	callq  5878 <_storeDataFn>
   139e3:	49 39 c3             	cmp    %rax,%r11
   139e6:	76 1f                	jbe    13a07 <quotearg_buffer_restyled+0xc07>
   139e8:	50                   	push   %rax
   139e9:	48 c7 c0 f0 ff 53 71 	mov    $0x7153fff0,%rax
   139f0:	48 89 05 49 ff 73 00 	mov    %rax,0x73ff49(%rip)        # 753940 <edgeId>
   139f7:	58                   	pop    %rax
   139f8:	e8 e3 1d ff ff       	callq  57e0 <_storeEdge>
   139fd:	48 8b 14 24          	mov    (%rsp),%rdx
   13a01:	42 c6 44 3a 01 22    	movb   $0x22,0x1(%rdx,%r15,1)
   13a07:	50                   	push   %rax
   13a08:	48 b8 ff 3f 15 a7 00 	movabs $0xa7153fff,%rax
   13a0f:	00 00 00 
   13a12:	48 89 05 27 ff 73 00 	mov    %rax,0x73ff27(%rip)        # 753940 <edgeId>
   13a19:	58                   	pop    %rax
   13a1a:	e8 c1 1d ff ff       	callq  57e0 <_storeEdge>
   13a1f:	4d 8d 47 02          	lea    0x2(%r15),%r8
                    STORE ('"');
   13a23:	48 89 15 ee fe 73 00 	mov    %rdx,0x73feee(%rip)        # 753918 <tmpquadone>
   13a2a:	48 89 0d ff a1 5e 00 	mov    %rcx,0x5ea1ff(%rip)        # 5fdc30 <tmpquadtwo>
   13a31:	48 8d 15 b8 a1 5e 00 	lea    0x5ea1b8(%rip),%rdx        # 5fdbf0 <funcinptr>
   13a38:	48 c7 02 f5 09 00 00 	movq   $0x9f5,(%rdx)
   13a3f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13a46:	00 
   13a47:	4c 89 c1             	mov    %r8,%rcx
   13a4a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13a4e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13a55:	00 
   13a56:	4c 89 d9             	mov    %r11,%rcx
   13a59:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13a5d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13a64:	00 
   13a65:	ff 32                	pushq  (%rdx)
   13a67:	48 8b 15 aa fe 73 00 	mov    0x73feaa(%rip),%rdx        # 753918 <tmpquadone>
   13a6e:	48 8b 0d bb a1 5e 00 	mov    0x5ea1bb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13a75:	48 c7 05 d0 fe 73 00 	movq   $0x1,0x73fed0(%rip)        # 753950 <cmpPassed>
   13a7c:	01 00 00 00 
   13a80:	e8 f3 1d ff ff       	callq  5878 <_storeDataFn>
   13a85:	4d 39 c3             	cmp    %r8,%r11
   13a88:	76 22                	jbe    13aac <quotearg_buffer_restyled+0xcac>
   13a8a:	50                   	push   %rax
   13a8b:	48 b8 ff 54 9c da 00 	movabs $0xda9c54ff,%rax
   13a92:	00 00 00 
   13a95:	48 89 05 a4 fe 73 00 	mov    %rax,0x73fea4(%rip)        # 753940 <edgeId>
   13a9c:	58                   	pop    %rax
   13a9d:	e8 3e 1d ff ff       	callq  57e0 <_storeEdge>
   13aa2:	4c 8b 24 24          	mov    (%rsp),%r12
   13aa6:	43 c6 44 3c 02 22    	movb   $0x22,0x2(%r12,%r15,1)
   13aac:	50                   	push   %rax
   13aad:	48 b8 4f c5 a9 ed 00 	movabs $0xeda9c54f,%rax
   13ab4:	00 00 00 
   13ab7:	48 89 05 82 fe 73 00 	mov    %rax,0x73fe82(%rip)        # 753940 <edgeId>
   13abe:	58                   	pop    %rax
   13abf:	e8 1c 1d ff ff       	callq  57e0 <_storeEdge>
   13ac4:	49 8d 7f 03          	lea    0x3(%r15),%rdi
                    STORE ('?');
   13ac8:	48 89 15 49 fe 73 00 	mov    %rdx,0x73fe49(%rip)        # 753918 <tmpquadone>
   13acf:	48 89 0d 5a a1 5e 00 	mov    %rcx,0x5ea15a(%rip)        # 5fdc30 <tmpquadtwo>
   13ad6:	48 8d 15 13 a1 5e 00 	lea    0x5ea113(%rip),%rdx        # 5fdbf0 <funcinptr>
   13add:	48 c7 02 f6 09 00 00 	movq   $0x9f6,(%rdx)
   13ae4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13aeb:	00 
   13aec:	48 89 f9             	mov    %rdi,%rcx
   13aef:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13af3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13afa:	00 
   13afb:	4c 89 d9             	mov    %r11,%rcx
   13afe:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13b02:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13b09:	00 
   13b0a:	ff 32                	pushq  (%rdx)
   13b0c:	48 8b 15 05 fe 73 00 	mov    0x73fe05(%rip),%rdx        # 753918 <tmpquadone>
   13b13:	48 8b 0d 16 a1 5e 00 	mov    0x5ea116(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13b1a:	48 c7 05 2b fe 73 00 	movq   $0x1,0x73fe2b(%rip)        # 753950 <cmpPassed>
   13b21:	01 00 00 00 
   13b25:	e8 4e 1d ff ff       	callq  5878 <_storeDataFn>
   13b2a:	49 39 fb             	cmp    %rdi,%r11
   13b2d:	76 22                	jbe    13b51 <quotearg_buffer_restyled+0xd51>
   13b2f:	50                   	push   %rax
   13b30:	48 b8 15 a7 b6 db 00 	movabs $0xdbb6a715,%rax
   13b37:	00 00 00 
   13b3a:	48 89 05 ff fd 73 00 	mov    %rax,0x73fdff(%rip)        # 753940 <edgeId>
   13b41:	58                   	pop    %rax
   13b42:	e8 99 1c ff ff       	callq  57e0 <_storeEdge>
   13b47:	48 8b 34 24          	mov    (%rsp),%rsi
   13b4b:	42 c6 44 3e 03 3f    	movb   $0x3f,0x3(%rsi,%r15,1)
   13b51:	50                   	push   %rax
   13b52:	48 c7 c0 71 6a bb 4d 	mov    $0x4dbb6a71,%rax
   13b59:	48 89 05 e0 fd 73 00 	mov    %rax,0x73fde0(%rip)        # 753940 <edgeId>
   13b60:	58                   	pop    %rax
   13b61:	e8 7a 1c ff ff       	callq  57e0 <_storeEdge>
   13b66:	49 83 c7 04          	add    $0x4,%r15
                    break;
   13b6a:	48 89 cb             	mov    %rcx,%rbx
   13b6d:	0f 1f 00             	nopl   (%rax)
   13b70:	50                   	push   %rax
   13b71:	48 c7 c0 b5 dd 26 39 	mov    $0x3926ddb5,%rax
   13b78:	48 89 05 c1 fd 73 00 	mov    %rax,0x73fdc1(%rip)        # 753940 <edgeId>
   13b7f:	58                   	pop    %rax
   13b80:	e8 5b 1c ff ff       	callq  57e0 <_storeEdge>
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
   13b85:	48 89 15 8c fd 73 00 	mov    %rdx,0x73fd8c(%rip)        # 753918 <tmpquadone>
   13b8c:	48 89 0d 9d a0 5e 00 	mov    %rcx,0x5ea09d(%rip)        # 5fdc30 <tmpquadtwo>
   13b93:	48 8d 15 56 a0 5e 00 	lea    0x5ea056(%rip),%rdx        # 5fdbf0 <funcinptr>
   13b9a:	48 c7 02 f7 09 00 00 	movq   $0x9f7,(%rdx)
   13ba1:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13ba8:	00 
   13ba9:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13bb0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13bb4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13bbb:	00 
   13bbc:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   13bc1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13bc5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13bcc:	00 
   13bcd:	ff 32                	pushq  (%rdx)
   13bcf:	48 8b 15 42 fd 73 00 	mov    0x73fd42(%rip),%rdx        # 753918 <tmpquadone>
   13bd6:	48 8b 0d 53 a0 5e 00 	mov    0x5ea053(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13bdd:	48 c7 05 68 fd 73 00 	movq   $0x1,0x73fd68(%rip)        # 753950 <cmpPassed>
   13be4:	01 00 00 00 
   13be8:	e8 8b 1c ff ff       	callq  5878 <_storeDataFn>
   13bed:	80 7c 24 68 00       	cmpb   $0x0,0x68(%rsp)
   13bf2:	0f 85 e8 0a 00 00    	jne    146e0 <quotearg_buffer_restyled+0x18e0>
   13bf8:	50                   	push   %rax
   13bf9:	48 b8 b6 db 24 a7 00 	movabs $0xa724dbb6,%rax
   13c00:	00 00 00 
   13c03:	48 89 05 36 fd 73 00 	mov    %rax,0x73fd36(%rip)        # 753940 <edgeId>
   13c0a:	58                   	pop    %rax
   13c0b:	e8 d0 1b ff ff       	callq  57e0 <_storeEdge>
   13c10:	48 83 c3 01          	add    $0x1,%rbx
             && quote_these_too
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
          && !is_right_quote)
   13c14:	45 84 d2             	test   %r10b,%r10b
   13c17:	0f 84 c8 00 00 00    	je     13ce5 <quotearg_buffer_restyled+0xee5>
   13c1d:	50                   	push   %rax
   13c1e:	48 c7 c0 6e 93 9c 7e 	mov    $0x7e9c936e,%rax
   13c25:	48 89 05 14 fd 73 00 	mov    %rax,0x73fd14(%rip)        # 753940 <edgeId>
   13c2c:	58                   	pop    %rax
   13c2d:	e8 ae 1b ff ff       	callq  57e0 <_storeEdge>
   13c32:	50                   	push   %rax
   13c33:	48 c7 c0 b7 49 4e 3f 	mov    $0x3f4e49b7,%rax
   13c3a:	48 89 05 ff fc 73 00 	mov    %rax,0x73fcff(%rip)        # 753940 <edgeId>
   13c41:	58                   	pop    %rax
   13c42:	e8 99 1b ff ff       	callq  57e0 <_storeEdge>
        goto store_c;

    store_escape:
      if (elide_outer_quotes)
        goto force_outer_quoting_style;
      STORE ('\\');
   13c47:	48 89 15 ca fc 73 00 	mov    %rdx,0x73fcca(%rip)        # 753918 <tmpquadone>
   13c4e:	48 89 0d db 9f 5e 00 	mov    %rcx,0x5e9fdb(%rip)        # 5fdc30 <tmpquadtwo>
   13c55:	48 8d 15 94 9f 5e 00 	lea    0x5e9f94(%rip),%rdx        # 5fdbf0 <funcinptr>
   13c5c:	48 c7 02 f8 09 00 00 	movq   $0x9f8,(%rdx)
   13c63:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13c6a:	00 
   13c6b:	4c 89 f9             	mov    %r15,%rcx
   13c6e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13c72:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13c79:	00 
   13c7a:	4c 89 d9             	mov    %r11,%rcx
   13c7d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13c81:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13c88:	00 
   13c89:	ff 32                	pushq  (%rdx)
   13c8b:	48 8b 15 86 fc 73 00 	mov    0x73fc86(%rip),%rdx        # 753918 <tmpquadone>
   13c92:	48 8b 0d 97 9f 5e 00 	mov    0x5e9f97(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13c99:	48 c7 05 ac fc 73 00 	movq   $0x1,0x73fcac(%rip)        # 753950 <cmpPassed>
   13ca0:	01 00 00 00 
   13ca4:	e8 cf 1b ff ff       	callq  5878 <_storeDataFn>
   13ca9:	4d 39 fb             	cmp    %r15,%r11
   13cac:	76 1e                	jbe    13ccc <quotearg_buffer_restyled+0xecc>
   13cae:	50                   	push   %rax
   13caf:	48 c7 c0 9b e4 f4 73 	mov    $0x73f4e49b,%rax
   13cb6:	48 89 05 83 fc 73 00 	mov    %rax,0x73fc83(%rip)        # 753940 <edgeId>
   13cbd:	58                   	pop    %rax
   13cbe:	e8 1d 1b ff ff       	callq  57e0 <_storeEdge>
   13cc3:	4c 8b 14 24          	mov    (%rsp),%r10
   13cc7:	43 c6 04 3a 5c       	movb   $0x5c,(%r10,%r15,1)
   13ccc:	50                   	push   %rax
   13ccd:	48 c7 c0 49 4e 3f 27 	mov    $0x273f4e49,%rax
   13cd4:	48 89 05 65 fc 73 00 	mov    %rax,0x73fc65(%rip)        # 753940 <edgeId>
   13cdb:	58                   	pop    %rax
   13cdc:	e8 ff 1a ff ff       	callq  57e0 <_storeEdge>
   13ce1:	49 83 c7 01          	add    $0x1,%r15
   13ce5:	50                   	push   %rax
   13ce6:	48 c7 c0 72 fa 39 29 	mov    $0x2939fa72,%rax
   13ced:	48 89 05 4c fc 73 00 	mov    %rax,0x73fc4c(%rip)        # 753940 <edgeId>
   13cf4:	58                   	pop    %rax
   13cf5:	e8 e6 1a ff ff       	callq  57e0 <_storeEdge>

    store_c:
      STORE (c);
   13cfa:	48 89 15 17 fc 73 00 	mov    %rdx,0x73fc17(%rip)        # 753918 <tmpquadone>
   13d01:	48 89 0d 28 9f 5e 00 	mov    %rcx,0x5e9f28(%rip)        # 5fdc30 <tmpquadtwo>
   13d08:	48 8d 15 e1 9e 5e 00 	lea    0x5e9ee1(%rip),%rdx        # 5fdbf0 <funcinptr>
   13d0f:	48 c7 02 f9 09 00 00 	movq   $0x9f9,(%rdx)
   13d16:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13d1d:	00 
   13d1e:	4c 89 d9             	mov    %r11,%rcx
   13d21:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13d25:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13d2c:	00 
   13d2d:	4c 89 f9             	mov    %r15,%rcx
   13d30:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13d34:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13d3b:	00 
   13d3c:	ff 32                	pushq  (%rdx)
   13d3e:	48 8b 15 d3 fb 73 00 	mov    0x73fbd3(%rip),%rdx        # 753918 <tmpquadone>
   13d45:	48 8b 0d e4 9e 5e 00 	mov    0x5e9ee4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13d4c:	48 c7 05 f9 fb 73 00 	movq   $0x1,0x73fbf9(%rip)        # 753950 <cmpPassed>
   13d53:	01 00 00 00 
   13d57:	e8 1c 1b ff ff       	callq  5878 <_storeDataFn>
   13d5c:	4d 39 df             	cmp    %r11,%r15
   13d5f:	73 1d                	jae    13d7e <quotearg_buffer_restyled+0xf7e>
   13d61:	50                   	push   %rax
   13d62:	48 c7 c0 4e 3f 27 65 	mov    $0x65273f4e,%rax
   13d69:	48 89 05 d0 fb 73 00 	mov    %rax,0x73fbd0(%rip)        # 753940 <edgeId>
   13d70:	58                   	pop    %rax
   13d71:	e8 6a 1a ff ff       	callq  57e0 <_storeEdge>
   13d76:	48 8b 14 24          	mov    (%rsp),%rdx
   13d7a:	46 88 2c 3a          	mov    %r13b,(%rdx,%r15,1)
   13d7e:	50                   	push   %rax
   13d7f:	48 c7 c0 f4 73 52 46 	mov    $0x465273f4,%rax
   13d86:	48 89 05 b3 fb 73 00 	mov    %rax,0x73fbb3(%rip)        # 753940 <edgeId>
   13d8d:	58                   	pop    %rax
   13d8e:	e8 4d 1a ff ff       	callq  57e0 <_storeEdge>
   13d93:	49 83 c7 01          	add    $0x1,%r15
   13d97:	e9 04 f2 ff ff       	jmpq   12fa0 <quotearg_buffer_restyled+0x1a0>
   13d9c:	0f 1f 40 00          	nopl   0x0(%rax)
   13da0:	50                   	push   %rax
   13da1:	48 c7 c0 39 29 23 70 	mov    $0x70232939,%rax
   13da8:	48 89 05 91 fb 73 00 	mov    %rax,0x73fb91(%rip)        # 753940 <edgeId>
   13daf:	58                   	pop    %rax
   13db0:	e8 2b 1a ff ff       	callq  57e0 <_storeEdge>
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
   13db5:	48 89 15 5c fb 73 00 	mov    %rdx,0x73fb5c(%rip)        # 753918 <tmpquadone>
   13dbc:	48 89 0d 6d 9e 5e 00 	mov    %rcx,0x5e9e6d(%rip)        # 5fdc30 <tmpquadtwo>
   13dc3:	48 8d 15 26 9e 5e 00 	lea    0x5e9e26(%rip),%rdx        # 5fdbf0 <funcinptr>
   13dca:	48 c7 02 fa 09 00 00 	movq   $0x9fa,(%rdx)
   13dd1:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13dd8:	00 
   13dd9:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   13de0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13de4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13deb:	00 
   13dec:	48 89 e9             	mov    %rbp,%rcx
   13def:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13df3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13dfa:	00 
   13dfb:	ff 32                	pushq  (%rdx)
   13dfd:	48 8b 15 14 fb 73 00 	mov    0x73fb14(%rip),%rdx        # 753918 <tmpquadone>
   13e04:	48 8b 0d 25 9e 5e 00 	mov    0x5e9e25(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13e0b:	48 c7 05 3a fb 73 00 	movq   $0x1,0x73fb3a(%rip)        # 753950 <cmpPassed>
   13e12:	01 00 00 00 
   13e16:	e8 5d 1a ff ff       	callq  5878 <_storeDataFn>
   13e1b:	48 83 fd 01          	cmp    $0x1,%rbp
   13e1f:	41 0f 95 c0          	setne  %r8b
   13e23:	48 89 15 ee fa 73 00 	mov    %rdx,0x73faee(%rip)        # 753918 <tmpquadone>
   13e2a:	48 89 0d ff 9d 5e 00 	mov    %rcx,0x5e9dff(%rip)        # 5fdc30 <tmpquadtwo>
   13e31:	48 8d 15 b8 9d 5e 00 	lea    0x5e9db8(%rip),%rdx        # 5fdbf0 <funcinptr>
   13e38:	48 c7 02 fb 09 00 00 	movq   $0x9fb,(%rdx)
   13e3f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   13e46:	00 
   13e47:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   13e4e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13e52:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13e59:	00 
   13e5a:	48 89 e9             	mov    %rbp,%rcx
   13e5d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13e61:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13e68:	00 
   13e69:	ff 32                	pushq  (%rdx)
   13e6b:	48 8b 15 a6 fa 73 00 	mov    0x73faa6(%rip),%rdx        # 753918 <tmpquadone>
   13e72:	48 8b 0d b7 9d 5e 00 	mov    0x5e9db7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13e79:	48 c7 05 cc fa 73 00 	movq   $0x1,0x73facc(%rip)        # 753950 <cmpPassed>
   13e80:	01 00 00 00 
   13e84:	e8 ef 19 ff ff       	callq  5878 <_storeDataFn>
   13e89:	48 83 fd ff          	cmp    $0xffffffffffffffff,%rbp
   13e8d:	0f 85 85 00 00 00    	jne    13f18 <quotearg_buffer_restyled+0x1118>
   13e93:	50                   	push   %rax
   13e94:	48 c7 c0 49 19 81 73 	mov    $0x73811949,%rax
   13e9b:	48 89 05 9e fa 73 00 	mov    %rax,0x73fa9e(%rip)        # 753940 <edgeId>
   13ea2:	58                   	pop    %rax
   13ea3:	e8 38 19 ff ff       	callq  57e0 <_storeEdge>
   13ea8:	48 89 15 69 fa 73 00 	mov    %rdx,0x73fa69(%rip)        # 753918 <tmpquadone>
   13eaf:	48 89 0d 7a 9d 5e 00 	mov    %rcx,0x5e9d7a(%rip)        # 5fdc30 <tmpquadtwo>
   13eb6:	48 8d 15 33 9d 5e 00 	lea    0x5e9d33(%rip),%rdx        # 5fdbf0 <funcinptr>
   13ebd:	48 c7 02 fc 09 00 00 	movq   $0x9fc,(%rdx)
   13ec4:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13ecb:	00 
   13ecc:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13ed3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13ed7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13ede:	00 
   13edf:	49 8b 49 01          	mov    0x1(%r9),%rcx
   13ee3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13ee7:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13eee:	00 
   13eef:	ff 32                	pushq  (%rdx)
   13ef1:	48 8b 15 20 fa 73 00 	mov    0x73fa20(%rip),%rdx        # 753918 <tmpquadone>
   13ef8:	48 8b 0d 31 9d 5e 00 	mov    0x5e9d31(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13eff:	48 c7 05 46 fa 73 00 	movq   $0x1,0x73fa46(%rip)        # 753950 <cmpPassed>
   13f06:	01 00 00 00 
   13f0a:	e8 69 19 ff ff       	callq  5878 <_storeDataFn>
   13f0f:	41 80 79 01 00       	cmpb   $0x0,0x1(%r9)
   13f14:	41 0f 95 c0          	setne  %r8b
   13f18:	50                   	push   %rax
   13f19:	48 c7 c0 94 11 38 37 	mov    $0x37381194,%rax
   13f20:	48 89 05 19 fa 73 00 	mov    %rax,0x73fa19(%rip)        # 753940 <edgeId>
   13f27:	58                   	pop    %rax
   13f28:	e8 b3 18 ff ff       	callq  57e0 <_storeEdge>
   13f2d:	45 84 c0             	test   %r8b,%r8b
   13f30:	0f 85 3a fc ff ff    	jne    13b70 <quotearg_buffer_restyled+0xd70>
   13f36:	50                   	push   %rax
   13f37:	48 c7 c0 32 02 e7 46 	mov    $0x46e70232,%rax
   13f3e:	48 89 05 fb f9 73 00 	mov    %rax,0x73f9fb(%rip)        # 753940 <edgeId>
   13f45:	58                   	pop    %rax
   13f46:	e8 95 18 ff ff       	callq  57e0 <_storeEdge>
   13f4b:	50                   	push   %rax
   13f4c:	48 b8 19 81 73 a3 00 	movabs $0xa3738119,%rax
   13f53:	00 00 00 
   13f56:	48 89 05 e3 f9 73 00 	mov    %rax,0x73f9e3(%rip)        # 753940 <edgeId>
   13f5d:	58                   	pop    %rax
   13f5e:	e8 7d 18 ff ff       	callq  57e0 <_storeEdge>
          if (i != 0)
   13f63:	48 85 db             	test   %rbx,%rbx
   13f66:	0f 85 04 fc ff ff    	jne    13b70 <quotearg_buffer_restyled+0xd70>
   13f6c:	50                   	push   %rax
   13f6d:	48 c7 c0 23 70 6e 74 	mov    $0x746e7023,%rax
   13f74:	48 89 05 c5 f9 73 00 	mov    %rax,0x73f9c5(%rip)        # 753940 <edgeId>
   13f7b:	58                   	pop    %rax
   13f7c:	e8 5f 18 ff ff       	callq  57e0 <_storeEdge>
   13f81:	50                   	push   %rax
   13f82:	48 c7 c0 11 38 37 3a 	mov    $0x3a373811,%rax
   13f89:	48 89 05 b0 f9 73 00 	mov    %rax,0x73f9b0(%rip)        # 753940 <edgeId>
   13f90:	58                   	pop    %rax
   13f91:	e8 4a 18 ff ff       	callq  57e0 <_storeEdge>
          if (quoting_style == shell_always_quoting_style
   13f96:	48 89 15 7b f9 73 00 	mov    %rdx,0x73f97b(%rip)        # 753918 <tmpquadone>
   13f9d:	48 89 0d 8c 9c 5e 00 	mov    %rcx,0x5e9c8c(%rip)        # 5fdc30 <tmpquadtwo>
   13fa4:	48 8d 15 45 9c 5e 00 	lea    0x5e9c45(%rip),%rdx        # 5fdbf0 <funcinptr>
   13fab:	48 c7 02 fd 09 00 00 	movq   $0x9fd,(%rdx)
   13fb2:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   13fb9:	00 
   13fba:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   13fc1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   13fc5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   13fcc:	00 
   13fcd:	48 8b 4c 24 6a       	mov    0x6a(%rsp),%rcx
   13fd2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   13fd6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   13fdd:	00 
   13fde:	ff 32                	pushq  (%rdx)
   13fe0:	48 8b 15 31 f9 73 00 	mov    0x73f931(%rip),%rdx        # 753918 <tmpquadone>
   13fe7:	48 8b 0d 42 9c 5e 00 	mov    0x5e9c42(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   13fee:	48 c7 05 57 f9 73 00 	movq   $0x1,0x73f957(%rip)        # 753950 <cmpPassed>
   13ff5:	01 00 00 00 
   13ff9:	e8 7a 18 ff ff       	callq  5878 <_storeDataFn>
   13ffe:	80 7c 24 6a 00       	cmpb   $0x0,0x6a(%rsp)
   14003:	0f 84 67 fb ff ff    	je     13b70 <quotearg_buffer_restyled+0xd70>
   14009:	50                   	push   %rax
   1400a:	48 c7 c0 02 e7 46 07 	mov    $0x746e702,%rax
   14011:	48 89 05 28 f9 73 00 	mov    %rax,0x73f928(%rip)        # 753940 <edgeId>
   14018:	58                   	pop    %rax
   14019:	e8 c2 17 ff ff       	callq  57e0 <_storeEdge>
   1401e:	66 90                	xchg   %ax,%ax
   14020:	50                   	push   %rax
   14021:	48 b8 70 6e 74 90 00 	movabs $0x90746e70,%rax
   14028:	00 00 00 
   1402b:	48 89 05 0e f9 73 00 	mov    %rax,0x73f90e(%rip)        # 753940 <edgeId>
   14032:	58                   	pop    %rax
   14033:	e8 a8 17 ff ff       	callq  57e0 <_storeEdge>
   14038:	4d 89 de             	mov    %r11,%r14
   1403b:	4d 89 cc             	mov    %r9,%r12
   1403e:	50                   	push   %rax
   1403f:	48 b8 e7 46 07 d9 00 	movabs $0xd90746e7,%rax
   14046:	00 00 00 
   14049:	48 89 05 f0 f8 73 00 	mov    %rax,0x73f8f0(%rip)        # 753940 <edgeId>
   14050:	58                   	pop    %rax
   14051:	e8 8a 17 ff ff       	callq  57e0 <_storeEdge>
  return len;

 force_outer_quoting_style:
  /* Don't reuse quote_these_too, since the addition of outer quotes
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
   14056:	48 83 ec 08          	sub    $0x8,%rsp
   1405a:	48 89 e9             	mov    %rbp,%rcx
   1405d:	4c 89 e2             	mov    %r12,%rdx
   14060:	ff 74 24 58          	pushq  0x58(%rsp)
   14064:	ff 74 24 50          	pushq  0x50(%rsp)
   14068:	4c 89 f6             	mov    %r14,%rsi
   1406b:	6a 00                	pushq  $0x0
   1406d:	44 8b 4c 24 5c       	mov    0x5c(%rsp),%r9d
   14072:	44 8b 44 24 58       	mov    0x58(%rsp),%r8d
   14077:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   1407c:	41 83 e1 fd          	and    $0xfffffffd,%r9d
   14080:	e8 7b ed ff ff       	callq  12e00 <quotearg_buffer_restyled>
   14085:	48 83 c4 20          	add    $0x20,%rsp
   14089:	49 89 c7             	mov    %rax,%r15
   1408c:	50                   	push   %rax
   1408d:	48 b8 f6 4a b3 c1 00 	movabs $0xc1b34af6,%rax
   14094:	00 00 00 
   14097:	48 89 05 a2 f8 73 00 	mov    %rax,0x73f8a2(%rip)        # 753940 <edgeId>
   1409e:	58                   	pop    %rax
   1409f:	e8 3c 17 ff ff       	callq  57e0 <_storeEdge>
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
   140a4:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
   140ab:	00 
   140ac:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   140b3:	00 00 
   140b5:	4c 89 f8             	mov    %r15,%rax
   140b8:	0f 85 04 67 00 00    	jne    1a7c2 <quotearg_buffer_restyled+0x79c2>
   140be:	50                   	push   %rax
   140bf:	48 b8 57 9a 0d a6 00 	movabs $0xa60d9a57,%rax
   140c6:	00 00 00 
   140c9:	48 89 05 70 f8 73 00 	mov    %rax,0x73f870(%rip)        # 753940 <edgeId>
   140d0:	58                   	pop    %rax
   140d1:	e8 0a 17 ff ff       	callq  57e0 <_storeEdge>
   140d6:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
   140dd:	5b                   	pop    %rbx
   140de:	5d                   	pop    %rbp
   140df:	41 5c                	pop    %r12
   140e1:	41 5d                	pop    %r13
   140e3:	41 5e                	pop    %r14
   140e5:	41 5f                	pop    %r15
   140e7:	c3                   	retq   
   140e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   140ef:	00 
   140f0:	50                   	push   %rax
   140f1:	48 c7 c0 98 ae 61 04 	mov    $0x461ae98,%rax
   140f8:	48 89 05 41 f8 73 00 	mov    %rax,0x73f841(%rip)        # 753940 <edgeId>
   140ff:	58                   	pop    %rax
   14100:	e8 db 16 ff ff       	callq  57e0 <_storeEdge>
        case '\t': esc = 't'; goto c_and_shell_escape;
   14105:	41 bc 74 00 00 00    	mov    $0x74,%r12d
   1410b:	50                   	push   %rax
   1410c:	48 b8 74 0d 23 e8 00 	movabs $0xe8230d74,%rax
   14113:	00 00 00 
   14116:	48 89 05 23 f8 73 00 	mov    %rax,0x73f823(%rip)        # 753940 <edgeId>
   1411d:	58                   	pop    %rax
   1411e:	e8 bd 16 ff ff       	callq  57e0 <_storeEdge>
          if (quoting_style == shell_always_quoting_style
   14123:	48 89 15 ee f7 73 00 	mov    %rdx,0x73f7ee(%rip)        # 753918 <tmpquadone>
   1412a:	48 89 0d ff 9a 5e 00 	mov    %rcx,0x5e9aff(%rip)        # 5fdc30 <tmpquadtwo>
   14131:	48 8d 15 b8 9a 5e 00 	lea    0x5e9ab8(%rip),%rdx        # 5fdbf0 <funcinptr>
   14138:	48 c7 02 fe 09 00 00 	movq   $0x9fe,(%rdx)
   1413f:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   14146:	00 
   14147:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1414e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14152:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14159:	00 
   1415a:	48 8b 4c 24 6a       	mov    0x6a(%rsp),%rcx
   1415f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14163:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1416a:	00 
   1416b:	ff 32                	pushq  (%rdx)
   1416d:	48 8b 15 a4 f7 73 00 	mov    0x73f7a4(%rip),%rdx        # 753918 <tmpquadone>
   14174:	48 8b 0d b5 9a 5e 00 	mov    0x5e9ab5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1417b:	48 c7 05 ca f7 73 00 	movq   $0x1,0x73f7ca(%rip)        # 753950 <cmpPassed>
   14182:	01 00 00 00 
   14186:	e8 ed 16 ff ff       	callq  5878 <_storeDataFn>
   1418b:	80 7c 24 6a 00       	cmpb   $0x0,0x6a(%rsp)
   14190:	0f 85 8a fe ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   14196:	50                   	push   %rax
   14197:	48 c7 c0 d7 30 82 2e 	mov    $0x2e8230d7,%rax
   1419e:	48 89 05 9b f7 73 00 	mov    %rax,0x73f79b(%rip)        # 753940 <edgeId>
   141a5:	58                   	pop    %rax
   141a6:	e8 35 16 ff ff       	callq  57e0 <_storeEdge>
   141ab:	50                   	push   %rax
   141ac:	48 b8 35 8c a0 8b 00 	movabs $0x8ba08c35,%rax
   141b3:	00 00 00 
   141b6:	48 89 05 83 f7 73 00 	mov    %rax,0x73f783(%rip)        # 753940 <edgeId>
   141bd:	58                   	pop    %rax
   141be:	e8 1d 16 ff ff       	callq  57e0 <_storeEdge>
          if (backslash_escapes)
   141c3:	48 89 15 4e f7 73 00 	mov    %rdx,0x73f74e(%rip)        # 753918 <tmpquadone>
   141ca:	48 89 0d 5f 9a 5e 00 	mov    %rcx,0x5e9a5f(%rip)        # 5fdc30 <tmpquadtwo>
   141d1:	48 8d 15 18 9a 5e 00 	lea    0x5e9a18(%rip),%rdx        # 5fdbf0 <funcinptr>
   141d8:	48 c7 02 ff 09 00 00 	movq   $0x9ff,(%rdx)
   141df:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   141e6:	00 
   141e7:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   141ee:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   141f2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   141f9:	00 
   141fa:	48 8b 4c 24 69       	mov    0x69(%rsp),%rcx
   141ff:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14203:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1420a:	00 
   1420b:	ff 32                	pushq  (%rdx)
   1420d:	48 8b 15 04 f7 73 00 	mov    0x73f704(%rip),%rdx        # 753918 <tmpquadone>
   14214:	48 8b 0d 15 9a 5e 00 	mov    0x5e9a15(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1421b:	48 c7 05 2a f7 73 00 	movq   $0x1,0x73f72a(%rip)        # 753950 <cmpPassed>
   14222:	01 00 00 00 
   14226:	e8 4d 16 ff ff       	callq  5878 <_storeDataFn>
   1422b:	80 7c 24 69 00       	cmpb   $0x0,0x69(%rsp)
   14230:	0f 84 3a f9 ff ff    	je     13b70 <quotearg_buffer_restyled+0xd70>
   14236:	50                   	push   %rax
   14237:	48 b8 86 11 74 91 00 	movabs $0x91741186,%rax
   1423e:	00 00 00 
   14241:	48 89 05 f8 f6 73 00 	mov    %rax,0x73f6f8(%rip)        # 753940 <edgeId>
   14248:	58                   	pop    %rax
   14249:	e8 92 15 ff ff       	callq  57e0 <_storeEdge>
   1424e:	45 89 e5             	mov    %r12d,%r13d
   14251:	50                   	push   %rax
   14252:	48 b8 18 41 17 e9 00 	movabs $0xe9174118,%rax
   14259:	00 00 00 
   1425c:	48 89 05 dd f6 73 00 	mov    %rax,0x73f6dd(%rip)        # 753940 <edgeId>
   14263:	58                   	pop    %rax
   14264:	e8 77 15 ff ff       	callq  57e0 <_storeEdge>
      if (elide_outer_quotes)
   14269:	48 89 15 a8 f6 73 00 	mov    %rdx,0x73f6a8(%rip)        # 753918 <tmpquadone>
   14270:	48 89 0d b9 99 5e 00 	mov    %rcx,0x5e99b9(%rip)        # 5fdc30 <tmpquadtwo>
   14277:	48 8d 15 72 99 5e 00 	lea    0x5e9972(%rip),%rdx        # 5fdbf0 <funcinptr>
   1427e:	48 c7 02 00 0a 00 00 	movq   $0xa00,(%rdx)
   14285:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1428c:	00 
   1428d:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   14294:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14298:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1429f:	00 
   142a0:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   142a5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   142a9:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   142b0:	00 
   142b1:	ff 32                	pushq  (%rdx)
   142b3:	48 8b 15 5e f6 73 00 	mov    0x73f65e(%rip),%rdx        # 753918 <tmpquadone>
   142ba:	48 8b 0d 6f 99 5e 00 	mov    0x5e996f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   142c1:	48 c7 05 84 f6 73 00 	movq   $0x1,0x73f684(%rip)        # 753950 <cmpPassed>
   142c8:	01 00 00 00 
   142cc:	e8 a7 15 ff ff       	callq  5878 <_storeDataFn>
   142d1:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   142d6:	0f 85 44 fd ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   142dc:	50                   	push   %rax
   142dd:	48 b8 23 e8 22 bd 00 	movabs $0xbd22e823,%rax
   142e4:	00 00 00 
   142e7:	48 89 05 52 f6 73 00 	mov    %rax,0x73f652(%rip)        # 753940 <edgeId>
   142ee:	58                   	pop    %rax
   142ef:	e8 ec 14 ff ff       	callq  57e0 <_storeEdge>
   142f4:	48 83 c3 01          	add    $0x1,%rbx
   142f8:	e9 35 f9 ff ff       	jmpq   13c32 <quotearg_buffer_restyled+0xe32>
   142fd:	0f 1f 00             	nopl   (%rax)
   14300:	50                   	push   %rax
   14301:	48 b8 e8 22 bd 95 00 	movabs $0x95bd22e8,%rax
   14308:	00 00 00 
   1430b:	48 89 05 2e f6 73 00 	mov    %rax,0x73f62e(%rip)        # 753940 <edgeId>
   14312:	58                   	pop    %rax
   14313:	e8 c8 14 ff ff       	callq  57e0 <_storeEdge>
        case '\b': esc = 'b'; goto c_escape;
   14318:	41 bc 62 00 00 00    	mov    $0x62,%r12d
   1431e:	e9 88 fe ff ff       	jmpq   141ab <quotearg_buffer_restyled+0x13ab>
   14323:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   14328:	50                   	push   %rax
   14329:	48 b8 8b f4 56 f2 00 	movabs $0xf256f48b,%rax
   14330:	00 00 00 
   14333:	48 89 05 06 f6 73 00 	mov    %rax,0x73f606(%rip)        # 753940 <edgeId>
   1433a:	58                   	pop    %rax
   1433b:	e8 a0 14 ff ff       	callq  57e0 <_storeEdge>
        case '\a': esc = 'a'; goto c_escape;
   14340:	41 bc 61 00 00 00    	mov    $0x61,%r12d
   14346:	e9 60 fe ff ff       	jmpq   141ab <quotearg_buffer_restyled+0x13ab>
   1434b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   14350:	50                   	push   %rax
   14351:	48 c7 c0 d2 5b c9 53 	mov    $0x53c95bd2,%rax
   14358:	48 89 05 e1 f5 73 00 	mov    %rax,0x73f5e1(%rip)        # 753940 <edgeId>
   1435f:	58                   	pop    %rax
   14360:	e8 7b 14 ff ff       	callq  57e0 <_storeEdge>
        case '\r': esc = 'r'; goto c_and_shell_escape;
   14365:	41 bc 72 00 00 00    	mov    $0x72,%r12d
   1436b:	e9 9b fd ff ff       	jmpq   1410b <quotearg_buffer_restyled+0x130b>
   14370:	50                   	push   %rax
   14371:	48 c7 c0 6f 25 4f 3d 	mov    $0x3d4f256f,%rax
   14378:	48 89 05 c1 f5 73 00 	mov    %rax,0x73f5c1(%rip)        # 753940 <edgeId>
   1437f:	58                   	pop    %rax
   14380:	e8 5b 14 ff ff       	callq  57e0 <_storeEdge>
        case '\n': esc = 'n'; goto c_and_shell_escape;
   14385:	41 bc 6e 00 00 00    	mov    $0x6e,%r12d
   1438b:	e9 7b fd ff ff       	jmpq   1410b <quotearg_buffer_restyled+0x130b>
   14390:	50                   	push   %rax
   14391:	48 c7 c0 95 3c f5 10 	mov    $0x10f53c95,%rax
   14398:	48 89 05 a1 f5 73 00 	mov    %rax,0x73f5a1(%rip)        # 753940 <edgeId>
   1439f:	58                   	pop    %rax
   143a0:	e8 3b 14 ff ff       	callq  57e0 <_storeEdge>
        case '\f': esc = 'f'; goto c_escape;
   143a5:	41 bc 66 00 00 00    	mov    $0x66,%r12d
   143ab:	e9 fb fd ff ff       	jmpq   141ab <quotearg_buffer_restyled+0x13ab>
   143b0:	50                   	push   %rax
   143b1:	48 b8 3c f5 10 cb 00 	movabs $0xcb10f53c,%rax
   143b8:	00 00 00 
   143bb:	48 89 05 7e f5 73 00 	mov    %rax,0x73f57e(%rip)        # 753940 <edgeId>
   143c2:	58                   	pop    %rax
   143c3:	e8 18 14 ff ff       	callq  57e0 <_storeEdge>
        case '\v': esc = 'v'; goto c_escape;
   143c8:	41 bc 76 00 00 00    	mov    $0x76,%r12d
   143ce:	e9 d8 fd ff ff       	jmpq   141ab <quotearg_buffer_restyled+0x13ab>
   143d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   143d8:	50                   	push   %rax
   143d9:	48 c7 c0 ea 21 96 7f 	mov    $0x7f9621ea,%rax
   143e0:	48 89 05 59 f5 73 00 	mov    %rax,0x73f559(%rip)        # 753940 <edgeId>
   143e7:	58                   	pop    %rax
   143e8:	e8 f3 13 ff ff       	callq  57e0 <_storeEdge>
          if (backslash_escapes)
   143ed:	48 89 15 24 f5 73 00 	mov    %rdx,0x73f524(%rip)        # 753918 <tmpquadone>
   143f4:	48 89 0d 35 98 5e 00 	mov    %rcx,0x5e9835(%rip)        # 5fdc30 <tmpquadtwo>
   143fb:	48 8d 15 ee 97 5e 00 	lea    0x5e97ee(%rip),%rdx        # 5fdbf0 <funcinptr>
   14402:	48 c7 02 01 0a 00 00 	movq   $0xa01,(%rdx)
   14409:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   14410:	00 
   14411:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   14418:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1441c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14423:	00 
   14424:	48 8b 4c 24 69       	mov    0x69(%rsp),%rcx
   14429:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1442d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14434:	00 
   14435:	ff 32                	pushq  (%rdx)
   14437:	48 8b 15 da f4 73 00 	mov    0x73f4da(%rip),%rdx        # 753918 <tmpquadone>
   1443e:	48 8b 0d eb 97 5e 00 	mov    0x5e97eb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14445:	48 c7 05 00 f5 73 00 	movq   $0x1,0x73f500(%rip)        # 753950 <cmpPassed>
   1444c:	01 00 00 00 
   14450:	e8 23 14 ff ff       	callq  5878 <_storeDataFn>
   14455:	80 7c 24 69 00       	cmpb   $0x0,0x69(%rsp)
   1445a:	0f 84 90 1f 00 00    	je     163f0 <quotearg_buffer_restyled+0x35f0>
   14460:	50                   	push   %rax
   14461:	48 b8 3d c4 f2 ef 00 	movabs $0xeff2c43d,%rax
   14468:	00 00 00 
   1446b:	48 89 05 ce f4 73 00 	mov    %rax,0x73f4ce(%rip)        # 753940 <edgeId>
   14472:	58                   	pop    %rax
   14473:	e8 68 13 ff ff       	callq  57e0 <_storeEdge>
              if (elide_outer_quotes)
   14478:	48 89 15 99 f4 73 00 	mov    %rdx,0x73f499(%rip)        # 753918 <tmpquadone>
   1447f:	48 89 0d aa 97 5e 00 	mov    %rcx,0x5e97aa(%rip)        # 5fdc30 <tmpquadtwo>
   14486:	48 8d 15 63 97 5e 00 	lea    0x5e9763(%rip),%rdx        # 5fdbf0 <funcinptr>
   1448d:	48 c7 02 02 0a 00 00 	movq   $0xa02,(%rdx)
   14494:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1449b:	00 
   1449c:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   144a3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   144a7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   144ae:	00 
   144af:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   144b4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   144b8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   144bf:	00 
   144c0:	ff 32                	pushq  (%rdx)
   144c2:	48 8b 15 4f f4 73 00 	mov    0x73f44f(%rip),%rdx        # 753918 <tmpquadone>
   144c9:	48 8b 0d 60 97 5e 00 	mov    0x5e9760(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   144d0:	48 c7 05 75 f4 73 00 	movq   $0x1,0x73f475(%rip)        # 753950 <cmpPassed>
   144d7:	01 00 00 00 
   144db:	e8 98 13 ff ff       	callq  5878 <_storeDataFn>
   144e0:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   144e5:	0f 85 35 fb ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   144eb:	50                   	push   %rax
   144ec:	48 b8 87 58 fe dd 00 	movabs $0xddfe5887,%rax
   144f3:	00 00 00 
   144f6:	48 89 05 43 f4 73 00 	mov    %rax,0x73f443(%rip)        # 753940 <edgeId>
   144fd:	58                   	pop    %rax
   144fe:	e8 dd 12 ff ff       	callq  57e0 <_storeEdge>
              STORE ('\\');
   14503:	48 89 15 0e f4 73 00 	mov    %rdx,0x73f40e(%rip)        # 753918 <tmpquadone>
   1450a:	48 89 0d 1f 97 5e 00 	mov    %rcx,0x5e971f(%rip)        # 5fdc30 <tmpquadtwo>
   14511:	48 8d 15 d8 96 5e 00 	lea    0x5e96d8(%rip),%rdx        # 5fdbf0 <funcinptr>
   14518:	48 c7 02 03 0a 00 00 	movq   $0xa03,(%rdx)
   1451f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14526:	00 
   14527:	4c 89 d9             	mov    %r11,%rcx
   1452a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1452e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14535:	00 
   14536:	4c 89 f9             	mov    %r15,%rcx
   14539:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1453d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14544:	00 
   14545:	ff 32                	pushq  (%rdx)
   14547:	48 8b 15 ca f3 73 00 	mov    0x73f3ca(%rip),%rdx        # 753918 <tmpquadone>
   1454e:	48 8b 0d db 96 5e 00 	mov    0x5e96db(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14555:	48 c7 05 f0 f3 73 00 	movq   $0x1,0x73f3f0(%rip)        # 753950 <cmpPassed>
   1455c:	01 00 00 00 
   14560:	e8 13 13 ff ff       	callq  5878 <_storeDataFn>
   14565:	4d 39 df             	cmp    %r11,%r15
   14568:	73 21                	jae    1458b <quotearg_buffer_restyled+0x178b>
   1456a:	50                   	push   %rax
   1456b:	48 b8 10 cb bf 9b 00 	movabs $0x9bbfcb10,%rax
   14572:	00 00 00 
   14575:	48 89 05 c4 f3 73 00 	mov    %rax,0x73f3c4(%rip)        # 753940 <edgeId>
   1457c:	58                   	pop    %rax
   1457d:	e8 5e 12 ff ff       	callq  57e0 <_storeEdge>
   14582:	48 8b 34 24          	mov    (%rsp),%rsi
   14586:	42 c6 04 3e 5c       	movb   $0x5c,(%rsi,%r15,1)
   1458b:	50                   	push   %rax
   1458c:	48 c7 c0 b1 fc bb 59 	mov    $0x59bbfcb1,%rax
   14593:	48 89 05 a6 f3 73 00 	mov    %rax,0x73f3a6(%rip)        # 753940 <edgeId>
   1459a:	58                   	pop    %rax
   1459b:	e8 40 12 ff ff       	callq  57e0 <_storeEdge>
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
   145a0:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
              STORE ('\\');
   145a4:	4d 8d 6f 01          	lea    0x1(%r15),%r13
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
   145a8:	48 89 15 69 f3 73 00 	mov    %rdx,0x73f369(%rip)        # 753918 <tmpquadone>
   145af:	48 89 1d 7a 96 5e 00 	mov    %rbx,0x5e967a(%rip)        # 5fdc30 <tmpquadtwo>
   145b6:	48 8d 15 33 96 5e 00 	lea    0x5e9633(%rip),%rdx        # 5fdbf0 <funcinptr>
   145bd:	48 c7 02 04 0a 00 00 	movq   $0xa04,(%rdx)
   145c4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   145cb:	00 
   145cc:	48 89 eb             	mov    %rbp,%rbx
   145cf:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   145d3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   145da:	00 
   145db:	48 89 cb             	mov    %rcx,%rbx
   145de:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   145e2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   145e9:	00 
   145ea:	ff 32                	pushq  (%rdx)
   145ec:	48 8b 15 25 f3 73 00 	mov    0x73f325(%rip),%rdx        # 753918 <tmpquadone>
   145f3:	48 8b 1d 36 96 5e 00 	mov    0x5e9636(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   145fa:	48 c7 05 4b f3 73 00 	movq   $0x1,0x73f34b(%rip)        # 753950 <cmpPassed>
   14601:	01 00 00 00 
   14605:	e8 6e 12 ff ff       	callq  5878 <_storeDataFn>
   1460a:	48 39 e9             	cmp    %rbp,%rcx
   1460d:	0f 83 a4 00 00 00    	jae    146b7 <quotearg_buffer_restyled+0x18b7>
   14613:	50                   	push   %rax
   14614:	48 b8 fc bb 59 89 00 	movabs $0x8959bbfc,%rax
   1461b:	00 00 00 
   1461e:	48 89 05 1b f3 73 00 	mov    %rax,0x73f31b(%rip)        # 753940 <edgeId>
   14625:	58                   	pop    %rax
   14626:	e8 b5 11 ff ff       	callq  57e0 <_storeEdge>
   1462b:	41 0f b6 44 19 01    	movzbl 0x1(%r9,%rbx,1),%eax
   14631:	83 e8 30             	sub    $0x30,%eax
   14634:	48 89 15 dd f2 73 00 	mov    %rdx,0x73f2dd(%rip)        # 753918 <tmpquadone>
   1463b:	48 89 0d ee 95 5e 00 	mov    %rcx,0x5e95ee(%rip)        # 5fdc30 <tmpquadtwo>
   14642:	48 8d 15 a7 95 5e 00 	lea    0x5e95a7(%rip),%rdx        # 5fdbf0 <funcinptr>
   14649:	48 c7 02 05 0a 00 00 	movq   $0xa05,(%rdx)
   14650:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   14657:	00 
   14658:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   1465f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14663:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1466a:	00 
   1466b:	48 89 c1             	mov    %rax,%rcx
   1466e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14672:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14679:	00 
   1467a:	ff 32                	pushq  (%rdx)
   1467c:	48 8b 15 95 f2 73 00 	mov    0x73f295(%rip),%rdx        # 753918 <tmpquadone>
   14683:	48 8b 0d a6 95 5e 00 	mov    0x5e95a6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1468a:	48 c7 05 bb f2 73 00 	movq   $0x1,0x73f2bb(%rip)        # 753950 <cmpPassed>
   14691:	01 00 00 00 
   14695:	e8 de 11 ff ff       	callq  5878 <_storeDataFn>
   1469a:	3c 09                	cmp    $0x9,%al
   1469c:	0f 86 fa 4e 00 00    	jbe    1959c <quotearg_buffer_restyled+0x679c>
   146a2:	50                   	push   %rax
   146a3:	48 c7 c0 ef 66 25 2a 	mov    $0x2a2566ef,%rax
   146aa:	48 89 05 8f f2 73 00 	mov    %rax,0x73f28f(%rip)        # 753940 <edgeId>
   146b1:	58                   	pop    %rax
   146b2:	e8 29 11 ff ff       	callq  57e0 <_storeEdge>
   146b7:	50                   	push   %rax
   146b8:	48 b8 77 b3 12 95 00 	movabs $0x9512b377,%rax
   146bf:	00 00 00 
   146c2:	48 89 05 77 f2 73 00 	mov    %rax,0x73f277(%rip)        # 753940 <edgeId>
   146c9:	58                   	pop    %rax
   146ca:	e8 11 11 ff ff       	callq  57e0 <_storeEdge>
              STORE ('\\');
   146cf:	4d 89 ef             	mov    %r13,%r15
   146d2:	41 bd 30 00 00 00    	mov    $0x30,%r13d
   146d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   146df:	00 
   146e0:	50                   	push   %rax
   146e1:	48 b8 b3 12 95 c5 00 	movabs $0xc59512b3,%rax
   146e8:	00 00 00 
   146eb:	48 89 05 4e f2 73 00 	mov    %rax,0x73f24e(%rip)        # 753940 <edgeId>
   146f2:	58                   	pop    %rax
   146f3:	e8 e8 10 ff ff       	callq  57e0 <_storeEdge>
             && quote_these_too
   146f8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   146fd:	48 85 ff             	test   %rdi,%rdi
   14700:	74 47                	je     14749 <quotearg_buffer_restyled+0x1949>
   14702:	50                   	push   %rax
   14703:	48 b8 2b 51 59 cc 00 	movabs $0xcc59512b,%rax
   1470a:	00 00 00 
   1470d:	48 89 05 2c f2 73 00 	mov    %rax,0x73f22c(%rip)        # 753940 <edgeId>
   14714:	58                   	pop    %rax
   14715:	e8 c6 10 ff ff       	callq  57e0 <_storeEdge>
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
   1471a:	44 89 e9             	mov    %r13d,%ecx
   1471d:	c0 e9 05             	shr    $0x5,%cl
   14720:	0f b6 d1             	movzbl %cl,%edx
   14723:	44 8b 04 97          	mov    (%rdi,%rdx,4),%r8d
      if (! ((backslash_escapes || elide_outer_quotes)
   14727:	45 0f a3 e8          	bt     %r13d,%r8d
   1472b:	0f 82 20 fb ff ff    	jb     14251 <quotearg_buffer_restyled+0x1451>
   14731:	50                   	push   %rax
   14732:	48 b8 51 59 cc f2 00 	movabs $0xf2cc5951,%rax
   14739:	00 00 00 
   1473c:	48 89 05 fd f1 73 00 	mov    %rax,0x73f1fd(%rip)        # 753940 <edgeId>
   14743:	58                   	pop    %rax
   14744:	e8 97 10 ff ff       	callq  57e0 <_storeEdge>
   14749:	50                   	push   %rax
   1474a:	48 c7 c0 a8 2c 66 79 	mov    $0x79662ca8,%rax
   14751:	48 89 05 e8 f1 73 00 	mov    %rax,0x73f1e8(%rip)        # 753940 <edgeId>
   14758:	58                   	pop    %rax
   14759:	e8 82 10 ff ff       	callq  57e0 <_storeEdge>
          && !is_right_quote)
   1475e:	45 84 d2             	test   %r10b,%r10b
   14761:	0f 85 ea fa ff ff    	jne    14251 <quotearg_buffer_restyled+0x1451>
   14767:	50                   	push   %rax
   14768:	48 b8 95 c5 2c 8f 00 	movabs $0x8f2cc595,%rax
   1476f:	00 00 00 
   14772:	48 89 05 c7 f1 73 00 	mov    %rax,0x73f1c7(%rip)        # 753940 <edgeId>
   14779:	58                   	pop    %rax
   1477a:	e8 61 10 ff ff       	callq  57e0 <_storeEdge>
   1477f:	48 83 c3 01          	add    $0x1,%rbx
   14783:	e9 5d f5 ff ff       	jmpq   13ce5 <quotearg_buffer_restyled+0xee5>
   14788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1478f:	00 
   14790:	50                   	push   %rax
   14791:	48 b8 c5 2c 8f de 00 	movabs $0xde8f2cc5,%rax
   14798:	00 00 00 
   1479b:	48 89 05 9e f1 73 00 	mov    %rax,0x73f19e(%rip)        # 753940 <edgeId>
   147a2:	58                   	pop    %rax
   147a3:	e8 38 10 ff ff       	callq  57e0 <_storeEdge>
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
   147a8:	48 89 15 69 f1 73 00 	mov    %rdx,0x73f169(%rip)        # 753918 <tmpquadone>
   147af:	48 89 0d 7a 94 5e 00 	mov    %rcx,0x5e947a(%rip)        # 5fdc30 <tmpquadtwo>
   147b6:	48 8d 15 33 94 5e 00 	lea    0x5e9433(%rip),%rdx        # 5fdbf0 <funcinptr>
   147bd:	48 c7 02 06 0a 00 00 	movq   $0xa06,(%rdx)
   147c4:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   147cb:	00 
   147cc:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   147d3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   147d7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   147de:	00 
   147df:	48 8b 4c 24 6b       	mov    0x6b(%rsp),%rcx
   147e4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   147e8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   147ef:	00 
   147f0:	ff 32                	pushq  (%rdx)
   147f2:	48 8b 15 1f f1 73 00 	mov    0x73f11f(%rip),%rdx        # 753918 <tmpquadone>
   147f9:	48 8b 0d 30 94 5e 00 	mov    0x5e9430(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14800:	48 c7 05 45 f1 73 00 	movq   $0x1,0x73f145(%rip)        # 753950 <cmpPassed>
   14807:	01 00 00 00 
   1480b:	e8 68 10 ff ff       	callq  5878 <_storeDataFn>
   14810:	80 7c 24 6b 00       	cmpb   $0x0,0x6b(%rsp)
   14815:	0f 84 ad 1b 00 00    	je     163c8 <quotearg_buffer_restyled+0x35c8>
   1481b:	50                   	push   %rax
   1481c:	48 b8 98 e5 d1 db 00 	movabs $0xdbd1e598,%rax
   14823:	00 00 00 
   14826:	48 89 05 13 f1 73 00 	mov    %rax,0x73f113(%rip)        # 753940 <edgeId>
   1482d:	58                   	pop    %rax
   1482e:	e8 ad 0f ff ff       	callq  57e0 <_storeEdge>
   14833:	48 89 15 de f0 73 00 	mov    %rdx,0x73f0de(%rip)        # 753918 <tmpquadone>
   1483a:	48 89 0d ef 93 5e 00 	mov    %rcx,0x5e93ef(%rip)        # 5fdc30 <tmpquadtwo>
   14841:	48 8d 15 a8 93 5e 00 	lea    0x5e93a8(%rip),%rdx        # 5fdbf0 <funcinptr>
   14848:	48 c7 02 07 0a 00 00 	movq   $0xa07,(%rdx)
   1484f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14856:	00 
   14857:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1485e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14862:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14869:	00 
   1486a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   1486f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14873:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1487a:	00 
   1487b:	ff 32                	pushq  (%rdx)
   1487d:	48 8b 15 94 f0 73 00 	mov    0x73f094(%rip),%rdx        # 753918 <tmpquadone>
   14884:	48 8b 0d a5 93 5e 00 	mov    0x5e93a5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1488b:	48 c7 05 ba f0 73 00 	movq   $0x1,0x73f0ba(%rip)        # 753950 <cmpPassed>
   14892:	01 00 00 00 
   14896:	e8 dd 0f ff ff       	callq  5878 <_storeDataFn>
   1489b:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
   148a1:	0f 84 81 40 00 00    	je     18928 <quotearg_buffer_restyled+0x5b28>
   148a7:	50                   	push   %rax
   148a8:	48 c7 c0 b3 3c 7a 5b 	mov    $0x5b7a3cb3,%rax
   148af:	48 89 05 8a f0 73 00 	mov    %rax,0x73f08a(%rip)        # 753940 <edgeId>
   148b6:	58                   	pop    %rax
   148b7:	e8 24 0f ff ff       	callq  57e0 <_storeEdge>
   148bc:	48 83 c3 01          	add    $0x1,%rbx
   148c0:	41 bd 5c 00 00 00    	mov    $0x5c,%r13d
   148c6:	e9 1a f4 ff ff       	jmpq   13ce5 <quotearg_buffer_restyled+0xee5>
   148cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   148d0:	50                   	push   %rax
   148d1:	48 c7 c0 8f de 16 4f 	mov    $0x4f16de8f,%rax
   148d8:	48 89 05 61 f0 73 00 	mov    %rax,0x73f061(%rip)        # 753940 <edgeId>
   148df:	58                   	pop    %rax
   148e0:	e8 fb 0e ff ff       	callq  57e0 <_storeEdge>
          if (quoting_style == shell_always_quoting_style)
   148e5:	48 89 15 2c f0 73 00 	mov    %rdx,0x73f02c(%rip)        # 753918 <tmpquadone>
   148ec:	48 89 0d 3d 93 5e 00 	mov    %rcx,0x5e933d(%rip)        # 5fdc30 <tmpquadtwo>
   148f3:	48 8d 15 f6 92 5e 00 	lea    0x5e92f6(%rip),%rdx        # 5fdbf0 <funcinptr>
   148fa:	48 c7 02 08 0a 00 00 	movq   $0xa08,(%rdx)
   14901:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   14908:	00 
   14909:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   14910:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14914:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1491b:	00 
   1491c:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   14921:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14925:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1492c:	00 
   1492d:	ff 32                	pushq  (%rdx)
   1492f:	48 8b 15 e2 ef 73 00 	mov    0x73efe2(%rip),%rdx        # 753918 <tmpquadone>
   14936:	48 8b 0d f3 92 5e 00 	mov    0x5e92f3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1493d:	48 c7 05 08 f0 73 00 	movq   $0x1,0x73f008(%rip)        # 753950 <cmpPassed>
   14944:	01 00 00 00 
   14948:	e8 2b 0f ff ff       	callq  5878 <_storeDataFn>
   1494d:	83 7c 24 38 02       	cmpl   $0x2,0x38(%rsp)
   14952:	41 bd 27 00 00 00    	mov    $0x27,%r13d
   14958:	0f 85 12 f2 ff ff    	jne    13b70 <quotearg_buffer_restyled+0xd70>
   1495e:	50                   	push   %rax
   1495f:	48 b8 e8 6d f1 c4 00 	movabs $0xc4f16de8,%rax
   14966:	00 00 00 
   14969:	48 89 05 d0 ef 73 00 	mov    %rax,0x73efd0(%rip)        # 753940 <edgeId>
   14970:	58                   	pop    %rax
   14971:	e8 6a 0e ff ff       	callq  57e0 <_storeEdge>
              if (elide_outer_quotes)
   14976:	48 89 15 9b ef 73 00 	mov    %rdx,0x73ef9b(%rip)        # 753918 <tmpquadone>
   1497d:	48 89 0d ac 92 5e 00 	mov    %rcx,0x5e92ac(%rip)        # 5fdc30 <tmpquadtwo>
   14984:	48 8d 15 65 92 5e 00 	lea    0x5e9265(%rip),%rdx        # 5fdbf0 <funcinptr>
   1498b:	48 c7 02 09 0a 00 00 	movq   $0xa09,(%rdx)
   14992:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   14999:	00 
   1499a:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   149a1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   149a5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   149ac:	00 
   149ad:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   149b2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   149b6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   149bd:	00 
   149be:	ff 32                	pushq  (%rdx)
   149c0:	48 8b 15 51 ef 73 00 	mov    0x73ef51(%rip),%rdx        # 753918 <tmpquadone>
   149c7:	48 8b 0d 62 92 5e 00 	mov    0x5e9262(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   149ce:	48 c7 05 77 ef 73 00 	movq   $0x1,0x73ef77(%rip)        # 753950 <cmpPassed>
   149d5:	01 00 00 00 
   149d9:	e8 9a 0e ff ff       	callq  5878 <_storeDataFn>
   149de:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   149e3:	0f 85 37 f6 ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   149e9:	50                   	push   %rax
   149ea:	48 c7 c0 bd 2d 9e 78 	mov    $0x789e2dbd,%rax
   149f1:	48 89 05 48 ef 73 00 	mov    %rax,0x73ef48(%rip)        # 753940 <edgeId>
   149f8:	58                   	pop    %rax
   149f9:	e8 e2 0d ff ff       	callq  57e0 <_storeEdge>
              STORE ('\'');
   149fe:	48 89 15 13 ef 73 00 	mov    %rdx,0x73ef13(%rip)        # 753918 <tmpquadone>
   14a05:	48 89 0d 24 92 5e 00 	mov    %rcx,0x5e9224(%rip)        # 5fdc30 <tmpquadtwo>
   14a0c:	48 8d 15 dd 91 5e 00 	lea    0x5e91dd(%rip),%rdx        # 5fdbf0 <funcinptr>
   14a13:	48 c7 02 0a 0a 00 00 	movq   $0xa0a,(%rdx)
   14a1a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14a21:	00 
   14a22:	4c 89 d9             	mov    %r11,%rcx
   14a25:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14a29:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14a30:	00 
   14a31:	4c 89 f9             	mov    %r15,%rcx
   14a34:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14a38:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14a3f:	00 
   14a40:	ff 32                	pushq  (%rdx)
   14a42:	48 8b 15 cf ee 73 00 	mov    0x73eecf(%rip),%rdx        # 753918 <tmpquadone>
   14a49:	48 8b 0d e0 91 5e 00 	mov    0x5e91e0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14a50:	48 c7 05 f5 ee 73 00 	movq   $0x1,0x73eef5(%rip)        # 753950 <cmpPassed>
   14a57:	01 00 00 00 
   14a5b:	e8 18 0e ff ff       	callq  5878 <_storeDataFn>
   14a60:	4d 39 df             	cmp    %r11,%r15
   14a63:	73 1f                	jae    14a84 <quotearg_buffer_restyled+0x1c84>
   14a65:	50                   	push   %rax
   14a66:	48 c7 c0 b7 c5 13 2f 	mov    $0x2f13c5b7,%rax
   14a6d:	48 89 05 cc ee 73 00 	mov    %rax,0x73eecc(%rip)        # 753940 <edgeId>
   14a74:	58                   	pop    %rax
   14a75:	e8 66 0d ff ff       	callq  57e0 <_storeEdge>
   14a7a:	4c 8b 2c 24          	mov    (%rsp),%r13
   14a7e:	43 c6 44 3d 00 27    	movb   $0x27,0x0(%r13,%r15,1)
   14a84:	50                   	push   %rax
   14a85:	48 c7 c0 5b 3c f1 62 	mov    $0x62f13c5b,%rax
   14a8c:	48 89 05 ad ee 73 00 	mov    %rax,0x73eead(%rip)        # 753940 <edgeId>
   14a93:	58                   	pop    %rax
   14a94:	e8 47 0d ff ff       	callq  57e0 <_storeEdge>
   14a99:	49 8d 4f 01          	lea    0x1(%r15),%rcx
              STORE ('\\');
   14a9d:	48 89 15 74 ee 73 00 	mov    %rdx,0x73ee74(%rip)        # 753918 <tmpquadone>
   14aa4:	48 89 1d 85 91 5e 00 	mov    %rbx,0x5e9185(%rip)        # 5fdc30 <tmpquadtwo>
   14aab:	48 8d 15 3e 91 5e 00 	lea    0x5e913e(%rip),%rdx        # 5fdbf0 <funcinptr>
   14ab2:	48 c7 02 0b 0a 00 00 	movq   $0xa0b,(%rdx)
   14ab9:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14ac0:	00 
   14ac1:	48 89 cb             	mov    %rcx,%rbx
   14ac4:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   14ac8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14acf:	00 
   14ad0:	4c 89 db             	mov    %r11,%rbx
   14ad3:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   14ad7:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14ade:	00 
   14adf:	ff 32                	pushq  (%rdx)
   14ae1:	48 8b 15 30 ee 73 00 	mov    0x73ee30(%rip),%rdx        # 753918 <tmpquadone>
   14ae8:	48 8b 1d 41 91 5e 00 	mov    0x5e9141(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   14aef:	48 c7 05 56 ee 73 00 	movq   $0x1,0x73ee56(%rip)        # 753950 <cmpPassed>
   14af6:	01 00 00 00 
   14afa:	e8 79 0d ff ff       	callq  5878 <_storeDataFn>
   14aff:	49 39 cb             	cmp    %rcx,%r11
   14b02:	76 22                	jbe    14b26 <quotearg_buffer_restyled+0x1d26>
   14b04:	50                   	push   %rax
   14b05:	48 b8 f1 c4 8b a1 00 	movabs $0xa18bc4f1,%rax
   14b0c:	00 00 00 
   14b0f:	48 89 05 2a ee 73 00 	mov    %rax,0x73ee2a(%rip)        # 753940 <edgeId>
   14b16:	58                   	pop    %rax
   14b17:	e8 c4 0c ff ff       	callq  57e0 <_storeEdge>
   14b1c:	48 8b 04 24          	mov    (%rsp),%rax
   14b20:	42 c6 44 38 01 5c    	movb   $0x5c,0x1(%rax,%r15,1)
   14b26:	50                   	push   %rax
   14b27:	48 b8 4f bc 18 ca 00 	movabs $0xca18bc4f,%rax
   14b2e:	00 00 00 
   14b31:	48 89 05 08 ee 73 00 	mov    %rax,0x73ee08(%rip)        # 753940 <edgeId>
   14b38:	58                   	pop    %rax
   14b39:	e8 a2 0c ff ff       	callq  57e0 <_storeEdge>
   14b3e:	49 8d 57 02          	lea    0x2(%r15),%rdx
              STORE ('\'');
   14b42:	48 89 0d cf ed 73 00 	mov    %rcx,0x73edcf(%rip)        # 753918 <tmpquadone>
   14b49:	48 89 1d e0 90 5e 00 	mov    %rbx,0x5e90e0(%rip)        # 5fdc30 <tmpquadtwo>
   14b50:	48 8d 0d 99 90 5e 00 	lea    0x5e9099(%rip),%rcx        # 5fdbf0 <funcinptr>
   14b57:	48 c7 01 0c 0a 00 00 	movq   $0xa0c,(%rcx)
   14b5e:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   14b65:	00 
   14b66:	48 89 d3             	mov    %rdx,%rbx
   14b69:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   14b6d:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   14b74:	00 
   14b75:	4c 89 db             	mov    %r11,%rbx
   14b78:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   14b7c:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   14b83:	00 
   14b84:	ff 31                	pushq  (%rcx)
   14b86:	48 8b 0d 8b ed 73 00 	mov    0x73ed8b(%rip),%rcx        # 753918 <tmpquadone>
   14b8d:	48 8b 1d 9c 90 5e 00 	mov    0x5e909c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   14b94:	48 c7 05 b1 ed 73 00 	movq   $0x1,0x73edb1(%rip)        # 753950 <cmpPassed>
   14b9b:	01 00 00 00 
   14b9f:	e8 d4 0c ff ff       	callq  5878 <_storeDataFn>
   14ba4:	49 39 d3             	cmp    %rdx,%r11
   14ba7:	76 22                	jbe    14bcb <quotearg_buffer_restyled+0x1dcb>
   14ba9:	50                   	push   %rax
   14baa:	48 b8 f1 62 28 d3 00 	movabs $0xd32862f1,%rax
   14bb1:	00 00 00 
   14bb4:	48 89 05 85 ed 73 00 	mov    %rax,0x73ed85(%rip)        # 753940 <edgeId>
   14bbb:	58                   	pop    %rax
   14bbc:	e8 1f 0c ff ff       	callq  57e0 <_storeEdge>
   14bc1:	4c 8b 04 24          	mov    (%rsp),%r8
   14bc5:	43 c6 44 38 02 27    	movb   $0x27,0x2(%r8,%r15,1)
   14bcb:	50                   	push   %rax
   14bcc:	48 c7 c0 2f 86 32 2d 	mov    $0x2d32862f,%rax
   14bd3:	48 89 05 66 ed 73 00 	mov    %rax,0x73ed66(%rip)        # 753940 <edgeId>
   14bda:	58                   	pop    %rax
   14bdb:	e8 00 0c ff ff       	callq  57e0 <_storeEdge>
   14be0:	49 83 c7 03          	add    $0x3,%r15
   14be4:	41 bd 27 00 00 00    	mov    $0x27,%r13d
   14bea:	e9 81 ef ff ff       	jmpq   13b70 <quotearg_buffer_restyled+0xd70>
   14bef:	90                   	nop
   14bf0:	50                   	push   %rax
   14bf1:	48 b8 43 99 96 d9 00 	movabs $0xd9969943,%rax
   14bf8:	00 00 00 
   14bfb:	48 89 05 3e ed 73 00 	mov    %rax,0x73ed3e(%rip)        # 753940 <edgeId>
   14c02:	58                   	pop    %rax
   14c03:	e8 d8 0b ff ff       	callq  57e0 <_storeEdge>
            if (unibyte_locale)
   14c08:	48 89 15 09 ed 73 00 	mov    %rdx,0x73ed09(%rip)        # 753918 <tmpquadone>
   14c0f:	48 89 0d 1a 90 5e 00 	mov    %rcx,0x5e901a(%rip)        # 5fdc30 <tmpquadtwo>
   14c16:	48 8d 15 d3 8f 5e 00 	lea    0x5e8fd3(%rip),%rdx        # 5fdbf0 <funcinptr>
   14c1d:	48 c7 02 0d 0a 00 00 	movq   $0xa0d,(%rdx)
   14c24:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14c2b:	00 
   14c2c:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   14c33:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14c37:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14c3e:	00 
   14c3f:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   14c44:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14c48:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14c4f:	00 
   14c50:	ff 32                	pushq  (%rdx)
   14c52:	48 8b 15 bf ec 73 00 	mov    0x73ecbf(%rip),%rdx        # 753918 <tmpquadone>
   14c59:	48 8b 0d d0 8f 5e 00 	mov    0x5e8fd0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14c60:	48 c7 05 e5 ec 73 00 	movq   $0x1,0x73ece5(%rip)        # 753950 <cmpPassed>
   14c67:	01 00 00 00 
   14c6b:	e8 08 0c ff ff       	callq  5878 <_storeDataFn>
   14c70:	48 83 7c 24 48 01    	cmpq   $0x1,0x48(%rsp)
   14c76:	0f 85 c4 17 00 00    	jne    16440 <quotearg_buffer_restyled+0x3640>
   14c7c:	50                   	push   %rax
   14c7d:	48 b8 94 69 99 bd 00 	movabs $0xbd996994,%rax
   14c84:	00 00 00 
   14c87:	48 89 05 b2 ec 73 00 	mov    %rax,0x73ecb2(%rip)        # 753940 <edgeId>
   14c8e:	58                   	pop    %rax
   14c8f:	e8 4c 0b ff ff       	callq  57e0 <_storeEdge>
   14c94:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
   14c99:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
                printable = isprint (c) != 0;
   14c9e:	45 0f b6 e5          	movzbl %r13b,%r12d
   14ca2:	44 88 54 24 10       	mov    %r10b,0x10(%rsp)
   14ca7:	e8 b4 cf fe ff       	callq  1c60 <__ctype_b_loc@plt>
   14cac:	48 8b 30             	mov    (%rax),%rsi
   14caf:	44 0f b6 54 24 10    	movzbl 0x10(%rsp),%r10d
   14cb5:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
   14cba:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   14cbf:	46 0f b7 24 66       	movzwl (%rsi,%r12,2),%r12d
                m = 1;
   14cc4:	be 01 00 00 00       	mov    $0x1,%esi
   14cc9:	66 41 c1 ec 0e       	shr    $0xe,%r12w
   14cce:	41 83 f4 01          	xor    $0x1,%r12d
   14cd2:	44 22 64 24 69       	and    0x69(%rsp),%r12b
   14cd7:	50                   	push   %rax
   14cd8:	48 c7 c0 d9 6b d0 57 	mov    $0x57d06bd9,%rax
   14cdf:	48 89 05 5a ec 73 00 	mov    %rax,0x73ec5a(%rip)        # 753940 <edgeId>
   14ce6:	58                   	pop    %rax
   14ce7:	e8 f4 0a ff ff       	callq  57e0 <_storeEdge>
            if (1 < m || (backslash_escapes && ! printable))
   14cec:	45 84 e4             	test   %r12b,%r12b
   14cef:	0f 84 7b ee ff ff    	je     13b70 <quotearg_buffer_restyled+0xd70>
   14cf5:	50                   	push   %rax
   14cf6:	48 c7 c0 7b 0d fa 4a 	mov    $0x4afa0d7b,%rax
   14cfd:	48 89 05 3c ec 73 00 	mov    %rax,0x73ec3c(%rip)        # 753940 <edgeId>
   14d04:	58                   	pop    %rax
   14d05:	e8 d6 0a ff ff       	callq  57e0 <_storeEdge>
   14d0a:	44 0f b6 64 24 69    	movzbl 0x69(%rsp),%r12d
                size_t ilim = i + m;
   14d10:	48 89 f2             	mov    %rsi,%rdx
   14d13:	48 01 da             	add    %rbx,%rdx
   14d16:	45 84 e4             	test   %r12b,%r12b
   14d19:	0f 85 c1 1b 00 00    	jne    168e0 <quotearg_buffer_restyled+0x3ae0>
   14d1f:	50                   	push   %rax
   14d20:	48 b8 0d fa 4a a5 00 	movabs $0xa54afa0d,%rax
   14d27:	00 00 00 
   14d2a:	48 89 05 0f ec 73 00 	mov    %rax,0x73ec0f(%rip)        # 753940 <edgeId>
   14d31:	58                   	pop    %rax
   14d32:	e8 a9 0a ff ff       	callq  57e0 <_storeEdge>
   14d37:	50                   	push   %rax
   14d38:	48 b8 06 7d a5 d2 00 	movabs $0xd2a57d06,%rax
   14d3f:	00 00 00 
   14d42:	48 89 05 f7 eb 73 00 	mov    %rax,0x73ebf7(%rip)        # 753940 <edgeId>
   14d49:	58                   	pop    %rax
   14d4a:	e8 91 0a ff ff       	callq  57e0 <_storeEdge>
                    else if (is_right_quote)
   14d4f:	45 84 d2             	test   %r10b,%r10b
   14d52:	0f 84 b6 00 00 00    	je     14e0e <quotearg_buffer_restyled+0x200e>
   14d58:	50                   	push   %rax
   14d59:	48 b8 a0 af 54 da 00 	movabs $0xda54afa0,%rax
   14d60:	00 00 00 
   14d63:	48 89 05 d6 eb 73 00 	mov    %rax,0x73ebd6(%rip)        # 753940 <edgeId>
   14d6a:	58                   	pop    %rax
   14d6b:	e8 70 0a ff ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   14d70:	48 89 15 a1 eb 73 00 	mov    %rdx,0x73eba1(%rip)        # 753918 <tmpquadone>
   14d77:	48 89 0d b2 8e 5e 00 	mov    %rcx,0x5e8eb2(%rip)        # 5fdc30 <tmpquadtwo>
   14d7e:	48 8d 15 6b 8e 5e 00 	lea    0x5e8e6b(%rip),%rdx        # 5fdbf0 <funcinptr>
   14d85:	48 c7 02 0e 0a 00 00 	movq   $0xa0e,(%rdx)
   14d8c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14d93:	00 
   14d94:	4c 89 d9             	mov    %r11,%rcx
   14d97:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14d9b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14da2:	00 
   14da3:	4c 89 f9             	mov    %r15,%rcx
   14da6:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14daa:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14db1:	00 
   14db2:	ff 32                	pushq  (%rdx)
   14db4:	48 8b 15 5d eb 73 00 	mov    0x73eb5d(%rip),%rdx        # 753918 <tmpquadone>
   14dbb:	48 8b 0d 6e 8e 5e 00 	mov    0x5e8e6e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14dc2:	48 c7 05 83 eb 73 00 	movq   $0x1,0x73eb83(%rip)        # 753950 <cmpPassed>
   14dc9:	01 00 00 00 
   14dcd:	e8 a6 0a ff ff       	callq  5878 <_storeDataFn>
   14dd2:	4d 39 df             	cmp    %r11,%r15
   14dd5:	73 1e                	jae    14df5 <quotearg_buffer_restyled+0x1ff5>
   14dd7:	50                   	push   %rax
   14dd8:	48 c7 c0 f4 95 4a 3b 	mov    $0x3b4a95f4,%rax
   14ddf:	48 89 05 5a eb 73 00 	mov    %rax,0x73eb5a(%rip)        # 753940 <edgeId>
   14de6:	58                   	pop    %rax
   14de7:	e8 f4 09 ff ff       	callq  57e0 <_storeEdge>
   14dec:	48 8b 3c 24          	mov    (%rsp),%rdi
   14df0:	42 c6 04 3f 5c       	movb   $0x5c,(%rdi,%r15,1)
   14df5:	50                   	push   %rax
   14df6:	48 c7 c0 be 52 69 47 	mov    $0x476952be,%rax
   14dfd:	48 89 05 3c eb 73 00 	mov    %rax,0x73eb3c(%rip)        # 753940 <edgeId>
   14e04:	58                   	pop    %rax
   14e05:	e8 d6 09 ff ff       	callq  57e0 <_storeEdge>
   14e0a:	49 83 c7 01          	add    $0x1,%r15
   14e0e:	50                   	push   %rax
   14e0f:	48 b8 2b 95 76 e4 00 	movabs $0xe476952b,%rax
   14e16:	00 00 00 
   14e19:	48 89 05 20 eb 73 00 	mov    %rax,0x73eb20(%rip)        # 753940 <edgeId>
   14e20:	58                   	pop    %rax
   14e21:	e8 ba 09 ff ff       	callq  57e0 <_storeEdge>
   14e26:	49 89 dc             	mov    %rbx,%r12
   14e29:	49 f7 d4             	not    %r12
   14e2c:	49 01 d4             	add    %rdx,%r12
   14e2f:	41 83 e4 07          	and    $0x7,%r12d
   14e33:	0f 84 97 3b 00 00    	je     189d0 <quotearg_buffer_restyled+0x5bd0>
   14e39:	50                   	push   %rax
   14e3a:	48 c7 c0 a9 b4 23 0f 	mov    $0xf23b4a9,%rax
   14e41:	48 89 05 f8 ea 73 00 	mov    %rax,0x73eaf8(%rip)        # 753940 <edgeId>
   14e48:	58                   	pop    %rax
   14e49:	e8 92 09 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   14e4e:	48 83 c3 01          	add    $0x1,%rbx
   14e52:	48 89 0d bf ea 73 00 	mov    %rcx,0x73eabf(%rip)        # 753918 <tmpquadone>
   14e59:	48 89 05 d0 8d 5e 00 	mov    %rax,0x5e8dd0(%rip)        # 5fdc30 <tmpquadtwo>
   14e60:	48 8d 0d 89 8d 5e 00 	lea    0x5e8d89(%rip),%rcx        # 5fdbf0 <funcinptr>
   14e67:	48 c7 01 0f 0a 00 00 	movq   $0xa0f,(%rcx)
   14e6e:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   14e75:	00 
   14e76:	48 89 d8             	mov    %rbx,%rax
   14e79:	48 89 41 10          	mov    %rax,0x10(%rcx)
   14e7d:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   14e84:	00 
   14e85:	48 89 d0             	mov    %rdx,%rax
   14e88:	48 89 41 20          	mov    %rax,0x20(%rcx)
   14e8c:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   14e93:	00 
   14e94:	ff 31                	pushq  (%rcx)
   14e96:	48 8b 0d 7b ea 73 00 	mov    0x73ea7b(%rip),%rcx        # 753918 <tmpquadone>
   14e9d:	48 8b 05 8c 8d 5e 00 	mov    0x5e8d8c(%rip),%rax        # 5fdc30 <tmpquadtwo>
   14ea4:	48 c7 05 a1 ea 73 00 	movq   $0x1,0x73eaa1(%rip)        # 753950 <cmpPassed>
   14eab:	01 00 00 00 
   14eaf:	e8 c4 09 ff ff       	callq  5878 <_storeDataFn>
   14eb4:	48 39 da             	cmp    %rbx,%rdx
   14eb7:	0f 86 28 ee ff ff    	jbe    13ce5 <quotearg_buffer_restyled+0xee5>
   14ebd:	50                   	push   %rax
   14ebe:	48 c7 c0 d2 8e 3c 74 	mov    $0x743c8ed2,%rax
   14ec5:	48 89 05 74 ea 73 00 	mov    %rax,0x73ea74(%rip)        # 753940 <edgeId>
   14ecc:	58                   	pop    %rax
   14ecd:	e8 0e 09 ff ff       	callq  57e0 <_storeEdge>
                    STORE (c);
   14ed2:	48 89 15 3f ea 73 00 	mov    %rdx,0x73ea3f(%rip)        # 753918 <tmpquadone>
   14ed9:	48 89 0d 50 8d 5e 00 	mov    %rcx,0x5e8d50(%rip)        # 5fdc30 <tmpquadtwo>
   14ee0:	48 8d 15 09 8d 5e 00 	lea    0x5e8d09(%rip),%rdx        # 5fdbf0 <funcinptr>
   14ee7:	48 c7 02 10 0a 00 00 	movq   $0xa10,(%rdx)
   14eee:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14ef5:	00 
   14ef6:	4c 89 f9             	mov    %r15,%rcx
   14ef9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14efd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14f04:	00 
   14f05:	4c 89 d9             	mov    %r11,%rcx
   14f08:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14f0c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14f13:	00 
   14f14:	ff 32                	pushq  (%rdx)
   14f16:	48 8b 15 fb e9 73 00 	mov    0x73e9fb(%rip),%rdx        # 753918 <tmpquadone>
   14f1d:	48 8b 0d 0c 8d 5e 00 	mov    0x5e8d0c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14f24:	48 c7 05 21 ea 73 00 	movq   $0x1,0x73ea21(%rip)        # 753950 <cmpPassed>
   14f2b:	01 00 00 00 
   14f2f:	e8 44 09 ff ff       	callq  5878 <_storeDataFn>
   14f34:	4d 39 fb             	cmp    %r15,%r11
   14f37:	76 20                	jbe    14f59 <quotearg_buffer_restyled+0x2159>
   14f39:	50                   	push   %rax
   14f3a:	48 b8 da 91 87 ae 00 	movabs $0xae8791da,%rax
   14f41:	00 00 00 
   14f44:	48 89 05 f5 e9 73 00 	mov    %rax,0x73e9f5(%rip)        # 753940 <edgeId>
   14f4b:	58                   	pop    %rax
   14f4c:	e8 8f 08 ff ff       	callq  57e0 <_storeEdge>
   14f51:	48 8b 04 24          	mov    (%rsp),%rax
   14f55:	46 88 2c 38          	mov    %r13b,(%rax,%r15,1)
   14f59:	50                   	push   %rax
   14f5a:	48 c7 c0 3b f2 d0 35 	mov    $0x35d0f23b,%rax
   14f61:	48 89 05 d8 e9 73 00 	mov    %rax,0x73e9d8(%rip)        # 753940 <edgeId>
   14f68:	58                   	pop    %rax
   14f69:	e8 72 08 ff ff       	callq  57e0 <_storeEdge>
   14f6e:	49 83 c7 01          	add    $0x1,%r15
   14f72:	48 89 15 9f e9 73 00 	mov    %rdx,0x73e99f(%rip)        # 753918 <tmpquadone>
   14f79:	48 89 0d b0 8c 5e 00 	mov    %rcx,0x5e8cb0(%rip)        # 5fdc30 <tmpquadtwo>
   14f80:	48 8d 15 69 8c 5e 00 	lea    0x5e8c69(%rip),%rdx        # 5fdbf0 <funcinptr>
   14f87:	48 c7 02 11 0a 00 00 	movq   $0xa11,(%rdx)
   14f8e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   14f95:	00 
   14f96:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   14f9d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   14fa1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   14fa8:	00 
   14fa9:	4c 89 e1             	mov    %r12,%rcx
   14fac:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   14fb0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   14fb7:	00 
   14fb8:	ff 32                	pushq  (%rdx)
   14fba:	48 8b 15 57 e9 73 00 	mov    0x73e957(%rip),%rdx        # 753918 <tmpquadone>
   14fc1:	48 8b 0d 68 8c 5e 00 	mov    0x5e8c68(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   14fc8:	48 c7 05 7d e9 73 00 	movq   $0x1,0x73e97d(%rip)        # 753950 <cmpPassed>
   14fcf:	01 00 00 00 
   14fd3:	e8 a0 08 ff ff       	callq  5878 <_storeDataFn>
   14fd8:	49 83 fc 01          	cmp    $0x1,%r12
                    c = arg[++i];
   14fdc:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
   14fe1:	0f 84 e9 39 00 00    	je     189d0 <quotearg_buffer_restyled+0x5bd0>
   14fe7:	50                   	push   %rax
   14fe8:	48 b8 e4 a1 6b fa 00 	movabs $0xfa6ba1e4,%rax
   14fef:	00 00 00 
   14ff2:	48 89 05 47 e9 73 00 	mov    %rax,0x73e947(%rip)        # 753940 <edgeId>
   14ff9:	58                   	pop    %rax
   14ffa:	e8 e1 07 ff ff       	callq  57e0 <_storeEdge>
   14fff:	48 89 15 12 e9 73 00 	mov    %rdx,0x73e912(%rip)        # 753918 <tmpquadone>
   15006:	48 89 0d 23 8c 5e 00 	mov    %rcx,0x5e8c23(%rip)        # 5fdc30 <tmpquadtwo>
   1500d:	48 8d 15 dc 8b 5e 00 	lea    0x5e8bdc(%rip),%rdx        # 5fdbf0 <funcinptr>
   15014:	48 c7 02 12 0a 00 00 	movq   $0xa12,(%rdx)
   1501b:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15022:	00 
   15023:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   1502a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1502e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15035:	00 
   15036:	4c 89 e1             	mov    %r12,%rcx
   15039:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1503d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15044:	00 
   15045:	ff 32                	pushq  (%rdx)
   15047:	48 8b 15 ca e8 73 00 	mov    0x73e8ca(%rip),%rdx        # 753918 <tmpquadone>
   1504e:	48 8b 0d db 8b 5e 00 	mov    0x5e8bdb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15055:	48 c7 05 f0 e8 73 00 	movq   $0x1,0x73e8f0(%rip)        # 753950 <cmpPassed>
   1505c:	01 00 00 00 
   15060:	e8 13 08 ff ff       	callq  5878 <_storeDataFn>
   15065:	49 83 fc 02          	cmp    $0x2,%r12
   15069:	0f 84 d5 05 00 00    	je     15644 <quotearg_buffer_restyled+0x2844>
   1506f:	50                   	push   %rax
   15070:	48 b8 79 e8 9a be 00 	movabs $0xbe9ae879,%rax
   15077:	00 00 00 
   1507a:	48 89 05 bf e8 73 00 	mov    %rax,0x73e8bf(%rip)        # 753940 <edgeId>
   15081:	58                   	pop    %rax
   15082:	e8 59 07 ff ff       	callq  57e0 <_storeEdge>
   15087:	48 89 15 8a e8 73 00 	mov    %rdx,0x73e88a(%rip)        # 753918 <tmpquadone>
   1508e:	48 89 0d 9b 8b 5e 00 	mov    %rcx,0x5e8b9b(%rip)        # 5fdc30 <tmpquadtwo>
   15095:	48 8d 15 54 8b 5e 00 	lea    0x5e8b54(%rip),%rdx        # 5fdbf0 <funcinptr>
   1509c:	48 c7 02 13 0a 00 00 	movq   $0xa13,(%rdx)
   150a3:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   150aa:	00 
   150ab:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
   150b2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   150b6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   150bd:	00 
   150be:	4c 89 e1             	mov    %r12,%rcx
   150c1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   150c5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   150cc:	00 
   150cd:	ff 32                	pushq  (%rdx)
   150cf:	48 8b 15 42 e8 73 00 	mov    0x73e842(%rip),%rdx        # 753918 <tmpquadone>
   150d6:	48 8b 0d 53 8b 5e 00 	mov    0x5e8b53(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   150dd:	48 c7 05 68 e8 73 00 	movq   $0x1,0x73e868(%rip)        # 753950 <cmpPassed>
   150e4:	01 00 00 00 
   150e8:	e8 8b 07 ff ff       	callq  5878 <_storeDataFn>
   150ed:	49 83 fc 03          	cmp    $0x3,%r12
   150f1:	0f 84 8c 04 00 00    	je     15583 <quotearg_buffer_restyled+0x2783>
   150f7:	50                   	push   %rax
   150f8:	48 c7 c0 1e ba a6 2f 	mov    $0x2fa6ba1e,%rax
   150ff:	48 89 05 3a e8 73 00 	mov    %rax,0x73e83a(%rip)        # 753940 <edgeId>
   15106:	58                   	pop    %rax
   15107:	e8 d4 06 ff ff       	callq  57e0 <_storeEdge>
   1510c:	48 89 15 05 e8 73 00 	mov    %rdx,0x73e805(%rip)        # 753918 <tmpquadone>
   15113:	48 89 0d 16 8b 5e 00 	mov    %rcx,0x5e8b16(%rip)        # 5fdc30 <tmpquadtwo>
   1511a:	48 8d 15 cf 8a 5e 00 	lea    0x5e8acf(%rip),%rdx        # 5fdbf0 <funcinptr>
   15121:	48 c7 02 14 0a 00 00 	movq   $0xa14,(%rdx)
   15128:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1512f:	00 
   15130:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   15137:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1513b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15142:	00 
   15143:	4c 89 e1             	mov    %r12,%rcx
   15146:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1514a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15151:	00 
   15152:	ff 32                	pushq  (%rdx)
   15154:	48 8b 15 bd e7 73 00 	mov    0x73e7bd(%rip),%rdx        # 753918 <tmpquadone>
   1515b:	48 8b 0d ce 8a 5e 00 	mov    0x5e8ace(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15162:	48 c7 05 e3 e7 73 00 	movq   $0x1,0x73e7e3(%rip)        # 753950 <cmpPassed>
   15169:	01 00 00 00 
   1516d:	e8 06 07 ff ff       	callq  5878 <_storeDataFn>
   15172:	49 83 fc 04          	cmp    $0x4,%r12
   15176:	0f 84 49 03 00 00    	je     154c5 <quotearg_buffer_restyled+0x26c5>
   1517c:	50                   	push   %rax
   1517d:	48 b8 87 ae e9 8b 00 	movabs $0x8be9ae87,%rax
   15184:	00 00 00 
   15187:	48 89 05 b2 e7 73 00 	mov    %rax,0x73e7b2(%rip)        # 753940 <edgeId>
   1518e:	58                   	pop    %rax
   1518f:	e8 4c 06 ff ff       	callq  57e0 <_storeEdge>
   15194:	48 89 15 7d e7 73 00 	mov    %rdx,0x73e77d(%rip)        # 753918 <tmpquadone>
   1519b:	48 89 0d 8e 8a 5e 00 	mov    %rcx,0x5e8a8e(%rip)        # 5fdc30 <tmpquadtwo>
   151a2:	48 8d 15 47 8a 5e 00 	lea    0x5e8a47(%rip),%rdx        # 5fdbf0 <funcinptr>
   151a9:	48 c7 02 15 0a 00 00 	movq   $0xa15,(%rdx)
   151b0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   151b7:	00 
   151b8:	48 c7 c1 05 00 00 00 	mov    $0x5,%rcx
   151bf:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   151c3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   151ca:	00 
   151cb:	4c 89 e1             	mov    %r12,%rcx
   151ce:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   151d2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   151d9:	00 
   151da:	ff 32                	pushq  (%rdx)
   151dc:	48 8b 15 35 e7 73 00 	mov    0x73e735(%rip),%rdx        # 753918 <tmpquadone>
   151e3:	48 8b 0d 46 8a 5e 00 	mov    0x5e8a46(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   151ea:	48 c7 05 5b e7 73 00 	movq   $0x1,0x73e75b(%rip)        # 753950 <cmpPassed>
   151f1:	01 00 00 00 
   151f5:	e8 7e 06 ff ff       	callq  5878 <_storeDataFn>
   151fa:	49 83 fc 05          	cmp    $0x5,%r12
   151fe:	0f 84 03 02 00 00    	je     15407 <quotearg_buffer_restyled+0x2607>
   15204:	50                   	push   %rax
   15205:	48 b8 a1 6b fa a2 00 	movabs $0xa2fa6ba1,%rax
   1520c:	00 00 00 
   1520f:	48 89 05 2a e7 73 00 	mov    %rax,0x73e72a(%rip)        # 753940 <edgeId>
   15216:	58                   	pop    %rax
   15217:	e8 c4 05 ff ff       	callq  57e0 <_storeEdge>
   1521c:	48 89 15 f5 e6 73 00 	mov    %rdx,0x73e6f5(%rip)        # 753918 <tmpquadone>
   15223:	48 89 0d 06 8a 5e 00 	mov    %rcx,0x5e8a06(%rip)        # 5fdc30 <tmpquadtwo>
   1522a:	48 8d 15 bf 89 5e 00 	lea    0x5e89bf(%rip),%rdx        # 5fdbf0 <funcinptr>
   15231:	48 c7 02 16 0a 00 00 	movq   $0xa16,(%rdx)
   15238:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1523f:	00 
   15240:	48 c7 c1 06 00 00 00 	mov    $0x6,%rcx
   15247:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1524b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15252:	00 
   15253:	4c 89 e1             	mov    %r12,%rcx
   15256:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1525a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15261:	00 
   15262:	ff 32                	pushq  (%rdx)
   15264:	48 8b 15 ad e6 73 00 	mov    0x73e6ad(%rip),%rdx        # 753918 <tmpquadone>
   1526b:	48 8b 0d be 89 5e 00 	mov    0x5e89be(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15272:	48 c7 05 d3 e6 73 00 	movq   $0x1,0x73e6d3(%rip)        # 753950 <cmpPassed>
   15279:	01 00 00 00 
   1527d:	e8 f6 05 ff ff       	callq  5878 <_storeDataFn>
   15282:	49 83 fc 06          	cmp    $0x6,%r12
   15286:	0f 84 bd 00 00 00    	je     15349 <quotearg_buffer_restyled+0x2549>
   1528c:	50                   	push   %rax
   1528d:	48 b8 e8 9a be a8 00 	movabs $0xa8be9ae8,%rax
   15294:	00 00 00 
   15297:	48 89 05 a2 e6 73 00 	mov    %rax,0x73e6a2(%rip)        # 753940 <edgeId>
   1529e:	58                   	pop    %rax
   1529f:	e8 3c 05 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   152a4:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   152a8:	48 89 15 69 e6 73 00 	mov    %rdx,0x73e669(%rip)        # 753918 <tmpquadone>
   152af:	48 89 0d 7a 89 5e 00 	mov    %rcx,0x5e897a(%rip)        # 5fdc30 <tmpquadtwo>
   152b6:	48 8d 15 33 89 5e 00 	lea    0x5e8933(%rip),%rdx        # 5fdbf0 <funcinptr>
   152bd:	48 c7 02 17 0a 00 00 	movq   $0xa17,(%rdx)
   152c4:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   152cb:	00 
   152cc:	4c 89 f9             	mov    %r15,%rcx
   152cf:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   152d3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   152da:	00 
   152db:	4c 89 d9             	mov    %r11,%rcx
   152de:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   152e2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   152e9:	00 
   152ea:	ff 32                	pushq  (%rdx)
   152ec:	48 8b 15 25 e6 73 00 	mov    0x73e625(%rip),%rdx        # 753918 <tmpquadone>
   152f3:	48 8b 0d 36 89 5e 00 	mov    0x5e8936(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   152fa:	48 c7 05 4b e6 73 00 	movq   $0x1,0x73e64b(%rip)        # 753950 <cmpPassed>
   15301:	01 00 00 00 
   15305:	e8 6e 05 ff ff       	callq  5878 <_storeDataFn>
   1530a:	4d 39 fb             	cmp    %r15,%r11
   1530d:	0f 87 f2 43 00 00    	ja     19705 <quotearg_buffer_restyled+0x6905>
   15313:	50                   	push   %rax
   15314:	48 c7 c0 35 7d 51 73 	mov    $0x73517d35,%rax
   1531b:	48 89 05 1e e6 73 00 	mov    %rax,0x73e61e(%rip)        # 753940 <edgeId>
   15322:	58                   	pop    %rax
   15323:	e8 b8 04 ff ff       	callq  57e0 <_storeEdge>
   15328:	50                   	push   %rax
   15329:	48 b8 9a be a8 b9 00 	movabs $0xb9a8be9a,%rax
   15330:	00 00 00 
   15333:	48 89 05 06 e6 73 00 	mov    %rax,0x73e606(%rip)        # 753940 <edgeId>
   1533a:	58                   	pop    %rax
   1533b:	e8 a0 04 ff ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   15340:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
                    STORE (c);
   15345:	49 83 c7 01          	add    $0x1,%r15
   15349:	50                   	push   %rax
   1534a:	48 c7 c0 be a8 b9 16 	mov    $0x16b9a8be,%rax
   15351:	48 89 05 e8 e5 73 00 	mov    %rax,0x73e5e8(%rip)        # 753940 <edgeId>
   15358:	58                   	pop    %rax
   15359:	e8 82 04 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   1535e:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   15362:	48 89 15 af e5 73 00 	mov    %rdx,0x73e5af(%rip)        # 753918 <tmpquadone>
   15369:	48 89 0d c0 88 5e 00 	mov    %rcx,0x5e88c0(%rip)        # 5fdc30 <tmpquadtwo>
   15370:	48 8d 15 79 88 5e 00 	lea    0x5e8879(%rip),%rdx        # 5fdbf0 <funcinptr>
   15377:	48 c7 02 18 0a 00 00 	movq   $0xa18,(%rdx)
   1537e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15385:	00 
   15386:	4c 89 f9             	mov    %r15,%rcx
   15389:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1538d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15394:	00 
   15395:	4c 89 d9             	mov    %r11,%rcx
   15398:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1539c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   153a3:	00 
   153a4:	ff 32                	pushq  (%rdx)
   153a6:	48 8b 15 6b e5 73 00 	mov    0x73e56b(%rip),%rdx        # 753918 <tmpquadone>
   153ad:	48 8b 0d 7c 88 5e 00 	mov    0x5e887c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   153b4:	48 c7 05 91 e5 73 00 	movq   $0x1,0x73e591(%rip)        # 753950 <cmpPassed>
   153bb:	01 00 00 00 
   153bf:	e8 b4 04 ff ff       	callq  5878 <_storeDataFn>
   153c4:	4d 39 fb             	cmp    %r15,%r11
   153c7:	76 20                	jbe    153e9 <quotearg_buffer_restyled+0x25e9>
   153c9:	50                   	push   %rax
   153ca:	48 b8 a2 e6 5a 88 00 	movabs $0x885ae6a2,%rax
   153d1:	00 00 00 
   153d4:	48 89 05 65 e5 73 00 	mov    %rax,0x73e565(%rip)        # 753940 <edgeId>
   153db:	58                   	pop    %rax
   153dc:	e8 ff 03 ff ff       	callq  57e0 <_storeEdge>
   153e1:	4c 8b 04 24          	mov    (%rsp),%r8
   153e5:	47 88 2c 38          	mov    %r13b,(%r8,%r15,1)
   153e9:	50                   	push   %rax
   153ea:	48 c7 c0 d4 5c 0b 51 	mov    $0x510b5cd4,%rax
   153f1:	48 89 05 48 e5 73 00 	mov    %rax,0x73e548(%rip)        # 753940 <edgeId>
   153f8:	58                   	pop    %rax
   153f9:	e8 e2 03 ff ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   153fe:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
                    STORE (c);
   15403:	49 83 c7 01          	add    $0x1,%r15
   15407:	50                   	push   %rax
   15408:	48 c7 c0 5c 0b 51 52 	mov    $0x52510b5c,%rax
   1540f:	48 89 05 2a e5 73 00 	mov    %rax,0x73e52a(%rip)        # 753940 <edgeId>
   15416:	58                   	pop    %rax
   15417:	e8 c4 03 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   1541c:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   15420:	48 89 15 f1 e4 73 00 	mov    %rdx,0x73e4f1(%rip)        # 753918 <tmpquadone>
   15427:	48 89 0d 02 88 5e 00 	mov    %rcx,0x5e8802(%rip)        # 5fdc30 <tmpquadtwo>
   1542e:	48 8d 15 bb 87 5e 00 	lea    0x5e87bb(%rip),%rdx        # 5fdbf0 <funcinptr>
   15435:	48 c7 02 19 0a 00 00 	movq   $0xa19,(%rdx)
   1543c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15443:	00 
   15444:	4c 89 f9             	mov    %r15,%rcx
   15447:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1544b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15452:	00 
   15453:	4c 89 d9             	mov    %r11,%rcx
   15456:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1545a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15461:	00 
   15462:	ff 32                	pushq  (%rdx)
   15464:	48 8b 15 ad e4 73 00 	mov    0x73e4ad(%rip),%rdx        # 753918 <tmpquadone>
   1546b:	48 8b 0d be 87 5e 00 	mov    0x5e87be(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15472:	48 c7 05 d3 e4 73 00 	movq   $0x1,0x73e4d3(%rip)        # 753950 <cmpPassed>
   15479:	01 00 00 00 
   1547d:	e8 f6 03 ff ff       	callq  5878 <_storeDataFn>
   15482:	4d 39 fb             	cmp    %r15,%r11
   15485:	76 20                	jbe    154a7 <quotearg_buffer_restyled+0x26a7>
   15487:	50                   	push   %rax
   15488:	48 b8 2d 44 49 f1 00 	movabs $0xf149442d,%rax
   1548f:	00 00 00 
   15492:	48 89 05 a7 e4 73 00 	mov    %rax,0x73e4a7(%rip)        # 753940 <edgeId>
   15499:	58                   	pop    %rax
   1549a:	e8 41 03 ff ff       	callq  57e0 <_storeEdge>
   1549f:	4c 8b 14 24          	mov    (%rsp),%r10
   154a3:	47 88 2c 3a          	mov    %r13b,(%r10,%r15,1)
   154a7:	50                   	push   %rax
   154a8:	48 c7 c0 85 28 29 1e 	mov    $0x1e292885,%rax
   154af:	48 89 05 8a e4 73 00 	mov    %rax,0x73e48a(%rip)        # 753940 <edgeId>
   154b6:	58                   	pop    %rax
   154b7:	e8 24 03 ff ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   154bc:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
                    STORE (c);
   154c1:	49 83 c7 01          	add    $0x1,%r15
   154c5:	50                   	push   %rax
   154c6:	48 b8 28 29 1e 9b 00 	movabs $0x9b1e2928,%rax
   154cd:	00 00 00 
   154d0:	48 89 05 69 e4 73 00 	mov    %rax,0x73e469(%rip)        # 753940 <edgeId>
   154d7:	58                   	pop    %rax
   154d8:	e8 03 03 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   154dd:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   154e1:	48 89 15 30 e4 73 00 	mov    %rdx,0x73e430(%rip)        # 753918 <tmpquadone>
   154e8:	48 89 0d 41 87 5e 00 	mov    %rcx,0x5e8741(%rip)        # 5fdc30 <tmpquadtwo>
   154ef:	48 8d 15 fa 86 5e 00 	lea    0x5e86fa(%rip),%rdx        # 5fdbf0 <funcinptr>
   154f6:	48 c7 02 1a 0a 00 00 	movq   $0xa1a,(%rdx)
   154fd:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15504:	00 
   15505:	4c 89 f9             	mov    %r15,%rcx
   15508:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1550c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15513:	00 
   15514:	4c 89 d9             	mov    %r11,%rcx
   15517:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1551b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15522:	00 
   15523:	ff 32                	pushq  (%rdx)
   15525:	48 8b 15 ec e3 73 00 	mov    0x73e3ec(%rip),%rdx        # 753918 <tmpquadone>
   1552c:	48 8b 0d fd 86 5e 00 	mov    0x5e86fd(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15533:	48 c7 05 12 e4 73 00 	movq   $0x1,0x73e412(%rip)        # 753950 <cmpPassed>
   1553a:	01 00 00 00 
   1553e:	e8 35 03 ff ff       	callq  5878 <_storeDataFn>
   15543:	4d 39 fb             	cmp    %r15,%r11
   15546:	76 1d                	jbe    15565 <quotearg_buffer_restyled+0x2765>
   15548:	50                   	push   %rax
   15549:	48 c7 c0 a4 78 6c 4e 	mov    $0x4e6c78a4,%rax
   15550:	48 89 05 e9 e3 73 00 	mov    %rax,0x73e3e9(%rip)        # 753940 <edgeId>
   15557:	58                   	pop    %rax
   15558:	e8 83 02 ff ff       	callq  57e0 <_storeEdge>
   1555d:	48 8b 34 24          	mov    (%rsp),%rsi
   15561:	46 88 2c 3e          	mov    %r13b,(%rsi,%r15,1)
   15565:	50                   	push   %rax
   15566:	48 c7 c0 14 8f cd 49 	mov    $0x49cd8f14,%rax
   1556d:	48 89 05 cc e3 73 00 	mov    %rax,0x73e3cc(%rip)        # 753940 <edgeId>
   15574:	58                   	pop    %rax
   15575:	e8 66 02 ff ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   1557a:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
                    STORE (c);
   1557f:	49 83 c7 01          	add    $0x1,%r15
   15583:	50                   	push   %rax
   15584:	48 b8 8f cd 49 f8 00 	movabs $0xf849cd8f,%rax
   1558b:	00 00 00 
   1558e:	48 89 05 ab e3 73 00 	mov    %rax,0x73e3ab(%rip)        # 753940 <edgeId>
   15595:	58                   	pop    %rax
   15596:	e8 45 02 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   1559b:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   1559f:	48 89 15 72 e3 73 00 	mov    %rdx,0x73e372(%rip)        # 753918 <tmpquadone>
   155a6:	48 89 0d 83 86 5e 00 	mov    %rcx,0x5e8683(%rip)        # 5fdc30 <tmpquadtwo>
   155ad:	48 8d 15 3c 86 5e 00 	lea    0x5e863c(%rip),%rdx        # 5fdbf0 <funcinptr>
   155b4:	48 c7 02 1b 0a 00 00 	movq   $0xa1b,(%rdx)
   155bb:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   155c2:	00 
   155c3:	4c 89 f9             	mov    %r15,%rcx
   155c6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   155ca:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   155d1:	00 
   155d2:	4c 89 d9             	mov    %r11,%rcx
   155d5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   155d9:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   155e0:	00 
   155e1:	ff 32                	pushq  (%rdx)
   155e3:	48 8b 15 2e e3 73 00 	mov    0x73e32e(%rip),%rdx        # 753918 <tmpquadone>
   155ea:	48 8b 0d 3f 86 5e 00 	mov    0x5e863f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   155f1:	48 c7 05 54 e3 73 00 	movq   $0x1,0x73e354(%rip)        # 753950 <cmpPassed>
   155f8:	01 00 00 00 
   155fc:	e8 77 02 ff ff       	callq  5878 <_storeDataFn>
   15601:	4d 39 fb             	cmp    %r15,%r11
   15604:	76 1d                	jbe    15623 <quotearg_buffer_restyled+0x2823>
   15606:	50                   	push   %rax
   15607:	48 c7 c0 36 27 e1 2f 	mov    $0x2fe12736,%rax
   1560e:	48 89 05 2b e3 73 00 	mov    %rax,0x73e32b(%rip)        # 753940 <edgeId>
   15615:	58                   	pop    %rax
   15616:	e8 c5 01 ff ff       	callq  57e0 <_storeEdge>
   1561b:	48 8b 3c 24          	mov    (%rsp),%rdi
   1561f:	46 88 2c 3f          	mov    %r13b,(%rdi,%r15,1)
   15623:	50                   	push   %rax
   15624:	48 b8 e6 24 fc 85 00 	movabs $0x85fc24e6,%rax
   1562b:	00 00 00 
   1562e:	48 89 05 0b e3 73 00 	mov    %rax,0x73e30b(%rip)        # 753940 <edgeId>
   15635:	58                   	pop    %rax
   15636:	e8 a5 01 ff ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   1563b:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
                    STORE (c);
   15640:	49 83 c7 01          	add    $0x1,%r15
   15644:	50                   	push   %rax
   15645:	48 c7 c0 24 fc 85 53 	mov    $0x5385fc24,%rax
   1564c:	48 89 05 ed e2 73 00 	mov    %rax,0x73e2ed(%rip)        # 753940 <edgeId>
   15653:	58                   	pop    %rax
   15654:	e8 87 01 ff ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   15659:	48 83 c3 01          	add    $0x1,%rbx
                    STORE (c);
   1565d:	48 89 15 b4 e2 73 00 	mov    %rdx,0x73e2b4(%rip)        # 753918 <tmpquadone>
   15664:	48 89 0d c5 85 5e 00 	mov    %rcx,0x5e85c5(%rip)        # 5fdc30 <tmpquadtwo>
   1566b:	48 8d 15 7e 85 5e 00 	lea    0x5e857e(%rip),%rdx        # 5fdbf0 <funcinptr>
   15672:	48 c7 02 1c 0a 00 00 	movq   $0xa1c,(%rdx)
   15679:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15680:	00 
   15681:	4c 89 f9             	mov    %r15,%rcx
   15684:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15688:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1568f:	00 
   15690:	4c 89 d9             	mov    %r11,%rcx
   15693:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15697:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1569e:	00 
   1569f:	ff 32                	pushq  (%rdx)
   156a1:	48 8b 15 70 e2 73 00 	mov    0x73e270(%rip),%rdx        # 753918 <tmpquadone>
   156a8:	48 8b 0d 81 85 5e 00 	mov    0x5e8581(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   156af:	48 c7 05 96 e2 73 00 	movq   $0x1,0x73e296(%rip)        # 753950 <cmpPassed>
   156b6:	01 00 00 00 
   156ba:	e8 b9 01 ff ff       	callq  5878 <_storeDataFn>
   156bf:	4d 39 fb             	cmp    %r15,%r11
   156c2:	76 1d                	jbe    156e1 <quotearg_buffer_restyled+0x28e1>
   156c4:	50                   	push   %rax
   156c5:	48 c7 c0 f0 17 4e 3d 	mov    $0x3d4e17f0,%rax
   156cc:	48 89 05 6d e2 73 00 	mov    %rax,0x73e26d(%rip)        # 753940 <edgeId>
   156d3:	58                   	pop    %rax
   156d4:	e8 07 01 ff ff       	callq  57e0 <_storeEdge>
   156d9:	4c 8b 24 24          	mov    (%rsp),%r12
   156dd:	47 88 2c 3c          	mov    %r13b,(%r12,%r15,1)
   156e1:	50                   	push   %rax
   156e2:	48 b8 fe c2 a9 87 00 	movabs $0x87a9c2fe,%rax
   156e9:	00 00 00 
   156ec:	48 89 05 4d e2 73 00 	mov    %rax,0x73e24d(%rip)        # 753940 <edgeId>
   156f3:	58                   	pop    %rax
   156f4:	e8 e7 00 ff ff       	callq  57e0 <_storeEdge>
   156f9:	49 83 c7 01          	add    $0x1,%r15
                    c = arg[++i];
   156fd:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
   15702:	4c 8b 14 24          	mov    (%rsp),%r10
   15706:	e9 2b 05 00 00       	jmpq   15c36 <quotearg_buffer_restyled+0x2e36>
   1570b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   15710:	50                   	push   %rax
   15711:	48 c7 c0 38 f5 90 35 	mov    $0x3590f538,%rax
   15718:	48 89 05 21 e2 73 00 	mov    %rax,0x73e221(%rip)        # 753940 <edgeId>
   1571f:	58                   	pop    %rax
   15720:	e8 bb 00 ff ff       	callq  57e0 <_storeEdge>
                    STORE (c);
   15725:	48 89 15 ec e1 73 00 	mov    %rdx,0x73e1ec(%rip)        # 753918 <tmpquadone>
   1572c:	48 89 0d fd 84 5e 00 	mov    %rcx,0x5e84fd(%rip)        # 5fdc30 <tmpquadtwo>
   15733:	48 8d 15 b6 84 5e 00 	lea    0x5e84b6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1573a:	48 c7 02 1d 0a 00 00 	movq   $0xa1d,(%rdx)
   15741:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15748:	00 
   15749:	4c 89 f9             	mov    %r15,%rcx
   1574c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15750:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15757:	00 
   15758:	4c 89 d9             	mov    %r11,%rcx
   1575b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1575f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15766:	00 
   15767:	ff 32                	pushq  (%rdx)
   15769:	48 8b 15 a8 e1 73 00 	mov    0x73e1a8(%rip),%rdx        # 753918 <tmpquadone>
   15770:	48 8b 0d b9 84 5e 00 	mov    0x5e84b9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15777:	48 c7 05 ce e1 73 00 	movq   $0x1,0x73e1ce(%rip)        # 753950 <cmpPassed>
   1577e:	01 00 00 00 
   15782:	e8 f1 00 ff ff       	callq  5878 <_storeDataFn>
   15787:	4d 39 fb             	cmp    %r15,%r11
   1578a:	76 19                	jbe    157a5 <quotearg_buffer_restyled+0x29a5>
   1578c:	50                   	push   %rax
   1578d:	48 c7 c0 a7 1e b2 06 	mov    $0x6b21ea7,%rax
   15794:	48 89 05 a5 e1 73 00 	mov    %rax,0x73e1a5(%rip)        # 753940 <edgeId>
   1579b:	58                   	pop    %rax
   1579c:	e8 3f 00 ff ff       	callq  57e0 <_storeEdge>
   157a1:	47 88 2c 3a          	mov    %r13b,(%r10,%r15,1)
   157a5:	50                   	push   %rax
   157a6:	48 c7 c0 a9 87 ac 41 	mov    $0x41ac87a9,%rax
   157ad:	48 89 05 8c e1 73 00 	mov    %rax,0x73e18c(%rip)        # 753940 <edgeId>
   157b4:	58                   	pop    %rax
   157b5:	e8 26 00 ff ff       	callq  57e0 <_storeEdge>
   157ba:	4d 8d 6f 01          	lea    0x1(%r15),%r13
                    c = arg[++i];
   157be:	41 0f b6 1c 09       	movzbl (%r9,%rcx,1),%ebx
                    STORE (c);
   157c3:	48 89 15 4e e1 73 00 	mov    %rdx,0x73e14e(%rip)        # 753918 <tmpquadone>
   157ca:	48 89 0d 5f 84 5e 00 	mov    %rcx,0x5e845f(%rip)        # 5fdc30 <tmpquadtwo>
   157d1:	48 8d 15 18 84 5e 00 	lea    0x5e8418(%rip),%rdx        # 5fdbf0 <funcinptr>
   157d8:	48 c7 02 1e 0a 00 00 	movq   $0xa1e,(%rdx)
   157df:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   157e6:	00 
   157e7:	4c 89 e9             	mov    %r13,%rcx
   157ea:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   157ee:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   157f5:	00 
   157f6:	4c 89 d9             	mov    %r11,%rcx
   157f9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   157fd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15804:	00 
   15805:	ff 32                	pushq  (%rdx)
   15807:	48 8b 15 0a e1 73 00 	mov    0x73e10a(%rip),%rdx        # 753918 <tmpquadone>
   1580e:	48 8b 0d 1b 84 5e 00 	mov    0x5e841b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15815:	48 c7 05 30 e1 73 00 	movq   $0x1,0x73e130(%rip)        # 753950 <cmpPassed>
   1581c:	01 00 00 00 
   15820:	e8 53 00 ff ff       	callq  5878 <_storeDataFn>
   15825:	4d 39 eb             	cmp    %r13,%r11
   15828:	76 1a                	jbe    15844 <quotearg_buffer_restyled+0x2a44>
   1582a:	50                   	push   %rax
   1582b:	48 c7 c0 1e b2 06 7d 	mov    $0x7d06b21e,%rax
   15832:	48 89 05 07 e1 73 00 	mov    %rax,0x73e107(%rip)        # 753940 <edgeId>
   15839:	58                   	pop    %rax
   1583a:	e8 a1 ff fe ff       	callq  57e0 <_storeEdge>
   1583f:	43 88 5c 3a 01       	mov    %bl,0x1(%r10,%r15,1)
   15844:	50                   	push   %rax
   15845:	48 b8 87 ac 41 9f 00 	movabs $0x9f41ac87,%rax
   1584c:	00 00 00 
   1584f:	48 89 05 ea e0 73 00 	mov    %rax,0x73e0ea(%rip)        # 753940 <edgeId>
   15856:	58                   	pop    %rax
   15857:	e8 84 ff fe ff       	callq  57e0 <_storeEdge>
   1585c:	4d 8d 7d 01          	lea    0x1(%r13),%r15
                    c = arg[++i];
   15860:	41 0f b6 44 09 01    	movzbl 0x1(%r9,%rcx,1),%eax
                    STORE (c);
   15866:	48 89 15 ab e0 73 00 	mov    %rdx,0x73e0ab(%rip)        # 753918 <tmpquadone>
   1586d:	48 89 0d bc 83 5e 00 	mov    %rcx,0x5e83bc(%rip)        # 5fdc30 <tmpquadtwo>
   15874:	48 8d 15 75 83 5e 00 	lea    0x5e8375(%rip),%rdx        # 5fdbf0 <funcinptr>
   1587b:	48 c7 02 1f 0a 00 00 	movq   $0xa1f,(%rdx)
   15882:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15889:	00 
   1588a:	4c 89 f9             	mov    %r15,%rcx
   1588d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15891:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15898:	00 
   15899:	4c 89 d9             	mov    %r11,%rcx
   1589c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   158a0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   158a7:	00 
   158a8:	ff 32                	pushq  (%rdx)
   158aa:	48 8b 15 67 e0 73 00 	mov    0x73e067(%rip),%rdx        # 753918 <tmpquadone>
   158b1:	48 8b 0d 78 83 5e 00 	mov    0x5e8378(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   158b8:	48 c7 05 8d e0 73 00 	movq   $0x1,0x73e08d(%rip)        # 753950 <cmpPassed>
   158bf:	01 00 00 00 
   158c3:	e8 b0 ff fe ff       	callq  5878 <_storeDataFn>
   158c8:	4d 39 fb             	cmp    %r15,%r11
   158cb:	76 1a                	jbe    158e7 <quotearg_buffer_restyled+0x2ae7>
   158cd:	50                   	push   %rax
   158ce:	48 c7 c0 b2 06 7d 76 	mov    $0x767d06b2,%rax
   158d5:	48 89 05 64 e0 73 00 	mov    %rax,0x73e064(%rip)        # 753940 <edgeId>
   158dc:	58                   	pop    %rax
   158dd:	e8 fe fe fe ff       	callq  57e0 <_storeEdge>
   158e2:	43 88 44 2a 01       	mov    %al,0x1(%r10,%r13,1)
   158e7:	50                   	push   %rax
   158e8:	48 b8 ac 41 9f 9d 00 	movabs $0x9d9f41ac,%rax
   158ef:	00 00 00 
   158f2:	48 89 05 47 e0 73 00 	mov    %rax,0x73e047(%rip)        # 753940 <edgeId>
   158f9:	58                   	pop    %rax
   158fa:	e8 e1 fe fe ff       	callq  57e0 <_storeEdge>
   158ff:	49 8d 75 02          	lea    0x2(%r13),%rsi
                    c = arg[++i];
   15903:	45 0f b6 44 09 02    	movzbl 0x2(%r9,%rcx,1),%r8d
                    STORE (c);
   15909:	48 89 15 08 e0 73 00 	mov    %rdx,0x73e008(%rip)        # 753918 <tmpquadone>
   15910:	48 89 0d 19 83 5e 00 	mov    %rcx,0x5e8319(%rip)        # 5fdc30 <tmpquadtwo>
   15917:	48 8d 15 d2 82 5e 00 	lea    0x5e82d2(%rip),%rdx        # 5fdbf0 <funcinptr>
   1591e:	48 c7 02 20 0a 00 00 	movq   $0xa20,(%rdx)
   15925:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1592c:	00 
   1592d:	48 89 f1             	mov    %rsi,%rcx
   15930:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15934:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1593b:	00 
   1593c:	4c 89 d9             	mov    %r11,%rcx
   1593f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15943:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1594a:	00 
   1594b:	ff 32                	pushq  (%rdx)
   1594d:	48 8b 15 c4 df 73 00 	mov    0x73dfc4(%rip),%rdx        # 753918 <tmpquadone>
   15954:	48 8b 0d d5 82 5e 00 	mov    0x5e82d5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1595b:	48 c7 05 ea df 73 00 	movq   $0x1,0x73dfea(%rip)        # 753950 <cmpPassed>
   15962:	01 00 00 00 
   15966:	e8 0d ff fe ff       	callq  5878 <_storeDataFn>
   1596b:	49 39 f3             	cmp    %rsi,%r11
   1596e:	76 1a                	jbe    1598a <quotearg_buffer_restyled+0x2b8a>
   15970:	50                   	push   %rax
   15971:	48 c7 c0 06 7d 76 7a 	mov    $0x7a767d06,%rax
   15978:	48 89 05 c1 df 73 00 	mov    %rax,0x73dfc1(%rip)        # 753940 <edgeId>
   1597f:	58                   	pop    %rax
   15980:	e8 5b fe fe ff       	callq  57e0 <_storeEdge>
   15985:	47 88 44 2a 02       	mov    %r8b,0x2(%r10,%r13,1)
   1598a:	50                   	push   %rax
   1598b:	48 c7 c0 41 9f 9d 1e 	mov    $0x1e9d9f41,%rax
   15992:	48 89 05 a7 df 73 00 	mov    %rax,0x73dfa7(%rip)        # 753940 <edgeId>
   15999:	58                   	pop    %rax
   1599a:	e8 41 fe fe ff       	callq  57e0 <_storeEdge>
   1599f:	49 8d 7d 03          	lea    0x3(%r13),%rdi
                    c = arg[++i];
   159a3:	45 0f b6 64 09 03    	movzbl 0x3(%r9,%rcx,1),%r12d
                    STORE (c);
   159a9:	48 89 15 68 df 73 00 	mov    %rdx,0x73df68(%rip)        # 753918 <tmpquadone>
   159b0:	48 89 0d 79 82 5e 00 	mov    %rcx,0x5e8279(%rip)        # 5fdc30 <tmpquadtwo>
   159b7:	48 8d 15 32 82 5e 00 	lea    0x5e8232(%rip),%rdx        # 5fdbf0 <funcinptr>
   159be:	48 c7 02 21 0a 00 00 	movq   $0xa21,(%rdx)
   159c5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   159cc:	00 
   159cd:	48 89 f9             	mov    %rdi,%rcx
   159d0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   159d4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   159db:	00 
   159dc:	4c 89 d9             	mov    %r11,%rcx
   159df:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   159e3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   159ea:	00 
   159eb:	ff 32                	pushq  (%rdx)
   159ed:	48 8b 15 24 df 73 00 	mov    0x73df24(%rip),%rdx        # 753918 <tmpquadone>
   159f4:	48 8b 0d 35 82 5e 00 	mov    0x5e8235(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   159fb:	48 c7 05 4a df 73 00 	movq   $0x1,0x73df4a(%rip)        # 753950 <cmpPassed>
   15a02:	01 00 00 00 
   15a06:	e8 6d fe fe ff       	callq  5878 <_storeDataFn>
   15a0b:	49 39 fb             	cmp    %rdi,%r11
   15a0e:	76 1d                	jbe    15a2d <quotearg_buffer_restyled+0x2c2d>
   15a10:	50                   	push   %rax
   15a11:	48 b8 7d 76 7a f4 00 	movabs $0xf47a767d,%rax
   15a18:	00 00 00 
   15a1b:	48 89 05 1e df 73 00 	mov    %rax,0x73df1e(%rip)        # 753940 <edgeId>
   15a22:	58                   	pop    %rax
   15a23:	e8 b8 fd fe ff       	callq  57e0 <_storeEdge>
   15a28:	47 88 64 2a 03       	mov    %r12b,0x3(%r10,%r13,1)
   15a2d:	50                   	push   %rax
   15a2e:	48 c7 c0 9f 9d 1e 7d 	mov    $0x7d1e9d9f,%rax
   15a35:	48 89 05 04 df 73 00 	mov    %rax,0x73df04(%rip)        # 753940 <edgeId>
   15a3c:	58                   	pop    %rax
   15a3d:	e8 9e fd fe ff       	callq  57e0 <_storeEdge>
   15a42:	49 8d 5d 04          	lea    0x4(%r13),%rbx
                    c = arg[++i];
   15a46:	45 0f b6 7c 09 04    	movzbl 0x4(%r9,%rcx,1),%r15d
                    STORE (c);
   15a4c:	48 89 15 c5 de 73 00 	mov    %rdx,0x73dec5(%rip)        # 753918 <tmpquadone>
   15a53:	48 89 0d d6 81 5e 00 	mov    %rcx,0x5e81d6(%rip)        # 5fdc30 <tmpquadtwo>
   15a5a:	48 8d 15 8f 81 5e 00 	lea    0x5e818f(%rip),%rdx        # 5fdbf0 <funcinptr>
   15a61:	48 c7 02 22 0a 00 00 	movq   $0xa22,(%rdx)
   15a68:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15a6f:	00 
   15a70:	48 89 d9             	mov    %rbx,%rcx
   15a73:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15a77:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15a7e:	00 
   15a7f:	4c 89 d9             	mov    %r11,%rcx
   15a82:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15a86:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15a8d:	00 
   15a8e:	ff 32                	pushq  (%rdx)
   15a90:	48 8b 15 81 de 73 00 	mov    0x73de81(%rip),%rdx        # 753918 <tmpquadone>
   15a97:	48 8b 0d 92 81 5e 00 	mov    0x5e8192(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15a9e:	48 c7 05 a7 de 73 00 	movq   $0x1,0x73dea7(%rip)        # 753950 <cmpPassed>
   15aa5:	01 00 00 00 
   15aa9:	e8 ca fd fe ff       	callq  5878 <_storeDataFn>
   15aae:	49 39 db             	cmp    %rbx,%r11
   15ab1:	76 1d                	jbe    15ad0 <quotearg_buffer_restyled+0x2cd0>
   15ab3:	50                   	push   %rax
   15ab4:	48 b8 76 7a f4 dd 00 	movabs $0xddf47a76,%rax
   15abb:	00 00 00 
   15abe:	48 89 05 7b de 73 00 	mov    %rax,0x73de7b(%rip)        # 753940 <edgeId>
   15ac5:	58                   	pop    %rax
   15ac6:	e8 15 fd fe ff       	callq  57e0 <_storeEdge>
   15acb:	47 88 7c 2a 04       	mov    %r15b,0x4(%r10,%r13,1)
   15ad0:	50                   	push   %rax
   15ad1:	48 c7 c0 9d 1e 7d 77 	mov    $0x777d1e9d,%rax
   15ad8:	48 89 05 61 de 73 00 	mov    %rax,0x73de61(%rip)        # 753940 <edgeId>
   15adf:	58                   	pop    %rax
   15ae0:	e8 fb fc fe ff       	callq  57e0 <_storeEdge>
   15ae5:	49 8d 45 05          	lea    0x5(%r13),%rax
                    c = arg[++i];
   15ae9:	41 0f b6 74 09 05    	movzbl 0x5(%r9,%rcx,1),%esi
                    STORE (c);
   15aef:	48 89 15 22 de 73 00 	mov    %rdx,0x73de22(%rip)        # 753918 <tmpquadone>
   15af6:	48 89 0d 33 81 5e 00 	mov    %rcx,0x5e8133(%rip)        # 5fdc30 <tmpquadtwo>
   15afd:	48 8d 15 ec 80 5e 00 	lea    0x5e80ec(%rip),%rdx        # 5fdbf0 <funcinptr>
   15b04:	48 c7 02 23 0a 00 00 	movq   $0xa23,(%rdx)
   15b0b:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15b12:	00 
   15b13:	48 89 c1             	mov    %rax,%rcx
   15b16:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15b1a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15b21:	00 
   15b22:	4c 89 d9             	mov    %r11,%rcx
   15b25:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15b29:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15b30:	00 
   15b31:	ff 32                	pushq  (%rdx)
   15b33:	48 8b 15 de dd 73 00 	mov    0x73ddde(%rip),%rdx        # 753918 <tmpquadone>
   15b3a:	48 8b 0d ef 80 5e 00 	mov    0x5e80ef(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15b41:	48 c7 05 04 de 73 00 	movq   $0x1,0x73de04(%rip)        # 753950 <cmpPassed>
   15b48:	01 00 00 00 
   15b4c:	e8 27 fd fe ff       	callq  5878 <_storeDataFn>
   15b51:	49 39 c3             	cmp    %rax,%r11
   15b54:	76 1a                	jbe    15b70 <quotearg_buffer_restyled+0x2d70>
   15b56:	50                   	push   %rax
   15b57:	48 c7 c0 7a f4 dd 41 	mov    $0x41ddf47a,%rax
   15b5e:	48 89 05 db dd 73 00 	mov    %rax,0x73dddb(%rip)        # 753940 <edgeId>
   15b65:	58                   	pop    %rax
   15b66:	e8 75 fc fe ff       	callq  57e0 <_storeEdge>
   15b6b:	43 88 74 2a 05       	mov    %sil,0x5(%r10,%r13,1)
   15b70:	50                   	push   %rax
   15b71:	48 c7 c0 1e 7d 77 10 	mov    $0x10777d1e,%rax
   15b78:	48 89 05 c1 dd 73 00 	mov    %rax,0x73ddc1(%rip)        # 753940 <edgeId>
   15b7f:	58                   	pop    %rax
   15b80:	e8 5b fc fe ff       	callq  57e0 <_storeEdge>
   15b85:	49 8d 7d 06          	lea    0x6(%r13),%rdi
                    c = arg[++i];
   15b89:	45 0f b6 44 09 06    	movzbl 0x6(%r9,%rcx,1),%r8d
                    if (ilim <= i + 1)
   15b8f:	48 8d 59 07          	lea    0x7(%rcx),%rbx
                    STORE (c);
   15b93:	48 89 15 7e dd 73 00 	mov    %rdx,0x73dd7e(%rip)        # 753918 <tmpquadone>
   15b9a:	48 89 0d 8f 80 5e 00 	mov    %rcx,0x5e808f(%rip)        # 5fdc30 <tmpquadtwo>
   15ba1:	48 8d 15 48 80 5e 00 	lea    0x5e8048(%rip),%rdx        # 5fdbf0 <funcinptr>
   15ba8:	48 c7 02 24 0a 00 00 	movq   $0xa24,(%rdx)
   15baf:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15bb6:	00 
   15bb7:	48 89 f9             	mov    %rdi,%rcx
   15bba:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15bbe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15bc5:	00 
   15bc6:	4c 89 d9             	mov    %r11,%rcx
   15bc9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15bcd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15bd4:	00 
   15bd5:	ff 32                	pushq  (%rdx)
   15bd7:	48 8b 15 3a dd 73 00 	mov    0x73dd3a(%rip),%rdx        # 753918 <tmpquadone>
   15bde:	48 8b 0d 4b 80 5e 00 	mov    0x5e804b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15be5:	48 c7 05 60 dd 73 00 	movq   $0x1,0x73dd60(%rip)        # 753950 <cmpPassed>
   15bec:	01 00 00 00 
   15bf0:	e8 83 fc fe ff       	callq  5878 <_storeDataFn>
   15bf5:	49 39 fb             	cmp    %rdi,%r11
   15bf8:	76 1a                	jbe    15c14 <quotearg_buffer_restyled+0x2e14>
   15bfa:	50                   	push   %rax
   15bfb:	48 c7 c0 df 1d 04 71 	mov    $0x71041ddf,%rax
   15c02:	48 89 05 37 dd 73 00 	mov    %rax,0x73dd37(%rip)        # 753940 <edgeId>
   15c09:	58                   	pop    %rax
   15c0a:	e8 d1 fb fe ff       	callq  57e0 <_storeEdge>
   15c0f:	47 88 44 2a 06       	mov    %r8b,0x6(%r10,%r13,1)
   15c14:	50                   	push   %rax
   15c15:	48 b8 77 07 41 9c 00 	movabs $0x9c410777,%rax
   15c1c:	00 00 00 
   15c1f:	48 89 05 1a dd 73 00 	mov    %rax,0x73dd1a(%rip)        # 753940 <edgeId>
   15c26:	58                   	pop    %rax
   15c27:	e8 b4 fb fe ff       	callq  57e0 <_storeEdge>
   15c2c:	4d 8d 7d 07          	lea    0x7(%r13),%r15
                    c = arg[++i];
   15c30:	45 0f b6 6c 09 07    	movzbl 0x7(%r9,%rcx,1),%r13d
   15c36:	50                   	push   %rax
   15c37:	48 b8 0e 82 38 f5 00 	movabs $0xf538820e,%rax
   15c3e:	00 00 00 
   15c41:	48 89 05 f8 dc 73 00 	mov    %rax,0x73dcf8(%rip)        # 753940 <edgeId>
   15c48:	58                   	pop    %rax
   15c49:	e8 92 fb fe ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   15c4e:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
   15c52:	48 89 1d bf dc 73 00 	mov    %rbx,0x73dcbf(%rip)        # 753918 <tmpquadone>
   15c59:	48 89 05 d0 7f 5e 00 	mov    %rax,0x5e7fd0(%rip)        # 5fdc30 <tmpquadtwo>
   15c60:	48 8d 1d 89 7f 5e 00 	lea    0x5e7f89(%rip),%rbx        # 5fdbf0 <funcinptr>
   15c67:	48 c7 03 25 0a 00 00 	movq   $0xa25,(%rbx)
   15c6e:	48 c7 43 08 71 00 00 	movq   $0x71,0x8(%rbx)
   15c75:	00 
   15c76:	48 89 c8             	mov    %rcx,%rax
   15c79:	48 89 43 10          	mov    %rax,0x10(%rbx)
   15c7d:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
   15c84:	00 
   15c85:	48 89 d0             	mov    %rdx,%rax
   15c88:	48 89 43 20          	mov    %rax,0x20(%rbx)
   15c8c:	48 c7 43 28 02 00 00 	movq   $0x2,0x28(%rbx)
   15c93:	00 
   15c94:	ff 33                	pushq  (%rbx)
   15c96:	48 8b 1d 7b dc 73 00 	mov    0x73dc7b(%rip),%rbx        # 753918 <tmpquadone>
   15c9d:	48 8b 05 8c 7f 5e 00 	mov    0x5e7f8c(%rip),%rax        # 5fdc30 <tmpquadtwo>
   15ca4:	48 c7 05 a1 dc 73 00 	movq   $0x1,0x73dca1(%rip)        # 753950 <cmpPassed>
   15cab:	01 00 00 00 
   15caf:	e8 c4 fb fe ff       	callq  5878 <_storeDataFn>
   15cb4:	48 39 ca             	cmp    %rcx,%rdx
   15cb7:	48 89 cb             	mov    %rcx,%rbx
   15cba:	0f 87 50 fa ff ff    	ja     15710 <quotearg_buffer_restyled+0x2910>
   15cc0:	50                   	push   %rax
   15cc1:	48 c7 c0 08 e2 d4 17 	mov    $0x17d4e208,%rax
   15cc8:	48 89 05 71 dc 73 00 	mov    %rax,0x73dc71(%rip)        # 753940 <edgeId>
   15ccf:	58                   	pop    %rax
   15cd0:	e8 0b fb fe ff       	callq  57e0 <_storeEdge>
   15cd5:	e9 0b e0 ff ff       	jmpq   13ce5 <quotearg_buffer_restyled+0xee5>
   15cda:	50                   	push   %rax
   15cdb:	48 b8 41 9c fa e2 00 	movabs $0xe2fa9c41,%rax
   15ce2:	00 00 00 
   15ce5:	48 89 05 54 dc 73 00 	mov    %rax,0x73dc54(%rip)        # 753940 <edgeId>
   15cec:	58                   	pop    %rax
   15ced:	e8 ee fa fe ff       	callq  57e0 <_storeEdge>
        if (quoting_style != custom_quoting_style)
   15cf2:	48 89 15 1f dc 73 00 	mov    %rdx,0x73dc1f(%rip)        # 753918 <tmpquadone>
   15cf9:	48 89 0d 30 7f 5e 00 	mov    %rcx,0x5e7f30(%rip)        # 5fdc30 <tmpquadtwo>
   15d00:	48 8d 15 e9 7e 5e 00 	lea    0x5e7ee9(%rip),%rdx        # 5fdbf0 <funcinptr>
   15d07:	48 c7 02 26 0a 00 00 	movq   $0xa26,(%rdx)
   15d0e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   15d15:	00 
   15d16:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   15d1d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15d21:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15d28:	00 
   15d29:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   15d2e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15d32:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15d39:	00 
   15d3a:	ff 32                	pushq  (%rdx)
   15d3c:	48 8b 15 d5 db 73 00 	mov    0x73dbd5(%rip),%rdx        # 753918 <tmpquadone>
   15d43:	48 8b 0d e6 7e 5e 00 	mov    0x5e7ee6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15d4a:	48 c7 05 fb db 73 00 	movq   $0x1,0x73dbfb(%rip)        # 753950 <cmpPassed>
   15d51:	01 00 00 00 
   15d55:	e8 1e fb fe ff       	callq  5878 <_storeDataFn>
   15d5a:	83 7c 24 38 08       	cmpl   $0x8,0x38(%rsp)
   15d5f:	0f 84 77 01 00 00    	je     15edc <quotearg_buffer_restyled+0x30dc>
   15d65:	50                   	push   %rax
   15d66:	48 b8 71 ea 8b c3 00 	movabs $0xc38bea71,%rax
   15d6d:	00 00 00 
   15d70:	48 89 05 c9 db 73 00 	mov    %rax,0x73dbc9(%rip)        # 753940 <edgeId>
   15d77:	58                   	pop    %rax
   15d78:	e8 63 fa fe ff       	callq  57e0 <_storeEdge>
  char const *translation = _(msgid);
   15d7d:	48 8d 35 7b 3d 01 00 	lea    0x13d7b(%rip),%rsi        # 29aff <b64c+0x9f>
   15d84:	31 ff                	xor    %edi,%edi
   15d86:	ba 05 00 00 00       	mov    $0x5,%edx
   15d8b:	e8 90 bb fe ff       	callq  1920 <dcgettext@plt>
  if (translation != msgid)
   15d90:	48 8d 35 68 3d 01 00 	lea    0x13d68(%rip),%rsi        # 29aff <b64c+0x9f>
  char const *translation = _(msgid);
   15d97:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  if (translation != msgid)
   15d9c:	48 89 15 75 db 73 00 	mov    %rdx,0x73db75(%rip)        # 753918 <tmpquadone>
   15da3:	48 89 0d 86 7e 5e 00 	mov    %rcx,0x5e7e86(%rip)        # 5fdc30 <tmpquadtwo>
   15daa:	48 8d 15 3f 7e 5e 00 	lea    0x5e7e3f(%rip),%rdx        # 5fdbf0 <funcinptr>
   15db1:	48 c7 02 27 0a 00 00 	movq   $0xa27,(%rdx)
   15db8:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15dbf:	00 
   15dc0:	48 89 f1             	mov    %rsi,%rcx
   15dc3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15dc7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15dce:	00 
   15dcf:	48 89 c1             	mov    %rax,%rcx
   15dd2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15dd6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15ddd:	00 
   15dde:	ff 32                	pushq  (%rdx)
   15de0:	48 8b 15 31 db 73 00 	mov    0x73db31(%rip),%rdx        # 753918 <tmpquadone>
   15de7:	48 8b 0d 42 7e 5e 00 	mov    0x5e7e42(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15dee:	48 c7 05 57 db 73 00 	movq   $0x1,0x73db57(%rip)        # 753950 <cmpPassed>
   15df5:	01 00 00 00 
   15df9:	e8 7a fa fe ff       	callq  5878 <_storeDataFn>
   15dfe:	48 39 f0             	cmp    %rsi,%rax
   15e01:	0f 84 90 49 00 00    	je     1a797 <quotearg_buffer_restyled+0x7997>
   15e07:	50                   	push   %rax
   15e08:	48 b8 c5 61 62 89 00 	movabs $0x896261c5,%rax
   15e0f:	00 00 00 
   15e12:	48 89 05 27 db 73 00 	mov    %rax,0x73db27(%rip)        # 753940 <edgeId>
   15e19:	58                   	pop    %rax
   15e1a:	e8 c1 f9 fe ff       	callq  57e0 <_storeEdge>
   15e1f:	50                   	push   %rax
   15e20:	48 b8 71 98 58 a2 00 	movabs $0xa2589871,%rax
   15e27:	00 00 00 
   15e2a:	48 89 05 0f db 73 00 	mov    %rax,0x73db0f(%rip)        # 753940 <edgeId>
   15e31:	58                   	pop    %rax
   15e32:	e8 a9 f9 fe ff       	callq  57e0 <_storeEdge>
  char const *translation = _(msgid);
   15e37:	48 8d 35 bf 3c 01 00 	lea    0x13cbf(%rip),%rsi        # 29afd <b64c+0x9d>
   15e3e:	31 ff                	xor    %edi,%edi
   15e40:	ba 05 00 00 00       	mov    $0x5,%edx
   15e45:	e8 d6 ba fe ff       	callq  1920 <dcgettext@plt>
  if (translation != msgid)
   15e4a:	4c 8d 05 ac 3c 01 00 	lea    0x13cac(%rip),%r8        # 29afd <b64c+0x9d>
  char const *translation = _(msgid);
   15e51:	48 89 c7             	mov    %rax,%rdi
   15e54:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  if (translation != msgid)
   15e59:	48 89 15 b8 da 73 00 	mov    %rdx,0x73dab8(%rip)        # 753918 <tmpquadone>
   15e60:	48 89 0d c9 7d 5e 00 	mov    %rcx,0x5e7dc9(%rip)        # 5fdc30 <tmpquadtwo>
   15e67:	48 8d 15 82 7d 5e 00 	lea    0x5e7d82(%rip),%rdx        # 5fdbf0 <funcinptr>
   15e6e:	48 c7 02 28 0a 00 00 	movq   $0xa28,(%rdx)
   15e75:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15e7c:	00 
   15e7d:	4c 89 c1             	mov    %r8,%rcx
   15e80:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15e84:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15e8b:	00 
   15e8c:	48 89 c1             	mov    %rax,%rcx
   15e8f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15e93:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15e9a:	00 
   15e9b:	ff 32                	pushq  (%rdx)
   15e9d:	48 8b 15 74 da 73 00 	mov    0x73da74(%rip),%rdx        # 753918 <tmpquadone>
   15ea4:	48 8b 0d 85 7d 5e 00 	mov    0x5e7d85(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15eab:	48 c7 05 9a da 73 00 	movq   $0x1,0x73da9a(%rip)        # 753950 <cmpPassed>
   15eb2:	01 00 00 00 
   15eb6:	e8 bd f9 fe ff       	callq  5878 <_storeDataFn>
   15ebb:	4c 39 c0             	cmp    %r8,%rax
   15ebe:	0f 84 a8 48 00 00    	je     1a76c <quotearg_buffer_restyled+0x796c>
   15ec4:	50                   	push   %rax
   15ec5:	48 b8 4b 94 51 ee 00 	movabs $0xee51944b,%rax
   15ecc:	00 00 00 
   15ecf:	48 89 05 6a da 73 00 	mov    %rax,0x73da6a(%rip)        # 753940 <edgeId>
   15ed6:	58                   	pop    %rax
   15ed7:	e8 04 f9 fe ff       	callq  57e0 <_storeEdge>
   15edc:	50                   	push   %rax
   15edd:	48 c7 c0 12 65 94 3b 	mov    $0x3b946512,%rax
   15ee4:	48 89 05 55 da 73 00 	mov    %rax,0x73da55(%rip)        # 753940 <edgeId>
   15eeb:	58                   	pop    %rax
   15eec:	e8 ef f8 fe ff       	callq  57e0 <_storeEdge>
  size_t len = 0;
   15ef1:	45 31 ff             	xor    %r15d,%r15d
        if (!elide_outer_quotes)
   15ef4:	85 db                	test   %ebx,%ebx
   15ef6:	0f 85 2a 01 00 00    	jne    16026 <quotearg_buffer_restyled+0x3226>
   15efc:	50                   	push   %rax
   15efd:	48 b8 ca 28 77 9e 00 	movabs $0x9e7728ca,%rax
   15f04:	00 00 00 
   15f07:	48 89 05 32 da 73 00 	mov    %rax,0x73da32(%rip)        # 753940 <edgeId>
   15f0e:	58                   	pop    %rax
   15f0f:	e8 cc f8 fe ff       	callq  57e0 <_storeEdge>
          for (quote_string = left_quote; *quote_string; quote_string++)
   15f14:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   15f19:	45 0f b6 31          	movzbl (%r9),%r14d
   15f1d:	45 84 f6             	test   %r14b,%r14b
   15f20:	0f 84 00 01 00 00    	je     16026 <quotearg_buffer_restyled+0x3226>
   15f26:	50                   	push   %rax
   15f27:	48 c7 c0 51 ee 3c 4b 	mov    $0x4b3cee51,%rax
   15f2e:	48 89 05 0b da 73 00 	mov    %rax,0x73da0b(%rip)        # 753940 <edgeId>
   15f35:	58                   	pop    %rax
   15f36:	e8 a5 f8 fe ff       	callq  57e0 <_storeEdge>
   15f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   15f40:	50                   	push   %rax
   15f41:	48 b8 e5 ce b3 84 00 	movabs $0x84b3cee5,%rax
   15f48:	00 00 00 
   15f4b:	48 89 05 ee d9 73 00 	mov    %rax,0x73d9ee(%rip)        # 753940 <edgeId>
   15f52:	58                   	pop    %rax
   15f53:	e8 88 f8 fe ff       	callq  57e0 <_storeEdge>
            STORE (*quote_string);
   15f58:	48 89 15 b9 d9 73 00 	mov    %rdx,0x73d9b9(%rip)        # 753918 <tmpquadone>
   15f5f:	48 89 0d ca 7c 5e 00 	mov    %rcx,0x5e7cca(%rip)        # 5fdc30 <tmpquadtwo>
   15f66:	48 8d 15 83 7c 5e 00 	lea    0x5e7c83(%rip),%rdx        # 5fdbf0 <funcinptr>
   15f6d:	48 c7 02 29 0a 00 00 	movq   $0xa29,(%rdx)
   15f74:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   15f7b:	00 
   15f7c:	4c 89 f9             	mov    %r15,%rcx
   15f7f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   15f83:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   15f8a:	00 
   15f8b:	4c 89 e9             	mov    %r13,%rcx
   15f8e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   15f92:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   15f99:	00 
   15f9a:	ff 32                	pushq  (%rdx)
   15f9c:	48 8b 15 75 d9 73 00 	mov    0x73d975(%rip),%rdx        # 753918 <tmpquadone>
   15fa3:	48 8b 0d 86 7c 5e 00 	mov    0x5e7c86(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   15faa:	48 c7 05 9b d9 73 00 	movq   $0x1,0x73d99b(%rip)        # 753950 <cmpPassed>
   15fb1:	01 00 00 00 
   15fb5:	e8 be f8 fe ff       	callq  5878 <_storeDataFn>
   15fba:	4d 39 fd             	cmp    %r15,%r13
   15fbd:	76 20                	jbe    15fdf <quotearg_buffer_restyled+0x31df>
   15fbf:	50                   	push   %rax
   15fc0:	48 b8 dc 79 96 f0 00 	movabs $0xf09679dc,%rax
   15fc7:	00 00 00 
   15fca:	48 89 05 6f d9 73 00 	mov    %rax,0x73d96f(%rip)        # 753940 <edgeId>
   15fd1:	58                   	pop    %rax
   15fd2:	e8 09 f8 fe ff       	callq  57e0 <_storeEdge>
   15fd7:	4c 8b 14 24          	mov    (%rsp),%r10
   15fdb:	47 88 34 3a          	mov    %r14b,(%r10,%r15,1)
   15fdf:	50                   	push   %rax
   15fe0:	48 b8 ce b3 84 af 00 	movabs $0xaf84b3ce,%rax
   15fe7:	00 00 00 
   15fea:	48 89 05 4f d9 73 00 	mov    %rax,0x73d94f(%rip)        # 753940 <edgeId>
   15ff1:	58                   	pop    %rax
   15ff2:	e8 e9 f7 fe ff       	callq  57e0 <_storeEdge>
          for (quote_string = left_quote; *quote_string; quote_string++)
   15ff7:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
            STORE (*quote_string);
   15ffc:	49 83 c7 01          	add    $0x1,%r15
          for (quote_string = left_quote; *quote_string; quote_string++)
   16000:	47 0f b6 34 3b       	movzbl (%r11,%r15,1),%r14d
   16005:	45 84 f6             	test   %r14b,%r14b
   16008:	0f 85 32 ff ff ff    	jne    15f40 <quotearg_buffer_restyled+0x3140>
   1600e:	50                   	push   %rax
   1600f:	48 b8 59 c2 d7 a2 00 	movabs $0xa2d7c259,%rax
   16016:	00 00 00 
   16019:	48 89 05 20 d9 73 00 	mov    %rax,0x73d920(%rip)        # 753940 <edgeId>
   16020:	58                   	pop    %rax
   16021:	e8 ba f7 fe ff       	callq  57e0 <_storeEdge>
   16026:	50                   	push   %rax
   16027:	48 c7 c0 96 f0 b5 68 	mov    $0x68b5f096,%rax
   1602e:	48 89 05 0b d9 73 00 	mov    %rax,0x73d90b(%rip)        # 753940 <edgeId>
   16035:	58                   	pop    %rax
   16036:	e8 a5 f7 fe ff       	callq  57e0 <_storeEdge>
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
   1603b:	85 db                	test   %ebx,%ebx
        quote_string_len = strlen (quote_string);
   1603d:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
   16042:	0f 95 44 24 7d       	setne  0x7d(%rsp)
   16047:	0f b6 5c 24 7d       	movzbl 0x7d(%rsp),%ebx
        quote_string_len = strlen (quote_string);
   1604c:	4c 89 f7             	mov    %r14,%rdi
   1604f:	e8 ec b8 fe ff       	callq  1940 <strlen@plt>
   16054:	48 85 c0             	test   %rax,%rax
   16057:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      break;
   1605c:	88 5c 24 6b          	mov    %bl,0x6b(%rsp)
   16060:	0f 95 44 24 7c       	setne  0x7c(%rsp)
   16065:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
   1606a:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   1606f:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
        backslash_escapes = true;
   16074:	c6 44 24 69 01       	movb   $0x1,0x69(%rsp)
      break;
   16079:	e9 e2 ce ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   1607e:	50                   	push   %rax
   1607f:	48 c7 c0 4d a0 f5 2d 	mov    $0x2df5a04d,%rax
   16086:	48 89 05 b3 d8 73 00 	mov    %rax,0x73d8b3(%rip)        # 753940 <edgeId>
   1608d:	58                   	pop    %rax
   1608e:	e8 4d f7 fe ff       	callq  57e0 <_storeEdge>
  switch (quoting_style)
   16093:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   16098:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
  size_t len = 0;
   1609d:	45 31 ff             	xor    %r15d,%r15d
  switch (quoting_style)
   160a0:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   160a5:	c6 44 24 7c 00       	movb   $0x0,0x7c(%rsp)
      elide_outer_quotes = false;
   160aa:	c6 44 24 7d 00       	movb   $0x0,0x7d(%rsp)
  bool backslash_escapes = false;
   160af:	c6 44 24 69 00       	movb   $0x0,0x69(%rsp)
  size_t quote_string_len = 0;
   160b4:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
   160bb:	00 00 
  char const *quote_string = 0;
   160bd:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
   160c4:	00 00 
   160c6:	e9 95 ce ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   160cb:	50                   	push   %rax
   160cc:	48 c7 c0 7d 8b d2 38 	mov    $0x38d28b7d,%rax
   160d3:	48 89 05 66 d8 73 00 	mov    %rax,0x73d866(%rip)        # 753940 <edgeId>
   160da:	58                   	pop    %rax
   160db:	e8 00 f7 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "'";
   160e0:	48 8d 15 16 3a 01 00 	lea    0x13a16(%rip),%rdx        # 29afd <b64c+0x9d>
  switch (quoting_style)
   160e7:	c6 44 24 6a 01       	movb   $0x1,0x6a(%rsp)
   160ec:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   160f1:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   160f6:	c6 44 24 7c 00       	movb   $0x0,0x7c(%rsp)
  size_t len = 0;
   160fb:	45 31 ff             	xor    %r15d,%r15d
      elide_outer_quotes = true;
   160fe:	c6 44 24 7d 01       	movb   $0x1,0x7d(%rsp)
  bool backslash_escapes = false;
   16103:	c6 44 24 69 00       	movb   $0x0,0x69(%rsp)
      quote_string_len = 1;
   16108:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   1610f:	00 00 
      quote_string = "'";
   16111:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
      quoting_style = shell_always_quoting_style;
   16116:	c7 44 24 38 02 00 00 	movl   $0x2,0x38(%rsp)
   1611d:	00 
   1611e:	e9 3d ce ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   16123:	50                   	push   %rax
   16124:	48 c7 c0 c6 79 2e 45 	mov    $0x452e79c6,%rax
   1612b:	48 89 05 0e d8 73 00 	mov    %rax,0x73d80e(%rip)        # 753940 <edgeId>
   16132:	58                   	pop    %rax
   16133:	e8 a8 f6 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "\"";
   16138:	4c 8d 0d bc 39 01 00 	lea    0x139bc(%rip),%r9        # 29afb <b64c+0x9b>
  switch (quoting_style)
   1613f:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   16144:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   16149:	c6 44 24 6b 01       	movb   $0x1,0x6b(%rsp)
   1614e:	c6 44 24 7c 01       	movb   $0x1,0x7c(%rsp)
  size_t len = 0;
   16153:	45 31 ff             	xor    %r15d,%r15d
      elide_outer_quotes = true;
   16156:	c6 44 24 7d 01       	movb   $0x1,0x7d(%rsp)
      backslash_escapes = true;
   1615b:	c6 44 24 69 01       	movb   $0x1,0x69(%rsp)
      quote_string_len = 1;
   16160:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   16167:	00 00 
      quote_string = "\"";
   16169:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
      quoting_style = c_quoting_style;
   1616e:	c7 44 24 38 03 00 00 	movl   $0x3,0x38(%rsp)
   16175:	00 
   16176:	e9 e5 cd ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   1617b:	50                   	push   %rax
   1617c:	48 b8 29 fa 2b a1 00 	movabs $0xa12bfa29,%rax
   16183:	00 00 00 
   16186:	48 89 05 b3 d7 73 00 	mov    %rax,0x73d7b3(%rip)        # 753940 <edgeId>
   1618d:	58                   	pop    %rax
   1618e:	e8 4d f6 fe ff       	callq  57e0 <_storeEdge>
      if (!elide_outer_quotes)
   16193:	85 db                	test   %ebx,%ebx
   16195:	0f 85 81 45 00 00    	jne    1a71c <quotearg_buffer_restyled+0x791c>
   1619b:	50                   	push   %rax
   1619c:	48 b8 a2 bf 12 9a 00 	movabs $0x9a12bfa2,%rax
   161a3:	00 00 00 
   161a6:	48 89 05 93 d7 73 00 	mov    %rax,0x73d793(%rip)        # 753940 <edgeId>
   161ad:	58                   	pop    %rax
   161ae:	e8 2d f6 fe ff       	callq  57e0 <_storeEdge>
        STORE ('\'');
   161b3:	4d 85 ed             	test   %r13,%r13
   161b6:	74 1c                	je     161d4 <quotearg_buffer_restyled+0x33d4>
   161b8:	50                   	push   %rax
   161b9:	48 c7 c0 f4 57 42 13 	mov    $0x134257f4,%rax
   161c0:	48 89 05 79 d7 73 00 	mov    %rax,0x73d779(%rip)        # 753940 <edgeId>
   161c7:	58                   	pop    %rax
   161c8:	e8 13 f6 fe ff       	callq  57e0 <_storeEdge>
   161cd:	48 8b 1c 24          	mov    (%rsp),%rbx
   161d1:	c6 03 27             	movb   $0x27,(%rbx)
   161d4:	50                   	push   %rax
   161d5:	48 b8 bf 12 9a 98 00 	movabs $0x989a12bf,%rax
   161dc:	00 00 00 
   161df:	48 89 05 5a d7 73 00 	mov    %rax,0x73d75a(%rip)        # 753940 <edgeId>
   161e6:	58                   	pop    %rax
   161e7:	e8 f4 f5 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "'";
   161ec:	48 8d 05 0a 39 01 00 	lea    0x1390a(%rip),%rax        # 29afd <b64c+0x9d>
   161f3:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   161f8:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
   161fd:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   16202:	c6 44 24 7c 00       	movb   $0x0,0x7c(%rsp)
        STORE ('\'');
   16207:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   1620d:	c6 44 24 7d 00       	movb   $0x0,0x7d(%rsp)
  bool backslash_escapes = false;
   16212:	c6 44 24 69 00       	movb   $0x0,0x69(%rsp)
      quote_string_len = 1;
   16217:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   1621e:	00 00 
      quote_string = "'";
   16220:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   16225:	e9 36 cd ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   1622a:	50                   	push   %rax
   1622b:	48 b8 13 b3 21 82 00 	movabs $0x8221b313,%rax
   16232:	00 00 00 
   16235:	48 89 05 04 d7 73 00 	mov    %rax,0x73d704(%rip)        # 753940 <edgeId>
   1623c:	58                   	pop    %rax
   1623d:	e8 9e f5 fe ff       	callq  57e0 <_storeEdge>
      if (!elide_outer_quotes)
   16242:	85 db                	test   %ebx,%ebx
   16244:	0f 85 7f 44 00 00    	jne    1a6c9 <quotearg_buffer_restyled+0x78c9>
   1624a:	50                   	push   %rax
   1624b:	48 b8 62 36 44 d0 00 	movabs $0xd0443662,%rax
   16252:	00 00 00 
   16255:	48 89 05 e4 d6 73 00 	mov    %rax,0x73d6e4(%rip)        # 753940 <edgeId>
   1625c:	58                   	pop    %rax
   1625d:	e8 7e f5 fe ff       	callq  57e0 <_storeEdge>
        STORE ('"');
   16262:	4d 85 ed             	test   %r13,%r13
   16265:	74 1d                	je     16284 <quotearg_buffer_restyled+0x3484>
   16267:	50                   	push   %rax
   16268:	48 c7 c0 cc 86 08 7a 	mov    $0x7a0886cc,%rax
   1626f:	48 89 05 ca d6 73 00 	mov    %rax,0x73d6ca(%rip)        # 753940 <edgeId>
   16276:	58                   	pop    %rax
   16277:	e8 64 f5 fe ff       	callq  57e0 <_storeEdge>
   1627c:	4c 8b 1c 24          	mov    (%rsp),%r11
   16280:	41 c6 03 22          	movb   $0x22,(%r11)
   16284:	50                   	push   %rax
   16285:	48 b8 6c 88 a0 87 00 	movabs $0x87a0886c,%rax
   1628c:	00 00 00 
   1628f:	48 89 05 aa d6 73 00 	mov    %rax,0x73d6aa(%rip)        # 753940 <edgeId>
   16296:	58                   	pop    %rax
   16297:	e8 44 f5 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "\"";
   1629c:	4c 8d 3d 58 38 01 00 	lea    0x13858(%rip),%r15        # 29afb <b64c+0x9b>
   162a3:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   162a8:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   162ad:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   162b2:	c6 44 24 7c 01       	movb   $0x1,0x7c(%rsp)
   162b7:	4c 89 7c 24 30       	mov    %r15,0x30(%rsp)
   162bc:	c6 44 24 7d 00       	movb   $0x0,0x7d(%rsp)
        STORE ('"');
   162c1:	41 bf 01 00 00 00    	mov    $0x1,%r15d
      backslash_escapes = true;
   162c7:	c6 44 24 69 01       	movb   $0x1,0x69(%rsp)
      quote_string_len = 1;
   162cc:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   162d3:	00 00 
   162d5:	e9 86 cc ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   162da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   162e0:	50                   	push   %rax
   162e1:	48 c7 c0 f4 30 73 32 	mov    $0x327330f4,%rax
   162e8:	48 89 05 51 d6 73 00 	mov    %rax,0x73d651(%rip)        # 753940 <edgeId>
   162ef:	58                   	pop    %rax
   162f0:	e8 eb f4 fe ff       	callq  57e0 <_storeEdge>
      bool is_right_quote = false;
   162f5:	45 31 d2             	xor    %r10d,%r10d
   162f8:	e9 8b d1 ff ff       	jmpq   13488 <quotearg_buffer_restyled+0x688>
   162fd:	0f 1f 00             	nopl   (%rax)
   16300:	50                   	push   %rax
   16301:	48 b8 30 73 32 91 00 	movabs $0x91327330,%rax
   16308:	00 00 00 
   1630b:	48 89 05 2e d6 73 00 	mov    %rax,0x73d62e(%rip)        # 753940 <edgeId>
   16312:	58                   	pop    %rax
   16313:	e8 c8 f4 fe ff       	callq  57e0 <_storeEdge>
              if (elide_outer_quotes)
   16318:	48 89 15 f9 d5 73 00 	mov    %rdx,0x73d5f9(%rip)        # 753918 <tmpquadone>
   1631f:	48 89 0d 0a 79 5e 00 	mov    %rcx,0x5e790a(%rip)        # 5fdc30 <tmpquadtwo>
   16326:	48 8d 15 c3 78 5e 00 	lea    0x5e78c3(%rip),%rdx        # 5fdbf0 <funcinptr>
   1632d:	48 c7 02 2a 0a 00 00 	movq   $0xa2a,(%rdx)
   16334:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1633b:	00 
   1633c:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   16343:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16347:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1634e:	00 
   1634f:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   16354:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16358:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1635f:	00 
   16360:	ff 32                	pushq  (%rdx)
   16362:	48 8b 15 af d5 73 00 	mov    0x73d5af(%rip),%rdx        # 753918 <tmpquadone>
   16369:	48 8b 0d c0 78 5e 00 	mov    0x5e78c0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16370:	48 c7 05 d5 d5 73 00 	movq   $0x1,0x73d5d5(%rip)        # 753950 <cmpPassed>
   16377:	01 00 00 00 
   1637b:	e8 f8 f4 fe ff       	callq  5878 <_storeDataFn>
   16380:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   16385:	0f 85 95 dc ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   1638b:	50                   	push   %rax
   1638c:	48 c7 c0 66 4e 26 72 	mov    $0x72264e66,%rax
   16393:	48 89 05 a6 d5 73 00 	mov    %rax,0x73d5a6(%rip)        # 753940 <edgeId>
   1639a:	58                   	pop    %rax
   1639b:	e8 40 f4 fe ff       	callq  57e0 <_storeEdge>
   163a0:	50                   	push   %rax
   163a1:	48 b8 33 27 13 b9 00 	movabs $0xb9132733,%rax
   163a8:	00 00 00 
   163ab:	48 89 05 8e d5 73 00 	mov    %rax,0x73d58e(%rip)        # 753940 <edgeId>
   163b2:	58                   	pop    %rax
   163b3:	e8 28 f4 fe ff       	callq  57e0 <_storeEdge>
                switch (arg[i + 2])
   163b8:	41 bd 3f 00 00 00    	mov    $0x3f,%r13d
   163be:	e9 ad d7 ff ff       	jmpq   13b70 <quotearg_buffer_restyled+0xd70>
   163c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   163c8:	50                   	push   %rax
   163c9:	48 b8 27 13 b9 d3 00 	movabs $0xd3b91327,%rax
   163d0:	00 00 00 
   163d3:	48 89 05 66 d5 73 00 	mov    %rax,0x73d566(%rip)        # 753940 <edgeId>
   163da:	58                   	pop    %rax
   163db:	e8 00 f4 fe ff       	callq  57e0 <_storeEdge>
        c_and_shell_escape:
   163e0:	41 bc 5c 00 00 00    	mov    $0x5c,%r12d
   163e6:	e9 20 dd ff ff       	jmpq   1410b <quotearg_buffer_restyled+0x130b>
   163eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   163f0:	50                   	push   %rax
   163f1:	48 b8 26 72 a7 c3 00 	movabs $0xc3a77226,%rax
   163f8:	00 00 00 
   163fb:	48 89 05 3e d5 73 00 	mov    %rax,0x73d53e(%rip)        # 753940 <edgeId>
   16402:	58                   	pop    %rax
   16403:	e8 d8 f3 fe ff       	callq  57e0 <_storeEdge>
          else if (flags & QA_ELIDE_NULL_BYTES)
   16408:	8b 7c 24 6c          	mov    0x6c(%rsp),%edi
   1640c:	45 31 ed             	xor    %r13d,%r13d
   1640f:	85 ff                	test   %edi,%edi
   16411:	0f 84 59 d7 ff ff    	je     13b70 <quotearg_buffer_restyled+0xd70>
   16417:	50                   	push   %rax
   16418:	48 b8 91 3b 1d de 00 	movabs $0xde1d3b91,%rax
   1641f:	00 00 00 
   16422:	48 89 05 17 d5 73 00 	mov    %rax,0x73d517(%rip)        # 753940 <edgeId>
   16429:	58                   	pop    %rax
   1642a:	e8 b1 f3 fe ff       	callq  57e0 <_storeEdge>
   1642f:	48 83 c3 01          	add    $0x1,%rbx
   16433:	e9 68 cb ff ff       	jmpq   12fa0 <quotearg_buffer_restyled+0x1a0>
   16438:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1643f:	00 
   16440:	50                   	push   %rax
   16441:	48 b8 3b 1d de 8c 00 	movabs $0x8cde1d3b,%rax
   16448:	00 00 00 
   1644b:	48 89 05 ee d4 73 00 	mov    %rax,0x73d4ee(%rip)        # 753940 <edgeId>
   16452:	58                   	pop    %rax
   16453:	e8 88 f3 fe ff       	callq  57e0 <_storeEdge>
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
   16458:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
   1645f:	00 
                if (argsize == SIZE_MAX)
   16460:	48 89 15 b1 d4 73 00 	mov    %rdx,0x73d4b1(%rip)        # 753918 <tmpquadone>
   16467:	48 89 0d c2 77 5e 00 	mov    %rcx,0x5e77c2(%rip)        # 5fdc30 <tmpquadtwo>
   1646e:	48 8d 15 7b 77 5e 00 	lea    0x5e777b(%rip),%rdx        # 5fdbf0 <funcinptr>
   16475:	48 c7 02 2b 0a 00 00 	movq   $0xa2b,(%rdx)
   1647c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16483:	00 
   16484:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1648b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1648f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16496:	00 
   16497:	48 89 e9             	mov    %rbp,%rcx
   1649a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1649e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   164a5:	00 
   164a6:	ff 32                	pushq  (%rdx)
   164a8:	48 8b 15 69 d4 73 00 	mov    0x73d469(%rip),%rdx        # 753918 <tmpquadone>
   164af:	48 8b 0d 7a 77 5e 00 	mov    0x5e777a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   164b6:	48 c7 05 8f d4 73 00 	movq   $0x1,0x73d48f(%rip)        # 753950 <cmpPassed>
   164bd:	01 00 00 00 
   164c1:	e8 b2 f3 fe ff       	callq  5878 <_storeDataFn>
   164c6:	48 83 fd ff          	cmp    $0xffffffffffffffff,%rbp
   164ca:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   164d1:	00 00 00 00 00 
   164d6:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
   164db:	75 49                	jne    16526 <quotearg_buffer_restyled+0x3726>
   164dd:	50                   	push   %rax
   164de:	48 c7 c0 33 ca a8 5d 	mov    $0x5da8ca33,%rax
   164e5:	48 89 05 54 d4 73 00 	mov    %rax,0x73d454(%rip)        # 753940 <edgeId>
   164ec:	58                   	pop    %rax
   164ed:	e8 ee f2 fe ff       	callq  57e0 <_storeEdge>
                  argsize = strlen (arg);
   164f2:	4c 89 cf             	mov    %r9,%rdi
   164f5:	4c 89 5c 24 60       	mov    %r11,0x60(%rsp)
   164fa:	4c 89 44 24 58       	mov    %r8,0x58(%rsp)
   164ff:	44 88 54 24 20       	mov    %r10b,0x20(%rsp)
   16504:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
   16509:	e8 32 b4 fe ff       	callq  1940 <strlen@plt>
   1650e:	44 0f b6 54 24 20    	movzbl 0x20(%rsp),%r10d
   16514:	4c 8b 5c 24 60       	mov    0x60(%rsp),%r11
   16519:	48 89 c5             	mov    %rax,%rbp
   1651c:	4c 8b 44 24 58       	mov    0x58(%rsp),%r8
   16521:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   16526:	50                   	push   %rax
   16527:	48 b8 a8 5d 1c 97 00 	movabs $0x971c5da8,%rax
   1652e:	00 00 00 
   16531:	48 89 05 08 d4 73 00 	mov    %rax,0x73d408(%rip)        # 753940 <edgeId>
   16538:	58                   	pop    %rax
   16539:	e8 a2 f2 fe ff       	callq  57e0 <_storeEdge>
   1653e:	48 8d 8c 24 9c 00 00 	lea    0x9c(%rsp),%rcx
   16545:	00 
        case '\v': esc = 'v'; goto c_escape;
   16546:	31 f6                	xor    %esi,%esi
   16548:	4c 89 bc 24 80 00 00 	mov    %r15,0x80(%rsp)
   1654f:	00 
   16550:	48 89 6c 24 20       	mov    %rbp,0x20(%rsp)
   16555:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
   1655a:	4d 89 cf             	mov    %r9,%r15
   1655d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
   16562:	44 88 6c 24 7e       	mov    %r13b,0x7e(%rsp)
   16567:	48 89 f5             	mov    %rsi,%rbp
   1656a:	44 88 54 24 7f       	mov    %r10b,0x7f(%rsp)
   1656f:	4c 89 84 24 88 00 00 	mov    %r8,0x88(%rsp)
   16576:	00 
   16577:	4c 89 5c 24 70       	mov    %r11,0x70(%rsp)
   1657c:	50                   	push   %rax
   1657d:	48 b8 8e 4b 0f ac 00 	movabs $0xac0f4b8e,%rax
   16584:	00 00 00 
   16587:	48 89 05 b2 d3 73 00 	mov    %rax,0x73d3b2(%rip)        # 753940 <edgeId>
   1658e:	58                   	pop    %rax
   1658f:	e8 4c f2 fe ff       	callq  57e0 <_storeEdge>
                                            argsize - (i + m), &mbstate);
   16594:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
                    size_t bytes = mbrtowc (&w, &arg[i + m],
   16599:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   1659e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   165a3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
                                            argsize - (i + m), &mbstate);
   165a8:	49 8d 1c 29          	lea    (%r9,%rbp,1),%rbx
                    size_t bytes = mbrtowc (&w, &arg[i + m],
   165ac:	4d 8d 2c 1f          	lea    (%r15,%rbx,1),%r13
   165b0:	48 29 da             	sub    %rbx,%rdx
   165b3:	4c 89 ee             	mov    %r13,%rsi
   165b6:	e8 b5 b3 fe ff       	callq  1970 <mbrtowc@plt>
                    if (bytes == 0)
   165bb:	48 85 c0             	test   %rax,%rax
                    size_t bytes = mbrtowc (&w, &arg[i + m],
   165be:	49 89 c2             	mov    %rax,%r10
                    if (bytes == 0)
   165c1:	0f 84 11 02 00 00    	je     167d8 <quotearg_buffer_restyled+0x39d8>
   165c7:	50                   	push   %rax
   165c8:	48 c7 c0 ac 88 f7 45 	mov    $0x45f788ac,%rax
   165cf:	48 89 05 6a d3 73 00 	mov    %rax,0x73d36a(%rip)        # 753940 <edgeId>
   165d6:	58                   	pop    %rax
   165d7:	e8 04 f2 fe ff       	callq  57e0 <_storeEdge>
                    else if (bytes == (size_t) -1)
   165dc:	48 89 15 35 d3 73 00 	mov    %rdx,0x73d335(%rip)        # 753918 <tmpquadone>
   165e3:	48 89 0d 46 76 5e 00 	mov    %rcx,0x5e7646(%rip)        # 5fdc30 <tmpquadtwo>
   165ea:	48 8d 15 ff 75 5e 00 	lea    0x5e75ff(%rip),%rdx        # 5fdbf0 <funcinptr>
   165f1:	48 c7 02 2c 0a 00 00 	movq   $0xa2c,(%rdx)
   165f8:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   165ff:	00 
   16600:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   16607:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1660b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16612:	00 
   16613:	48 89 c1             	mov    %rax,%rcx
   16616:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1661a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16621:	00 
   16622:	ff 32                	pushq  (%rdx)
   16624:	48 8b 15 ed d2 73 00 	mov    0x73d2ed(%rip),%rdx        # 753918 <tmpquadone>
   1662b:	48 8b 0d fe 75 5e 00 	mov    0x5e75fe(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16632:	48 c7 05 13 d3 73 00 	movq   $0x1,0x73d313(%rip)        # 753950 <cmpPassed>
   16639:	01 00 00 00 
   1663d:	e8 36 f2 fe ff       	callq  5878 <_storeDataFn>
   16642:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
   16646:	0f 84 34 31 00 00    	je     19780 <quotearg_buffer_restyled+0x6980>
   1664c:	50                   	push   %rax
   1664d:	48 c7 c0 15 f1 be 28 	mov    $0x28bef115,%rax
   16654:	48 89 05 e5 d2 73 00 	mov    %rax,0x73d2e5(%rip)        # 753940 <edgeId>
   1665b:	58                   	pop    %rax
   1665c:	e8 7f f1 fe ff       	callq  57e0 <_storeEdge>
                    else if (bytes == (size_t) -2)
   16661:	48 89 15 b0 d2 73 00 	mov    %rdx,0x73d2b0(%rip)        # 753918 <tmpquadone>
   16668:	48 89 0d c1 75 5e 00 	mov    %rcx,0x5e75c1(%rip)        # 5fdc30 <tmpquadtwo>
   1666f:	48 8d 15 7a 75 5e 00 	lea    0x5e757a(%rip),%rdx        # 5fdbf0 <funcinptr>
   16676:	48 c7 02 2d 0a 00 00 	movq   $0xa2d,(%rdx)
   1667d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16684:	00 
   16685:	48 c7 c1 fe ff ff ff 	mov    $0xfffffffffffffffe,%rcx
   1668c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16690:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16697:	00 
   16698:	48 89 c1             	mov    %rax,%rcx
   1669b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1669f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   166a6:	00 
   166a7:	ff 32                	pushq  (%rdx)
   166a9:	48 8b 15 68 d2 73 00 	mov    0x73d268(%rip),%rdx        # 753918 <tmpquadone>
   166b0:	48 8b 0d 79 75 5e 00 	mov    0x5e7579(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   166b7:	48 c7 05 8e d2 73 00 	movq   $0x1,0x73d28e(%rip)        # 753950 <cmpPassed>
   166be:	01 00 00 00 
   166c2:	e8 b1 f1 fe ff       	callq  5878 <_storeDataFn>
   166c7:	48 83 f8 fe          	cmp    $0xfffffffffffffffe,%rax
   166cb:	0f 84 fb 30 00 00    	je     197cc <quotearg_buffer_restyled+0x69cc>
   166d1:	50                   	push   %rax
   166d2:	48 b8 22 de 17 a5 00 	movabs $0xa517de22,%rax
   166d9:	00 00 00 
   166dc:	48 89 05 5d d2 73 00 	mov    %rax,0x73d25d(%rip)        # 753940 <edgeId>
   166e3:	58                   	pop    %rax
   166e4:	e8 f7 f0 fe ff       	callq  57e0 <_storeEdge>
                        if ('[' == 0x5b && elide_outer_quotes
   166e9:	48 89 15 28 d2 73 00 	mov    %rdx,0x73d228(%rip)        # 753918 <tmpquadone>
   166f0:	48 89 0d 39 75 5e 00 	mov    %rcx,0x5e7539(%rip)        # 5fdc30 <tmpquadtwo>
   166f7:	48 8d 15 f2 74 5e 00 	lea    0x5e74f2(%rip),%rdx        # 5fdbf0 <funcinptr>
   166fe:	48 c7 02 2e 0a 00 00 	movq   $0xa2e,(%rdx)
   16705:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1670c:	00 
   1670d:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   16714:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16718:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1671f:	00 
   16720:	48 8b 4c 24 6a       	mov    0x6a(%rsp),%rcx
   16725:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16729:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16730:	00 
   16731:	ff 32                	pushq  (%rdx)
   16733:	48 8b 15 de d1 73 00 	mov    0x73d1de(%rip),%rdx        # 753918 <tmpquadone>
   1673a:	48 8b 0d ef 74 5e 00 	mov    0x5e74ef(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16741:	48 c7 05 04 d2 73 00 	movq   $0x1,0x73d204(%rip)        # 753950 <cmpPassed>
   16748:	01 00 00 00 
   1674c:	e8 27 f1 fe ff       	callq  5878 <_storeDataFn>
   16751:	80 7c 24 6a 00       	cmpb   $0x0,0x6a(%rsp)
   16756:	0f 85 ec 0b 00 00    	jne    17348 <quotearg_buffer_restyled+0x4548>
   1675c:	50                   	push   %rax
   1675d:	48 c7 c0 c4 fb a2 14 	mov    $0x14a2fbc4,%rax
   16764:	48 89 05 d5 d1 73 00 	mov    %rax,0x73d1d5(%rip)        # 753940 <edgeId>
   1676b:	58                   	pop    %rax
   1676c:	e8 6f f0 fe ff       	callq  57e0 <_storeEdge>
   16771:	50                   	push   %rax
   16772:	48 b8 f1 be 28 c5 00 	movabs $0xc528bef1,%rax
   16779:	00 00 00 
   1677c:	48 89 05 bd d1 73 00 	mov    %rax,0x73d1bd(%rip)        # 753940 <edgeId>
   16783:	58                   	pop    %rax
   16784:	e8 57 f0 fe ff       	callq  57e0 <_storeEdge>
                        if (! iswprint (w))
   16789:	8b bc 24 9c 00 00 00 	mov    0x9c(%rsp),%edi
   16790:	4c 89 54 24 18       	mov    %r10,0x18(%rsp)
   16795:	e8 a6 b4 fe ff       	callq  1c40 <iswprint@plt>
                        m += bytes;
   1679a:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
                while (! mbsinit (&mbstate));
   1679f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                          printable = false;
   167a4:	85 c0                	test   %eax,%eax
   167a6:	41 ba 00 00 00 00    	mov    $0x0,%r10d
   167ac:	45 0f 44 e2          	cmove  %r10d,%r12d
                        m += bytes;
   167b0:	48 01 d5             	add    %rdx,%rbp
                while (! mbsinit (&mbstate));
   167b3:	e8 78 b4 fe ff       	callq  1c30 <mbsinit@plt>
   167b8:	85 c0                	test   %eax,%eax
   167ba:	0f 84 bc fd ff ff    	je     1657c <quotearg_buffer_restyled+0x377c>
   167c0:	50                   	push   %rax
   167c1:	48 b8 e2 f2 22 f9 00 	movabs $0xf922f2e2,%rax
   167c8:	00 00 00 
   167cb:	48 89 05 6e d1 73 00 	mov    %rax,0x73d16e(%rip)        # 753940 <edgeId>
   167d2:	58                   	pop    %rax
   167d3:	e8 08 f0 fe ff       	callq  57e0 <_storeEdge>
   167d8:	50                   	push   %rax
   167d9:	48 c7 c0 b8 bc 48 7e 	mov    $0x7e48bcb8,%rax
   167e0:	48 89 05 59 d1 73 00 	mov    %rax,0x73d159(%rip)        # 753940 <edgeId>
   167e7:	58                   	pop    %rax
   167e8:	e8 f3 ef fe ff       	callq  57e0 <_storeEdge>
   167ed:	41 83 f4 01          	xor    $0x1,%r12d
   167f1:	44 0f b6 6c 24 7e    	movzbl 0x7e(%rsp),%r13d
   167f7:	44 0f b6 54 24 7f    	movzbl 0x7f(%rsp),%r10d
   167fd:	44 22 64 24 69       	and    0x69(%rsp),%r12b
   16802:	48 89 ee             	mov    %rbp,%rsi
   16805:	4d 89 f9             	mov    %r15,%r9
   16808:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
   1680d:	4c 8b 5c 24 70       	mov    0x70(%rsp),%r11
   16812:	4c 8b bc 24 80 00 00 	mov    0x80(%rsp),%r15
   16819:	00 
   1681a:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   1681f:	50                   	push   %rax
   16820:	48 c7 c0 45 f2 d3 77 	mov    $0x77d3f245,%rax
   16827:	48 89 05 12 d1 73 00 	mov    %rax,0x73d112(%rip)        # 753940 <edgeId>
   1682e:	58                   	pop    %rax
   1682f:	e8 ac ef fe ff       	callq  57e0 <_storeEdge>
            if (1 < m || (backslash_escapes && ! printable))
   16834:	48 89 15 dd d0 73 00 	mov    %rdx,0x73d0dd(%rip)        # 753918 <tmpquadone>
   1683b:	48 89 0d ee 73 5e 00 	mov    %rcx,0x5e73ee(%rip)        # 5fdc30 <tmpquadtwo>
   16842:	48 8d 15 a7 73 5e 00 	lea    0x5e73a7(%rip),%rdx        # 5fdbf0 <funcinptr>
   16849:	48 c7 02 2f 0a 00 00 	movq   $0xa2f,(%rdx)
   16850:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16857:	00 
   16858:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   1685f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16863:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1686a:	00 
   1686b:	48 89 f1             	mov    %rsi,%rcx
   1686e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16872:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16879:	00 
   1687a:	ff 32                	pushq  (%rdx)
   1687c:	48 8b 15 95 d0 73 00 	mov    0x73d095(%rip),%rdx        # 753918 <tmpquadone>
   16883:	48 8b 0d a6 73 5e 00 	mov    0x5e73a6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1688a:	48 c7 05 bb d0 73 00 	movq   $0x1,0x73d0bb(%rip)        # 753950 <cmpPassed>
   16891:	01 00 00 00 
   16895:	e8 de ef fe ff       	callq  5878 <_storeDataFn>
   1689a:	48 83 fe 01          	cmp    $0x1,%rsi
   1689e:	0f 86 33 e4 ff ff    	jbe    14cd7 <quotearg_buffer_restyled+0x1ed7>
   168a4:	50                   	push   %rax
   168a5:	48 c7 c0 92 9f be 23 	mov    $0x23be9f92,%rax
   168ac:	48 89 05 8d d0 73 00 	mov    %rax,0x73d08d(%rip)        # 753940 <edgeId>
   168b3:	58                   	pop    %rax
   168b4:	e8 27 ef fe ff       	callq  57e0 <_storeEdge>
                size_t ilim = i + m;
   168b9:	48 89 f2             	mov    %rsi,%rdx
   168bc:	48 01 da             	add    %rbx,%rdx
   168bf:	45 84 e4             	test   %r12b,%r12b
   168c2:	0f 84 6f e4 ff ff    	je     14d37 <quotearg_buffer_restyled+0x1f37>
   168c8:	50                   	push   %rax
   168c9:	48 b8 3f 7d 47 a8 00 	movabs $0xa8477d3f,%rax
   168d0:	00 00 00 
   168d3:	48 89 05 66 d0 73 00 	mov    %rax,0x73d066(%rip)        # 753940 <edgeId>
   168da:	58                   	pop    %rax
   168db:	e8 00 ef fe ff       	callq  57e0 <_storeEdge>
   168e0:	50                   	push   %rax
   168e1:	48 c7 c0 4f df 11 2a 	mov    $0x2a11df4f,%rax
   168e8:	48 89 05 51 d0 73 00 	mov    %rax,0x73d051(%rip)        # 753940 <edgeId>
   168ef:	58                   	pop    %rax
   168f0:	e8 eb ee fe ff       	callq  57e0 <_storeEdge>
   168f5:	48 89 15 1c d0 73 00 	mov    %rdx,0x73d01c(%rip)        # 753918 <tmpquadone>
   168fc:	48 89 0d 2d 73 5e 00 	mov    %rcx,0x5e732d(%rip)        # 5fdc30 <tmpquadtwo>
   16903:	48 8d 15 e6 72 5e 00 	lea    0x5e72e6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1690a:	48 c7 02 30 0a 00 00 	movq   $0xa30,(%rdx)
   16911:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   16918:	00 
   16919:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   16920:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16924:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1692b:	00 
   1692c:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   16931:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16935:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1693c:	00 
   1693d:	ff 32                	pushq  (%rdx)
   1693f:	48 8b 15 d2 cf 73 00 	mov    0x73cfd2(%rip),%rdx        # 753918 <tmpquadone>
   16946:	48 8b 0d e3 72 5e 00 	mov    0x5e72e3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1694d:	48 c7 05 f8 cf 73 00 	movq   $0x1,0x73cff8(%rip)        # 753950 <cmpPassed>
   16954:	01 00 00 00 
   16958:	e8 1b ef fe ff       	callq  5878 <_storeDataFn>
   1695d:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   16962:	0f 85 b8 d6 ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   16968:	50                   	push   %rax
   16969:	48 c7 c0 d3 77 84 4a 	mov    $0x4a8477d3,%rax
   16970:	48 89 05 c9 cf 73 00 	mov    %rax,0x73cfc9(%rip)        # 753940 <edgeId>
   16977:	58                   	pop    %rax
   16978:	e8 63 ee fe ff       	callq  57e0 <_storeEdge>
   1697d:	49 89 dc             	mov    %rbx,%r12
   16980:	49 83 c7 03          	add    $0x3,%r15
   16984:	49 f7 d4             	not    %r12
   16987:	49 01 d4             	add    %rdx,%r12
   1698a:	41 83 e4 03          	and    $0x3,%r12d
   1698e:	0f 84 5a 20 00 00    	je     189ee <quotearg_buffer_restyled+0x5bee>
   16994:	50                   	push   %rax
   16995:	48 c7 c0 77 84 4a 6e 	mov    $0x6e4a8477,%rax
   1699c:	48 89 05 9d cf 73 00 	mov    %rax,0x73cf9d(%rip)        # 753940 <edgeId>
   169a3:	58                   	pop    %rax
   169a4:	e8 37 ee fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   169a9:	49 8d 77 fd          	lea    -0x3(%r15),%rsi
   169ad:	48 89 15 64 cf 73 00 	mov    %rdx,0x73cf64(%rip)        # 753918 <tmpquadone>
   169b4:	48 89 0d 75 72 5e 00 	mov    %rcx,0x5e7275(%rip)        # 5fdc30 <tmpquadtwo>
   169bb:	48 8d 15 2e 72 5e 00 	lea    0x5e722e(%rip),%rdx        # 5fdbf0 <funcinptr>
   169c2:	48 c7 02 31 0a 00 00 	movq   $0xa31,(%rdx)
   169c9:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   169d0:	00 
   169d1:	4c 89 d9             	mov    %r11,%rcx
   169d4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   169d8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   169df:	00 
   169e0:	48 89 f1             	mov    %rsi,%rcx
   169e3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   169e7:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   169ee:	00 
   169ef:	ff 32                	pushq  (%rdx)
   169f1:	48 8b 15 20 cf 73 00 	mov    0x73cf20(%rip),%rdx        # 753918 <tmpquadone>
   169f8:	48 8b 0d 31 72 5e 00 	mov    0x5e7231(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   169ff:	48 c7 05 46 cf 73 00 	movq   $0x1,0x73cf46(%rip)        # 753950 <cmpPassed>
   16a06:	01 00 00 00 
   16a0a:	e8 69 ee fe ff       	callq  5878 <_storeDataFn>
   16a0f:	4c 39 de             	cmp    %r11,%rsi
   16a12:	73 1f                	jae    16a33 <quotearg_buffer_restyled+0x3c33>
   16a14:	50                   	push   %rax
   16a15:	48 c7 c0 23 54 72 0b 	mov    $0xb725423,%rax
   16a1c:	48 89 05 1d cf 73 00 	mov    %rax,0x73cf1d(%rip)        # 753940 <edgeId>
   16a23:	58                   	pop    %rax
   16a24:	e8 b7 ed fe ff       	callq  57e0 <_storeEdge>
   16a29:	48 8b 04 24          	mov    (%rsp),%rax
   16a2d:	42 c6 44 38 fd 5c    	movb   $0x5c,-0x3(%rax,%r15,1)
   16a33:	50                   	push   %rax
   16a34:	48 c7 c0 84 4a 6e 01 	mov    $0x16e4a84,%rax
   16a3b:	48 89 05 fe ce 73 00 	mov    %rax,0x73cefe(%rip)        # 753940 <edgeId>
   16a42:	58                   	pop    %rax
   16a43:	e8 98 ed fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   16a48:	49 8d 7f fe          	lea    -0x2(%r15),%rdi
   16a4c:	48 89 15 c5 ce 73 00 	mov    %rdx,0x73cec5(%rip)        # 753918 <tmpquadone>
   16a53:	48 89 0d d6 71 5e 00 	mov    %rcx,0x5e71d6(%rip)        # 5fdc30 <tmpquadtwo>
   16a5a:	48 8d 15 8f 71 5e 00 	lea    0x5e718f(%rip),%rdx        # 5fdbf0 <funcinptr>
   16a61:	48 c7 02 32 0a 00 00 	movq   $0xa32,(%rdx)
   16a68:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16a6f:	00 
   16a70:	4c 89 d9             	mov    %r11,%rcx
   16a73:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16a77:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16a7e:	00 
   16a7f:	48 89 f9             	mov    %rdi,%rcx
   16a82:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16a86:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16a8d:	00 
   16a8e:	ff 32                	pushq  (%rdx)
   16a90:	48 8b 15 81 ce 73 00 	mov    0x73ce81(%rip),%rdx        # 753918 <tmpquadone>
   16a97:	48 8b 0d 92 71 5e 00 	mov    0x5e7192(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16a9e:	48 c7 05 a7 ce 73 00 	movq   $0x1,0x73cea7(%rip)        # 753950 <cmpPassed>
   16aa5:	01 00 00 00 
   16aa9:	e8 ca ed fe ff       	callq  5878 <_storeDataFn>
   16aae:	4c 39 df             	cmp    %r11,%rdi
   16ab1:	73 2a                	jae    16add <quotearg_buffer_restyled+0x3cdd>
   16ab3:	50                   	push   %rax
   16ab4:	48 b8 54 72 0b 90 00 	movabs $0x900b7254,%rax
   16abb:	00 00 00 
   16abe:	48 89 05 7b ce 73 00 	mov    %rax,0x73ce7b(%rip)        # 753940 <edgeId>
   16ac5:	58                   	pop    %rax
   16ac6:	e8 15 ed fe ff       	callq  57e0 <_storeEdge>
   16acb:	44 89 e9             	mov    %r13d,%ecx
   16ace:	4c 8b 04 24          	mov    (%rsp),%r8
   16ad2:	c0 e9 06             	shr    $0x6,%cl
   16ad5:	83 c1 30             	add    $0x30,%ecx
   16ad8:	43 88 4c 38 fe       	mov    %cl,-0x2(%r8,%r15,1)
   16add:	50                   	push   %rax
   16ade:	48 b8 c9 2d 40 ba 00 	movabs $0xba402dc9,%rax
   16ae5:	00 00 00 
   16ae8:	48 89 05 51 ce 73 00 	mov    %rax,0x73ce51(%rip)        # 753940 <edgeId>
   16aef:	58                   	pop    %rax
   16af0:	e8 eb ec fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   16af5:	4d 8d 57 ff          	lea    -0x1(%r15),%r10
   16af9:	48 89 15 18 ce 73 00 	mov    %rdx,0x73ce18(%rip)        # 753918 <tmpquadone>
   16b00:	48 89 0d 29 71 5e 00 	mov    %rcx,0x5e7129(%rip)        # 5fdc30 <tmpquadtwo>
   16b07:	48 8d 15 e2 70 5e 00 	lea    0x5e70e2(%rip),%rdx        # 5fdbf0 <funcinptr>
   16b0e:	48 c7 02 33 0a 00 00 	movq   $0xa33,(%rdx)
   16b15:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16b1c:	00 
   16b1d:	4c 89 d9             	mov    %r11,%rcx
   16b20:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16b24:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16b2b:	00 
   16b2c:	4c 89 d1             	mov    %r10,%rcx
   16b2f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16b33:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16b3a:	00 
   16b3b:	ff 32                	pushq  (%rdx)
   16b3d:	48 8b 15 d4 cd 73 00 	mov    0x73cdd4(%rip),%rdx        # 753918 <tmpquadone>
   16b44:	48 8b 0d e5 70 5e 00 	mov    0x5e70e5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16b4b:	48 c7 05 fa cd 73 00 	movq   $0x1,0x73cdfa(%rip)        # 753950 <cmpPassed>
   16b52:	01 00 00 00 
   16b56:	e8 1d ed fe ff       	callq  5878 <_storeDataFn>
   16b5b:	4d 39 da             	cmp    %r11,%r10
   16b5e:	73 2a                	jae    16b8a <quotearg_buffer_restyled+0x3d8a>
   16b60:	50                   	push   %rax
   16b61:	48 c7 c0 6e 01 d2 55 	mov    $0x55d2016e,%rax
   16b68:	48 89 05 d1 cd 73 00 	mov    %rax,0x73cdd1(%rip)        # 753940 <edgeId>
   16b6f:	58                   	pop    %rax
   16b70:	e8 6b ec fe ff       	callq  57e0 <_storeEdge>
   16b75:	44 89 e8             	mov    %r13d,%eax
   16b78:	48 8b 34 24          	mov    (%rsp),%rsi
   16b7c:	c0 e8 03             	shr    $0x3,%al
   16b7f:	83 e0 07             	and    $0x7,%eax
   16b82:	83 c0 30             	add    $0x30,%eax
   16b85:	42 88 44 3e ff       	mov    %al,-0x1(%rsi,%r15,1)
   16b8a:	50                   	push   %rax
   16b8b:	48 b8 02 a4 ab 94 00 	movabs $0x94aba402,%rax
   16b92:	00 00 00 
   16b95:	48 89 05 a4 cd 73 00 	mov    %rax,0x73cda4(%rip)        # 753940 <edgeId>
   16b9c:	58                   	pop    %rax
   16b9d:	e8 3e ec fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   16ba2:	41 83 e5 07          	and    $0x7,%r13d
                    if (ilim <= i + 1)
   16ba6:	48 83 c3 01          	add    $0x1,%rbx
                        c = '0' + (c & 7);
   16baa:	41 83 c5 30          	add    $0x30,%r13d
                    if (ilim <= i + 1)
   16bae:	48 89 0d 63 cd 73 00 	mov    %rcx,0x73cd63(%rip)        # 753918 <tmpquadone>
   16bb5:	48 89 05 74 70 5e 00 	mov    %rax,0x5e7074(%rip)        # 5fdc30 <tmpquadtwo>
   16bbc:	48 8d 0d 2d 70 5e 00 	lea    0x5e702d(%rip),%rcx        # 5fdbf0 <funcinptr>
   16bc3:	48 c7 01 34 0a 00 00 	movq   $0xa34,(%rcx)
   16bca:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   16bd1:	00 
   16bd2:	48 89 d8             	mov    %rbx,%rax
   16bd5:	48 89 41 10          	mov    %rax,0x10(%rcx)
   16bd9:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   16be0:	00 
   16be1:	48 89 d0             	mov    %rdx,%rax
   16be4:	48 89 41 20          	mov    %rax,0x20(%rcx)
   16be8:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   16bef:	00 
   16bf0:	ff 31                	pushq  (%rcx)
   16bf2:	48 8b 0d 1f cd 73 00 	mov    0x73cd1f(%rip),%rcx        # 753918 <tmpquadone>
   16bf9:	48 8b 05 30 70 5e 00 	mov    0x5e7030(%rip),%rax        # 5fdc30 <tmpquadtwo>
   16c00:	48 c7 05 45 cd 73 00 	movq   $0x1,0x73cd45(%rip)        # 753950 <cmpPassed>
   16c07:	01 00 00 00 
   16c0b:	e8 68 ec fe ff       	callq  5878 <_storeDataFn>
   16c10:	48 39 da             	cmp    %rbx,%rdx
   16c13:	0f 86 cc d0 ff ff    	jbe    13ce5 <quotearg_buffer_restyled+0xee5>
   16c19:	50                   	push   %rax
   16c1a:	48 c7 c0 ba 4a b9 6b 	mov    $0x6bb94aba,%rax
   16c21:	48 89 05 18 cd 73 00 	mov    %rax,0x73cd18(%rip)        # 753940 <edgeId>
   16c28:	58                   	pop    %rax
   16c29:	e8 b2 eb fe ff       	callq  57e0 <_storeEdge>
                    STORE (c);
   16c2e:	48 89 15 e3 cc 73 00 	mov    %rdx,0x73cce3(%rip)        # 753918 <tmpquadone>
   16c35:	48 89 0d f4 6f 5e 00 	mov    %rcx,0x5e6ff4(%rip)        # 5fdc30 <tmpquadtwo>
   16c3c:	48 8d 15 ad 6f 5e 00 	lea    0x5e6fad(%rip),%rdx        # 5fdbf0 <funcinptr>
   16c43:	48 c7 02 35 0a 00 00 	movq   $0xa35,(%rdx)
   16c4a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16c51:	00 
   16c52:	4c 89 f9             	mov    %r15,%rcx
   16c55:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16c59:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16c60:	00 
   16c61:	4c 89 d9             	mov    %r11,%rcx
   16c64:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16c68:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16c6f:	00 
   16c70:	ff 32                	pushq  (%rdx)
   16c72:	48 8b 15 9f cc 73 00 	mov    0x73cc9f(%rip),%rdx        # 753918 <tmpquadone>
   16c79:	48 8b 0d b0 6f 5e 00 	mov    0x5e6fb0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16c80:	48 c7 05 c5 cc 73 00 	movq   $0x1,0x73ccc5(%rip)        # 753950 <cmpPassed>
   16c87:	01 00 00 00 
   16c8b:	e8 e8 eb fe ff       	callq  5878 <_storeDataFn>
   16c90:	4d 39 fb             	cmp    %r15,%r11
   16c93:	76 1d                	jbe    16cb2 <quotearg_buffer_restyled+0x3eb2>
   16c95:	50                   	push   %rax
   16c96:	48 c7 c0 57 29 77 2d 	mov    $0x2d772957,%rax
   16c9d:	48 89 05 9c cc 73 00 	mov    %rax,0x73cc9c(%rip)        # 753940 <edgeId>
   16ca4:	58                   	pop    %rax
   16ca5:	e8 36 eb fe ff       	callq  57e0 <_storeEdge>
   16caa:	48 8b 3c 24          	mov    (%rsp),%rdi
   16cae:	46 88 2c 3f          	mov    %r13b,(%rdi,%r15,1)
   16cb2:	50                   	push   %rax
   16cb3:	48 c7 c0 2a e5 ae 25 	mov    $0x25aee52a,%rax
   16cba:	48 89 05 7f cc 73 00 	mov    %rax,0x73cc7f(%rip)        # 753940 <edgeId>
   16cc1:	58                   	pop    %rax
   16cc2:	e8 19 eb fe ff       	callq  57e0 <_storeEdge>
   16cc7:	49 83 c7 04          	add    $0x4,%r15
   16ccb:	48 89 15 46 cc 73 00 	mov    %rdx,0x73cc46(%rip)        # 753918 <tmpquadone>
   16cd2:	48 89 0d 57 6f 5e 00 	mov    %rcx,0x5e6f57(%rip)        # 5fdc30 <tmpquadtwo>
   16cd9:	48 8d 15 10 6f 5e 00 	lea    0x5e6f10(%rip),%rdx        # 5fdbf0 <funcinptr>
   16ce0:	48 c7 02 36 0a 00 00 	movq   $0xa36,(%rdx)
   16ce7:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16cee:	00 
   16cef:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   16cf6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16cfa:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16d01:	00 
   16d02:	4c 89 e1             	mov    %r12,%rcx
   16d05:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16d09:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16d10:	00 
   16d11:	ff 32                	pushq  (%rdx)
   16d13:	48 8b 15 fe cb 73 00 	mov    0x73cbfe(%rip),%rdx        # 753918 <tmpquadone>
   16d1a:	48 8b 0d 0f 6f 5e 00 	mov    0x5e6f0f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16d21:	48 c7 05 24 cc 73 00 	movq   $0x1,0x73cc24(%rip)        # 753950 <cmpPassed>
   16d28:	01 00 00 00 
   16d2c:	e8 47 eb fe ff       	callq  5878 <_storeDataFn>
   16d31:	49 83 fc 01          	cmp    $0x1,%r12
                    c = arg[++i];
   16d35:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
   16d3a:	0f 84 ae 1c 00 00    	je     189ee <quotearg_buffer_restyled+0x5bee>
   16d40:	50                   	push   %rax
   16d41:	48 b8 e5 ae 25 cd 00 	movabs $0xcd25aee5,%rax
   16d48:	00 00 00 
   16d4b:	48 89 05 ee cb 73 00 	mov    %rax,0x73cbee(%rip)        # 753940 <edgeId>
   16d52:	58                   	pop    %rax
   16d53:	e8 88 ea fe ff       	callq  57e0 <_storeEdge>
   16d58:	48 89 15 b9 cb 73 00 	mov    %rdx,0x73cbb9(%rip)        # 753918 <tmpquadone>
   16d5f:	48 89 0d ca 6e 5e 00 	mov    %rcx,0x5e6eca(%rip)        # 5fdc30 <tmpquadtwo>
   16d66:	48 8d 15 83 6e 5e 00 	lea    0x5e6e83(%rip),%rdx        # 5fdbf0 <funcinptr>
   16d6d:	48 c7 02 37 0a 00 00 	movq   $0xa37,(%rdx)
   16d74:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16d7b:	00 
   16d7c:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   16d83:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16d87:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16d8e:	00 
   16d8f:	4c 89 e1             	mov    %r12,%rcx
   16d92:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16d96:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16d9d:	00 
   16d9e:	ff 32                	pushq  (%rdx)
   16da0:	48 8b 15 71 cb 73 00 	mov    0x73cb71(%rip),%rdx        # 753918 <tmpquadone>
   16da7:	48 8b 0d 82 6e 5e 00 	mov    0x5e6e82(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16dae:	48 c7 05 97 cb 73 00 	movq   $0x1,0x73cb97(%rip)        # 753950 <cmpPassed>
   16db5:	01 00 00 00 
   16db9:	e8 ba ea fe ff       	callq  5878 <_storeDataFn>
   16dbe:	49 83 fc 02          	cmp    $0x2,%r12
   16dc2:	0f 84 bf 02 00 00    	je     17087 <quotearg_buffer_restyled+0x4287>
   16dc8:	50                   	push   %rax
   16dc9:	48 c7 c0 b9 6b 49 73 	mov    $0x73496bb9,%rax
   16dd0:	48 89 05 69 cb 73 00 	mov    %rax,0x73cb69(%rip)        # 753940 <edgeId>
   16dd7:	58                   	pop    %rax
   16dd8:	e8 03 ea fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   16ddd:	4d 8d 67 fd          	lea    -0x3(%r15),%r12
   16de1:	48 89 15 30 cb 73 00 	mov    %rdx,0x73cb30(%rip)        # 753918 <tmpquadone>
   16de8:	48 89 0d 41 6e 5e 00 	mov    %rcx,0x5e6e41(%rip)        # 5fdc30 <tmpquadtwo>
   16def:	48 8d 15 fa 6d 5e 00 	lea    0x5e6dfa(%rip),%rdx        # 5fdbf0 <funcinptr>
   16df6:	48 c7 02 38 0a 00 00 	movq   $0xa38,(%rdx)
   16dfd:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16e04:	00 
   16e05:	4c 89 d9             	mov    %r11,%rcx
   16e08:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16e0c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16e13:	00 
   16e14:	4c 89 e1             	mov    %r12,%rcx
   16e17:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16e1b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16e22:	00 
   16e23:	ff 32                	pushq  (%rdx)
   16e25:	48 8b 15 ec ca 73 00 	mov    0x73caec(%rip),%rdx        # 753918 <tmpquadone>
   16e2c:	48 8b 0d fd 6d 5e 00 	mov    0x5e6dfd(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16e33:	48 c7 05 12 cb 73 00 	movq   $0x1,0x73cb12(%rip)        # 753950 <cmpPassed>
   16e3a:	01 00 00 00 
   16e3e:	e8 35 ea fe ff       	callq  5878 <_storeDataFn>
   16e43:	4d 39 dc             	cmp    %r11,%r12
   16e46:	0f 82 de 28 00 00    	jb     1972a <quotearg_buffer_restyled+0x692a>
   16e4c:	50                   	push   %rax
   16e4d:	48 c7 c0 bb 96 34 17 	mov    $0x173496bb,%rax
   16e54:	48 89 05 e5 ca 73 00 	mov    %rax,0x73cae5(%rip)        # 753940 <edgeId>
   16e5b:	58                   	pop    %rax
   16e5c:	e8 7f e9 fe ff       	callq  57e0 <_storeEdge>
   16e61:	50                   	push   %rax
   16e62:	48 b8 ae 25 cd 85 00 	movabs $0x85cd25ae,%rax
   16e69:	00 00 00 
   16e6c:	48 89 05 cd ca 73 00 	mov    %rax,0x73cacd(%rip)        # 753940 <edgeId>
   16e73:	58                   	pop    %rax
   16e74:	e8 67 e9 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   16e79:	4d 8d 47 fe          	lea    -0x2(%r15),%r8
   16e7d:	48 89 15 94 ca 73 00 	mov    %rdx,0x73ca94(%rip)        # 753918 <tmpquadone>
   16e84:	48 89 0d a5 6d 5e 00 	mov    %rcx,0x5e6da5(%rip)        # 5fdc30 <tmpquadtwo>
   16e8b:	48 8d 15 5e 6d 5e 00 	lea    0x5e6d5e(%rip),%rdx        # 5fdbf0 <funcinptr>
   16e92:	48 c7 02 39 0a 00 00 	movq   $0xa39,(%rdx)
   16e99:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16ea0:	00 
   16ea1:	4c 89 d9             	mov    %r11,%rcx
   16ea4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16ea8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16eaf:	00 
   16eb0:	4c 89 c1             	mov    %r8,%rcx
   16eb3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16eb7:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16ebe:	00 
   16ebf:	ff 32                	pushq  (%rdx)
   16ec1:	48 8b 15 50 ca 73 00 	mov    0x73ca50(%rip),%rdx        # 753918 <tmpquadone>
   16ec8:	48 8b 0d 61 6d 5e 00 	mov    0x5e6d61(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16ecf:	48 c7 05 76 ca 73 00 	movq   $0x1,0x73ca76(%rip)        # 753950 <cmpPassed>
   16ed6:	01 00 00 00 
   16eda:	e8 99 e9 fe ff       	callq  5878 <_storeDataFn>
   16edf:	4d 39 d8             	cmp    %r11,%r8
   16ee2:	73 29                	jae    16f0d <quotearg_buffer_restyled+0x410d>
   16ee4:	50                   	push   %rax
   16ee5:	48 c7 c0 5a d2 5c 28 	mov    $0x285cd25a,%rax
   16eec:	48 89 05 4d ca 73 00 	mov    %rax,0x73ca4d(%rip)        # 753940 <edgeId>
   16ef3:	58                   	pop    %rax
   16ef4:	e8 e7 e8 fe ff       	callq  57e0 <_storeEdge>
   16ef9:	45 89 ea             	mov    %r13d,%r10d
   16efc:	48 8b 04 24          	mov    (%rsp),%rax
   16f00:	41 c0 ea 06          	shr    $0x6,%r10b
   16f04:	41 83 c2 30          	add    $0x30,%r10d
   16f08:	46 88 54 38 fe       	mov    %r10b,-0x2(%rax,%r15,1)
   16f0d:	50                   	push   %rax
   16f0e:	48 b8 49 73 a1 b8 00 	movabs $0xb8a17349,%rax
   16f15:	00 00 00 
   16f18:	48 89 05 21 ca 73 00 	mov    %rax,0x73ca21(%rip)        # 753940 <edgeId>
   16f1f:	58                   	pop    %rax
   16f20:	e8 bb e8 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   16f25:	49 8d 77 ff          	lea    -0x1(%r15),%rsi
   16f29:	48 89 15 e8 c9 73 00 	mov    %rdx,0x73c9e8(%rip)        # 753918 <tmpquadone>
   16f30:	48 89 0d f9 6c 5e 00 	mov    %rcx,0x5e6cf9(%rip)        # 5fdc30 <tmpquadtwo>
   16f37:	48 8d 15 b2 6c 5e 00 	lea    0x5e6cb2(%rip),%rdx        # 5fdbf0 <funcinptr>
   16f3e:	48 c7 02 3a 0a 00 00 	movq   $0xa3a,(%rdx)
   16f45:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   16f4c:	00 
   16f4d:	4c 89 d9             	mov    %r11,%rcx
   16f50:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   16f54:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   16f5b:	00 
   16f5c:	48 89 f1             	mov    %rsi,%rcx
   16f5f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   16f63:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   16f6a:	00 
   16f6b:	ff 32                	pushq  (%rdx)
   16f6d:	48 8b 15 a4 c9 73 00 	mov    0x73c9a4(%rip),%rdx        # 753918 <tmpquadone>
   16f74:	48 8b 0d b5 6c 5e 00 	mov    0x5e6cb5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   16f7b:	48 c7 05 ca c9 73 00 	movq   $0x1,0x73c9ca(%rip)        # 753950 <cmpPassed>
   16f82:	01 00 00 00 
   16f86:	e8 ed e8 fe ff       	callq  5878 <_storeDataFn>
   16f8b:	4c 39 de             	cmp    %r11,%rsi
   16f8e:	73 2e                	jae    16fbe <quotearg_buffer_restyled+0x41be>
   16f90:	50                   	push   %rax
   16f91:	48 b8 34 17 8a 9b 00 	movabs $0x9b8a1734,%rax
   16f98:	00 00 00 
   16f9b:	48 89 05 9e c9 73 00 	mov    %rax,0x73c99e(%rip)        # 753940 <edgeId>
   16fa2:	58                   	pop    %rax
   16fa3:	e8 38 e8 fe ff       	callq  57e0 <_storeEdge>
   16fa8:	44 89 ef             	mov    %r13d,%edi
   16fab:	4c 8b 24 24          	mov    (%rsp),%r12
   16faf:	40 c0 ef 03          	shr    $0x3,%dil
   16fb3:	83 e7 07             	and    $0x7,%edi
   16fb6:	83 c7 30             	add    $0x30,%edi
   16fb9:	43 88 7c 3c ff       	mov    %dil,-0x1(%r12,%r15,1)
   16fbe:	50                   	push   %rax
   16fbf:	48 c7 c0 2e 14 37 0f 	mov    $0xf37142e,%rax
   16fc6:	48 89 05 73 c9 73 00 	mov    %rax,0x73c973(%rip)        # 753940 <edgeId>
   16fcd:	58                   	pop    %rax
   16fce:	e8 0d e8 fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   16fd3:	41 83 e5 07          	and    $0x7,%r13d
                    if (ilim <= i + 1)
   16fd7:	48 83 c3 01          	add    $0x1,%rbx
                        c = '0' + (c & 7);
   16fdb:	41 83 c5 30          	add    $0x30,%r13d
                    STORE (c);
   16fdf:	48 89 15 32 c9 73 00 	mov    %rdx,0x73c932(%rip)        # 753918 <tmpquadone>
   16fe6:	48 89 0d 43 6c 5e 00 	mov    %rcx,0x5e6c43(%rip)        # 5fdc30 <tmpquadtwo>
   16fed:	48 8d 15 fc 6b 5e 00 	lea    0x5e6bfc(%rip),%rdx        # 5fdbf0 <funcinptr>
   16ff4:	48 c7 02 3b 0a 00 00 	movq   $0xa3b,(%rdx)
   16ffb:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   17002:	00 
   17003:	4c 89 f9             	mov    %r15,%rcx
   17006:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1700a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17011:	00 
   17012:	4c 89 d9             	mov    %r11,%rcx
   17015:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   17019:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17020:	00 
   17021:	ff 32                	pushq  (%rdx)
   17023:	48 8b 15 ee c8 73 00 	mov    0x73c8ee(%rip),%rdx        # 753918 <tmpquadone>
   1702a:	48 8b 0d ff 6b 5e 00 	mov    0x5e6bff(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   17031:	48 c7 05 14 c9 73 00 	movq   $0x1,0x73c914(%rip)        # 753950 <cmpPassed>
   17038:	01 00 00 00 
   1703c:	e8 37 e8 fe ff       	callq  5878 <_storeDataFn>
   17041:	4d 39 fb             	cmp    %r15,%r11
   17044:	76 20                	jbe    17066 <quotearg_buffer_restyled+0x4266>
   17046:	50                   	push   %rax
   17047:	48 b8 c5 cd 03 db 00 	movabs $0xdb03cdc5,%rax
   1704e:	00 00 00 
   17051:	48 89 05 e8 c8 73 00 	mov    %rax,0x73c8e8(%rip)        # 753940 <edgeId>
   17058:	58                   	pop    %rax
   17059:	e8 82 e7 fe ff       	callq  57e0 <_storeEdge>
   1705e:	48 8b 0c 24          	mov    (%rsp),%rcx
   17062:	46 88 2c 39          	mov    %r13b,(%rcx,%r15,1)
   17066:	50                   	push   %rax
   17067:	48 b8 b8 79 60 bb 00 	movabs $0xbb6079b8,%rax
   1706e:	00 00 00 
   17071:	48 89 05 c8 c8 73 00 	mov    %rax,0x73c8c8(%rip)        # 753940 <edgeId>
   17078:	58                   	pop    %rax
   17079:	e8 62 e7 fe ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   1707e:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
   17083:	49 83 c7 04          	add    $0x4,%r15
   17087:	50                   	push   %rax
   17088:	48 b8 f3 c0 76 bb 00 	movabs $0xbb76c0f3,%rax
   1708f:	00 00 00 
   17092:	48 89 05 a7 c8 73 00 	mov    %rax,0x73c8a7(%rip)        # 753940 <edgeId>
   17099:	58                   	pop    %rax
   1709a:	e8 41 e7 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   1709f:	4d 8d 47 fd          	lea    -0x3(%r15),%r8
   170a3:	48 89 15 6e c8 73 00 	mov    %rdx,0x73c86e(%rip)        # 753918 <tmpquadone>
   170aa:	48 89 0d 7f 6b 5e 00 	mov    %rcx,0x5e6b7f(%rip)        # 5fdc30 <tmpquadtwo>
   170b1:	48 8d 15 38 6b 5e 00 	lea    0x5e6b38(%rip),%rdx        # 5fdbf0 <funcinptr>
   170b8:	48 c7 02 3c 0a 00 00 	movq   $0xa3c,(%rdx)
   170bf:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   170c6:	00 
   170c7:	4c 89 d9             	mov    %r11,%rcx
   170ca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   170ce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   170d5:	00 
   170d6:	4c 89 c1             	mov    %r8,%rcx
   170d9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   170dd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   170e4:	00 
   170e5:	ff 32                	pushq  (%rdx)
   170e7:	48 8b 15 2a c8 73 00 	mov    0x73c82a(%rip),%rdx        # 753918 <tmpquadone>
   170ee:	48 8b 0d 3b 6b 5e 00 	mov    0x5e6b3b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   170f5:	48 c7 05 50 c8 73 00 	movq   $0x1,0x73c850(%rip)        # 753950 <cmpPassed>
   170fc:	01 00 00 00 
   17100:	e8 73 e7 fe ff       	callq  5878 <_storeDataFn>
   17105:	4d 39 d8             	cmp    %r11,%r8
   17108:	73 22                	jae    1712c <quotearg_buffer_restyled+0x432c>
   1710a:	50                   	push   %rax
   1710b:	48 b8 0f 6c b7 fb 00 	movabs $0xfbb76c0f,%rax
   17112:	00 00 00 
   17115:	48 89 05 24 c8 73 00 	mov    %rax,0x73c824(%rip)        # 753940 <edgeId>
   1711c:	58                   	pop    %rax
   1711d:	e8 be e6 fe ff       	callq  57e0 <_storeEdge>
   17122:	4c 8b 14 24          	mov    (%rsp),%r10
   17126:	43 c6 44 3a fd 5c    	movb   $0x5c,-0x3(%r10,%r15,1)
   1712c:	50                   	push   %rax
   1712d:	48 b8 81 ed 76 bf 00 	movabs $0xbf76ed81,%rax
   17134:	00 00 00 
   17137:	48 89 05 02 c8 73 00 	mov    %rax,0x73c802(%rip)        # 753940 <edgeId>
   1713e:	58                   	pop    %rax
   1713f:	e8 9c e6 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   17144:	49 8d 47 fe          	lea    -0x2(%r15),%rax
   17148:	48 89 15 c9 c7 73 00 	mov    %rdx,0x73c7c9(%rip)        # 753918 <tmpquadone>
   1714f:	48 89 0d da 6a 5e 00 	mov    %rcx,0x5e6ada(%rip)        # 5fdc30 <tmpquadtwo>
   17156:	48 8d 15 93 6a 5e 00 	lea    0x5e6a93(%rip),%rdx        # 5fdbf0 <funcinptr>
   1715d:	48 c7 02 3d 0a 00 00 	movq   $0xa3d,(%rdx)
   17164:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1716b:	00 
   1716c:	4c 89 d9             	mov    %r11,%rcx
   1716f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   17173:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1717a:	00 
   1717b:	48 89 c1             	mov    %rax,%rcx
   1717e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   17182:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17189:	00 
   1718a:	ff 32                	pushq  (%rdx)
   1718c:	48 8b 15 85 c7 73 00 	mov    0x73c785(%rip),%rdx        # 753918 <tmpquadone>
   17193:	48 8b 0d 96 6a 5e 00 	mov    0x5e6a96(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1719a:	48 c7 05 ab c7 73 00 	movq   $0x1,0x73c7ab(%rip)        # 753950 <cmpPassed>
   171a1:	01 00 00 00 
   171a5:	e8 ce e6 fe ff       	callq  5878 <_storeDataFn>
   171aa:	4c 39 d8             	cmp    %r11,%rax
   171ad:	73 28                	jae    171d7 <quotearg_buffer_restyled+0x43d7>
   171af:	50                   	push   %rax
   171b0:	48 c7 c0 d8 6e f7 6b 	mov    $0x6bf76ed8,%rax
   171b7:	48 89 05 82 c7 73 00 	mov    %rax,0x73c782(%rip)        # 753940 <edgeId>
   171be:	58                   	pop    %rax
   171bf:	e8 1c e6 fe ff       	callq  57e0 <_storeEdge>
   171c4:	44 89 ee             	mov    %r13d,%esi
   171c7:	48 8b 3c 24          	mov    (%rsp),%rdi
   171cb:	40 c0 ee 06          	shr    $0x6,%sil
   171cf:	83 c6 30             	add    $0x30,%esi
   171d2:	42 88 74 3f fe       	mov    %sil,-0x2(%rdi,%r15,1)
   171d7:	50                   	push   %rax
   171d8:	48 c7 c0 bb dd af 5d 	mov    $0x5dafddbb,%rax
   171df:	48 89 05 5a c7 73 00 	mov    %rax,0x73c75a(%rip)        # 753940 <edgeId>
   171e6:	58                   	pop    %rax
   171e7:	e8 f4 e5 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   171ec:	4d 8d 67 ff          	lea    -0x1(%r15),%r12
   171f0:	48 89 15 21 c7 73 00 	mov    %rdx,0x73c721(%rip)        # 753918 <tmpquadone>
   171f7:	48 89 0d 32 6a 5e 00 	mov    %rcx,0x5e6a32(%rip)        # 5fdc30 <tmpquadtwo>
   171fe:	48 8d 15 eb 69 5e 00 	lea    0x5e69eb(%rip),%rdx        # 5fdbf0 <funcinptr>
   17205:	48 c7 02 3e 0a 00 00 	movq   $0xa3e,(%rdx)
   1720c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   17213:	00 
   17214:	4c 89 d9             	mov    %r11,%rcx
   17217:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1721b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17222:	00 
   17223:	4c 89 e1             	mov    %r12,%rcx
   17226:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1722a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17231:	00 
   17232:	ff 32                	pushq  (%rdx)
   17234:	48 8b 15 dd c6 73 00 	mov    0x73c6dd(%rip),%rdx        # 753918 <tmpquadone>
   1723b:	48 8b 0d ee 69 5e 00 	mov    0x5e69ee(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   17242:	48 c7 05 03 c7 73 00 	movq   $0x1,0x73c703(%rip)        # 753950 <cmpPassed>
   17249:	01 00 00 00 
   1724d:	e8 26 e6 fe ff       	callq  5878 <_storeDataFn>
   17252:	4d 39 dc             	cmp    %r11,%r12
   17255:	0f 82 f3 24 00 00    	jb     1974e <quotearg_buffer_restyled+0x694e>
   1725b:	50                   	push   %rax
   1725c:	48 b8 db fd da 95 00 	movabs $0x95dafddb,%rax
   17263:	00 00 00 
   17266:	48 89 05 d3 c6 73 00 	mov    %rax,0x73c6d3(%rip)        # 753940 <edgeId>
   1726d:	58                   	pop    %rax
   1726e:	e8 6d e5 fe ff       	callq  57e0 <_storeEdge>
   17273:	50                   	push   %rax
   17274:	48 c7 c0 ed 7e ed 4a 	mov    $0x4aed7eed,%rax
   1727b:	48 89 05 be c6 73 00 	mov    %rax,0x73c6be(%rip)        # 753940 <edgeId>
   17282:	58                   	pop    %rax
   17283:	e8 58 e5 fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   17288:	41 83 e5 07          	and    $0x7,%r13d
                    if (ilim <= i + 1)
   1728c:	48 83 c3 01          	add    $0x1,%rbx
                        c = '0' + (c & 7);
   17290:	41 83 c5 30          	add    $0x30,%r13d
                    STORE (c);
   17294:	48 89 15 7d c6 73 00 	mov    %rdx,0x73c67d(%rip)        # 753918 <tmpquadone>
   1729b:	48 89 0d 8e 69 5e 00 	mov    %rcx,0x5e698e(%rip)        # 5fdc30 <tmpquadtwo>
   172a2:	48 8d 15 47 69 5e 00 	lea    0x5e6947(%rip),%rdx        # 5fdbf0 <funcinptr>
   172a9:	48 c7 02 3f 0a 00 00 	movq   $0xa3f,(%rdx)
   172b0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   172b7:	00 
   172b8:	4c 89 f9             	mov    %r15,%rcx
   172bb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   172bf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   172c6:	00 
   172c7:	4c 89 d9             	mov    %r11,%rcx
   172ca:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   172ce:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   172d5:	00 
   172d6:	ff 32                	pushq  (%rdx)
   172d8:	48 8b 15 39 c6 73 00 	mov    0x73c639(%rip),%rdx        # 753918 <tmpquadone>
   172df:	48 8b 0d 4a 69 5e 00 	mov    0x5e694a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   172e6:	48 c7 05 5f c6 73 00 	movq   $0x1,0x73c65f(%rip)        # 753950 <cmpPassed>
   172ed:	01 00 00 00 
   172f1:	e8 82 e5 fe ff       	callq  5878 <_storeDataFn>
   172f6:	4d 39 fb             	cmp    %r15,%r11
   172f9:	76 20                	jbe    1731b <quotearg_buffer_restyled+0x451b>
   172fb:	50                   	push   %rax
   172fc:	48 b8 5f bb 52 ef 00 	movabs $0xef52bb5f,%rax
   17303:	00 00 00 
   17306:	48 89 05 33 c6 73 00 	mov    %rax,0x73c633(%rip)        # 753940 <edgeId>
   1730d:	58                   	pop    %rax
   1730e:	e8 cd e4 fe ff       	callq  57e0 <_storeEdge>
   17313:	4c 8b 14 24          	mov    (%rsp),%r10
   17317:	47 88 2c 3a          	mov    %r13b,(%r10,%r15,1)
   1731b:	50                   	push   %rax
   1731c:	48 b8 6b 57 ea dd 00 	movabs $0xddea576b,%rax
   17323:	00 00 00 
   17326:	48 89 05 13 c6 73 00 	mov    %rax,0x73c613(%rip)        # 753940 <edgeId>
   1732d:	58                   	pop    %rax
   1732e:	e8 ad e4 fe ff       	callq  57e0 <_storeEdge>
                    c = arg[++i];
   17333:	45 0f b6 2c 19       	movzbl (%r9,%rbx,1),%r13d
   17338:	49 83 c7 04          	add    $0x4,%r15
   1733c:	48 8b 3c 24          	mov    (%rsp),%rdi
   17340:	e9 c5 16 00 00       	jmpq   18a0a <quotearg_buffer_restyled+0x5c0a>
   17345:	0f 1f 00             	nopl   (%rax)
   17348:	50                   	push   %rax
   17349:	48 b8 a5 de 9d 86 00 	movabs $0x869ddea5,%rax
   17350:	00 00 00 
   17353:	48 89 05 e6 c5 73 00 	mov    %rax,0x73c5e6(%rip)        # 753940 <edgeId>
   1735a:	58                   	pop    %rax
   1735b:	e8 80 e4 fe ff       	callq  57e0 <_storeEdge>
                            for (j = 1; j < bytes; j++)
   17360:	48 89 15 b1 c5 73 00 	mov    %rdx,0x73c5b1(%rip)        # 753918 <tmpquadone>
   17367:	48 89 0d c2 68 5e 00 	mov    %rcx,0x5e68c2(%rip)        # 5fdc30 <tmpquadtwo>
   1736e:	48 8d 15 7b 68 5e 00 	lea    0x5e687b(%rip),%rdx        # 5fdbf0 <funcinptr>
   17375:	48 c7 02 40 0a 00 00 	movq   $0xa40,(%rdx)
   1737c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   17383:	00 
   17384:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   1738b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1738f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17396:	00 
   17397:	48 89 c1             	mov    %rax,%rcx
   1739a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1739e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   173a5:	00 
   173a6:	ff 32                	pushq  (%rdx)
   173a8:	48 8b 15 69 c5 73 00 	mov    0x73c569(%rip),%rdx        # 753918 <tmpquadone>
   173af:	48 8b 0d 7a 68 5e 00 	mov    0x5e687a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   173b6:	48 c7 05 8f c5 73 00 	movq   $0x1,0x73c58f(%rip)        # 753950 <cmpPassed>
   173bd:	01 00 00 00 
   173c1:	e8 b2 e4 fe ff       	callq  5878 <_storeDataFn>
   173c6:	48 83 f8 01          	cmp    $0x1,%rax
   173ca:	0f 84 a1 f3 ff ff    	je     16771 <quotearg_buffer_restyled+0x3971>
   173d0:	50                   	push   %rax
   173d1:	48 b8 bd 3b 0d d1 00 	movabs $0xd10d3bbd,%rax
   173d8:	00 00 00 
   173db:	48 89 05 5e c5 73 00 	mov    %rax,0x73c55e(%rip)        # 753940 <edgeId>
   173e2:	58                   	pop    %rax
   173e3:	e8 f8 e3 fe ff       	callq  57e0 <_storeEdge>
   173e8:	4f 8d 1c 17          	lea    (%r15,%r10,1),%r11
   173ec:	49 8d 44 1f 01       	lea    0x1(%r15,%rbx,1),%rax
   173f1:	49 8d 14 1b          	lea    (%r11,%rbx,1),%rdx
   173f5:	48 89 d7             	mov    %rdx,%rdi
   173f8:	48 29 c7             	sub    %rax,%rdi
   173fb:	83 e7 07             	and    $0x7,%edi
   173fe:	0f 84 d7 09 00 00    	je     17ddb <quotearg_buffer_restyled+0x4fdb>
   17404:	50                   	push   %rax
   17405:	48 b8 3b 0d d1 a1 00 	movabs $0xa1d10d3b,%rax
   1740c:	00 00 00 
   1740f:	48 89 05 2a c5 73 00 	mov    %rax,0x73c52a(%rip)        # 753940 <edgeId>
   17416:	58                   	pop    %rax
   17417:	e8 c4 e3 fe ff       	callq  57e0 <_storeEdge>
   1741c:	48 89 15 f5 c4 73 00 	mov    %rdx,0x73c4f5(%rip)        # 753918 <tmpquadone>
   17423:	48 89 0d 06 68 5e 00 	mov    %rcx,0x5e6806(%rip)        # 5fdc30 <tmpquadtwo>
   1742a:	48 8d 15 bf 67 5e 00 	lea    0x5e67bf(%rip),%rdx        # 5fdbf0 <funcinptr>
   17431:	48 c7 02 41 0a 00 00 	movq   $0xa41,(%rdx)
   17438:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1743f:	00 
   17440:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   17447:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1744b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17452:	00 
   17453:	48 89 f9             	mov    %rdi,%rcx
   17456:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1745a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17461:	00 
   17462:	ff 32                	pushq  (%rdx)
   17464:	48 8b 15 ad c4 73 00 	mov    0x73c4ad(%rip),%rdx        # 753918 <tmpquadone>
   1746b:	48 8b 0d be 67 5e 00 	mov    0x5e67be(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   17472:	48 c7 05 d3 c4 73 00 	movq   $0x1,0x73c4d3(%rip)        # 753950 <cmpPassed>
   17479:	01 00 00 00 
   1747d:	e8 f6 e3 fe ff       	callq  5878 <_storeDataFn>
   17482:	48 83 ff 01          	cmp    $0x1,%rdi
   17486:	0f 84 e4 07 00 00    	je     17c70 <quotearg_buffer_restyled+0x4e70>
   1748c:	50                   	push   %rax
   1748d:	48 b8 4e 43 74 e8 00 	movabs $0xe874434e,%rax
   17494:	00 00 00 
   17497:	48 89 05 a2 c4 73 00 	mov    %rax,0x73c4a2(%rip)        # 753940 <edgeId>
   1749e:	58                   	pop    %rax
   1749f:	e8 3c e3 fe ff       	callq  57e0 <_storeEdge>
   174a4:	48 89 15 6d c4 73 00 	mov    %rdx,0x73c46d(%rip)        # 753918 <tmpquadone>
   174ab:	48 89 0d 7e 67 5e 00 	mov    %rcx,0x5e677e(%rip)        # 5fdc30 <tmpquadtwo>
   174b2:	48 8d 15 37 67 5e 00 	lea    0x5e6737(%rip),%rdx        # 5fdbf0 <funcinptr>
   174b9:	48 c7 02 42 0a 00 00 	movq   $0xa42,(%rdx)
   174c0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   174c7:	00 
   174c8:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   174cf:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   174d3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   174da:	00 
   174db:	48 89 f9             	mov    %rdi,%rcx
   174de:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   174e2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   174e9:	00 
   174ea:	ff 32                	pushq  (%rdx)
   174ec:	48 8b 15 25 c4 73 00 	mov    0x73c425(%rip),%rdx        # 753918 <tmpquadone>
   174f3:	48 8b 0d 36 67 5e 00 	mov    0x5e6736(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   174fa:	48 c7 05 4b c4 73 00 	movq   $0x1,0x73c44b(%rip)        # 753950 <cmpPassed>
   17501:	01 00 00 00 
   17505:	e8 6e e3 fe ff       	callq  5878 <_storeDataFn>
   1750a:	48 83 ff 02          	cmp    $0x2,%rdi
   1750e:	0f 84 6f 06 00 00    	je     17b83 <quotearg_buffer_restyled+0x4d83>
   17514:	50                   	push   %rax
   17515:	48 c7 c0 d3 10 1d 3a 	mov    $0x3a1d10d3,%rax
   1751c:	48 89 05 1d c4 73 00 	mov    %rax,0x73c41d(%rip)        # 753940 <edgeId>
   17523:	58                   	pop    %rax
   17524:	e8 b7 e2 fe ff       	callq  57e0 <_storeEdge>
   17529:	48 89 15 e8 c3 73 00 	mov    %rdx,0x73c3e8(%rip)        # 753918 <tmpquadone>
   17530:	48 89 0d f9 66 5e 00 	mov    %rcx,0x5e66f9(%rip)        # 5fdc30 <tmpquadtwo>
   17537:	48 8d 15 b2 66 5e 00 	lea    0x5e66b2(%rip),%rdx        # 5fdbf0 <funcinptr>
   1753e:	48 c7 02 43 0a 00 00 	movq   $0xa43,(%rdx)
   17545:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1754c:	00 
   1754d:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
   17554:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   17558:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1755f:	00 
   17560:	48 89 f9             	mov    %rdi,%rcx
   17563:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   17567:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1756e:	00 
   1756f:	ff 32                	pushq  (%rdx)
   17571:	48 8b 15 a0 c3 73 00 	mov    0x73c3a0(%rip),%rdx        # 753918 <tmpquadone>
   17578:	48 8b 0d b1 66 5e 00 	mov    0x5e66b1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1757f:	48 c7 05 c6 c3 73 00 	movq   $0x1,0x73c3c6(%rip)        # 753950 <cmpPassed>
   17586:	01 00 00 00 
   1758a:	e8 e9 e2 fe ff       	callq  5878 <_storeDataFn>
   1758f:	48 83 ff 03          	cmp    $0x3,%rdi
   17593:	0f 84 06 05 00 00    	je     17a9f <quotearg_buffer_restyled+0x4c9f>
   17599:	50                   	push   %rax
   1759a:	48 b8 34 44 87 ce 00 	movabs $0xce874434,%rax
   175a1:	00 00 00 
   175a4:	48 89 05 95 c3 73 00 	mov    %rax,0x73c395(%rip)        # 753940 <edgeId>
   175ab:	58                   	pop    %rax
   175ac:	e8 2f e2 fe ff       	callq  57e0 <_storeEdge>
   175b1:	48 89 15 60 c3 73 00 	mov    %rdx,0x73c360(%rip)        # 753918 <tmpquadone>
   175b8:	48 89 0d 71 66 5e 00 	mov    %rcx,0x5e6671(%rip)        # 5fdc30 <tmpquadtwo>
   175bf:	48 8d 15 2a 66 5e 00 	lea    0x5e662a(%rip),%rdx        # 5fdbf0 <funcinptr>
   175c6:	48 c7 02 44 0a 00 00 	movq   $0xa44,(%rdx)
   175cd:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   175d4:	00 
   175d5:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   175dc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   175e0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   175e7:	00 
   175e8:	48 89 f9             	mov    %rdi,%rcx
   175eb:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   175ef:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   175f6:	00 
   175f7:	ff 32                	pushq  (%rdx)
   175f9:	48 8b 15 18 c3 73 00 	mov    0x73c318(%rip),%rdx        # 753918 <tmpquadone>
   17600:	48 8b 0d 29 66 5e 00 	mov    0x5e6629(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   17607:	48 c7 05 3e c3 73 00 	movq   $0x1,0x73c33e(%rip)        # 753950 <cmpPassed>
   1760e:	01 00 00 00 
   17612:	e8 61 e2 fe ff       	callq  5878 <_storeDataFn>
   17617:	48 83 ff 04          	cmp    $0x4,%rdi
   1761b:	0f 84 97 03 00 00    	je     179b8 <quotearg_buffer_restyled+0x4bb8>
   17621:	50                   	push   %rax
   17622:	48 c7 c0 0d d1 a1 73 	mov    $0x73a1d10d,%rax
   17629:	48 89 05 10 c3 73 00 	mov    %rax,0x73c310(%rip)        # 753940 <edgeId>
   17630:	58                   	pop    %rax
   17631:	e8 aa e1 fe ff       	callq  57e0 <_storeEdge>
   17636:	48 89 15 db c2 73 00 	mov    %rdx,0x73c2db(%rip)        # 753918 <tmpquadone>
   1763d:	48 89 0d ec 65 5e 00 	mov    %rcx,0x5e65ec(%rip)        # 5fdc30 <tmpquadtwo>
   17644:	48 8d 15 a5 65 5e 00 	lea    0x5e65a5(%rip),%rdx        # 5fdbf0 <funcinptr>
   1764b:	48 c7 02 45 0a 00 00 	movq   $0xa45,(%rdx)
   17652:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   17659:	00 
   1765a:	48 c7 c1 05 00 00 00 	mov    $0x5,%rcx
   17661:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   17665:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1766c:	00 
   1766d:	48 89 f9             	mov    %rdi,%rcx
   17670:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   17674:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1767b:	00 
   1767c:	ff 32                	pushq  (%rdx)
   1767e:	48 8b 15 93 c2 73 00 	mov    0x73c293(%rip),%rdx        # 753918 <tmpquadone>
   17685:	48 8b 0d a4 65 5e 00 	mov    0x5e65a4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1768c:	48 c7 05 b9 c2 73 00 	movq   $0x1,0x73c2b9(%rip)        # 753950 <cmpPassed>
   17693:	01 00 00 00 
   17697:	e8 dc e1 fe ff       	callq  5878 <_storeDataFn>
   1769c:	48 83 ff 05          	cmp    $0x5,%rdi
   176a0:	0f 84 2a 02 00 00    	je     178d0 <quotearg_buffer_restyled+0x4ad0>
   176a6:	50                   	push   %rax
   176a7:	48 b8 43 74 e8 9c 00 	movabs $0x9ce87443,%rax
   176ae:	00 00 00 
   176b1:	48 89 05 88 c2 73 00 	mov    %rax,0x73c288(%rip)        # 753940 <edgeId>
   176b8:	58                   	pop    %rax
   176b9:	e8 22 e1 fe ff       	callq  57e0 <_storeEdge>
   176be:	48 89 15 53 c2 73 00 	mov    %rdx,0x73c253(%rip)        # 753918 <tmpquadone>
   176c5:	48 89 0d 64 65 5e 00 	mov    %rcx,0x5e6564(%rip)        # 5fdc30 <tmpquadtwo>
   176cc:	48 8d 15 1d 65 5e 00 	lea    0x5e651d(%rip),%rdx        # 5fdbf0 <funcinptr>
   176d3:	48 c7 02 46 0a 00 00 	movq   $0xa46,(%rdx)
   176da:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   176e1:	00 
   176e2:	48 c7 c1 06 00 00 00 	mov    $0x6,%rcx
   176e9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   176ed:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   176f4:	00 
   176f5:	48 89 f9             	mov    %rdi,%rcx
   176f8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   176fc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17703:	00 
   17704:	ff 32                	pushq  (%rdx)
   17706:	48 8b 15 0b c2 73 00 	mov    0x73c20b(%rip),%rdx        # 753918 <tmpquadone>
   1770d:	48 8b 0d 1c 65 5e 00 	mov    0x5e651c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   17714:	48 c7 05 31 c2 73 00 	movq   $0x1,0x73c231(%rip)        # 753950 <cmpPassed>
   1771b:	01 00 00 00 
   1771f:	e8 54 e1 fe ff       	callq  5878 <_storeDataFn>
   17724:	48 83 ff 06          	cmp    $0x6,%rdi
   17728:	0f 84 bb 00 00 00    	je     177e9 <quotearg_buffer_restyled+0x49e9>
   1772e:	50                   	push   %rax
   1772f:	48 b8 10 1d 3a e7 00 	movabs $0xe73a1d10,%rax
   17736:	00 00 00 
   17739:	48 89 05 00 c2 73 00 	mov    %rax,0x73c200(%rip)        # 753940 <edgeId>
   17740:	58                   	pop    %rax
   17741:	e8 9a e0 fe ff       	callq  57e0 <_storeEdge>
   17746:	0f b6 08             	movzbl (%rax),%ecx
   17749:	83 e9 5b             	sub    $0x5b,%ecx
   1774c:	48 89 15 c5 c1 73 00 	mov    %rdx,0x73c1c5(%rip)        # 753918 <tmpquadone>
   17753:	48 89 1d d6 64 5e 00 	mov    %rbx,0x5e64d6(%rip)        # 5fdc30 <tmpquadtwo>
   1775a:	48 8d 15 8f 64 5e 00 	lea    0x5e648f(%rip),%rdx        # 5fdbf0 <funcinptr>
   17761:	48 c7 02 47 0a 00 00 	movq   $0xa47,(%rdx)
   17768:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1776f:	00 
   17770:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17777:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1777b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17782:	00 
   17783:	48 89 cb             	mov    %rcx,%rbx
   17786:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1778a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17791:	00 
   17792:	ff 32                	pushq  (%rdx)
   17794:	48 8b 15 7d c1 73 00 	mov    0x73c17d(%rip),%rdx        # 753918 <tmpquadone>
   1779b:	48 8b 1d 8e 64 5e 00 	mov    0x5e648e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   177a2:	48 c7 05 a3 c1 73 00 	movq   $0x1,0x73c1a3(%rip)        # 753950 <cmpPassed>
   177a9:	01 00 00 00 
   177ad:	e8 c6 e0 fe ff       	callq  5878 <_storeDataFn>
   177b2:	80 f9 21             	cmp    $0x21,%cl
   177b5:	0f 86 6d 0d 00 00    	jbe    18528 <quotearg_buffer_restyled+0x5728>
   177bb:	50                   	push   %rax
   177bc:	48 c7 c0 e8 d0 39 5f 	mov    $0x5f39d0e8,%rax
   177c3:	48 89 05 76 c1 73 00 	mov    %rax,0x73c176(%rip)        # 753940 <edgeId>
   177ca:	58                   	pop    %rax
   177cb:	e8 10 e0 fe ff       	callq  57e0 <_storeEdge>
   177d0:	50                   	push   %rax
   177d1:	48 c7 c0 74 e8 9c 2f 	mov    $0x2f9ce874,%rax
   177d8:	48 89 05 61 c1 73 00 	mov    %rax,0x73c161(%rip)        # 753940 <edgeId>
   177df:	58                   	pop    %rax
   177e0:	e8 fb df fe ff       	callq  57e0 <_storeEdge>
   177e5:	48 83 c0 01          	add    $0x1,%rax
   177e9:	50                   	push   %rax
   177ea:	48 c7 c0 1d 3a e7 4b 	mov    $0x4be73a1d,%rax
   177f1:	48 89 05 48 c1 73 00 	mov    %rax,0x73c148(%rip)        # 753940 <edgeId>
   177f8:	58                   	pop    %rax
   177f9:	e8 e2 df fe ff       	callq  57e0 <_storeEdge>
   177fe:	0f b6 08             	movzbl (%rax),%ecx
   17801:	83 e9 5b             	sub    $0x5b,%ecx
   17804:	48 89 15 0d c1 73 00 	mov    %rdx,0x73c10d(%rip)        # 753918 <tmpquadone>
   1780b:	48 89 1d 1e 64 5e 00 	mov    %rbx,0x5e641e(%rip)        # 5fdc30 <tmpquadtwo>
   17812:	48 8d 15 d7 63 5e 00 	lea    0x5e63d7(%rip),%rdx        # 5fdbf0 <funcinptr>
   17819:	48 c7 02 48 0a 00 00 	movq   $0xa48,(%rdx)
   17820:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17827:	00 
   17828:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   1782f:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17833:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1783a:	00 
   1783b:	48 89 cb             	mov    %rcx,%rbx
   1783e:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17842:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17849:	00 
   1784a:	ff 32                	pushq  (%rdx)
   1784c:	48 8b 15 c5 c0 73 00 	mov    0x73c0c5(%rip),%rdx        # 753918 <tmpquadone>
   17853:	48 8b 1d d6 63 5e 00 	mov    0x5e63d6(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1785a:	48 c7 05 eb c0 73 00 	movq   $0x1,0x73c0eb(%rip)        # 753950 <cmpPassed>
   17861:	01 00 00 00 
   17865:	e8 0e e0 fe ff       	callq  5878 <_storeDataFn>
   1786a:	80 f9 21             	cmp    $0x21,%cl
   1786d:	77 48                	ja     178b7 <quotearg_buffer_restyled+0x4ab7>
   1786f:	50                   	push   %rax
   17870:	48 c7 c0 a1 73 be 24 	mov    $0x24be73a1,%rax
   17877:	48 89 05 c2 c0 73 00 	mov    %rax,0x73c0c2(%rip)        # 753940 <edgeId>
   1787e:	58                   	pop    %rax
   1787f:	e8 5c df fe ff       	callq  57e0 <_storeEdge>
   17884:	bb 01 00 00 00       	mov    $0x1,%ebx
   17889:	49 bb 2b 00 00 00 02 	movabs $0x20000002b,%r11
   17890:	00 00 00 
   17893:	48 d3 e3             	shl    %cl,%rbx
   17896:	4c 85 db             	test   %r11,%rbx
   17899:	0f 85 d5 0c 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   1789f:	50                   	push   %rax
   178a0:	48 b8 9d f3 25 a9 00 	movabs $0xa925f39d,%rax
   178a7:	00 00 00 
   178aa:	48 89 05 8f c0 73 00 	mov    %rax,0x73c08f(%rip)        # 753940 <edgeId>
   178b1:	58                   	pop    %rax
   178b2:	e8 29 df fe ff       	callq  57e0 <_storeEdge>
   178b7:	50                   	push   %rax
   178b8:	48 c7 c0 ce f9 92 54 	mov    $0x5492f9ce,%rax
   178bf:	48 89 05 7a c0 73 00 	mov    %rax,0x73c07a(%rip)        # 753940 <edgeId>
   178c6:	58                   	pop    %rax
   178c7:	e8 14 df fe ff       	callq  57e0 <_storeEdge>
   178cc:	48 83 c0 01          	add    $0x1,%rax
   178d0:	50                   	push   %rax
   178d1:	48 b8 73 be 24 95 00 	movabs $0x9524be73,%rax
   178d8:	00 00 00 
   178db:	48 89 05 5e c0 73 00 	mov    %rax,0x73c05e(%rip)        # 753940 <edgeId>
   178e2:	58                   	pop    %rax
   178e3:	e8 f8 de fe ff       	callq  57e0 <_storeEdge>
   178e8:	0f b6 38             	movzbl (%rax),%edi
   178eb:	8d 4f a5             	lea    -0x5b(%rdi),%ecx
   178ee:	48 89 15 23 c0 73 00 	mov    %rdx,0x73c023(%rip)        # 753918 <tmpquadone>
   178f5:	48 89 1d 34 63 5e 00 	mov    %rbx,0x5e6334(%rip)        # 5fdc30 <tmpquadtwo>
   178fc:	48 8d 15 ed 62 5e 00 	lea    0x5e62ed(%rip),%rdx        # 5fdbf0 <funcinptr>
   17903:	48 c7 02 49 0a 00 00 	movq   $0xa49,(%rdx)
   1790a:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17911:	00 
   17912:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17919:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1791d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17924:	00 
   17925:	48 89 cb             	mov    %rcx,%rbx
   17928:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1792c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17933:	00 
   17934:	ff 32                	pushq  (%rdx)
   17936:	48 8b 15 db bf 73 00 	mov    0x73bfdb(%rip),%rdx        # 753918 <tmpquadone>
   1793d:	48 8b 1d ec 62 5e 00 	mov    0x5e62ec(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17944:	48 c7 05 01 c0 73 00 	movq   $0x1,0x73c001(%rip)        # 753950 <cmpPassed>
   1794b:	01 00 00 00 
   1794f:	e8 24 df fe ff       	callq  5878 <_storeDataFn>
   17954:	80 f9 21             	cmp    $0x21,%cl
   17957:	77 46                	ja     1799f <quotearg_buffer_restyled+0x4b9f>
   17959:	50                   	push   %rax
   1795a:	48 c7 c0 e7 4b 52 19 	mov    $0x19524be7,%rax
   17961:	48 89 05 d8 bf 73 00 	mov    %rax,0x73bfd8(%rip)        # 753940 <edgeId>
   17968:	58                   	pop    %rax
   17969:	e8 72 de fe ff       	callq  57e0 <_storeEdge>
   1796e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   17974:	48 be 2b 00 00 00 02 	movabs $0x20000002b,%rsi
   1797b:	00 00 00 
   1797e:	49 d3 e0             	shl    %cl,%r8
   17981:	49 85 f0             	test   %rsi,%r8
   17984:	0f 85 ea 0b 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   1798a:	50                   	push   %rax
   1798b:	48 c7 c0 5f 92 ca 40 	mov    $0x40ca925f,%rax
   17992:	48 89 05 a7 bf 73 00 	mov    %rax,0x73bfa7(%rip)        # 753940 <edgeId>
   17999:	58                   	pop    %rax
   1799a:	e8 41 de fe ff       	callq  57e0 <_storeEdge>
   1799f:	50                   	push   %rax
   179a0:	48 c7 c0 2f 49 65 20 	mov    $0x2065492f,%rax
   179a7:	48 89 05 92 bf 73 00 	mov    %rax,0x73bf92(%rip)        # 753940 <edgeId>
   179ae:	58                   	pop    %rax
   179af:	e8 2c de fe ff       	callq  57e0 <_storeEdge>
   179b4:	48 83 c0 01          	add    $0x1,%rax
   179b8:	50                   	push   %rax
   179b9:	48 c7 c0 4b 52 19 08 	mov    $0x819524b,%rax
   179c0:	48 89 05 79 bf 73 00 	mov    %rax,0x73bf79(%rip)        # 753940 <edgeId>
   179c7:	58                   	pop    %rax
   179c8:	e8 13 de fe ff       	callq  57e0 <_storeEdge>
   179cd:	0f b6 08             	movzbl (%rax),%ecx
   179d0:	83 e9 5b             	sub    $0x5b,%ecx
   179d3:	48 89 15 3e bf 73 00 	mov    %rdx,0x73bf3e(%rip)        # 753918 <tmpquadone>
   179da:	48 89 1d 4f 62 5e 00 	mov    %rbx,0x5e624f(%rip)        # 5fdc30 <tmpquadtwo>
   179e1:	48 8d 15 08 62 5e 00 	lea    0x5e6208(%rip),%rdx        # 5fdbf0 <funcinptr>
   179e8:	48 c7 02 4a 0a 00 00 	movq   $0xa4a,(%rdx)
   179ef:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   179f6:	00 
   179f7:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   179fe:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17a02:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17a09:	00 
   17a0a:	48 89 cb             	mov    %rcx,%rbx
   17a0d:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17a11:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17a18:	00 
   17a19:	ff 32                	pushq  (%rdx)
   17a1b:	48 8b 15 f6 be 73 00 	mov    0x73bef6(%rip),%rdx        # 753918 <tmpquadone>
   17a22:	48 8b 1d 07 62 5e 00 	mov    0x5e6207(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17a29:	48 c7 05 1c bf 73 00 	movq   $0x1,0x73bf1c(%rip)        # 753950 <cmpPassed>
   17a30:	01 00 00 00 
   17a34:	e8 3f de fe ff       	callq  5878 <_storeDataFn>
   17a39:	80 f9 21             	cmp    $0x21,%cl
   17a3c:	77 45                	ja     17a83 <quotearg_buffer_restyled+0x4c83>
   17a3e:	50                   	push   %rax
   17a3f:	48 c7 c0 24 95 81 10 	mov    $0x10819524,%rax
   17a46:	48 89 05 f3 be 73 00 	mov    %rax,0x73bef3(%rip)        # 753940 <edgeId>
   17a4d:	58                   	pop    %rax
   17a4e:	e8 8d dd fe ff       	callq  57e0 <_storeEdge>
   17a53:	bb 01 00 00 00       	mov    $0x1,%ebx
   17a58:	49 bb 2b 00 00 00 02 	movabs $0x20000002b,%r11
   17a5f:	00 00 00 
   17a62:	48 d3 e3             	shl    %cl,%rbx
   17a65:	4c 85 db             	test   %r11,%rbx
   17a68:	0f 85 06 0b 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17a6e:	50                   	push   %rax
   17a6f:	48 c7 c0 a9 0c 84 00 	mov    $0x840ca9,%rax
   17a76:	48 89 05 c3 be 73 00 	mov    %rax,0x73bec3(%rip)        # 753940 <edgeId>
   17a7d:	58                   	pop    %rax
   17a7e:	e8 5d dd fe ff       	callq  57e0 <_storeEdge>
   17a83:	50                   	push   %rax
   17a84:	48 b8 54 06 42 80 00 	movabs $0x80420654,%rax
   17a8b:	00 00 00 
   17a8e:	48 89 05 ab be 73 00 	mov    %rax,0x73beab(%rip)        # 753940 <edgeId>
   17a95:	58                   	pop    %rax
   17a96:	e8 45 dd fe ff       	callq  57e0 <_storeEdge>
   17a9b:	48 83 c0 01          	add    $0x1,%rax
   17a9f:	50                   	push   %rax
   17aa0:	48 c7 c0 95 81 10 20 	mov    $0x20108195,%rax
   17aa7:	48 89 05 92 be 73 00 	mov    %rax,0x73be92(%rip)        # 753940 <edgeId>
   17aae:	58                   	pop    %rax
   17aaf:	e8 2c dd fe ff       	callq  57e0 <_storeEdge>
   17ab4:	0f b6 08             	movzbl (%rax),%ecx
   17ab7:	83 e9 5b             	sub    $0x5b,%ecx
   17aba:	48 89 15 57 be 73 00 	mov    %rdx,0x73be57(%rip)        # 753918 <tmpquadone>
   17ac1:	48 89 1d 68 61 5e 00 	mov    %rbx,0x5e6168(%rip)        # 5fdc30 <tmpquadtwo>
   17ac8:	48 8d 15 21 61 5e 00 	lea    0x5e6121(%rip),%rdx        # 5fdbf0 <funcinptr>
   17acf:	48 c7 02 4b 0a 00 00 	movq   $0xa4b,(%rdx)
   17ad6:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17add:	00 
   17ade:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17ae5:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17ae9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17af0:	00 
   17af1:	48 89 cb             	mov    %rcx,%rbx
   17af4:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17af8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17aff:	00 
   17b00:	ff 32                	pushq  (%rdx)
   17b02:	48 8b 15 0f be 73 00 	mov    0x73be0f(%rip),%rdx        # 753918 <tmpquadone>
   17b09:	48 8b 1d 20 61 5e 00 	mov    0x5e6120(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17b10:	48 c7 05 35 be 73 00 	movq   $0x1,0x73be35(%rip)        # 753950 <cmpPassed>
   17b17:	01 00 00 00 
   17b1b:	e8 58 dd fe ff       	callq  5878 <_storeDataFn>
   17b20:	80 f9 21             	cmp    $0x21,%cl
   17b23:	77 45                	ja     17b6a <quotearg_buffer_restyled+0x4d6a>
   17b25:	50                   	push   %rax
   17b26:	48 c7 c0 19 08 01 52 	mov    $0x52010819,%rax
   17b2d:	48 89 05 0c be 73 00 	mov    %rax,0x73be0c(%rip)        # 753940 <edgeId>
   17b34:	58                   	pop    %rax
   17b35:	e8 a6 dc fe ff       	callq  57e0 <_storeEdge>
   17b3a:	bf 01 00 00 00       	mov    $0x1,%edi
   17b3f:	49 b9 2b 00 00 00 02 	movabs $0x20000002b,%r9
   17b46:	00 00 00 
   17b49:	48 d3 e7             	shl    %cl,%rdi
   17b4c:	4c 85 cf             	test   %r9,%rdi
   17b4f:	0f 85 1f 0a 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17b55:	50                   	push   %rax
   17b56:	48 c7 c0 40 08 90 6a 	mov    $0x6a900840,%rax
   17b5d:	48 89 05 dc bd 73 00 	mov    %rax,0x73bddc(%rip)        # 753940 <edgeId>
   17b64:	58                   	pop    %rax
   17b65:	e8 76 dc fe ff       	callq  57e0 <_storeEdge>
   17b6a:	50                   	push   %rax
   17b6b:	48 c7 c0 20 04 48 35 	mov    $0x35480420,%rax
   17b72:	48 89 05 c7 bd 73 00 	mov    %rax,0x73bdc7(%rip)        # 753940 <edgeId>
   17b79:	58                   	pop    %rax
   17b7a:	e8 61 dc fe ff       	callq  57e0 <_storeEdge>
   17b7f:	48 83 c0 01          	add    $0x1,%rax
   17b83:	50                   	push   %rax
   17b84:	48 b8 08 01 52 8d 00 	movabs $0x8d520108,%rax
   17b8b:	00 00 00 
   17b8e:	48 89 05 ab bd 73 00 	mov    %rax,0x73bdab(%rip)        # 753940 <edgeId>
   17b95:	58                   	pop    %rax
   17b96:	e8 45 dc fe ff       	callq  57e0 <_storeEdge>
   17b9b:	0f b6 08             	movzbl (%rax),%ecx
   17b9e:	83 e9 5b             	sub    $0x5b,%ecx
   17ba1:	48 89 15 70 bd 73 00 	mov    %rdx,0x73bd70(%rip)        # 753918 <tmpquadone>
   17ba8:	48 89 1d 81 60 5e 00 	mov    %rbx,0x5e6081(%rip)        # 5fdc30 <tmpquadtwo>
   17baf:	48 8d 15 3a 60 5e 00 	lea    0x5e603a(%rip),%rdx        # 5fdbf0 <funcinptr>
   17bb6:	48 c7 02 4c 0a 00 00 	movq   $0xa4c,(%rdx)
   17bbd:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17bc4:	00 
   17bc5:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17bcc:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17bd0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17bd7:	00 
   17bd8:	48 89 cb             	mov    %rcx,%rbx
   17bdb:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17bdf:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17be6:	00 
   17be7:	ff 32                	pushq  (%rdx)
   17be9:	48 8b 15 28 bd 73 00 	mov    0x73bd28(%rip),%rdx        # 753918 <tmpquadone>
   17bf0:	48 8b 1d 39 60 5e 00 	mov    0x5e6039(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17bf7:	48 c7 05 4e bd 73 00 	movq   $0x1,0x73bd4e(%rip)        # 753950 <cmpPassed>
   17bfe:	01 00 00 00 
   17c02:	e8 71 dc fe ff       	callq  5878 <_storeDataFn>
   17c07:	80 f9 21             	cmp    $0x21,%cl
   17c0a:	77 48                	ja     17c54 <quotearg_buffer_restyled+0x4e54>
   17c0c:	50                   	push   %rax
   17c0d:	48 c7 c0 10 20 d5 08 	mov    $0x8d52010,%rax
   17c14:	48 89 05 25 bd 73 00 	mov    %rax,0x73bd25(%rip)        # 753940 <edgeId>
   17c1b:	58                   	pop    %rax
   17c1c:	e8 bf db fe ff       	callq  57e0 <_storeEdge>
   17c21:	be 01 00 00 00       	mov    $0x1,%esi
   17c26:	49 bd 2b 00 00 00 02 	movabs $0x20000002b,%r13
   17c2d:	00 00 00 
   17c30:	48 d3 e6             	shl    %cl,%rsi
   17c33:	4c 85 ee             	test   %r13,%rsi
   17c36:	0f 85 38 09 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17c3c:	50                   	push   %rax
   17c3d:	48 b8 00 a9 46 e0 00 	movabs $0xe046a900,%rax
   17c44:	00 00 00 
   17c47:	48 89 05 f2 bc 73 00 	mov    %rax,0x73bcf2(%rip)        # 753940 <edgeId>
   17c4e:	58                   	pop    %rax
   17c4f:	e8 8c db fe ff       	callq  57e0 <_storeEdge>
   17c54:	50                   	push   %rax
   17c55:	48 b8 80 54 23 f0 00 	movabs $0xf0235480,%rax
   17c5c:	00 00 00 
   17c5f:	48 89 05 da bc 73 00 	mov    %rax,0x73bcda(%rip)        # 753940 <edgeId>
   17c66:	58                   	pop    %rax
   17c67:	e8 74 db fe ff       	callq  57e0 <_storeEdge>
   17c6c:	48 83 c0 01          	add    $0x1,%rax
   17c70:	50                   	push   %rax
   17c71:	48 c7 c0 20 d5 08 3c 	mov    $0x3c08d520,%rax
   17c78:	48 89 05 c1 bc 73 00 	mov    %rax,0x73bcc1(%rip)        # 753940 <edgeId>
   17c7f:	58                   	pop    %rax
   17c80:	e8 5b db fe ff       	callq  57e0 <_storeEdge>
   17c85:	0f b6 08             	movzbl (%rax),%ecx
   17c88:	83 e9 5b             	sub    $0x5b,%ecx
   17c8b:	48 89 15 86 bc 73 00 	mov    %rdx,0x73bc86(%rip)        # 753918 <tmpquadone>
   17c92:	48 89 1d 97 5f 5e 00 	mov    %rbx,0x5e5f97(%rip)        # 5fdc30 <tmpquadtwo>
   17c99:	48 8d 15 50 5f 5e 00 	lea    0x5e5f50(%rip),%rdx        # 5fdbf0 <funcinptr>
   17ca0:	48 c7 02 4d 0a 00 00 	movq   $0xa4d,(%rdx)
   17ca7:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17cae:	00 
   17caf:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17cb6:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17cba:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17cc1:	00 
   17cc2:	48 89 cb             	mov    %rcx,%rbx
   17cc5:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17cc9:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17cd0:	00 
   17cd1:	ff 32                	pushq  (%rdx)
   17cd3:	48 8b 15 3e bc 73 00 	mov    0x73bc3e(%rip),%rdx        # 753918 <tmpquadone>
   17cda:	48 8b 1d 4f 5f 5e 00 	mov    0x5e5f4f(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17ce1:	48 c7 05 64 bc 73 00 	movq   $0x1,0x73bc64(%rip)        # 753950 <cmpPassed>
   17ce8:	01 00 00 00 
   17cec:	e8 87 db fe ff       	callq  5878 <_storeDataFn>
   17cf1:	80 f9 21             	cmp    $0x21,%cl
   17cf4:	77 49                	ja     17d3f <quotearg_buffer_restyled+0x4f3f>
   17cf6:	50                   	push   %rax
   17cf7:	48 c7 c0 52 8d c0 33 	mov    $0x33c08d52,%rax
   17cfe:	48 89 05 3b bc 73 00 	mov    %rax,0x73bc3b(%rip)        # 753940 <edgeId>
   17d05:	58                   	pop    %rax
   17d06:	e8 d5 da fe ff       	callq  57e0 <_storeEdge>
   17d0b:	41 bb 01 00 00 00    	mov    $0x1,%r11d
   17d11:	49 b8 2b 00 00 00 02 	movabs $0x20000002b,%r8
   17d18:	00 00 00 
   17d1b:	49 d3 e3             	shl    %cl,%r11
   17d1e:	4d 85 c3             	test   %r8,%r11
   17d21:	0f 85 4d 08 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17d27:	50                   	push   %rax
   17d28:	48 b8 6a 04 9e a1 00 	movabs $0xa19e046a,%rax
   17d2f:	00 00 00 
   17d32:	48 89 05 07 bc 73 00 	mov    %rax,0x73bc07(%rip)        # 753940 <edgeId>
   17d39:	58                   	pop    %rax
   17d3a:	e8 a1 da fe ff       	callq  57e0 <_storeEdge>
   17d3f:	50                   	push   %rax
   17d40:	48 c7 c0 35 02 cf 50 	mov    $0x50cf0235,%rax
   17d47:	48 89 05 f2 bb 73 00 	mov    %rax,0x73bbf2(%rip)        # 753940 <edgeId>
   17d4e:	58                   	pop    %rax
   17d4f:	e8 8c da fe ff       	callq  57e0 <_storeEdge>
   17d54:	48 83 c0 01          	add    $0x1,%rax
   17d58:	48 89 0d b9 bb 73 00 	mov    %rcx,0x73bbb9(%rip)        # 753918 <tmpquadone>
   17d5f:	48 89 1d ca 5e 5e 00 	mov    %rbx,0x5e5eca(%rip)        # 5fdc30 <tmpquadtwo>
   17d66:	48 8d 0d 83 5e 5e 00 	lea    0x5e5e83(%rip),%rcx        # 5fdbf0 <funcinptr>
   17d6d:	48 c7 01 4e 0a 00 00 	movq   $0xa4e,(%rcx)
   17d74:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   17d7b:	00 
   17d7c:	48 89 d3             	mov    %rdx,%rbx
   17d7f:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   17d83:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   17d8a:	00 
   17d8b:	48 89 c3             	mov    %rax,%rbx
   17d8e:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   17d92:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   17d99:	00 
   17d9a:	ff 31                	pushq  (%rcx)
   17d9c:	48 8b 0d 75 bb 73 00 	mov    0x73bb75(%rip),%rcx        # 753918 <tmpquadone>
   17da3:	48 8b 1d 86 5e 5e 00 	mov    0x5e5e86(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17daa:	48 c7 05 9b bb 73 00 	movq   $0x1,0x73bb9b(%rip)        # 753950 <cmpPassed>
   17db1:	01 00 00 00 
   17db5:	e8 be da fe ff       	callq  5878 <_storeDataFn>
   17dba:	48 39 d0             	cmp    %rdx,%rax
   17dbd:	0f 84 ae e9 ff ff    	je     16771 <quotearg_buffer_restyled+0x3971>
   17dc3:	50                   	push   %rax
   17dc4:	48 b8 46 e0 19 aa 00 	movabs $0xaa19e046,%rax
   17dcb:	00 00 00 
   17dce:	48 89 05 6b bb 73 00 	mov    %rax,0x73bb6b(%rip)        # 753940 <edgeId>
   17dd5:	58                   	pop    %rax
   17dd6:	e8 05 da fe ff       	callq  57e0 <_storeEdge>
   17ddb:	50                   	push   %rax
   17ddc:	48 b8 23 f0 0c d5 00 	movabs $0xd50cf023,%rax
   17de3:	00 00 00 
   17de6:	48 89 05 53 bb 73 00 	mov    %rax,0x73bb53(%rip)        # 753940 <edgeId>
   17ded:	58                   	pop    %rax
   17dee:	e8 ed d9 fe ff       	callq  57e0 <_storeEdge>
   17df3:	0f b6 08             	movzbl (%rax),%ecx
   17df6:	83 e9 5b             	sub    $0x5b,%ecx
   17df9:	48 89 15 18 bb 73 00 	mov    %rdx,0x73bb18(%rip)        # 753918 <tmpquadone>
   17e00:	48 89 1d 29 5e 5e 00 	mov    %rbx,0x5e5e29(%rip)        # 5fdc30 <tmpquadtwo>
   17e07:	48 8d 15 e2 5d 5e 00 	lea    0x5e5de2(%rip),%rdx        # 5fdbf0 <funcinptr>
   17e0e:	48 c7 02 4f 0a 00 00 	movq   $0xa4f,(%rdx)
   17e15:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17e1c:	00 
   17e1d:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17e24:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17e28:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17e2f:	00 
   17e30:	48 89 cb             	mov    %rcx,%rbx
   17e33:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17e37:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17e3e:	00 
   17e3f:	ff 32                	pushq  (%rdx)
   17e41:	48 8b 15 d0 ba 73 00 	mov    0x73bad0(%rip),%rdx        # 753918 <tmpquadone>
   17e48:	48 8b 1d e1 5d 5e 00 	mov    0x5e5de1(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17e4f:	48 c7 05 f6 ba 73 00 	movq   $0x1,0x73baf6(%rip)        # 753950 <cmpPassed>
   17e56:	01 00 00 00 
   17e5a:	e8 19 da fe ff       	callq  5878 <_storeDataFn>
   17e5f:	80 f9 21             	cmp    $0x21,%cl
   17e62:	77 4c                	ja     17eb0 <quotearg_buffer_restyled+0x50b0>
   17e64:	50                   	push   %rax
   17e65:	48 b8 02 cf 50 9d 00 	movabs $0x9d50cf02,%rax
   17e6c:	00 00 00 
   17e6f:	48 89 05 ca ba 73 00 	mov    %rax,0x73baca(%rip)        # 753940 <edgeId>
   17e76:	58                   	pop    %rax
   17e77:	e8 64 d9 fe ff       	callq  57e0 <_storeEdge>
   17e7c:	41 b9 01 00 00 00    	mov    $0x1,%r9d
   17e82:	48 be 2b 00 00 00 02 	movabs $0x20000002b,%rsi
   17e89:	00 00 00 
   17e8c:	49 d3 e1             	shl    %cl,%r9
   17e8f:	49 85 f1             	test   %rsi,%r9
   17e92:	0f 85 dc 06 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17e98:	50                   	push   %rax
   17e99:	48 b8 78 86 ea 94 00 	movabs $0x94ea8678,%rax
   17ea0:	00 00 00 
   17ea3:	48 89 05 96 ba 73 00 	mov    %rax,0x73ba96(%rip)        # 753940 <edgeId>
   17eaa:	58                   	pop    %rax
   17eab:	e8 30 d9 fe ff       	callq  57e0 <_storeEdge>
   17eb0:	50                   	push   %rax
   17eb1:	48 c7 c0 3c 43 75 4a 	mov    $0x4a75433c,%rax
   17eb8:	48 89 05 81 ba 73 00 	mov    %rax,0x73ba81(%rip)        # 753940 <edgeId>
   17ebf:	58                   	pop    %rax
   17ec0:	e8 1b d9 fe ff       	callq  57e0 <_storeEdge>
   17ec5:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
   17ec9:	4c 8d 68 01          	lea    0x1(%rax),%r13
   17ecd:	83 e9 5b             	sub    $0x5b,%ecx
   17ed0:	48 89 15 41 ba 73 00 	mov    %rdx,0x73ba41(%rip)        # 753918 <tmpquadone>
   17ed7:	48 89 1d 52 5d 5e 00 	mov    %rbx,0x5e5d52(%rip)        # 5fdc30 <tmpquadtwo>
   17ede:	48 8d 15 0b 5d 5e 00 	lea    0x5e5d0b(%rip),%rdx        # 5fdbf0 <funcinptr>
   17ee5:	48 c7 02 50 0a 00 00 	movq   $0xa50,(%rdx)
   17eec:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17ef3:	00 
   17ef4:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17efb:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17eff:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17f06:	00 
   17f07:	48 89 cb             	mov    %rcx,%rbx
   17f0a:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17f0e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17f15:	00 
   17f16:	ff 32                	pushq  (%rdx)
   17f18:	48 8b 15 f9 b9 73 00 	mov    0x73b9f9(%rip),%rdx        # 753918 <tmpquadone>
   17f1f:	48 8b 1d 0a 5d 5e 00 	mov    0x5e5d0a(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17f26:	48 c7 05 1f ba 73 00 	movq   $0x1,0x73ba1f(%rip)        # 753950 <cmpPassed>
   17f2d:	01 00 00 00 
   17f31:	e8 42 d9 fe ff       	callq  5878 <_storeDataFn>
   17f36:	80 f9 21             	cmp    $0x21,%cl
   17f39:	77 4b                	ja     17f86 <quotearg_buffer_restyled+0x5186>
   17f3b:	50                   	push   %rax
   17f3c:	48 b8 19 aa 53 ba 00 	movabs $0xba53aa19,%rax
   17f43:	00 00 00 
   17f46:	48 89 05 f3 b9 73 00 	mov    %rax,0x73b9f3(%rip)        # 753940 <edgeId>
   17f4d:	58                   	pop    %rax
   17f4e:	e8 8d d8 fe ff       	callq  57e0 <_storeEdge>
   17f53:	b8 01 00 00 00       	mov    $0x1,%eax
   17f58:	49 bb 2b 00 00 00 02 	movabs $0x20000002b,%r11
   17f5f:	00 00 00 
   17f62:	48 d3 e0             	shl    %cl,%rax
   17f65:	4c 85 d8             	test   %r11,%rax
   17f68:	0f 85 06 06 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   17f6e:	50                   	push   %rax
   17f6f:	48 b8 50 9d d2 e5 00 	movabs $0xe5d29d50,%rax
   17f76:	00 00 00 
   17f79:	48 89 05 c0 b9 73 00 	mov    %rax,0x73b9c0(%rip)        # 753940 <edgeId>
   17f80:	58                   	pop    %rax
   17f81:	e8 5a d8 fe ff       	callq  57e0 <_storeEdge>
   17f86:	50                   	push   %rax
   17f87:	48 c7 c0 a8 4e e9 72 	mov    $0x72e94ea8,%rax
   17f8e:	48 89 05 ab b9 73 00 	mov    %rax,0x73b9ab(%rip)        # 753940 <edgeId>
   17f95:	58                   	pop    %rax
   17f96:	e8 45 d8 fe ff       	callq  57e0 <_storeEdge>
   17f9b:	41 0f b6 7d 01       	movzbl 0x1(%r13),%edi
   17fa0:	8d 4f a5             	lea    -0x5b(%rdi),%ecx
   17fa3:	48 89 15 6e b9 73 00 	mov    %rdx,0x73b96e(%rip)        # 753918 <tmpquadone>
   17faa:	48 89 1d 7f 5c 5e 00 	mov    %rbx,0x5e5c7f(%rip)        # 5fdc30 <tmpquadtwo>
   17fb1:	48 8d 15 38 5c 5e 00 	lea    0x5e5c38(%rip),%rdx        # 5fdbf0 <funcinptr>
   17fb8:	48 c7 02 51 0a 00 00 	movq   $0xa51,(%rdx)
   17fbf:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   17fc6:	00 
   17fc7:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   17fce:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   17fd2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   17fd9:	00 
   17fda:	48 89 cb             	mov    %rcx,%rbx
   17fdd:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   17fe1:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   17fe8:	00 
   17fe9:	ff 32                	pushq  (%rdx)
   17feb:	48 8b 15 26 b9 73 00 	mov    0x73b926(%rip),%rdx        # 753918 <tmpquadone>
   17ff2:	48 8b 1d 37 5c 5e 00 	mov    0x5e5c37(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   17ff9:	48 c7 05 4c b9 73 00 	movq   $0x1,0x73b94c(%rip)        # 753950 <cmpPassed>
   18000:	01 00 00 00 
   18004:	e8 6f d8 fe ff       	callq  5878 <_storeDataFn>
   18009:	80 f9 21             	cmp    $0x21,%cl
   1800c:	77 49                	ja     18057 <quotearg_buffer_restyled+0x5257>
   1800e:	50                   	push   %rax
   1800f:	48 b8 ea 94 2e c7 00 	movabs $0xc72e94ea,%rax
   18016:	00 00 00 
   18019:	48 89 05 20 b9 73 00 	mov    %rax,0x73b920(%rip)        # 753940 <edgeId>
   18020:	58                   	pop    %rax
   18021:	e8 ba d7 fe ff       	callq  57e0 <_storeEdge>
   18026:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1802c:	49 b9 2b 00 00 00 02 	movabs $0x20000002b,%r9
   18033:	00 00 00 
   18036:	49 d3 e0             	shl    %cl,%r8
   18039:	4d 85 c8             	test   %r9,%r8
   1803c:	0f 85 32 05 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   18042:	50                   	push   %rax
   18043:	48 c7 c0 a7 74 39 66 	mov    $0x663974a7,%rax
   1804a:	48 89 05 ef b8 73 00 	mov    %rax,0x73b8ef(%rip)        # 753940 <edgeId>
   18051:	58                   	pop    %rax
   18052:	e8 89 d7 fe ff       	callq  57e0 <_storeEdge>
   18057:	50                   	push   %rax
   18058:	48 b8 53 ba 1c b3 00 	movabs $0xb31cba53,%rax
   1805f:	00 00 00 
   18062:	48 89 05 d7 b8 73 00 	mov    %rax,0x73b8d7(%rip)        # 753940 <edgeId>
   18069:	58                   	pop    %rax
   1806a:	e8 71 d7 fe ff       	callq  57e0 <_storeEdge>
   1806f:	41 0f b6 5d 02       	movzbl 0x2(%r13),%ebx
   18074:	8d 4b a5             	lea    -0x5b(%rbx),%ecx
   18077:	48 89 15 9a b8 73 00 	mov    %rdx,0x73b89a(%rip)        # 753918 <tmpquadone>
   1807e:	48 89 1d ab 5b 5e 00 	mov    %rbx,0x5e5bab(%rip)        # 5fdc30 <tmpquadtwo>
   18085:	48 8d 15 64 5b 5e 00 	lea    0x5e5b64(%rip),%rdx        # 5fdbf0 <funcinptr>
   1808c:	48 c7 02 52 0a 00 00 	movq   $0xa52,(%rdx)
   18093:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1809a:	00 
   1809b:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   180a2:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   180a6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   180ad:	00 
   180ae:	48 89 cb             	mov    %rcx,%rbx
   180b1:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   180b5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   180bc:	00 
   180bd:	ff 32                	pushq  (%rdx)
   180bf:	48 8b 15 52 b8 73 00 	mov    0x73b852(%rip),%rdx        # 753918 <tmpquadone>
   180c6:	48 8b 1d 63 5b 5e 00 	mov    0x5e5b63(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   180cd:	48 c7 05 78 b8 73 00 	movq   $0x1,0x73b878(%rip)        # 753950 <cmpPassed>
   180d4:	01 00 00 00 
   180d8:	e8 9b d7 fe ff       	callq  5878 <_storeDataFn>
   180dd:	80 f9 21             	cmp    $0x21,%cl
   180e0:	77 45                	ja     18127 <quotearg_buffer_restyled+0x5327>
   180e2:	50                   	push   %rax
   180e3:	48 c7 c0 a5 cb 31 5b 	mov    $0x5b31cba5,%rax
   180ea:	48 89 05 4f b8 73 00 	mov    %rax,0x73b84f(%rip)        # 753940 <edgeId>
   180f1:	58                   	pop    %rax
   180f2:	e8 e9 d6 fe ff       	callq  57e0 <_storeEdge>
   180f7:	be 01 00 00 00       	mov    $0x1,%esi
   180fc:	48 b8 2b 00 00 00 02 	movabs $0x20000002b,%rax
   18103:	00 00 00 
   18106:	48 d3 e6             	shl    %cl,%rsi
   18109:	48 85 c6             	test   %rax,%rsi
   1810c:	0f 85 62 04 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   18112:	50                   	push   %rax
   18113:	48 c7 c0 5d 8e d9 2a 	mov    $0x2ad98e5d,%rax
   1811a:	48 89 05 1f b8 73 00 	mov    %rax,0x73b81f(%rip)        # 753940 <edgeId>
   18121:	58                   	pop    %rax
   18122:	e8 b9 d6 fe ff       	callq  57e0 <_storeEdge>
   18127:	50                   	push   %rax
   18128:	48 b8 2e c7 6c 95 00 	movabs $0x956cc72e,%rax
   1812f:	00 00 00 
   18132:	48 89 05 07 b8 73 00 	mov    %rax,0x73b807(%rip)        # 753940 <edgeId>
   18139:	58                   	pop    %rax
   1813a:	e8 a1 d6 fe ff       	callq  57e0 <_storeEdge>
   1813f:	45 0f b6 5d 03       	movzbl 0x3(%r13),%r11d
   18144:	41 8d 4b a5          	lea    -0x5b(%r11),%ecx
   18148:	48 89 15 c9 b7 73 00 	mov    %rdx,0x73b7c9(%rip)        # 753918 <tmpquadone>
   1814f:	48 89 1d da 5a 5e 00 	mov    %rbx,0x5e5ada(%rip)        # 5fdc30 <tmpquadtwo>
   18156:	48 8d 15 93 5a 5e 00 	lea    0x5e5a93(%rip),%rdx        # 5fdbf0 <funcinptr>
   1815d:	48 c7 02 53 0a 00 00 	movq   $0xa53,(%rdx)
   18164:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1816b:	00 
   1816c:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   18173:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   18177:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1817e:	00 
   1817f:	48 89 cb             	mov    %rcx,%rbx
   18182:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   18186:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1818d:	00 
   1818e:	ff 32                	pushq  (%rdx)
   18190:	48 8b 15 81 b7 73 00 	mov    0x73b781(%rip),%rdx        # 753918 <tmpquadone>
   18197:	48 8b 1d 92 5a 5e 00 	mov    0x5e5a92(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1819e:	48 c7 05 a7 b7 73 00 	movq   $0x1,0x73b7a7(%rip)        # 753950 <cmpPassed>
   181a5:	01 00 00 00 
   181a9:	e8 ca d6 fe ff       	callq  5878 <_storeDataFn>
   181ae:	80 f9 21             	cmp    $0x21,%cl
   181b1:	77 4b                	ja     181fe <quotearg_buffer_restyled+0x53fe>
   181b3:	50                   	push   %rax
   181b4:	48 b8 72 cc 56 f9 00 	movabs $0xf956cc72,%rax
   181bb:	00 00 00 
   181be:	48 89 05 7b b7 73 00 	mov    %rax,0x73b77b(%rip)        # 753940 <edgeId>
   181c5:	58                   	pop    %rax
   181c6:	e8 15 d6 fe ff       	callq  57e0 <_storeEdge>
   181cb:	bf 01 00 00 00       	mov    $0x1,%edi
   181d0:	49 b8 2b 00 00 00 02 	movabs $0x20000002b,%r8
   181d7:	00 00 00 
   181da:	48 d3 e7             	shl    %cl,%rdi
   181dd:	4c 85 c7             	test   %r8,%rdi
   181e0:	0f 85 8e 03 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   181e6:	50                   	push   %rax
   181e7:	48 b8 63 b6 ca b7 00 	movabs $0xb7cab663,%rax
   181ee:	00 00 00 
   181f1:	48 89 05 48 b7 73 00 	mov    %rax,0x73b748(%rip)        # 753940 <edgeId>
   181f8:	58                   	pop    %rax
   181f9:	e8 e2 d5 fe ff       	callq  57e0 <_storeEdge>
   181fe:	50                   	push   %rax
   181ff:	48 b8 31 5b e5 db 00 	movabs $0xdbe55b31,%rax
   18206:	00 00 00 
   18209:	48 89 05 30 b7 73 00 	mov    %rax,0x73b730(%rip)        # 753940 <edgeId>
   18210:	58                   	pop    %rax
   18211:	e8 ca d5 fe ff       	callq  57e0 <_storeEdge>
   18216:	45 0f b6 4d 04       	movzbl 0x4(%r13),%r9d
   1821b:	41 8d 49 a5          	lea    -0x5b(%r9),%ecx
   1821f:	48 89 15 f2 b6 73 00 	mov    %rdx,0x73b6f2(%rip)        # 753918 <tmpquadone>
   18226:	48 89 1d 03 5a 5e 00 	mov    %rbx,0x5e5a03(%rip)        # 5fdc30 <tmpquadtwo>
   1822d:	48 8d 15 bc 59 5e 00 	lea    0x5e59bc(%rip),%rdx        # 5fdbf0 <funcinptr>
   18234:	48 c7 02 54 0a 00 00 	movq   $0xa54,(%rdx)
   1823b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   18242:	00 
   18243:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   1824a:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1824e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18255:	00 
   18256:	48 89 cb             	mov    %rcx,%rbx
   18259:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1825d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18264:	00 
   18265:	ff 32                	pushq  (%rdx)
   18267:	48 8b 15 aa b6 73 00 	mov    0x73b6aa(%rip),%rdx        # 753918 <tmpquadone>
   1826e:	48 8b 1d bb 59 5e 00 	mov    0x5e59bb(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   18275:	48 c7 05 d0 b6 73 00 	movq   $0x1,0x73b6d0(%rip)        # 753950 <cmpPassed>
   1827c:	01 00 00 00 
   18280:	e8 f3 d5 fe ff       	callq  5878 <_storeDataFn>
   18285:	80 f9 21             	cmp    $0x21,%cl
   18288:	77 4b                	ja     182d5 <quotearg_buffer_restyled+0x54d5>
   1828a:	50                   	push   %rax
   1828b:	48 b8 b3 55 be 8d 00 	movabs $0x8dbe55b3,%rax
   18292:	00 00 00 
   18295:	48 89 05 a4 b6 73 00 	mov    %rax,0x73b6a4(%rip)        # 753940 <edgeId>
   1829c:	58                   	pop    %rax
   1829d:	e8 3e d5 fe ff       	callq  57e0 <_storeEdge>
   182a2:	bb 01 00 00 00       	mov    $0x1,%ebx
   182a7:	48 be 2b 00 00 00 02 	movabs $0x20000002b,%rsi
   182ae:	00 00 00 
   182b1:	48 d3 e3             	shl    %cl,%rbx
   182b4:	48 85 f3             	test   %rsi,%rbx
   182b7:	0f 85 b7 02 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   182bd:	50                   	push   %rax
   182be:	48 b8 ad f2 6d d4 00 	movabs $0xd46df2ad,%rax
   182c5:	00 00 00 
   182c8:	48 89 05 71 b6 73 00 	mov    %rax,0x73b671(%rip)        # 753940 <edgeId>
   182cf:	58                   	pop    %rax
   182d0:	e8 0b d5 fe ff       	callq  57e0 <_storeEdge>
   182d5:	50                   	push   %rax
   182d6:	48 b8 56 f9 36 ea 00 	movabs $0xea36f956,%rax
   182dd:	00 00 00 
   182e0:	48 89 05 59 b6 73 00 	mov    %rax,0x73b659(%rip)        # 753940 <edgeId>
   182e7:	58                   	pop    %rax
   182e8:	e8 f3 d4 fe ff       	callq  57e0 <_storeEdge>
   182ed:	41 0f b6 45 05       	movzbl 0x5(%r13),%eax
   182f2:	8d 48 a5             	lea    -0x5b(%rax),%ecx
   182f5:	48 89 15 1c b6 73 00 	mov    %rdx,0x73b61c(%rip)        # 753918 <tmpquadone>
   182fc:	48 89 1d 2d 59 5e 00 	mov    %rbx,0x5e592d(%rip)        # 5fdc30 <tmpquadtwo>
   18303:	48 8d 15 e6 58 5e 00 	lea    0x5e58e6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1830a:	48 c7 02 55 0a 00 00 	movq   $0xa55,(%rdx)
   18311:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   18318:	00 
   18319:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   18320:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   18324:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1832b:	00 
   1832c:	48 89 cb             	mov    %rcx,%rbx
   1832f:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   18333:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1833a:	00 
   1833b:	ff 32                	pushq  (%rdx)
   1833d:	48 8b 15 d4 b5 73 00 	mov    0x73b5d4(%rip),%rdx        # 753918 <tmpquadone>
   18344:	48 8b 1d e5 58 5e 00 	mov    0x5e58e5(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1834b:	48 c7 05 fa b5 73 00 	movq   $0x1,0x73b5fa(%rip)        # 753950 <cmpPassed>
   18352:	01 00 00 00 
   18356:	e8 1d d5 fe ff       	callq  5878 <_storeDataFn>
   1835b:	80 f9 21             	cmp    $0x21,%cl
   1835e:	77 4c                	ja     183ac <quotearg_buffer_restyled+0x55ac>
   18360:	50                   	push   %rax
   18361:	48 b8 95 6f a3 de 00 	movabs $0xdea36f95,%rax
   18368:	00 00 00 
   1836b:	48 89 05 ce b5 73 00 	mov    %rax,0x73b5ce(%rip)        # 753940 <edgeId>
   18372:	58                   	pop    %rax
   18373:	e8 68 d4 fe ff       	callq  57e0 <_storeEdge>
   18378:	41 bb 01 00 00 00    	mov    $0x1,%r11d
   1837e:	48 bf 2b 00 00 00 02 	movabs $0x20000002b,%rdi
   18385:	00 00 00 
   18388:	49 d3 e3             	shl    %cl,%r11
   1838b:	49 85 fb             	test   %rdi,%r11
   1838e:	0f 85 e0 01 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   18394:	50                   	push   %rax
   18395:	48 b8 7c 1b f5 d6 00 	movabs $0xd6f51b7c,%rax
   1839c:	00 00 00 
   1839f:	48 89 05 9a b5 73 00 	mov    %rax,0x73b59a(%rip)        # 753940 <edgeId>
   183a6:	58                   	pop    %rax
   183a7:	e8 34 d4 fe ff       	callq  57e0 <_storeEdge>
   183ac:	50                   	push   %rax
   183ad:	48 b8 be 8d 7a eb 00 	movabs $0xeb7a8dbe,%rax
   183b4:	00 00 00 
   183b7:	48 89 05 82 b5 73 00 	mov    %rax,0x73b582(%rip)        # 753940 <edgeId>
   183be:	58                   	pop    %rax
   183bf:	e8 1c d4 fe ff       	callq  57e0 <_storeEdge>
   183c4:	45 0f b6 45 06       	movzbl 0x6(%r13),%r8d
   183c9:	41 8d 48 a5          	lea    -0x5b(%r8),%ecx
   183cd:	48 89 15 44 b5 73 00 	mov    %rdx,0x73b544(%rip)        # 753918 <tmpquadone>
   183d4:	48 89 1d 55 58 5e 00 	mov    %rbx,0x5e5855(%rip)        # 5fdc30 <tmpquadtwo>
   183db:	48 8d 15 0e 58 5e 00 	lea    0x5e580e(%rip),%rdx        # 5fdbf0 <funcinptr>
   183e2:	48 c7 02 56 0a 00 00 	movq   $0xa56,(%rdx)
   183e9:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   183f0:	00 
   183f1:	48 c7 c3 21 00 00 00 	mov    $0x21,%rbx
   183f8:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   183fc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18403:	00 
   18404:	48 89 cb             	mov    %rcx,%rbx
   18407:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1840b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18412:	00 
   18413:	ff 32                	pushq  (%rdx)
   18415:	48 8b 15 fc b4 73 00 	mov    0x73b4fc(%rip),%rdx        # 753918 <tmpquadone>
   1841c:	48 8b 1d 0d 58 5e 00 	mov    0x5e580d(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   18423:	48 c7 05 22 b5 73 00 	movq   $0x1,0x73b522(%rip)        # 753950 <cmpPassed>
   1842a:	01 00 00 00 
   1842e:	e8 45 d4 fe ff       	callq  5878 <_storeDataFn>
   18433:	80 f9 21             	cmp    $0x21,%cl
   18436:	77 4c                	ja     18484 <quotearg_buffer_restyled+0x5684>
   18438:	50                   	push   %rax
   18439:	48 b8 db a8 b7 be 00 	movabs $0xbeb7a8db,%rax
   18440:	00 00 00 
   18443:	48 89 05 f6 b4 73 00 	mov    %rax,0x73b4f6(%rip)        # 753940 <edgeId>
   1844a:	58                   	pop    %rax
   1844b:	e8 90 d3 fe ff       	callq  57e0 <_storeEdge>
   18450:	41 b9 01 00 00 00    	mov    $0x1,%r9d
   18456:	48 bb 2b 00 00 00 02 	movabs $0x20000002b,%rbx
   1845d:	00 00 00 
   18460:	49 d3 e1             	shl    %cl,%r9
   18463:	49 85 d9             	test   %rbx,%r9
   18466:	0f 85 08 01 00 00    	jne    18574 <quotearg_buffer_restyled+0x5774>
   1846c:	50                   	push   %rax
   1846d:	48 b8 46 bd f5 c5 00 	movabs $0xc5f5bd46,%rax
   18474:	00 00 00 
   18477:	48 89 05 c2 b4 73 00 	mov    %rax,0x73b4c2(%rip)        # 753940 <edgeId>
   1847e:	58                   	pop    %rax
   1847f:	e8 5c d3 fe ff       	callq  57e0 <_storeEdge>
   18484:	50                   	push   %rax
   18485:	48 b8 a3 de fa e2 00 	movabs $0xe2fadea3,%rax
   1848c:	00 00 00 
   1848f:	48 89 05 aa b4 73 00 	mov    %rax,0x73b4aa(%rip)        # 753940 <edgeId>
   18496:	58                   	pop    %rax
   18497:	e8 44 d3 fe ff       	callq  57e0 <_storeEdge>
   1849c:	49 8d 45 07          	lea    0x7(%r13),%rax
   184a0:	48 89 0d 71 b4 73 00 	mov    %rcx,0x73b471(%rip)        # 753918 <tmpquadone>
   184a7:	48 89 1d 82 57 5e 00 	mov    %rbx,0x5e5782(%rip)        # 5fdc30 <tmpquadtwo>
   184ae:	48 8d 0d 3b 57 5e 00 	lea    0x5e573b(%rip),%rcx        # 5fdbf0 <funcinptr>
   184b5:	48 c7 01 57 0a 00 00 	movq   $0xa57,(%rcx)
   184bc:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   184c3:	00 
   184c4:	48 89 d3             	mov    %rdx,%rbx
   184c7:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   184cb:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   184d2:	00 
   184d3:	48 89 c3             	mov    %rax,%rbx
   184d6:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   184da:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   184e1:	00 
   184e2:	ff 31                	pushq  (%rcx)
   184e4:	48 8b 0d 2d b4 73 00 	mov    0x73b42d(%rip),%rcx        # 753918 <tmpquadone>
   184eb:	48 8b 1d 3e 57 5e 00 	mov    0x5e573e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   184f2:	48 c7 05 53 b4 73 00 	movq   $0x1,0x73b453(%rip)        # 753950 <cmpPassed>
   184f9:	01 00 00 00 
   184fd:	e8 76 d3 fe ff       	callq  5878 <_storeDataFn>
   18502:	48 39 d0             	cmp    %rdx,%rax
   18505:	0f 85 d0 f8 ff ff    	jne    17ddb <quotearg_buffer_restyled+0x4fdb>
   1850b:	50                   	push   %rax
   1850c:	48 b8 d4 5b 5f bc 00 	movabs $0xbc5f5bd4,%rax
   18513:	00 00 00 
   18516:	48 89 05 23 b4 73 00 	mov    %rax,0x73b423(%rip)        # 753940 <edgeId>
   1851d:	58                   	pop    %rax
   1851e:	e8 bd d2 fe ff       	callq  57e0 <_storeEdge>
   18523:	e9 49 e2 ff ff       	jmpq   16771 <quotearg_buffer_restyled+0x3971>
   18528:	50                   	push   %rax
   18529:	48 b8 f5 d6 17 af 00 	movabs $0xaf17d6f5,%rax
   18530:	00 00 00 
   18533:	48 89 05 06 b4 73 00 	mov    %rax,0x73b406(%rip)        # 753940 <edgeId>
   1853a:	58                   	pop    %rax
   1853b:	e8 a0 d2 fe ff       	callq  57e0 <_storeEdge>
   18540:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   18546:	48 be 2b 00 00 00 02 	movabs $0x20000002b,%rsi
   1854d:	00 00 00 
   18550:	49 d3 e0             	shl    %cl,%r8
   18553:	49 85 f0             	test   %rsi,%r8
   18556:	0f 84 74 f2 ff ff    	je     177d0 <quotearg_buffer_restyled+0x49d0>
   1855c:	50                   	push   %rax
   1855d:	48 b8 b7 be 78 a5 00 	movabs $0xa578beb7,%rax
   18564:	00 00 00 
   18567:	48 89 05 d2 b3 73 00 	mov    %rax,0x73b3d2(%rip)        # 753940 <edgeId>
   1856e:	58                   	pop    %rax
   1856f:	e8 6c d2 fe ff       	callq  57e0 <_storeEdge>
   18574:	50                   	push   %rax
   18575:	48 b8 5b 5f bc d2 00 	movabs $0xd2bc5f5b,%rax
   1857c:	00 00 00 
   1857f:	48 89 05 ba b3 73 00 	mov    %rax,0x73b3ba(%rip)        # 753940 <edgeId>
   18586:	58                   	pop    %rax
   18587:	e8 54 d2 fe ff       	callq  57e0 <_storeEdge>
   1858c:	4c 8b 74 24 70       	mov    0x70(%rsp),%r14
   18591:	4d 89 fc             	mov    %r15,%r12
   18594:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   18599:	e9 a0 ba ff ff       	jmpq   1403e <quotearg_buffer_restyled+0x123e>
   1859e:	66 90                	xchg   %ax,%ax
   185a0:	50                   	push   %rax
   185a1:	48 c7 c0 2f 5e e9 4b 	mov    $0x4be95e2f,%rax
   185a8:	48 89 05 91 b3 73 00 	mov    %rax,0x73b391(%rip)        # 753940 <edgeId>
   185af:	58                   	pop    %rax
   185b0:	e8 2b d2 fe ff       	callq  57e0 <_storeEdge>
      && elide_outer_quotes)
   185b5:	4d 85 ff             	test   %r15,%r15
   185b8:	4d 89 de             	mov    %r11,%r14
   185bb:	4d 89 cc             	mov    %r9,%r12
   185be:	0f 85 a3 00 00 00    	jne    18667 <quotearg_buffer_restyled+0x5867>
   185c4:	50                   	push   %rax
   185c5:	48 b8 57 fa 12 bb 00 	movabs $0xbb12fa57,%rax
   185cc:	00 00 00 
   185cf:	48 89 05 6a b3 73 00 	mov    %rax,0x73b36a(%rip)        # 753940 <edgeId>
   185d6:	58                   	pop    %rax
   185d7:	e8 04 d2 fe ff       	callq  57e0 <_storeEdge>
   185dc:	48 89 15 35 b3 73 00 	mov    %rdx,0x73b335(%rip)        # 753918 <tmpquadone>
   185e3:	48 89 0d 46 56 5e 00 	mov    %rcx,0x5e5646(%rip)        # 5fdc30 <tmpquadtwo>
   185ea:	48 8d 15 ff 55 5e 00 	lea    0x5e55ff(%rip),%rdx        # 5fdbf0 <funcinptr>
   185f1:	48 c7 02 58 0a 00 00 	movq   $0xa58,(%rdx)
   185f8:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   185ff:	00 
   18600:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   18607:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1860b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18612:	00 
   18613:	48 8b 4c 24 6a       	mov    0x6a(%rsp),%rcx
   18618:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1861c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18623:	00 
   18624:	ff 32                	pushq  (%rdx)
   18626:	48 8b 15 eb b2 73 00 	mov    0x73b2eb(%rip),%rdx        # 753918 <tmpquadone>
   1862d:	48 8b 0d fc 55 5e 00 	mov    0x5e55fc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18634:	48 c7 05 11 b3 73 00 	movq   $0x1,0x73b311(%rip)        # 753950 <cmpPassed>
   1863b:	01 00 00 00 
   1863f:	e8 34 d2 fe ff       	callq  5878 <_storeDataFn>
   18644:	80 7c 24 6a 00       	cmpb   $0x0,0x6a(%rsp)
   18649:	0f 85 ef b9 ff ff    	jne    1403e <quotearg_buffer_restyled+0x123e>
   1864f:	50                   	push   %rax
   18650:	48 b8 95 be c4 ae 00 	movabs $0xaec4be95,%rax
   18657:	00 00 00 
   1865a:	48 89 05 df b2 73 00 	mov    %rax,0x73b2df(%rip)        # 753940 <edgeId>
   18661:	58                   	pop    %rax
   18662:	e8 79 d1 fe ff       	callq  57e0 <_storeEdge>
   18667:	50                   	push   %rax
   18668:	48 c7 c0 4a 5f 62 57 	mov    $0x57625f4a,%rax
   1866f:	48 89 05 ca b2 73 00 	mov    %rax,0x73b2ca(%rip)        # 753940 <edgeId>
   18676:	58                   	pop    %rax
   18677:	e8 64 d1 fe ff       	callq  57e0 <_storeEdge>
  if (quote_string && !elide_outer_quotes)
   1867c:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
   18681:	48 85 ed             	test   %rbp,%rbp
   18684:	0f 84 af 01 00 00    	je     18839 <quotearg_buffer_restyled+0x5a39>
   1868a:	50                   	push   %rax
   1868b:	48 b8 fa 12 bb aa 00 	movabs $0xaabb12fa,%rax
   18692:	00 00 00 
   18695:	48 89 05 a4 b2 73 00 	mov    %rax,0x73b2a4(%rip)        # 753940 <edgeId>
   1869c:	58                   	pop    %rax
   1869d:	e8 3e d1 fe ff       	callq  57e0 <_storeEdge>
   186a2:	48 89 15 6f b2 73 00 	mov    %rdx,0x73b26f(%rip)        # 753918 <tmpquadone>
   186a9:	48 89 0d 80 55 5e 00 	mov    %rcx,0x5e5580(%rip)        # 5fdc30 <tmpquadtwo>
   186b0:	48 8d 15 39 55 5e 00 	lea    0x5e5539(%rip),%rdx        # 5fdbf0 <funcinptr>
   186b7:	48 c7 02 59 0a 00 00 	movq   $0xa59,(%rdx)
   186be:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   186c5:	00 
   186c6:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   186cd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   186d1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   186d8:	00 
   186d9:	48 8b 4c 24 7d       	mov    0x7d(%rsp),%rcx
   186de:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   186e2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   186e9:	00 
   186ea:	ff 32                	pushq  (%rdx)
   186ec:	48 8b 15 25 b2 73 00 	mov    0x73b225(%rip),%rdx        # 753918 <tmpquadone>
   186f3:	48 8b 0d 36 55 5e 00 	mov    0x5e5536(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   186fa:	48 c7 05 4b b2 73 00 	movq   $0x1,0x73b24b(%rip)        # 753950 <cmpPassed>
   18701:	01 00 00 00 
   18705:	e8 6e d1 fe ff       	callq  5878 <_storeDataFn>
   1870a:	80 7c 24 7d 00       	cmpb   $0x0,0x7d(%rsp)
   1870f:	0f 85 24 01 00 00    	jne    18839 <quotearg_buffer_restyled+0x5a39>
   18715:	50                   	push   %rax
   18716:	48 c7 c0 be c4 ae 6a 	mov    $0x6aaec4be,%rax
   1871d:	48 89 05 1c b2 73 00 	mov    %rax,0x73b21c(%rip)        # 753940 <edgeId>
   18724:	58                   	pop    %rax
   18725:	e8 b6 d0 fe ff       	callq  57e0 <_storeEdge>
    for (; *quote_string; quote_string++)
   1872a:	0f b6 4d 00          	movzbl 0x0(%rbp),%ecx
   1872e:	4c 29 fd             	sub    %r15,%rbp
   18731:	4c 89 ff             	mov    %r15,%rdi
   18734:	84 c9                	test   %cl,%cl
   18736:	0f 84 fd 00 00 00    	je     18839 <quotearg_buffer_restyled+0x5a39>
   1873c:	50                   	push   %rax
   1873d:	48 b8 c4 ae 6a f7 00 	movabs $0xf76aaec4,%rax
   18744:	00 00 00 
   18747:	48 89 05 f2 b1 73 00 	mov    %rax,0x73b1f2(%rip)        # 753940 <edgeId>
   1874e:	58                   	pop    %rax
   1874f:	e8 8c d0 fe ff       	callq  57e0 <_storeEdge>
   18754:	0f 1f 40 00          	nopl   0x0(%rax)
   18758:	50                   	push   %rax
   18759:	48 b8 ec aa 76 8f 00 	movabs $0x8f76aaec,%rax
   18760:	00 00 00 
   18763:	48 89 05 d6 b1 73 00 	mov    %rax,0x73b1d6(%rip)        # 753940 <edgeId>
   1876a:	58                   	pop    %rax
   1876b:	e8 70 d0 fe ff       	callq  57e0 <_storeEdge>
      STORE (*quote_string);
   18770:	48 89 15 a1 b1 73 00 	mov    %rdx,0x73b1a1(%rip)        # 753918 <tmpquadone>
   18777:	48 89 0d b2 54 5e 00 	mov    %rcx,0x5e54b2(%rip)        # 5fdc30 <tmpquadtwo>
   1877e:	48 8d 15 6b 54 5e 00 	lea    0x5e546b(%rip),%rdx        # 5fdbf0 <funcinptr>
   18785:	48 c7 02 5a 0a 00 00 	movq   $0xa5a,(%rdx)
   1878c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18793:	00 
   18794:	4c 89 f1             	mov    %r14,%rcx
   18797:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1879b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   187a2:	00 
   187a3:	48 89 f9             	mov    %rdi,%rcx
   187a6:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   187aa:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   187b1:	00 
   187b2:	ff 32                	pushq  (%rdx)
   187b4:	48 8b 15 5d b1 73 00 	mov    0x73b15d(%rip),%rdx        # 753918 <tmpquadone>
   187bb:	48 8b 0d 6e 54 5e 00 	mov    0x5e546e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   187c2:	48 c7 05 83 b1 73 00 	movq   $0x1,0x73b183(%rip)        # 753950 <cmpPassed>
   187c9:	01 00 00 00 
   187cd:	e8 a6 d0 fe ff       	callq  5878 <_storeDataFn>
   187d2:	4c 39 f7             	cmp    %r14,%rdi
   187d5:	0f 83 05 01 00 00    	jae    188e0 <quotearg_buffer_restyled+0x5ae0>
   187db:	50                   	push   %rax
   187dc:	48 b8 5d d5 ee 91 00 	movabs $0x91eed55d,%rax
   187e3:	00 00 00 
   187e6:	48 89 05 53 b1 73 00 	mov    %rax,0x73b153(%rip)        # 753940 <edgeId>
   187ed:	58                   	pop    %rax
   187ee:	e8 ed cf fe ff       	callq  57e0 <_storeEdge>
   187f3:	4c 8b 3c 24          	mov    (%rsp),%r15
   187f7:	41 88 0c 3f          	mov    %cl,(%r15,%rdi,1)
   187fb:	48 83 c7 01          	add    $0x1,%rdi
    for (; *quote_string; quote_string++)
   187ff:	0f b6 4c 3d 00       	movzbl 0x0(%rbp,%rdi,1),%ecx
   18804:	84 c9                	test   %cl,%cl
   18806:	0f 85 4c ff ff ff    	jne    18758 <quotearg_buffer_restyled+0x5958>
   1880c:	50                   	push   %rax
   1880d:	48 c7 c0 6a f7 c8 7e 	mov    $0x7ec8f76a,%rax
   18814:	48 89 05 25 b1 73 00 	mov    %rax,0x73b125(%rip)        # 753940 <edgeId>
   1881b:	58                   	pop    %rax
   1881c:	e8 bf cf fe ff       	callq  57e0 <_storeEdge>
   18821:	50                   	push   %rax
   18822:	48 c7 c0 b5 7b 64 3f 	mov    $0x3f647bb5,%rax
   18829:	48 89 05 10 b1 73 00 	mov    %rax,0x73b110(%rip)        # 753940 <edgeId>
   18830:	58                   	pop    %rax
   18831:	e8 aa cf fe ff       	callq  57e0 <_storeEdge>
      STORE (*quote_string);
   18836:	49 89 ff             	mov    %rdi,%r15
   18839:	50                   	push   %rax
   1883a:	48 c7 c0 bb 47 f6 43 	mov    $0x43f647bb,%rax
   18841:	48 89 05 f8 b0 73 00 	mov    %rax,0x73b0f8(%rip)        # 753940 <edgeId>
   18848:	58                   	pop    %rax
   18849:	e8 92 cf fe ff       	callq  57e0 <_storeEdge>
  if (len < buffersize)
   1884e:	48 89 15 c3 b0 73 00 	mov    %rdx,0x73b0c3(%rip)        # 753918 <tmpquadone>
   18855:	48 89 0d d4 53 5e 00 	mov    %rcx,0x5e53d4(%rip)        # 5fdc30 <tmpquadtwo>
   1885c:	48 8d 15 8d 53 5e 00 	lea    0x5e538d(%rip),%rdx        # 5fdbf0 <funcinptr>
   18863:	48 c7 02 5b 0a 00 00 	movq   $0xa5b,(%rdx)
   1886a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18871:	00 
   18872:	4c 89 f1             	mov    %r14,%rcx
   18875:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18879:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18880:	00 
   18881:	4c 89 f9             	mov    %r15,%rcx
   18884:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18888:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1888f:	00 
   18890:	ff 32                	pushq  (%rdx)
   18892:	48 8b 15 7f b0 73 00 	mov    0x73b07f(%rip),%rdx        # 753918 <tmpquadone>
   18899:	48 8b 0d 90 53 5e 00 	mov    0x5e5390(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   188a0:	48 c7 05 a5 b0 73 00 	movq   $0x1,0x73b0a5(%rip)        # 753950 <cmpPassed>
   188a7:	01 00 00 00 
   188ab:	e8 c8 cf fe ff       	callq  5878 <_storeDataFn>
   188b0:	4d 39 f7             	cmp    %r14,%r15
   188b3:	0f 83 d3 b7 ff ff    	jae    1408c <quotearg_buffer_restyled+0x128c>
   188b9:	50                   	push   %rax
   188ba:	48 b8 f7 c8 7e e8 00 	movabs $0xe87ec8f7,%rax
   188c1:	00 00 00 
   188c4:	48 89 05 75 b0 73 00 	mov    %rax,0x73b075(%rip)        # 753940 <edgeId>
   188cb:	58                   	pop    %rax
   188cc:	e8 0f cf fe ff       	callq  57e0 <_storeEdge>
    buffer[len] = '\0';
   188d1:	4c 8b 2c 24          	mov    (%rsp),%r13
   188d5:	43 c6 44 3d 00 00    	movb   $0x0,0x0(%r13,%r15,1)
   188db:	e9 ac b7 ff ff       	jmpq   1408c <quotearg_buffer_restyled+0x128c>
   188e0:	50                   	push   %rax
   188e1:	48 b8 c8 7e e8 bb 00 	movabs $0xbbe87ec8,%rax
   188e8:	00 00 00 
   188eb:	48 89 05 4e b0 73 00 	mov    %rax,0x73b04e(%rip)        # 753940 <edgeId>
   188f2:	58                   	pop    %rax
   188f3:	e8 e8 ce fe ff       	callq  57e0 <_storeEdge>
      STORE (*quote_string);
   188f8:	48 83 c7 01          	add    $0x1,%rdi
    for (; *quote_string; quote_string++)
   188fc:	0f b6 4c 3d 00       	movzbl 0x0(%rbp,%rdi,1),%ecx
   18901:	84 c9                	test   %cl,%cl
   18903:	0f 85 4f fe ff ff    	jne    18758 <quotearg_buffer_restyled+0x5958>
   18909:	50                   	push   %rax
   1890a:	48 c7 c0 fd d0 77 6f 	mov    $0x6f77d0fd,%rax
   18911:	48 89 05 28 b0 73 00 	mov    %rax,0x73b028(%rip)        # 753940 <edgeId>
   18918:	58                   	pop    %rax
   18919:	e8 c2 ce fe ff       	callq  57e0 <_storeEdge>
   1891e:	e9 fe fe ff ff       	jmpq   18821 <quotearg_buffer_restyled+0x5a21>
   18923:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   18928:	50                   	push   %rax
   18929:	48 c7 c0 87 be 7b 0b 	mov    $0xb7bbe87,%rax
   18930:	48 89 05 09 b0 73 00 	mov    %rax,0x73b009(%rip)        # 753940 <edgeId>
   18937:	58                   	pop    %rax
   18938:	e8 a3 ce fe ff       	callq  57e0 <_storeEdge>
          if (quoting_style == shell_always_quoting_style
   1893d:	48 89 15 d4 af 73 00 	mov    %rdx,0x73afd4(%rip)        # 753918 <tmpquadone>
   18944:	48 89 0d e5 52 5e 00 	mov    %rcx,0x5e52e5(%rip)        # 5fdc30 <tmpquadtwo>
   1894b:	48 8d 15 9e 52 5e 00 	lea    0x5e529e(%rip),%rdx        # 5fdbf0 <funcinptr>
   18952:	48 c7 02 5c 0a 00 00 	movq   $0xa5c,(%rdx)
   18959:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   18960:	00 
   18961:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   18968:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1896c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18973:	00 
   18974:	48 8b 4c 24 6a       	mov    0x6a(%rsp),%rcx
   18979:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1897d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18984:	00 
   18985:	ff 32                	pushq  (%rdx)
   18987:	48 8b 15 8a af 73 00 	mov    0x73af8a(%rip),%rdx        # 753918 <tmpquadone>
   1898e:	48 8b 0d 9b 52 5e 00 	mov    0x5e529b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18995:	48 c7 05 b0 af 73 00 	movq   $0x1,0x73afb0(%rip)        # 753950 <cmpPassed>
   1899c:	01 00 00 00 
   189a0:	e8 d3 ce fe ff       	callq  5878 <_storeDataFn>
   189a5:	80 7c 24 6a 00       	cmpb   $0x0,0x6a(%rsp)
   189aa:	0f 85 70 b6 ff ff    	jne    14020 <quotearg_buffer_restyled+0x1220>
   189b0:	50                   	push   %rax
   189b1:	48 c7 c0 e8 bb b7 40 	mov    $0x40b7bbe8,%rax
   189b8:	48 89 05 81 af 73 00 	mov    %rax,0x73af81(%rip)        # 753940 <edgeId>
   189bf:	58                   	pop    %rax
   189c0:	e8 1b ce fe ff       	callq  57e0 <_storeEdge>
   189c5:	41 bd 5c 00 00 00    	mov    $0x5c,%r13d
   189cb:	e9 81 b8 ff ff       	jmpq   14251 <quotearg_buffer_restyled+0x1451>
   189d0:	50                   	push   %rax
   189d1:	48 c7 c0 77 6f 81 52 	mov    $0x52816f77,%rax
   189d8:	48 89 05 61 af 73 00 	mov    %rax,0x73af61(%rip)        # 753940 <edgeId>
   189df:	58                   	pop    %rax
   189e0:	e8 fb cd fe ff       	callq  57e0 <_storeEdge>
   189e5:	4c 8b 14 24          	mov    (%rsp),%r10
   189e9:	e9 48 d2 ff ff       	jmpq   15c36 <quotearg_buffer_restyled+0x2e36>
   189ee:	50                   	push   %rax
   189ef:	48 b8 ee 2d 50 ea 00 	movabs $0xea502dee,%rax
   189f6:	00 00 00 
   189f9:	48 89 05 40 af 73 00 	mov    %rax,0x73af40(%rip)        # 753940 <edgeId>
   18a00:	58                   	pop    %rax
   18a01:	e8 da cd fe ff       	callq  57e0 <_storeEdge>
   18a06:	48 8b 3c 24          	mov    (%rsp),%rdi
   18a0a:	50                   	push   %rax
   18a0b:	48 c7 c0 7b 0b 94 7a 	mov    $0x7a940b7b,%rax
   18a12:	48 89 05 27 af 73 00 	mov    %rax,0x73af27(%rip)        # 753940 <edgeId>
   18a19:	58                   	pop    %rax
   18a1a:	e8 c1 cd fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   18a1f:	49 8d 47 fd          	lea    -0x3(%r15),%rax
   18a23:	48 89 15 ee ae 73 00 	mov    %rdx,0x73aeee(%rip)        # 753918 <tmpquadone>
   18a2a:	48 89 0d ff 51 5e 00 	mov    %rcx,0x5e51ff(%rip)        # 5fdc30 <tmpquadtwo>
   18a31:	48 8d 15 b8 51 5e 00 	lea    0x5e51b8(%rip),%rdx        # 5fdbf0 <funcinptr>
   18a38:	48 c7 02 5d 0a 00 00 	movq   $0xa5d,(%rdx)
   18a3f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18a46:	00 
   18a47:	4c 89 d9             	mov    %r11,%rcx
   18a4a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18a4e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18a55:	00 
   18a56:	48 89 c1             	mov    %rax,%rcx
   18a59:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18a5d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18a64:	00 
   18a65:	ff 32                	pushq  (%rdx)
   18a67:	48 8b 15 aa ae 73 00 	mov    0x73aeaa(%rip),%rdx        # 753918 <tmpquadone>
   18a6e:	48 8b 0d bb 51 5e 00 	mov    0x5e51bb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18a75:	48 c7 05 d0 ae 73 00 	movq   $0x1,0x73aed0(%rip)        # 753950 <cmpPassed>
   18a7c:	01 00 00 00 
   18a80:	e8 f3 cd fe ff       	callq  5878 <_storeDataFn>
   18a85:	4c 39 d8             	cmp    %r11,%rax
   18a88:	73 33                	jae    18abd <quotearg_buffer_restyled+0x5cbd>
   18a8a:	50                   	push   %rax
   18a8b:	48 b8 2d 50 ea a1 00 	movabs $0xa1ea502d,%rax
   18a92:	00 00 00 
   18a95:	48 89 05 a4 ae 73 00 	mov    %rax,0x73aea4(%rip)        # 753940 <edgeId>
   18a9c:	58                   	pop    %rax
   18a9d:	e8 3e cd fe ff       	callq  57e0 <_storeEdge>
   18aa2:	50                   	push   %rax
   18aa3:	48 c7 c0 16 28 f5 50 	mov    $0x50f52816,%rax
   18aaa:	48 89 05 8f ae 73 00 	mov    %rax,0x73ae8f(%rip)        # 753940 <edgeId>
   18ab1:	58                   	pop    %rax
   18ab2:	e8 29 cd fe ff       	callq  57e0 <_storeEdge>
   18ab7:	42 c6 44 3f fd 5c    	movb   $0x5c,-0x3(%rdi,%r15,1)
   18abd:	50                   	push   %rax
   18abe:	48 c7 c0 05 4a 3d 14 	mov    $0x143d4a05,%rax
   18ac5:	48 89 05 74 ae 73 00 	mov    %rax,0x73ae74(%rip)        # 753940 <edgeId>
   18acc:	58                   	pop    %rax
   18acd:	e8 0e cd fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   18ad2:	49 8d 77 fe          	lea    -0x2(%r15),%rsi
   18ad6:	48 89 15 3b ae 73 00 	mov    %rdx,0x73ae3b(%rip)        # 753918 <tmpquadone>
   18add:	48 89 0d 4c 51 5e 00 	mov    %rcx,0x5e514c(%rip)        # 5fdc30 <tmpquadtwo>
   18ae4:	48 8d 15 05 51 5e 00 	lea    0x5e5105(%rip),%rdx        # 5fdbf0 <funcinptr>
   18aeb:	48 c7 02 5e 0a 00 00 	movq   $0xa5e,(%rdx)
   18af2:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18af9:	00 
   18afa:	4c 89 d9             	mov    %r11,%rcx
   18afd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18b01:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18b08:	00 
   18b09:	48 89 f1             	mov    %rsi,%rcx
   18b0c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18b10:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18b17:	00 
   18b18:	ff 32                	pushq  (%rdx)
   18b1a:	48 8b 15 f7 ad 73 00 	mov    0x73adf7(%rip),%rdx        # 753918 <tmpquadone>
   18b21:	48 8b 0d 08 51 5e 00 	mov    0x5e5108(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18b28:	48 c7 05 1d ae 73 00 	movq   $0x1,0x73ae1d(%rip)        # 753950 <cmpPassed>
   18b2f:	01 00 00 00 
   18b33:	e8 40 cd fe ff       	callq  5878 <_storeDataFn>
   18b38:	4c 39 de             	cmp    %r11,%rsi
   18b3b:	73 25                	jae    18b62 <quotearg_buffer_restyled+0x5d62>
   18b3d:	50                   	push   %rax
   18b3e:	48 c7 c0 a0 d4 43 51 	mov    $0x5143d4a0,%rax
   18b45:	48 89 05 f4 ad 73 00 	mov    %rax,0x73adf4(%rip)        # 753940 <edgeId>
   18b4c:	58                   	pop    %rax
   18b4d:	e8 8e cc fe ff       	callq  57e0 <_storeEdge>
   18b52:	45 89 ec             	mov    %r13d,%r12d
   18b55:	41 c0 ec 06          	shr    $0x6,%r12b
   18b59:	41 83 c4 30          	add    $0x30,%r12d
   18b5d:	46 88 64 3f fe       	mov    %r12b,-0x2(%rdi,%r15,1)
   18b62:	50                   	push   %rax
   18b63:	48 b8 a5 1e 8a f2 00 	movabs $0xf28a1ea5,%rax
   18b6a:	00 00 00 
   18b6d:	48 89 05 cc ad 73 00 	mov    %rax,0x73adcc(%rip)        # 753940 <edgeId>
   18b74:	58                   	pop    %rax
   18b75:	e8 66 cc fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   18b7a:	4d 8d 47 ff          	lea    -0x1(%r15),%r8
   18b7e:	48 89 15 93 ad 73 00 	mov    %rdx,0x73ad93(%rip)        # 753918 <tmpquadone>
   18b85:	48 89 0d a4 50 5e 00 	mov    %rcx,0x5e50a4(%rip)        # 5fdc30 <tmpquadtwo>
   18b8c:	48 8d 15 5d 50 5e 00 	lea    0x5e505d(%rip),%rdx        # 5fdbf0 <funcinptr>
   18b93:	48 c7 02 5f 0a 00 00 	movq   $0xa5f,(%rdx)
   18b9a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18ba1:	00 
   18ba2:	4c 89 d9             	mov    %r11,%rcx
   18ba5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18ba9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18bb0:	00 
   18bb1:	4c 89 c1             	mov    %r8,%rcx
   18bb4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18bb8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18bbf:	00 
   18bc0:	ff 32                	pushq  (%rdx)
   18bc2:	48 8b 15 4f ad 73 00 	mov    0x73ad4f(%rip),%rdx        # 753918 <tmpquadone>
   18bc9:	48 8b 0d 60 50 5e 00 	mov    0x5e5060(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18bd0:	48 c7 05 75 ad 73 00 	movq   $0x1,0x73ad75(%rip)        # 753950 <cmpPassed>
   18bd7:	01 00 00 00 
   18bdb:	e8 98 cc fe ff       	callq  5878 <_storeDataFn>
   18be0:	4d 39 d8             	cmp    %r11,%r8
   18be3:	73 26                	jae    18c0b <quotearg_buffer_restyled+0x5e0b>
   18be5:	50                   	push   %rax
   18be6:	48 c7 c0 ea a1 28 6f 	mov    $0x6f28a1ea,%rax
   18bed:	48 89 05 4c ad 73 00 	mov    %rax,0x73ad4c(%rip)        # 753940 <edgeId>
   18bf4:	58                   	pop    %rax
   18bf5:	e8 e6 cb fe ff       	callq  57e0 <_storeEdge>
   18bfa:	44 89 e9             	mov    %r13d,%ecx
   18bfd:	c0 e9 03             	shr    $0x3,%cl
   18c00:	83 e1 07             	and    $0x7,%ecx
   18c03:	83 c1 30             	add    $0x30,%ecx
   18c06:	42 88 4c 3f ff       	mov    %cl,-0x1(%rdi,%r15,1)
   18c0b:	50                   	push   %rax
   18c0c:	48 b8 87 a2 bc f9 00 	movabs $0xf9bca287,%rax
   18c13:	00 00 00 
   18c16:	48 89 05 23 ad 73 00 	mov    %rax,0x73ad23(%rip)        # 753940 <edgeId>
   18c1d:	58                   	pop    %rax
   18c1e:	e8 bd cb fe ff       	callq  57e0 <_storeEdge>
                    if (ilim <= i + 1)
   18c23:	4c 8d 63 01          	lea    0x1(%rbx),%r12
                        c = '0' + (c & 7);
   18c27:	41 83 e5 07          	and    $0x7,%r13d
   18c2b:	41 83 c5 30          	add    $0x30,%r13d
                    if (ilim <= i + 1)
   18c2f:	48 89 0d e2 ac 73 00 	mov    %rcx,0x73ace2(%rip)        # 753918 <tmpquadone>
   18c36:	48 89 1d f3 4f 5e 00 	mov    %rbx,0x5e4ff3(%rip)        # 5fdc30 <tmpquadtwo>
   18c3d:	48 8d 0d ac 4f 5e 00 	lea    0x5e4fac(%rip),%rcx        # 5fdbf0 <funcinptr>
   18c44:	48 c7 01 60 0a 00 00 	movq   $0xa60,(%rcx)
   18c4b:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   18c52:	00 
   18c53:	4c 89 e3             	mov    %r12,%rbx
   18c56:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   18c5a:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   18c61:	00 
   18c62:	48 89 d3             	mov    %rdx,%rbx
   18c65:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   18c69:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   18c70:	00 
   18c71:	ff 31                	pushq  (%rcx)
   18c73:	48 8b 0d 9e ac 73 00 	mov    0x73ac9e(%rip),%rcx        # 753918 <tmpquadone>
   18c7a:	48 8b 1d af 4f 5e 00 	mov    0x5e4faf(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   18c81:	48 c7 05 c4 ac 73 00 	movq   $0x1,0x73acc4(%rip)        # 753950 <cmpPassed>
   18c88:	01 00 00 00 
   18c8c:	e8 e7 cb fe ff       	callq  5878 <_storeDataFn>
   18c91:	4c 39 e2             	cmp    %r12,%rdx
   18c94:	4c 89 e3             	mov    %r12,%rbx
   18c97:	0f 86 48 b0 ff ff    	jbe    13ce5 <quotearg_buffer_restyled+0xee5>
   18c9d:	50                   	push   %rax
   18c9e:	48 b8 94 37 bf ad 00 	movabs $0xadbf3794,%rax
   18ca5:	00 00 00 
   18ca8:	48 89 05 91 ac 73 00 	mov    %rax,0x73ac91(%rip)        # 753940 <edgeId>
   18caf:	58                   	pop    %rax
   18cb0:	e8 2b cb fe ff       	callq  57e0 <_storeEdge>
                    STORE (c);
   18cb5:	48 89 15 5c ac 73 00 	mov    %rdx,0x73ac5c(%rip)        # 753918 <tmpquadone>
   18cbc:	48 89 0d 6d 4f 5e 00 	mov    %rcx,0x5e4f6d(%rip)        # 5fdc30 <tmpquadtwo>
   18cc3:	48 8d 15 26 4f 5e 00 	lea    0x5e4f26(%rip),%rdx        # 5fdbf0 <funcinptr>
   18cca:	48 c7 02 61 0a 00 00 	movq   $0xa61,(%rdx)
   18cd1:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18cd8:	00 
   18cd9:	4c 89 f9             	mov    %r15,%rcx
   18cdc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18ce0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18ce7:	00 
   18ce8:	4c 89 d9             	mov    %r11,%rcx
   18ceb:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18cef:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18cf6:	00 
   18cf7:	ff 32                	pushq  (%rdx)
   18cf9:	48 8b 15 18 ac 73 00 	mov    0x73ac18(%rip),%rdx        # 753918 <tmpquadone>
   18d00:	48 8b 0d 29 4f 5e 00 	mov    0x5e4f29(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18d07:	48 c7 05 3e ac 73 00 	movq   $0x1,0x73ac3e(%rip)        # 753950 <cmpPassed>
   18d0e:	01 00 00 00 
   18d12:	e8 61 cb fe ff       	callq  5878 <_storeDataFn>
   18d17:	4d 39 fb             	cmp    %r15,%r11
   18d1a:	76 19                	jbe    18d35 <quotearg_buffer_restyled+0x5f35>
   18d1c:	50                   	push   %rax
   18d1d:	48 c7 c0 f2 e6 b7 55 	mov    $0x55b7e6f2,%rax
   18d24:	48 89 05 15 ac 73 00 	mov    %rax,0x73ac15(%rip)        # 753940 <edgeId>
   18d2b:	58                   	pop    %rax
   18d2c:	e8 af ca fe ff       	callq  57e0 <_storeEdge>
   18d31:	46 88 2c 3f          	mov    %r13b,(%rdi,%r15,1)
   18d35:	50                   	push   %rax
   18d36:	48 c7 c0 bc f9 6d 15 	mov    $0x156df9bc,%rax
   18d3d:	48 89 05 fc ab 73 00 	mov    %rax,0x73abfc(%rip)        # 753940 <edgeId>
   18d44:	58                   	pop    %rax
   18d45:	e8 96 ca fe ff       	callq  57e0 <_storeEdge>
   18d4a:	49 8d 47 04          	lea    0x4(%r15),%rax
                        STORE ('\\');
   18d4e:	49 83 c7 01          	add    $0x1,%r15
                    c = arg[++i];
   18d52:	47 0f b6 2c 21       	movzbl (%r9,%r12,1),%r13d
                        STORE ('\\');
   18d57:	48 89 15 ba ab 73 00 	mov    %rdx,0x73abba(%rip)        # 753918 <tmpquadone>
   18d5e:	48 89 0d cb 4e 5e 00 	mov    %rcx,0x5e4ecb(%rip)        # 5fdc30 <tmpquadtwo>
   18d65:	48 8d 15 84 4e 5e 00 	lea    0x5e4e84(%rip),%rdx        # 5fdbf0 <funcinptr>
   18d6c:	48 c7 02 62 0a 00 00 	movq   $0xa62,(%rdx)
   18d73:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18d7a:	00 
   18d7b:	4c 89 d9             	mov    %r11,%rcx
   18d7e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18d82:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18d89:	00 
   18d8a:	4c 89 f9             	mov    %r15,%rcx
   18d8d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18d91:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18d98:	00 
   18d99:	ff 32                	pushq  (%rdx)
   18d9b:	48 8b 15 76 ab 73 00 	mov    0x73ab76(%rip),%rdx        # 753918 <tmpquadone>
   18da2:	48 8b 0d 87 4e 5e 00 	mov    0x5e4e87(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18da9:	48 c7 05 9c ab 73 00 	movq   $0x1,0x73ab9c(%rip)        # 753950 <cmpPassed>
   18db0:	01 00 00 00 
   18db4:	e8 bf ca fe ff       	callq  5878 <_storeDataFn>
   18db9:	4d 39 df             	cmp    %r11,%r15
   18dbc:	73 1a                	jae    18dd8 <quotearg_buffer_restyled+0x5fd8>
   18dbe:	50                   	push   %rax
   18dbf:	48 c7 c0 fc b6 8a 66 	mov    $0x668ab6fc,%rax
   18dc6:	48 89 05 73 ab 73 00 	mov    %rax,0x73ab73(%rip)        # 753940 <edgeId>
   18dcd:	58                   	pop    %rax
   18dce:	e8 0d ca fe ff       	callq  57e0 <_storeEdge>
   18dd3:	c6 44 07 fd 5c       	movb   $0x5c,-0x3(%rdi,%rax,1)
   18dd8:	50                   	push   %rax
   18dd9:	48 c7 c0 bf ad a2 19 	mov    $0x19a2adbf,%rax
   18de0:	48 89 05 59 ab 73 00 	mov    %rax,0x73ab59(%rip)        # 753940 <edgeId>
   18de7:	58                   	pop    %rax
   18de8:	e8 f3 c9 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   18ded:	4c 8d 78 fe          	lea    -0x2(%rax),%r15
   18df1:	48 89 15 20 ab 73 00 	mov    %rdx,0x73ab20(%rip)        # 753918 <tmpquadone>
   18df8:	48 89 0d 31 4e 5e 00 	mov    %rcx,0x5e4e31(%rip)        # 5fdc30 <tmpquadtwo>
   18dff:	48 8d 15 ea 4d 5e 00 	lea    0x5e4dea(%rip),%rdx        # 5fdbf0 <funcinptr>
   18e06:	48 c7 02 63 0a 00 00 	movq   $0xa63,(%rdx)
   18e0d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18e14:	00 
   18e15:	4c 89 d9             	mov    %r11,%rcx
   18e18:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18e1c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18e23:	00 
   18e24:	4c 89 f9             	mov    %r15,%rcx
   18e27:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18e2b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18e32:	00 
   18e33:	ff 32                	pushq  (%rdx)
   18e35:	48 8b 15 dc aa 73 00 	mov    0x73aadc(%rip),%rdx        # 753918 <tmpquadone>
   18e3c:	48 8b 0d ed 4d 5e 00 	mov    0x5e4ded(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18e43:	48 c7 05 02 ab 73 00 	movq   $0x1,0x73ab02(%rip)        # 753950 <cmpPassed>
   18e4a:	01 00 00 00 
   18e4e:	e8 25 ca fe ff       	callq  5878 <_storeDataFn>
   18e53:	4d 39 df             	cmp    %r11,%r15
   18e56:	73 22                	jae    18e7a <quotearg_buffer_restyled+0x607a>
   18e58:	50                   	push   %rax
   18e59:	48 c7 c0 db 2a 9a 11 	mov    $0x119a2adb,%rax
   18e60:	48 89 05 d9 aa 73 00 	mov    %rax,0x73aad9(%rip)        # 753940 <edgeId>
   18e67:	58                   	pop    %rax
   18e68:	e8 73 c9 fe ff       	callq  57e0 <_storeEdge>
   18e6d:	44 89 eb             	mov    %r13d,%ebx
   18e70:	c0 eb 06             	shr    $0x6,%bl
   18e73:	83 c3 30             	add    $0x30,%ebx
   18e76:	88 5c 07 fe          	mov    %bl,-0x2(%rdi,%rax,1)
   18e7a:	50                   	push   %rax
   18e7b:	48 c7 c0 56 d1 8c 28 	mov    $0x288cd156,%rax
   18e82:	48 89 05 b7 aa 73 00 	mov    %rax,0x73aab7(%rip)        # 753940 <edgeId>
   18e89:	58                   	pop    %rax
   18e8a:	e8 51 c9 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   18e8f:	4c 8d 50 ff          	lea    -0x1(%rax),%r10
   18e93:	48 89 15 7e aa 73 00 	mov    %rdx,0x73aa7e(%rip)        # 753918 <tmpquadone>
   18e9a:	48 89 0d 8f 4d 5e 00 	mov    %rcx,0x5e4d8f(%rip)        # 5fdc30 <tmpquadtwo>
   18ea1:	48 8d 15 48 4d 5e 00 	lea    0x5e4d48(%rip),%rdx        # 5fdbf0 <funcinptr>
   18ea8:	48 c7 02 64 0a 00 00 	movq   $0xa64,(%rdx)
   18eaf:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18eb6:	00 
   18eb7:	4c 89 d9             	mov    %r11,%rcx
   18eba:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18ebe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18ec5:	00 
   18ec6:	4c 89 d1             	mov    %r10,%rcx
   18ec9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18ecd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18ed4:	00 
   18ed5:	ff 32                	pushq  (%rdx)
   18ed7:	48 8b 15 3a aa 73 00 	mov    0x73aa3a(%rip),%rdx        # 753918 <tmpquadone>
   18ede:	48 8b 0d 4b 4d 5e 00 	mov    0x5e4d4b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18ee5:	48 c7 05 60 aa 73 00 	movq   $0x1,0x73aa60(%rip)        # 753950 <cmpPassed>
   18eec:	01 00 00 00 
   18ef0:	e8 83 c9 fe ff       	callq  5878 <_storeDataFn>
   18ef5:	4d 39 da             	cmp    %r11,%r10
   18ef8:	73 2a                	jae    18f24 <quotearg_buffer_restyled+0x6124>
   18efa:	50                   	push   %rax
   18efb:	48 b8 15 cd 88 e2 00 	movabs $0xe288cd15,%rax
   18f02:	00 00 00 
   18f05:	48 89 05 34 aa 73 00 	mov    %rax,0x73aa34(%rip)        # 753940 <edgeId>
   18f0c:	58                   	pop    %rax
   18f0d:	e8 ce c8 fe ff       	callq  57e0 <_storeEdge>
   18f12:	44 89 ee             	mov    %r13d,%esi
   18f15:	40 c0 ee 03          	shr    $0x3,%sil
   18f19:	83 e6 07             	and    $0x7,%esi
   18f1c:	83 c6 30             	add    $0x30,%esi
   18f1f:	40 88 74 07 ff       	mov    %sil,-0x1(%rdi,%rax,1)
   18f24:	50                   	push   %rax
   18f25:	48 c7 c0 34 23 8a 47 	mov    $0x478a2334,%rax
   18f2c:	48 89 05 0d aa 73 00 	mov    %rax,0x73aa0d(%rip)        # 753940 <edgeId>
   18f33:	58                   	pop    %rax
   18f34:	e8 a7 c8 fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   18f39:	41 83 e5 07          	and    $0x7,%r13d
   18f3d:	41 83 c5 30          	add    $0x30,%r13d
                    STORE (c);
   18f41:	48 89 15 d0 a9 73 00 	mov    %rdx,0x73a9d0(%rip)        # 753918 <tmpquadone>
   18f48:	48 89 0d e1 4c 5e 00 	mov    %rcx,0x5e4ce1(%rip)        # 5fdc30 <tmpquadtwo>
   18f4f:	48 8d 15 9a 4c 5e 00 	lea    0x5e4c9a(%rip),%rdx        # 5fdbf0 <funcinptr>
   18f56:	48 c7 02 65 0a 00 00 	movq   $0xa65,(%rdx)
   18f5d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   18f64:	00 
   18f65:	48 89 c1             	mov    %rax,%rcx
   18f68:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   18f6c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   18f73:	00 
   18f74:	4c 89 d9             	mov    %r11,%rcx
   18f77:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   18f7b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   18f82:	00 
   18f83:	ff 32                	pushq  (%rdx)
   18f85:	48 8b 15 8c a9 73 00 	mov    0x73a98c(%rip),%rdx        # 753918 <tmpquadone>
   18f8c:	48 8b 0d 9d 4c 5e 00 	mov    0x5e4c9d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   18f93:	48 c7 05 b2 a9 73 00 	movq   $0x1,0x73a9b2(%rip)        # 753950 <cmpPassed>
   18f9a:	01 00 00 00 
   18f9e:	e8 d5 c8 fe ff       	callq  5878 <_storeDataFn>
   18fa3:	49 39 c3             	cmp    %rax,%r11
   18fa6:	76 19                	jbe    18fc1 <quotearg_buffer_restyled+0x61c1>
   18fa8:	50                   	push   %rax
   18fa9:	48 c7 c0 8c 28 1e 09 	mov    $0x91e288c,%rax
   18fb0:	48 89 05 89 a9 73 00 	mov    %rax,0x73a989(%rip)        # 753940 <edgeId>
   18fb7:	58                   	pop    %rax
   18fb8:	e8 23 c8 fe ff       	callq  57e0 <_storeEdge>
   18fbd:	44 88 2c 07          	mov    %r13b,(%rdi,%rax,1)
   18fc1:	50                   	push   %rax
   18fc2:	48 c7 c0 23 8a 47 42 	mov    $0x42478a23,%rax
   18fc9:	48 89 05 70 a9 73 00 	mov    %rax,0x73a970(%rip)        # 753940 <edgeId>
   18fd0:	58                   	pop    %rax
   18fd1:	e8 0a c8 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   18fd6:	4c 8d 68 01          	lea    0x1(%rax),%r13
                    c = arg[++i];
   18fda:	43 0f b6 4c 21 01    	movzbl 0x1(%r9,%r12,1),%ecx
   18fe0:	4c 8d 40 04          	lea    0x4(%rax),%r8
                        STORE ('\\');
   18fe4:	48 89 15 2d a9 73 00 	mov    %rdx,0x73a92d(%rip)        # 753918 <tmpquadone>
   18feb:	48 89 0d 3e 4c 5e 00 	mov    %rcx,0x5e4c3e(%rip)        # 5fdc30 <tmpquadtwo>
   18ff2:	48 8d 15 f7 4b 5e 00 	lea    0x5e4bf7(%rip),%rdx        # 5fdbf0 <funcinptr>
   18ff9:	48 c7 02 66 0a 00 00 	movq   $0xa66,(%rdx)
   19000:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19007:	00 
   19008:	4c 89 d9             	mov    %r11,%rcx
   1900b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1900f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19016:	00 
   19017:	4c 89 e9             	mov    %r13,%rcx
   1901a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1901e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19025:	00 
   19026:	ff 32                	pushq  (%rdx)
   19028:	48 8b 15 e9 a8 73 00 	mov    0x73a8e9(%rip),%rdx        # 753918 <tmpquadone>
   1902f:	48 8b 0d fa 4b 5e 00 	mov    0x5e4bfa(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19036:	48 c7 05 0f a9 73 00 	movq   $0x1,0x73a90f(%rip)        # 753950 <cmpPassed>
   1903d:	01 00 00 00 
   19041:	e8 32 c8 fe ff       	callq  5878 <_storeDataFn>
   19046:	4d 39 dd             	cmp    %r11,%r13
   19049:	73 1e                	jae    19069 <quotearg_buffer_restyled+0x6269>
   1904b:	50                   	push   %rax
   1904c:	48 b8 8a 47 42 d7 00 	movabs $0xd742478a,%rax
   19053:	00 00 00 
   19056:	48 89 05 e3 a8 73 00 	mov    %rax,0x73a8e3(%rip)        # 753940 <edgeId>
   1905d:	58                   	pop    %rax
   1905e:	e8 7d c7 fe ff       	callq  57e0 <_storeEdge>
   19063:	42 c6 44 07 fd 5c    	movb   $0x5c,-0x3(%rdi,%r8,1)
   19069:	50                   	push   %rax
   1906a:	48 c7 c0 e2 91 d0 35 	mov    $0x35d091e2,%rax
   19071:	48 89 05 c8 a8 73 00 	mov    %rax,0x73a8c8(%rip)        # 753940 <edgeId>
   19078:	58                   	pop    %rax
   19079:	e8 62 c7 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   1907e:	4d 8d 78 fe          	lea    -0x2(%r8),%r15
   19082:	48 89 15 8f a8 73 00 	mov    %rdx,0x73a88f(%rip)        # 753918 <tmpquadone>
   19089:	48 89 0d a0 4b 5e 00 	mov    %rcx,0x5e4ba0(%rip)        # 5fdc30 <tmpquadtwo>
   19090:	48 8d 15 59 4b 5e 00 	lea    0x5e4b59(%rip),%rdx        # 5fdbf0 <funcinptr>
   19097:	48 c7 02 67 0a 00 00 	movq   $0xa67,(%rdx)
   1909e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   190a5:	00 
   190a6:	4c 89 d9             	mov    %r11,%rcx
   190a9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   190ad:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   190b4:	00 
   190b5:	4c 89 f9             	mov    %r15,%rcx
   190b8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   190bc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   190c3:	00 
   190c4:	ff 32                	pushq  (%rdx)
   190c6:	48 8b 15 4b a8 73 00 	mov    0x73a84b(%rip),%rdx        # 753918 <tmpquadone>
   190cd:	48 8b 0d 5c 4b 5e 00 	mov    0x5e4b5c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   190d4:	48 c7 05 71 a8 73 00 	movq   $0x1,0x73a871(%rip)        # 753950 <cmpPassed>
   190db:	01 00 00 00 
   190df:	e8 94 c7 fe ff       	callq  5878 <_storeDataFn>
   190e4:	4d 39 df             	cmp    %r11,%r15
   190e7:	73 25                	jae    1910e <quotearg_buffer_restyled+0x630e>
   190e9:	50                   	push   %rax
   190ea:	48 b8 1e 09 5d b3 00 	movabs $0xb35d091e,%rax
   190f1:	00 00 00 
   190f4:	48 89 05 45 a8 73 00 	mov    %rax,0x73a845(%rip)        # 753940 <edgeId>
   190fb:	58                   	pop    %rax
   190fc:	e8 df c6 fe ff       	callq  57e0 <_storeEdge>
   19101:	89 cb                	mov    %ecx,%ebx
   19103:	c0 eb 06             	shr    $0x6,%bl
   19106:	83 c3 30             	add    $0x30,%ebx
   19109:	42 88 5c 07 fe       	mov    %bl,-0x2(%rdi,%r8,1)
   1910e:	50                   	push   %rax
   1910f:	48 c7 c0 48 e8 9a 4d 	mov    $0x4d9ae848,%rax
   19116:	48 89 05 23 a8 73 00 	mov    %rax,0x73a823(%rip)        # 753940 <edgeId>
   1911d:	58                   	pop    %rax
   1911e:	e8 bd c6 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   19123:	4d 8d 50 ff          	lea    -0x1(%r8),%r10
   19127:	48 89 15 ea a7 73 00 	mov    %rdx,0x73a7ea(%rip)        # 753918 <tmpquadone>
   1912e:	48 89 0d fb 4a 5e 00 	mov    %rcx,0x5e4afb(%rip)        # 5fdc30 <tmpquadtwo>
   19135:	48 8d 15 b4 4a 5e 00 	lea    0x5e4ab4(%rip),%rdx        # 5fdbf0 <funcinptr>
   1913c:	48 c7 02 68 0a 00 00 	movq   $0xa68,(%rdx)
   19143:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1914a:	00 
   1914b:	4c 89 d9             	mov    %r11,%rcx
   1914e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19152:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19159:	00 
   1915a:	4c 89 d1             	mov    %r10,%rcx
   1915d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19161:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19168:	00 
   19169:	ff 32                	pushq  (%rdx)
   1916b:	48 8b 15 a6 a7 73 00 	mov    0x73a7a6(%rip),%rdx        # 753918 <tmpquadone>
   19172:	48 8b 0d b7 4a 5e 00 	mov    0x5e4ab7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19179:	48 c7 05 cc a7 73 00 	movq   $0x1,0x73a7cc(%rip)        # 753950 <cmpPassed>
   19180:	01 00 00 00 
   19184:	e8 ef c6 fe ff       	callq  5878 <_storeDataFn>
   19189:	4d 39 da             	cmp    %r11,%r10
   1918c:	73 29                	jae    191b7 <quotearg_buffer_restyled+0x63b7>
   1918e:	50                   	push   %rax
   1918f:	48 b8 84 ae d9 c4 00 	movabs $0xc4d9ae84,%rax
   19196:	00 00 00 
   19199:	48 89 05 a0 a7 73 00 	mov    %rax,0x73a7a0(%rip)        # 753940 <edgeId>
   191a0:	58                   	pop    %rax
   191a1:	e8 3a c6 fe ff       	callq  57e0 <_storeEdge>
   191a6:	89 ce                	mov    %ecx,%esi
   191a8:	40 c0 ee 03          	shr    $0x3,%sil
   191ac:	83 e6 07             	and    $0x7,%esi
   191af:	83 c6 30             	add    $0x30,%esi
   191b2:	42 88 74 07 ff       	mov    %sil,-0x1(%rdi,%r8,1)
   191b7:	50                   	push   %rax
   191b8:	48 b8 ba 66 13 f3 00 	movabs $0xf31366ba,%rax
   191bf:	00 00 00 
   191c2:	48 89 05 77 a7 73 00 	mov    %rax,0x73a777(%rip)        # 753940 <edgeId>
   191c9:	58                   	pop    %rax
   191ca:	e8 11 c6 fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   191cf:	83 e1 07             	and    $0x7,%ecx
   191d2:	83 c1 30             	add    $0x30,%ecx
                    STORE (c);
   191d5:	48 89 15 3c a7 73 00 	mov    %rdx,0x73a73c(%rip)        # 753918 <tmpquadone>
   191dc:	48 89 0d 4d 4a 5e 00 	mov    %rcx,0x5e4a4d(%rip)        # 5fdc30 <tmpquadtwo>
   191e3:	48 8d 15 06 4a 5e 00 	lea    0x5e4a06(%rip),%rdx        # 5fdbf0 <funcinptr>
   191ea:	48 c7 02 69 0a 00 00 	movq   $0xa69,(%rdx)
   191f1:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   191f8:	00 
   191f9:	4c 89 c1             	mov    %r8,%rcx
   191fc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19200:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19207:	00 
   19208:	4c 89 d9             	mov    %r11,%rcx
   1920b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1920f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19216:	00 
   19217:	ff 32                	pushq  (%rdx)
   19219:	48 8b 15 f8 a6 73 00 	mov    0x73a6f8(%rip),%rdx        # 753918 <tmpquadone>
   19220:	48 8b 0d 09 4a 5e 00 	mov    0x5e4a09(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19227:	48 c7 05 1e a7 73 00 	movq   $0x1,0x73a71e(%rip)        # 753950 <cmpPassed>
   1922e:	01 00 00 00 
   19232:	e8 41 c6 fe ff       	callq  5878 <_storeDataFn>
   19237:	4d 39 c3             	cmp    %r8,%r11
   1923a:	76 19                	jbe    19255 <quotearg_buffer_restyled+0x6455>
   1923c:	50                   	push   %rax
   1923d:	48 c7 c0 9a 4d cc 4f 	mov    $0x4fcc4d9a,%rax
   19244:	48 89 05 f5 a6 73 00 	mov    %rax,0x73a6f5(%rip)        # 753940 <edgeId>
   1924b:	58                   	pop    %rax
   1924c:	e8 8f c5 fe ff       	callq  57e0 <_storeEdge>
   19251:	88 4c 07 04          	mov    %cl,0x4(%rdi,%rax,1)
   19255:	50                   	push   %rax
   19256:	48 b8 66 13 f3 d3 00 	movabs $0xd3f31366,%rax
   1925d:	00 00 00 
   19260:	48 89 05 d9 a6 73 00 	mov    %rax,0x73a6d9(%rip)        # 753940 <edgeId>
   19267:	58                   	pop    %rax
   19268:	e8 73 c5 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   1926d:	4c 8d 68 05          	lea    0x5(%rax),%r13
                    c = arg[++i];
   19271:	43 0f b6 4c 21 02    	movzbl 0x2(%r9,%r12,1),%ecx
   19277:	4c 8d 40 08          	lea    0x8(%rax),%r8
                        STORE ('\\');
   1927b:	48 89 15 96 a6 73 00 	mov    %rdx,0x73a696(%rip)        # 753918 <tmpquadone>
   19282:	48 89 0d a7 49 5e 00 	mov    %rcx,0x5e49a7(%rip)        # 5fdc30 <tmpquadtwo>
   19289:	48 8d 15 60 49 5e 00 	lea    0x5e4960(%rip),%rdx        # 5fdbf0 <funcinptr>
   19290:	48 c7 02 6a 0a 00 00 	movq   $0xa6a,(%rdx)
   19297:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1929e:	00 
   1929f:	4c 89 d9             	mov    %r11,%rcx
   192a2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   192a6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   192ad:	00 
   192ae:	4c 89 e9             	mov    %r13,%rcx
   192b1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   192b5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   192bc:	00 
   192bd:	ff 32                	pushq  (%rdx)
   192bf:	48 8b 15 52 a6 73 00 	mov    0x73a652(%rip),%rdx        # 753918 <tmpquadone>
   192c6:	48 8b 0d 63 49 5e 00 	mov    0x5e4963(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   192cd:	48 c7 05 78 a6 73 00 	movq   $0x1,0x73a678(%rip)        # 753950 <cmpPassed>
   192d4:	01 00 00 00 
   192d8:	e8 9b c5 fe ff       	callq  5878 <_storeDataFn>
   192dd:	4d 39 dd             	cmp    %r11,%r13
   192e0:	73 1e                	jae    19300 <quotearg_buffer_restyled+0x6500>
   192e2:	50                   	push   %rax
   192e3:	48 b8 13 f3 d3 cd 00 	movabs $0xcdd3f313,%rax
   192ea:	00 00 00 
   192ed:	48 89 05 4c a6 73 00 	mov    %rax,0x73a64c(%rip)        # 753940 <edgeId>
   192f4:	58                   	pop    %rax
   192f5:	e8 e6 c4 fe ff       	callq  57e0 <_storeEdge>
   192fa:	42 c6 44 07 fd 5c    	movb   $0x5c,-0x3(%rdi,%r8,1)
   19300:	50                   	push   %rax
   19301:	48 c7 c0 c4 fc 74 33 	mov    $0x3374fcc4,%rax
   19308:	48 89 05 31 a6 73 00 	mov    %rax,0x73a631(%rip)        # 753940 <edgeId>
   1930f:	58                   	pop    %rax
   19310:	e8 cb c4 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + (c >> 6));
   19315:	4d 8d 78 fe          	lea    -0x2(%r8),%r15
   19319:	48 89 15 f8 a5 73 00 	mov    %rdx,0x73a5f8(%rip)        # 753918 <tmpquadone>
   19320:	48 89 0d 09 49 5e 00 	mov    %rcx,0x5e4909(%rip)        # 5fdc30 <tmpquadtwo>
   19327:	48 8d 15 c2 48 5e 00 	lea    0x5e48c2(%rip),%rdx        # 5fdbf0 <funcinptr>
   1932e:	48 c7 02 6b 0a 00 00 	movq   $0xa6b,(%rdx)
   19335:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1933c:	00 
   1933d:	4c 89 d9             	mov    %r11,%rcx
   19340:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19344:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1934b:	00 
   1934c:	4c 89 f9             	mov    %r15,%rcx
   1934f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19353:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1935a:	00 
   1935b:	ff 32                	pushq  (%rdx)
   1935d:	48 8b 15 b4 a5 73 00 	mov    0x73a5b4(%rip),%rdx        # 753918 <tmpquadone>
   19364:	48 8b 0d c5 48 5e 00 	mov    0x5e48c5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1936b:	48 c7 05 da a5 73 00 	movq   $0x1,0x73a5da(%rip)        # 753950 <cmpPassed>
   19372:	01 00 00 00 
   19376:	e8 fd c4 fe ff       	callq  5878 <_storeDataFn>
   1937b:	4d 39 df             	cmp    %r11,%r15
   1937e:	73 22                	jae    193a2 <quotearg_buffer_restyled+0x65a2>
   19380:	50                   	push   %rax
   19381:	48 c7 c0 cc 4f 37 13 	mov    $0x13374fcc,%rax
   19388:	48 89 05 b1 a5 73 00 	mov    %rax,0x73a5b1(%rip)        # 753940 <edgeId>
   1938f:	58                   	pop    %rax
   19390:	e8 4b c4 fe ff       	callq  57e0 <_storeEdge>
   19395:	89 cb                	mov    %ecx,%ebx
   19397:	c0 eb 06             	shr    $0x6,%bl
   1939a:	83 c3 30             	add    $0x30,%ebx
   1939d:	42 88 5c 07 fe       	mov    %bl,-0x2(%rdi,%r8,1)
   193a2:	50                   	push   %rax
   193a3:	48 b8 7e ba 99 98 00 	movabs $0x9899ba7e,%rax
   193aa:	00 00 00 
   193ad:	48 89 05 8c a5 73 00 	mov    %rax,0x73a58c(%rip)        # 753940 <edgeId>
   193b4:	58                   	pop    %rax
   193b5:	e8 26 c4 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   193ba:	4d 8d 50 ff          	lea    -0x1(%r8),%r10
   193be:	48 89 15 53 a5 73 00 	mov    %rdx,0x73a553(%rip)        # 753918 <tmpquadone>
   193c5:	48 89 0d 64 48 5e 00 	mov    %rcx,0x5e4864(%rip)        # 5fdc30 <tmpquadtwo>
   193cc:	48 8d 15 1d 48 5e 00 	lea    0x5e481d(%rip),%rdx        # 5fdbf0 <funcinptr>
   193d3:	48 c7 02 6c 0a 00 00 	movq   $0xa6c,(%rdx)
   193da:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   193e1:	00 
   193e2:	4c 89 d9             	mov    %r11,%rcx
   193e5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   193e9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   193f0:	00 
   193f1:	4c 89 d1             	mov    %r10,%rcx
   193f4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   193f8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   193ff:	00 
   19400:	ff 32                	pushq  (%rdx)
   19402:	48 8b 15 0f a5 73 00 	mov    0x73a50f(%rip),%rdx        # 753918 <tmpquadone>
   19409:	48 8b 0d 20 48 5e 00 	mov    0x5e4820(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19410:	48 c7 05 35 a5 73 00 	movq   $0x1,0x73a535(%rip)        # 753950 <cmpPassed>
   19417:	01 00 00 00 
   1941b:	e8 58 c4 fe ff       	callq  5878 <_storeDataFn>
   19420:	4d 39 da             	cmp    %r11,%r10
   19423:	73 29                	jae    1944e <quotearg_buffer_restyled+0x664e>
   19425:	50                   	push   %rax
   19426:	48 b8 a7 9b 89 99 00 	movabs $0x99899ba7,%rax
   1942d:	00 00 00 
   19430:	48 89 05 09 a5 73 00 	mov    %rax,0x73a509(%rip)        # 753940 <edgeId>
   19437:	58                   	pop    %rax
   19438:	e8 a3 c3 fe ff       	callq  57e0 <_storeEdge>
   1943d:	89 ce                	mov    %ecx,%esi
   1943f:	40 c0 ee 03          	shr    $0x3,%sil
   19443:	83 e6 07             	and    $0x7,%esi
   19446:	83 c6 30             	add    $0x30,%esi
   19449:	42 88 74 07 ff       	mov    %sil,-0x1(%rdi,%r8,1)
   1944e:	50                   	push   %rax
   1944f:	48 b8 6e 26 66 fa 00 	movabs $0xfa66266e,%rax
   19456:	00 00 00 
   19459:	48 89 05 e0 a4 73 00 	mov    %rax,0x73a4e0(%rip)        # 753940 <edgeId>
   19460:	58                   	pop    %rax
   19461:	e8 7a c3 fe ff       	callq  57e0 <_storeEdge>
                        c = '0' + (c & 7);
   19466:	83 e1 07             	and    $0x7,%ecx
                    if (ilim <= i + 1)
   19469:	49 8d 5c 24 03       	lea    0x3(%r12),%rbx
                        c = '0' + (c & 7);
   1946e:	83 c1 30             	add    $0x30,%ecx
                    STORE (c);
   19471:	48 89 15 a0 a4 73 00 	mov    %rdx,0x73a4a0(%rip)        # 753918 <tmpquadone>
   19478:	48 89 0d b1 47 5e 00 	mov    %rcx,0x5e47b1(%rip)        # 5fdc30 <tmpquadtwo>
   1947f:	48 8d 15 6a 47 5e 00 	lea    0x5e476a(%rip),%rdx        # 5fdbf0 <funcinptr>
   19486:	48 c7 02 6d 0a 00 00 	movq   $0xa6d,(%rdx)
   1948d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19494:	00 
   19495:	4c 89 c1             	mov    %r8,%rcx
   19498:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1949c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   194a3:	00 
   194a4:	4c 89 d9             	mov    %r11,%rcx
   194a7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   194ab:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   194b2:	00 
   194b3:	ff 32                	pushq  (%rdx)
   194b5:	48 8b 15 5c a4 73 00 	mov    0x73a45c(%rip),%rdx        # 753918 <tmpquadone>
   194bc:	48 8b 0d 6d 47 5e 00 	mov    0x5e476d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   194c3:	48 c7 05 82 a4 73 00 	movq   $0x1,0x73a482(%rip)        # 753950 <cmpPassed>
   194ca:	01 00 00 00 
   194ce:	e8 a5 c3 fe ff       	callq  5878 <_storeDataFn>
   194d3:	4d 39 c3             	cmp    %r8,%r11
   194d6:	76 19                	jbe    194f1 <quotearg_buffer_restyled+0x66f1>
   194d8:	50                   	push   %rax
   194d9:	48 c7 c0 89 99 7e 55 	mov    $0x557e9989,%rax
   194e0:	48 89 05 59 a4 73 00 	mov    %rax,0x73a459(%rip)        # 753940 <edgeId>
   194e7:	58                   	pop    %rax
   194e8:	e8 f3 c2 fe ff       	callq  57e0 <_storeEdge>
   194ed:	88 4c 07 08          	mov    %cl,0x8(%rdi,%rax,1)
   194f1:	50                   	push   %rax
   194f2:	48 b8 62 a6 5f d5 00 	movabs $0xd55fa662,%rax
   194f9:	00 00 00 
   194fc:	48 89 05 3d a4 73 00 	mov    %rax,0x73a43d(%rip)        # 753940 <edgeId>
   19503:	58                   	pop    %rax
   19504:	e8 d7 c2 fe ff       	callq  57e0 <_storeEdge>
   19509:	4c 8d 78 0c          	lea    0xc(%rax),%r15
                    c = arg[++i];
   1950d:	47 0f b6 6c 21 03    	movzbl 0x3(%r9,%r12,1),%r13d
                        STORE ('\\');
   19513:	49 8d 47 fd          	lea    -0x3(%r15),%rax
   19517:	48 89 15 fa a3 73 00 	mov    %rdx,0x73a3fa(%rip)        # 753918 <tmpquadone>
   1951e:	48 89 0d 0b 47 5e 00 	mov    %rcx,0x5e470b(%rip)        # 5fdc30 <tmpquadtwo>
   19525:	48 8d 15 c4 46 5e 00 	lea    0x5e46c4(%rip),%rdx        # 5fdbf0 <funcinptr>
   1952c:	48 c7 02 6e 0a 00 00 	movq   $0xa6e,(%rdx)
   19533:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1953a:	00 
   1953b:	4c 89 d9             	mov    %r11,%rcx
   1953e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19542:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19549:	00 
   1954a:	48 89 c1             	mov    %rax,%rcx
   1954d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19551:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19558:	00 
   19559:	ff 32                	pushq  (%rdx)
   1955b:	48 8b 15 b6 a3 73 00 	mov    0x73a3b6(%rip),%rdx        # 753918 <tmpquadone>
   19562:	48 8b 0d c7 46 5e 00 	mov    0x5e46c7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19569:	48 c7 05 dc a3 73 00 	movq   $0x1,0x73a3dc(%rip)        # 753950 <cmpPassed>
   19570:	01 00 00 00 
   19574:	e8 ff c2 fe ff       	callq  5878 <_storeDataFn>
   19579:	4c 39 d8             	cmp    %r11,%rax
   1957c:	0f 82 20 f5 ff ff    	jb     18aa2 <quotearg_buffer_restyled+0x5ca2>
   19582:	50                   	push   %rax
   19583:	48 c7 c0 d3 af 6a 52 	mov    $0x526aafd3,%rax
   1958a:	48 89 05 af a3 73 00 	mov    %rax,0x73a3af(%rip)        # 753940 <edgeId>
   19591:	58                   	pop    %rax
   19592:	e8 49 c2 fe ff       	callq  57e0 <_storeEdge>
   19597:	e9 21 f5 ff ff       	jmpq   18abd <quotearg_buffer_restyled+0x5cbd>
   1959c:	50                   	push   %rax
   1959d:	48 b8 fa 55 4d 8a 00 	movabs $0x8a4d55fa,%rax
   195a4:	00 00 00 
   195a7:	48 89 05 92 a3 73 00 	mov    %rax,0x73a392(%rip)        # 753940 <edgeId>
   195ae:	58                   	pop    %rax
   195af:	e8 2c c2 fe ff       	callq  57e0 <_storeEdge>
                  STORE ('0');
   195b4:	48 89 15 5d a3 73 00 	mov    %rdx,0x73a35d(%rip)        # 753918 <tmpquadone>
   195bb:	48 89 0d 6e 46 5e 00 	mov    %rcx,0x5e466e(%rip)        # 5fdc30 <tmpquadtwo>
   195c2:	48 8d 15 27 46 5e 00 	lea    0x5e4627(%rip),%rdx        # 5fdbf0 <funcinptr>
   195c9:	48 c7 02 6f 0a 00 00 	movq   $0xa6f,(%rdx)
   195d0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   195d7:	00 
   195d8:	4c 89 e9             	mov    %r13,%rcx
   195db:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   195df:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   195e6:	00 
   195e7:	4c 89 d9             	mov    %r11,%rcx
   195ea:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   195ee:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   195f5:	00 
   195f6:	ff 32                	pushq  (%rdx)
   195f8:	48 8b 15 19 a3 73 00 	mov    0x73a319(%rip),%rdx        # 753918 <tmpquadone>
   195ff:	48 8b 0d 2a 46 5e 00 	mov    0x5e462a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19606:	48 c7 05 3f a3 73 00 	movq   $0x1,0x73a33f(%rip)        # 753950 <cmpPassed>
   1960d:	01 00 00 00 
   19611:	e8 62 c2 fe ff       	callq  5878 <_storeDataFn>
   19616:	4d 39 eb             	cmp    %r13,%r11
   19619:	76 21                	jbe    1963c <quotearg_buffer_restyled+0x683c>
   1961b:	50                   	push   %rax
   1961c:	48 b8 af 6a 52 a4 00 	movabs $0xa4526aaf,%rax
   19623:	00 00 00 
   19626:	48 89 05 13 a3 73 00 	mov    %rax,0x73a313(%rip)        # 753940 <edgeId>
   1962d:	58                   	pop    %rax
   1962e:	e8 ad c1 fe ff       	callq  57e0 <_storeEdge>
   19633:	48 8b 14 24          	mov    (%rsp),%rdx
   19637:	42 c6 04 2a 30       	movb   $0x30,(%rdx,%r13,1)
   1963c:	50                   	push   %rax
   1963d:	48 b8 aa 26 45 ea 00 	movabs $0xea4526aa,%rax
   19644:	00 00 00 
   19647:	48 89 05 f2 a2 73 00 	mov    %rax,0x73a2f2(%rip)        # 753940 <edgeId>
   1964e:	58                   	pop    %rax
   1964f:	e8 8c c1 fe ff       	callq  57e0 <_storeEdge>
   19654:	4d 8d 47 02          	lea    0x2(%r15),%r8
                  STORE ('0');
   19658:	48 89 15 b9 a2 73 00 	mov    %rdx,0x73a2b9(%rip)        # 753918 <tmpquadone>
   1965f:	48 89 0d ca 45 5e 00 	mov    %rcx,0x5e45ca(%rip)        # 5fdc30 <tmpquadtwo>
   19666:	48 8d 15 83 45 5e 00 	lea    0x5e4583(%rip),%rdx        # 5fdbf0 <funcinptr>
   1966d:	48 c7 02 70 0a 00 00 	movq   $0xa70,(%rdx)
   19674:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1967b:	00 
   1967c:	4c 89 c1             	mov    %r8,%rcx
   1967f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19683:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1968a:	00 
   1968b:	4c 89 d9             	mov    %r11,%rcx
   1968e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19692:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19699:	00 
   1969a:	ff 32                	pushq  (%rdx)
   1969c:	48 8b 15 75 a2 73 00 	mov    0x73a275(%rip),%rdx        # 753918 <tmpquadone>
   196a3:	48 8b 0d 86 45 5e 00 	mov    0x5e4586(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   196aa:	48 c7 05 9b a2 73 00 	movq   $0x1,0x73a29b(%rip)        # 753950 <cmpPassed>
   196b1:	01 00 00 00 
   196b5:	e8 be c1 fe ff       	callq  5878 <_storeDataFn>
   196ba:	4d 39 c3             	cmp    %r8,%r11
   196bd:	76 22                	jbe    196e1 <quotearg_buffer_restyled+0x68e1>
   196bf:	50                   	push   %rax
   196c0:	48 b8 9a 14 a9 87 00 	movabs $0x87a9149a,%rax
   196c7:	00 00 00 
   196ca:	48 89 05 6f a2 73 00 	mov    %rax,0x73a26f(%rip)        # 753940 <edgeId>
   196d1:	58                   	pop    %rax
   196d2:	e8 09 c1 fe ff       	callq  57e0 <_storeEdge>
   196d7:	4c 8b 24 24          	mov    (%rsp),%r12
   196db:	43 c6 44 3c 02 30    	movb   $0x30,0x2(%r12,%r15,1)
   196e1:	50                   	push   %rax
   196e2:	48 c7 c0 49 91 7a 08 	mov    $0x87a9149,%rax
   196e9:	48 89 05 50 a2 73 00 	mov    %rax,0x73a250(%rip)        # 753940 <edgeId>
   196f0:	58                   	pop    %rax
   196f1:	e8 ea c0 fe ff       	callq  57e0 <_storeEdge>
   196f6:	49 83 c7 03          	add    $0x3,%r15
   196fa:	41 bd 30 00 00 00    	mov    $0x30,%r13d
   19700:	e9 db af ff ff       	jmpq   146e0 <quotearg_buffer_restyled+0x18e0>
   19705:	50                   	push   %rax
   19706:	48 b8 22 f5 10 fa 00 	movabs $0xfa10f522,%rax
   1970d:	00 00 00 
   19710:	48 89 05 29 a2 73 00 	mov    %rax,0x73a229(%rip)        # 753940 <edgeId>
   19717:	58                   	pop    %rax
   19718:	e8 c3 c0 fe ff       	callq  57e0 <_storeEdge>
                    STORE (c);
   1971d:	48 8b 0c 24          	mov    (%rsp),%rcx
   19721:	46 88 2c 39          	mov    %r13b,(%rcx,%r15,1)
   19725:	e9 fe bb ff ff       	jmpq   15328 <quotearg_buffer_restyled+0x2528>
   1972a:	50                   	push   %rax
   1972b:	48 c7 c0 f5 10 fa 33 	mov    $0x33fa10f5,%rax
   19732:	48 89 05 07 a2 73 00 	mov    %rax,0x73a207(%rip)        # 753940 <edgeId>
   19739:	58                   	pop    %rax
   1973a:	e8 a1 c0 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('\\');
   1973f:	48 8b 0c 24          	mov    (%rsp),%rcx
   19743:	42 c6 44 39 fd 5c    	movb   $0x5c,-0x3(%rcx,%r15,1)
   19749:	e9 13 d7 ff ff       	jmpq   16e61 <quotearg_buffer_restyled+0x4061>
   1974e:	50                   	push   %rax
   1974f:	48 c7 c0 87 d0 9f 01 	mov    $0x19fd087,%rax
   19756:	48 89 05 e3 a1 73 00 	mov    %rax,0x73a1e3(%rip)        # 753940 <edgeId>
   1975d:	58                   	pop    %rax
   1975e:	e8 7d c0 fe ff       	callq  57e0 <_storeEdge>
                        STORE ('0' + ((c >> 3) & 7));
   19763:	45 89 e8             	mov    %r13d,%r8d
   19766:	48 8b 0c 24          	mov    (%rsp),%rcx
   1976a:	41 c0 e8 03          	shr    $0x3,%r8b
   1976e:	41 83 e0 07          	and    $0x7,%r8d
   19772:	41 83 c0 30          	add    $0x30,%r8d
   19776:	46 88 44 39 ff       	mov    %r8b,-0x1(%rcx,%r15,1)
   1977b:	e9 f3 da ff ff       	jmpq   17273 <quotearg_buffer_restyled+0x4473>
   19780:	50                   	push   %rax
   19781:	48 b8 f4 67 80 b4 00 	movabs $0xb48067f4,%rax
   19788:	00 00 00 
   1978b:	48 89 05 ae a1 73 00 	mov    %rax,0x73a1ae(%rip)        # 753940 <edgeId>
   19792:	58                   	pop    %rax
   19793:	e8 48 c0 fe ff       	callq  57e0 <_storeEdge>
   19798:	48 89 ee             	mov    %rbp,%rsi
   1979b:	4d 89 f9             	mov    %r15,%r9
   1979e:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
   197a3:	44 0f b6 6c 24 7e    	movzbl 0x7e(%rsp),%r13d
   197a9:	44 0f b6 54 24 7f    	movzbl 0x7f(%rsp),%r10d
   197af:	4c 8b 5c 24 70       	mov    0x70(%rsp),%r11
   197b4:	4c 8b bc 24 80 00 00 	mov    0x80(%rsp),%r15
   197bb:	00 
   197bc:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   197c1:	44 0f b6 64 24 69    	movzbl 0x69(%rsp),%r12d
   197c7:	e9 53 d0 ff ff       	jmpq   1681f <quotearg_buffer_restyled+0x3a1f>
   197cc:	50                   	push   %rax
   197cd:	48 b8 40 da 72 a9 00 	movabs $0xa972da40,%rax
   197d4:	00 00 00 
   197d7:	48 89 05 62 a1 73 00 	mov    %rax,0x73a162(%rip)        # 753940 <edgeId>
   197de:	58                   	pop    %rax
   197df:	e8 fc bf fe ff       	callq  57e0 <_storeEdge>
   197e4:	49 89 ec             	mov    %rbp,%r12
   197e7:	48 89 ee             	mov    %rbp,%rsi
   197ea:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   197ef:	48 89 df             	mov    %rbx,%rdi
   197f2:	4c 89 e9             	mov    %r13,%rcx
   197f5:	4d 89 f9             	mov    %r15,%r9
   197f8:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
   197fd:	44 0f b6 6c 24 7e    	movzbl 0x7e(%rsp),%r13d
                        while (i + m < argsize && arg[i + m])
   19803:	48 89 15 0e a1 73 00 	mov    %rdx,0x73a10e(%rip)        # 753918 <tmpquadone>
   1980a:	48 89 0d 1f 44 5e 00 	mov    %rcx,0x5e441f(%rip)        # 5fdc30 <tmpquadtwo>
   19811:	48 8d 15 d8 43 5e 00 	lea    0x5e43d8(%rip),%rdx        # 5fdbf0 <funcinptr>
   19818:	48 c7 02 71 0a 00 00 	movq   $0xa71,(%rdx)
   1981f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19826:	00 
   19827:	48 89 e9             	mov    %rbp,%rcx
   1982a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1982e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19835:	00 
   19836:	48 89 f9             	mov    %rdi,%rcx
   19839:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1983d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19844:	00 
   19845:	ff 32                	pushq  (%rdx)
   19847:	48 8b 15 ca a0 73 00 	mov    0x73a0ca(%rip),%rdx        # 753918 <tmpquadone>
   1984e:	48 8b 0d db 43 5e 00 	mov    0x5e43db(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19855:	48 c7 05 f0 a0 73 00 	movq   $0x1,0x73a0f0(%rip)        # 753950 <cmpPassed>
   1985c:	01 00 00 00 
   19860:	e8 13 c0 fe ff       	callq  5878 <_storeDataFn>
   19865:	48 39 ef             	cmp    %rbp,%rdi
   19868:	44 0f b6 54 24 7f    	movzbl 0x7f(%rsp),%r10d
   1986e:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
   19875:	00 
   19876:	4c 8b 5c 24 70       	mov    0x70(%rsp),%r11
   1987b:	4c 8b bc 24 80 00 00 	mov    0x80(%rsp),%r15
   19882:	00 
   19883:	0f 83 20 0e 00 00    	jae    1a6a9 <quotearg_buffer_restyled+0x78a9>
   19889:	50                   	push   %rax
   1988a:	48 c7 c0 b9 d4 58 7f 	mov    $0x7f58d4b9,%rax
   19891:	48 89 05 a8 a0 73 00 	mov    %rax,0x73a0a8(%rip)        # 753940 <edgeId>
   19898:	58                   	pop    %rax
   19899:	e8 42 bf fe ff       	callq  57e0 <_storeEdge>
   1989e:	48 89 15 73 a0 73 00 	mov    %rdx,0x73a073(%rip)        # 753918 <tmpquadone>
   198a5:	48 89 1d 84 43 5e 00 	mov    %rbx,0x5e4384(%rip)        # 5fdc30 <tmpquadtwo>
   198ac:	48 8d 15 3d 43 5e 00 	lea    0x5e433d(%rip),%rdx        # 5fdbf0 <funcinptr>
   198b3:	48 c7 02 72 0a 00 00 	movq   $0xa72,(%rdx)
   198ba:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   198c1:	00 
   198c2:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
   198c9:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   198cd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   198d4:	00 
   198d5:	48 8b 19             	mov    (%rcx),%rbx
   198d8:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   198dc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   198e3:	00 
   198e4:	ff 32                	pushq  (%rdx)
   198e6:	48 8b 15 2b a0 73 00 	mov    0x73a02b(%rip),%rdx        # 753918 <tmpquadone>
   198ed:	48 8b 1d 3c 43 5e 00 	mov    0x5e433c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   198f4:	48 c7 05 51 a0 73 00 	movq   $0x1,0x73a051(%rip)        # 753950 <cmpPassed>
   198fb:	01 00 00 00 
   198ff:	e8 74 bf fe ff       	callq  5878 <_storeDataFn>
   19904:	80 39 00             	cmpb   $0x0,(%rcx)
   19907:	0f 84 9c 0d 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   1990d:	50                   	push   %rax
   1990e:	48 b8 2e 35 d6 df 00 	movabs $0xdfd6352e,%rax
   19915:	00 00 00 
   19918:	48 89 05 21 a0 73 00 	mov    %rax,0x73a021(%rip)        # 753940 <edgeId>
   1991f:	58                   	pop    %rax
   19920:	e8 bb be fe ff       	callq  57e0 <_storeEdge>
   19925:	49 f7 d4             	not    %r12
   19928:	49 29 dc             	sub    %rbx,%r12
   1992b:	49 01 ec             	add    %rbp,%r12
   1992e:	41 83 e4 07          	and    $0x7,%r12d
   19932:	0f 84 2f 08 00 00    	je     1a167 <quotearg_buffer_restyled+0x7367>
   19938:	50                   	push   %rax
   19939:	48 b8 a9 b1 fe 9e 00 	movabs $0x9efeb1a9,%rax
   19940:	00 00 00 
   19943:	48 89 05 f6 9f 73 00 	mov    %rax,0x739ff6(%rip)        # 753940 <edgeId>
   1994a:	58                   	pop    %rax
   1994b:	e8 90 be fe ff       	callq  57e0 <_storeEdge>
                          m++;
   19950:	48 83 c6 01          	add    $0x1,%rsi
                        while (i + m < argsize && arg[i + m])
   19954:	48 8d 04 33          	lea    (%rbx,%rsi,1),%rax
   19958:	48 89 15 b9 9f 73 00 	mov    %rdx,0x739fb9(%rip)        # 753918 <tmpquadone>
   1995f:	48 89 0d ca 42 5e 00 	mov    %rcx,0x5e42ca(%rip)        # 5fdc30 <tmpquadtwo>
   19966:	48 8d 15 83 42 5e 00 	lea    0x5e4283(%rip),%rdx        # 5fdbf0 <funcinptr>
   1996d:	48 c7 02 73 0a 00 00 	movq   $0xa73,(%rdx)
   19974:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1997b:	00 
   1997c:	48 89 c1             	mov    %rax,%rcx
   1997f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19983:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1998a:	00 
   1998b:	48 89 e9             	mov    %rbp,%rcx
   1998e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19992:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19999:	00 
   1999a:	ff 32                	pushq  (%rdx)
   1999c:	48 8b 15 75 9f 73 00 	mov    0x739f75(%rip),%rdx        # 753918 <tmpquadone>
   199a3:	48 8b 0d 86 42 5e 00 	mov    0x5e4286(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   199aa:	48 c7 05 9b 9f 73 00 	movq   $0x1,0x739f9b(%rip)        # 753950 <cmpPassed>
   199b1:	01 00 00 00 
   199b5:	e8 be be fe ff       	callq  5878 <_storeDataFn>
   199ba:	48 39 c5             	cmp    %rax,%rbp
   199bd:	0f 86 e6 0c 00 00    	jbe    1a6a9 <quotearg_buffer_restyled+0x78a9>
   199c3:	50                   	push   %rax
   199c4:	48 b8 58 7f 4f 9b 00 	movabs $0x9b4f7f58,%rax
   199cb:	00 00 00 
   199ce:	48 89 05 6b 9f 73 00 	mov    %rax,0x739f6b(%rip)        # 753940 <edgeId>
   199d5:	58                   	pop    %rax
   199d6:	e8 05 be fe ff       	callq  57e0 <_storeEdge>
   199db:	48 89 15 36 9f 73 00 	mov    %rdx,0x739f36(%rip)        # 753918 <tmpquadone>
   199e2:	48 89 0d 47 42 5e 00 	mov    %rcx,0x5e4247(%rip)        # 5fdc30 <tmpquadtwo>
   199e9:	48 8d 15 00 42 5e 00 	lea    0x5e4200(%rip),%rdx        # 5fdbf0 <funcinptr>
   199f0:	48 c7 02 74 0a 00 00 	movq   $0xa74,(%rdx)
   199f7:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   199fe:	00 
   199ff:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   19a06:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19a0a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19a11:	00 
   19a12:	49 8b 0c 30          	mov    (%r8,%rsi,1),%rcx
   19a16:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19a1a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19a21:	00 
   19a22:	ff 32                	pushq  (%rdx)
   19a24:	48 8b 15 ed 9e 73 00 	mov    0x739eed(%rip),%rdx        # 753918 <tmpquadone>
   19a2b:	48 8b 0d fe 41 5e 00 	mov    0x5e41fe(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19a32:	48 c7 05 13 9f 73 00 	movq   $0x1,0x739f13(%rip)        # 753950 <cmpPassed>
   19a39:	01 00 00 00 
   19a3d:	e8 36 be fe ff       	callq  5878 <_storeDataFn>
   19a42:	41 80 3c 30 00       	cmpb   $0x0,(%r8,%rsi,1)
   19a47:	0f 84 5c 0c 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   19a4d:	50                   	push   %rax
   19a4e:	48 b8 d6 df d3 a6 00 	movabs $0xa6d3dfd6,%rax
   19a55:	00 00 00 
   19a58:	48 89 05 e1 9e 73 00 	mov    %rax,0x739ee1(%rip)        # 753940 <edgeId>
   19a5f:	58                   	pop    %rax
   19a60:	e8 7b bd fe ff       	callq  57e0 <_storeEdge>
   19a65:	48 89 15 ac 9e 73 00 	mov    %rdx,0x739eac(%rip)        # 753918 <tmpquadone>
   19a6c:	48 89 0d bd 41 5e 00 	mov    %rcx,0x5e41bd(%rip)        # 5fdc30 <tmpquadtwo>
   19a73:	48 8d 15 76 41 5e 00 	lea    0x5e4176(%rip),%rdx        # 5fdbf0 <funcinptr>
   19a7a:	48 c7 02 75 0a 00 00 	movq   $0xa75,(%rdx)
   19a81:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19a88:	00 
   19a89:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   19a90:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19a94:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19a9b:	00 
   19a9c:	4c 89 e1             	mov    %r12,%rcx
   19a9f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19aa3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19aaa:	00 
   19aab:	ff 32                	pushq  (%rdx)
   19aad:	48 8b 15 64 9e 73 00 	mov    0x739e64(%rip),%rdx        # 753918 <tmpquadone>
   19ab4:	48 8b 0d 75 41 5e 00 	mov    0x5e4175(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19abb:	48 c7 05 8a 9e 73 00 	movq   $0x1,0x739e8a(%rip)        # 753950 <cmpPassed>
   19ac2:	01 00 00 00 
   19ac6:	e8 ad bd fe ff       	callq  5878 <_storeDataFn>
   19acb:	49 83 fc 01          	cmp    $0x1,%r12
   19acf:	0f 84 92 06 00 00    	je     1a167 <quotearg_buffer_restyled+0x7367>
   19ad5:	50                   	push   %rax
   19ad6:	48 b8 f5 f7 b4 a9 00 	movabs $0xa9b4f7f5,%rax
   19add:	00 00 00 
   19ae0:	48 89 05 59 9e 73 00 	mov    %rax,0x739e59(%rip)        # 753940 <edgeId>
   19ae7:	58                   	pop    %rax
   19ae8:	e8 f3 bc fe ff       	callq  57e0 <_storeEdge>
   19aed:	48 89 15 24 9e 73 00 	mov    %rdx,0x739e24(%rip)        # 753918 <tmpquadone>
   19af4:	48 89 0d 35 41 5e 00 	mov    %rcx,0x5e4135(%rip)        # 5fdc30 <tmpquadtwo>
   19afb:	48 8d 15 ee 40 5e 00 	lea    0x5e40ee(%rip),%rdx        # 5fdbf0 <funcinptr>
   19b02:	48 c7 02 76 0a 00 00 	movq   $0xa76,(%rdx)
   19b09:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19b10:	00 
   19b11:	48 c7 c1 02 00 00 00 	mov    $0x2,%rcx
   19b18:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19b1c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19b23:	00 
   19b24:	4c 89 e1             	mov    %r12,%rcx
   19b27:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19b2b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19b32:	00 
   19b33:	ff 32                	pushq  (%rdx)
   19b35:	48 8b 15 dc 9d 73 00 	mov    0x739ddc(%rip),%rdx        # 753918 <tmpquadone>
   19b3c:	48 8b 0d ed 40 5e 00 	mov    0x5e40ed(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19b43:	48 c7 05 02 9e 73 00 	movq   $0x1,0x739e02(%rip)        # 753950 <cmpPassed>
   19b4a:	01 00 00 00 
   19b4e:	e8 25 bd fe ff       	callq  5878 <_storeDataFn>
   19b53:	49 83 fc 02          	cmp    $0x2,%r12
   19b57:	0f 84 61 05 00 00    	je     1a0be <quotearg_buffer_restyled+0x72be>
   19b5d:	50                   	push   %rax
   19b5e:	48 b8 fd 3d 6d aa 00 	movabs $0xaa6d3dfd,%rax
   19b65:	00 00 00 
   19b68:	48 89 05 d1 9d 73 00 	mov    %rax,0x739dd1(%rip)        # 753940 <edgeId>
   19b6f:	58                   	pop    %rax
   19b70:	e8 6b bc fe ff       	callq  57e0 <_storeEdge>
   19b75:	48 89 15 9c 9d 73 00 	mov    %rdx,0x739d9c(%rip)        # 753918 <tmpquadone>
   19b7c:	48 89 0d ad 40 5e 00 	mov    %rcx,0x5e40ad(%rip)        # 5fdc30 <tmpquadtwo>
   19b83:	48 8d 15 66 40 5e 00 	lea    0x5e4066(%rip),%rdx        # 5fdbf0 <funcinptr>
   19b8a:	48 c7 02 77 0a 00 00 	movq   $0xa77,(%rdx)
   19b91:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19b98:	00 
   19b99:	48 c7 c1 03 00 00 00 	mov    $0x3,%rcx
   19ba0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19ba4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19bab:	00 
   19bac:	4c 89 e1             	mov    %r12,%rcx
   19baf:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19bb3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19bba:	00 
   19bbb:	ff 32                	pushq  (%rdx)
   19bbd:	48 8b 15 54 9d 73 00 	mov    0x739d54(%rip),%rdx        # 753918 <tmpquadone>
   19bc4:	48 8b 0d 65 40 5e 00 	mov    0x5e4065(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19bcb:	48 c7 05 7a 9d 73 00 	movq   $0x1,0x739d7a(%rip)        # 753950 <cmpPassed>
   19bd2:	01 00 00 00 
   19bd6:	e8 9d bc fe ff       	callq  5878 <_storeDataFn>
   19bdb:	49 83 fc 03          	cmp    $0x3,%r12
   19bdf:	0f 84 33 04 00 00    	je     1a018 <quotearg_buffer_restyled+0x7218>
   19be5:	50                   	push   %rax
   19be6:	48 c7 c0 7f 4f 9b 6a 	mov    $0x6a9b4f7f,%rax
   19bed:	48 89 05 4c 9d 73 00 	mov    %rax,0x739d4c(%rip)        # 753940 <edgeId>
   19bf4:	58                   	pop    %rax
   19bf5:	e8 e6 bb fe ff       	callq  57e0 <_storeEdge>
   19bfa:	48 89 15 17 9d 73 00 	mov    %rdx,0x739d17(%rip)        # 753918 <tmpquadone>
   19c01:	48 89 0d 28 40 5e 00 	mov    %rcx,0x5e4028(%rip)        # 5fdc30 <tmpquadtwo>
   19c08:	48 8d 15 e1 3f 5e 00 	lea    0x5e3fe1(%rip),%rdx        # 5fdbf0 <funcinptr>
   19c0f:	48 c7 02 78 0a 00 00 	movq   $0xa78,(%rdx)
   19c16:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19c1d:	00 
   19c1e:	48 c7 c1 04 00 00 00 	mov    $0x4,%rcx
   19c25:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19c29:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19c30:	00 
   19c31:	4c 89 e1             	mov    %r12,%rcx
   19c34:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19c38:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19c3f:	00 
   19c40:	ff 32                	pushq  (%rdx)
   19c42:	48 8b 15 cf 9c 73 00 	mov    0x739ccf(%rip),%rdx        # 753918 <tmpquadone>
   19c49:	48 8b 0d e0 3f 5e 00 	mov    0x5e3fe0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19c50:	48 c7 05 f5 9c 73 00 	movq   $0x1,0x739cf5(%rip)        # 753950 <cmpPassed>
   19c57:	01 00 00 00 
   19c5b:	e8 18 bc fe ff       	callq  5878 <_storeDataFn>
   19c60:	49 83 fc 04          	cmp    $0x4,%r12
   19c64:	0f 84 05 03 00 00    	je     19f6f <quotearg_buffer_restyled+0x716f>
   19c6a:	50                   	push   %rax
   19c6b:	48 b8 df d3 a6 da 00 	movabs $0xdaa6d3df,%rax
   19c72:	00 00 00 
   19c75:	48 89 05 c4 9c 73 00 	mov    %rax,0x739cc4(%rip)        # 753940 <edgeId>
   19c7c:	58                   	pop    %rax
   19c7d:	e8 5e bb fe ff       	callq  57e0 <_storeEdge>
   19c82:	48 89 15 8f 9c 73 00 	mov    %rdx,0x739c8f(%rip)        # 753918 <tmpquadone>
   19c89:	48 89 0d a0 3f 5e 00 	mov    %rcx,0x5e3fa0(%rip)        # 5fdc30 <tmpquadtwo>
   19c90:	48 8d 15 59 3f 5e 00 	lea    0x5e3f59(%rip),%rdx        # 5fdbf0 <funcinptr>
   19c97:	48 c7 02 79 0a 00 00 	movq   $0xa79,(%rdx)
   19c9e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19ca5:	00 
   19ca6:	48 c7 c1 05 00 00 00 	mov    $0x5,%rcx
   19cad:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19cb1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19cb8:	00 
   19cb9:	4c 89 e1             	mov    %r12,%rcx
   19cbc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19cc0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19cc7:	00 
   19cc8:	ff 32                	pushq  (%rdx)
   19cca:	48 8b 15 47 9c 73 00 	mov    0x739c47(%rip),%rdx        # 753918 <tmpquadone>
   19cd1:	48 8b 0d 58 3f 5e 00 	mov    0x5e3f58(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19cd8:	48 c7 05 6d 9c 73 00 	movq   $0x1,0x739c6d(%rip)        # 753950 <cmpPassed>
   19cdf:	01 00 00 00 
   19ce3:	e8 90 bb fe ff       	callq  5878 <_storeDataFn>
   19ce8:	49 83 fc 05          	cmp    $0x5,%r12
   19cec:	0f 84 d7 01 00 00    	je     19ec9 <quotearg_buffer_restyled+0x70c9>
   19cf2:	50                   	push   %rax
   19cf3:	48 b8 f7 b4 a9 f6 00 	movabs $0xf6a9b4f7,%rax
   19cfa:	00 00 00 
   19cfd:	48 89 05 3c 9c 73 00 	mov    %rax,0x739c3c(%rip)        # 753940 <edgeId>
   19d04:	58                   	pop    %rax
   19d05:	e8 d6 ba fe ff       	callq  57e0 <_storeEdge>
   19d0a:	48 89 15 07 9c 73 00 	mov    %rdx,0x739c07(%rip)        # 753918 <tmpquadone>
   19d11:	48 89 0d 18 3f 5e 00 	mov    %rcx,0x5e3f18(%rip)        # 5fdc30 <tmpquadtwo>
   19d18:	48 8d 15 d1 3e 5e 00 	lea    0x5e3ed1(%rip),%rdx        # 5fdbf0 <funcinptr>
   19d1f:	48 c7 02 7a 0a 00 00 	movq   $0xa7a,(%rdx)
   19d26:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   19d2d:	00 
   19d2e:	48 c7 c1 06 00 00 00 	mov    $0x6,%rcx
   19d35:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19d39:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19d40:	00 
   19d41:	4c 89 e1             	mov    %r12,%rcx
   19d44:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19d48:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19d4f:	00 
   19d50:	ff 32                	pushq  (%rdx)
   19d52:	48 8b 15 bf 9b 73 00 	mov    0x739bbf(%rip),%rdx        # 753918 <tmpquadone>
   19d59:	48 8b 0d d0 3e 5e 00 	mov    0x5e3ed0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19d60:	48 c7 05 e5 9b 73 00 	movq   $0x1,0x739be5(%rip)        # 753950 <cmpPassed>
   19d67:	01 00 00 00 
   19d6b:	e8 08 bb fe ff       	callq  5878 <_storeDataFn>
   19d70:	49 83 fc 06          	cmp    $0x6,%r12
   19d74:	0f 84 a3 00 00 00    	je     19e1d <quotearg_buffer_restyled+0x701d>
   19d7a:	50                   	push   %rax
   19d7b:	48 b8 3d 6d aa bd 00 	movabs $0xbdaa6d3d,%rax
   19d82:	00 00 00 
   19d85:	48 89 05 b4 9b 73 00 	mov    %rax,0x739bb4(%rip)        # 753940 <edgeId>
   19d8c:	58                   	pop    %rax
   19d8d:	e8 4e ba fe ff       	callq  57e0 <_storeEdge>
                          m++;
   19d92:	48 83 c6 01          	add    $0x1,%rsi
                        while (i + m < argsize && arg[i + m])
   19d96:	48 89 15 7b 9b 73 00 	mov    %rdx,0x739b7b(%rip)        # 753918 <tmpquadone>
   19d9d:	48 89 0d 8c 3e 5e 00 	mov    %rcx,0x5e3e8c(%rip)        # 5fdc30 <tmpquadtwo>
   19da4:	48 8d 15 45 3e 5e 00 	lea    0x5e3e45(%rip),%rdx        # 5fdbf0 <funcinptr>
   19dab:	48 c7 02 7b 0a 00 00 	movq   $0xa7b,(%rdx)
   19db2:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   19db9:	00 
   19dba:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   19dc1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19dc5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19dcc:	00 
   19dcd:	49 8b 0c 30          	mov    (%r8,%rsi,1),%rcx
   19dd1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19dd5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19ddc:	00 
   19ddd:	ff 32                	pushq  (%rdx)
   19ddf:	48 8b 15 32 9b 73 00 	mov    0x739b32(%rip),%rdx        # 753918 <tmpquadone>
   19de6:	48 8b 0d 43 3e 5e 00 	mov    0x5e3e43(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19ded:	48 c7 05 58 9b 73 00 	movq   $0x1,0x739b58(%rip)        # 753950 <cmpPassed>
   19df4:	01 00 00 00 
   19df8:	e8 7b ba fe ff       	callq  5878 <_storeDataFn>
   19dfd:	41 80 3c 30 00       	cmpb   $0x0,(%r8,%rsi,1)
   19e02:	0f 84 a1 08 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   19e08:	50                   	push   %rax
   19e09:	48 c7 c0 da 54 7b 39 	mov    $0x397b54da,%rax
   19e10:	48 89 05 29 9b 73 00 	mov    %rax,0x739b29(%rip)        # 753940 <edgeId>
   19e17:	58                   	pop    %rax
   19e18:	e8 c3 b9 fe ff       	callq  57e0 <_storeEdge>
   19e1d:	50                   	push   %rax
   19e1e:	48 b8 6d aa bd 9c 00 	movabs $0x9cbdaa6d,%rax
   19e25:	00 00 00 
   19e28:	48 89 05 11 9b 73 00 	mov    %rax,0x739b11(%rip)        # 753940 <edgeId>
   19e2f:	58                   	pop    %rax
   19e30:	e8 ab b9 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   19e35:	48 89 f2             	mov    %rsi,%rdx
   19e38:	48 83 c2 01          	add    $0x1,%rdx
                        while (i + m < argsize && arg[i + m])
   19e3c:	48 89 0d d5 9a 73 00 	mov    %rcx,0x739ad5(%rip)        # 753918 <tmpquadone>
   19e43:	48 89 1d e6 3d 5e 00 	mov    %rbx,0x5e3de6(%rip)        # 5fdc30 <tmpquadtwo>
   19e4a:	48 8d 0d 9f 3d 5e 00 	lea    0x5e3d9f(%rip),%rcx        # 5fdbf0 <funcinptr>
   19e51:	48 c7 01 7c 0a 00 00 	movq   $0xa7c,(%rcx)
   19e58:	48 c7 41 08 62 00 00 	movq   $0x62,0x8(%rcx)
   19e5f:	00 
   19e60:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
   19e67:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   19e6b:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   19e72:	00 
   19e73:	49 8b 1c 10          	mov    (%r8,%rdx,1),%rbx
   19e77:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   19e7b:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   19e82:	00 
   19e83:	ff 31                	pushq  (%rcx)
   19e85:	48 8b 0d 8c 9a 73 00 	mov    0x739a8c(%rip),%rcx        # 753918 <tmpquadone>
   19e8c:	48 8b 1d 9d 3d 5e 00 	mov    0x5e3d9d(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   19e93:	48 c7 05 b2 9a 73 00 	movq   $0x1,0x739ab2(%rip)        # 753950 <cmpPassed>
   19e9a:	01 00 00 00 
   19e9e:	e8 d5 b9 fe ff       	callq  5878 <_storeDataFn>
   19ea3:	41 80 3c 10 00       	cmpb   $0x0,(%r8,%rdx,1)
                          m++;
   19ea8:	48 89 d6             	mov    %rdx,%rsi
                        while (i + m < argsize && arg[i + m])
   19eab:	0f 84 f8 07 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   19eb1:	50                   	push   %rax
   19eb2:	48 b8 b5 97 53 b0 00 	movabs $0xb05397b5,%rax
   19eb9:	00 00 00 
   19ebc:	48 89 05 7d 9a 73 00 	mov    %rax,0x739a7d(%rip)        # 753940 <edgeId>
   19ec3:	58                   	pop    %rax
   19ec4:	e8 17 b9 fe ff       	callq  57e0 <_storeEdge>
   19ec9:	50                   	push   %rax
   19eca:	48 c7 c0 ed e5 14 6c 	mov    $0x6c14e5ed,%rax
   19ed1:	48 89 05 68 9a 73 00 	mov    %rax,0x739a68(%rip)        # 753940 <edgeId>
   19ed8:	58                   	pop    %rax
   19ed9:	e8 02 b9 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   19ede:	48 89 f7             	mov    %rsi,%rdi
   19ee1:	48 83 c7 01          	add    $0x1,%rdi
                        while (i + m < argsize && arg[i + m])
   19ee5:	48 89 15 2c 9a 73 00 	mov    %rdx,0x739a2c(%rip)        # 753918 <tmpquadone>
   19eec:	48 89 0d 3d 3d 5e 00 	mov    %rcx,0x5e3d3d(%rip)        # 5fdc30 <tmpquadtwo>
   19ef3:	48 8d 15 f6 3c 5e 00 	lea    0x5e3cf6(%rip),%rdx        # 5fdbf0 <funcinptr>
   19efa:	48 c7 02 7d 0a 00 00 	movq   $0xa7d,(%rdx)
   19f01:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   19f08:	00 
   19f09:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   19f10:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   19f14:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19f1b:	00 
   19f1c:	49 8b 0c 38          	mov    (%r8,%rdi,1),%rcx
   19f20:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   19f24:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19f2b:	00 
   19f2c:	ff 32                	pushq  (%rdx)
   19f2e:	48 8b 15 e3 99 73 00 	mov    0x7399e3(%rip),%rdx        # 753918 <tmpquadone>
   19f35:	48 8b 0d f4 3c 5e 00 	mov    0x5e3cf4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   19f3c:	48 c7 05 09 9a 73 00 	movq   $0x1,0x739a09(%rip)        # 753950 <cmpPassed>
   19f43:	01 00 00 00 
   19f47:	e8 2c b9 fe ff       	callq  5878 <_storeDataFn>
   19f4c:	41 80 3c 38 00       	cmpb   $0x0,(%r8,%rdi,1)
                          m++;
   19f51:	48 89 fe             	mov    %rdi,%rsi
                        while (i + m < argsize && arg[i + m])
   19f54:	0f 84 4f 07 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   19f5a:	50                   	push   %rax
   19f5b:	48 c7 c0 39 05 1b 7b 	mov    $0x7b1b0539,%rax
   19f62:	48 89 05 d7 99 73 00 	mov    %rax,0x7399d7(%rip)        # 753940 <edgeId>
   19f69:	58                   	pop    %rax
   19f6a:	e8 71 b8 fe ff       	callq  57e0 <_storeEdge>
   19f6f:	50                   	push   %rax
   19f70:	48 c7 c0 4e c1 c6 5e 	mov    $0x5ec6c14e,%rax
   19f77:	48 89 05 c2 99 73 00 	mov    %rax,0x7399c2(%rip)        # 753940 <edgeId>
   19f7e:	58                   	pop    %rax
   19f7f:	e8 5c b8 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   19f84:	48 89 f1             	mov    %rsi,%rcx
   19f87:	48 83 c1 01          	add    $0x1,%rcx
                        while (i + m < argsize && arg[i + m])
   19f8b:	48 89 15 86 99 73 00 	mov    %rdx,0x739986(%rip)        # 753918 <tmpquadone>
   19f92:	48 89 1d 97 3c 5e 00 	mov    %rbx,0x5e3c97(%rip)        # 5fdc30 <tmpquadtwo>
   19f99:	48 8d 15 50 3c 5e 00 	lea    0x5e3c50(%rip),%rdx        # 5fdbf0 <funcinptr>
   19fa0:	48 c7 02 7e 0a 00 00 	movq   $0xa7e,(%rdx)
   19fa7:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   19fae:	00 
   19faf:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
   19fb6:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   19fba:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   19fc1:	00 
   19fc2:	49 8b 1c 08          	mov    (%r8,%rcx,1),%rbx
   19fc6:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   19fca:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   19fd1:	00 
   19fd2:	ff 32                	pushq  (%rdx)
   19fd4:	48 8b 15 3d 99 73 00 	mov    0x73993d(%rip),%rdx        # 753918 <tmpquadone>
   19fdb:	48 8b 1d 4e 3c 5e 00 	mov    0x5e3c4e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   19fe2:	48 c7 05 63 99 73 00 	movq   $0x1,0x739963(%rip)        # 753950 <cmpPassed>
   19fe9:	01 00 00 00 
   19fed:	e8 86 b8 fe ff       	callq  5878 <_storeDataFn>
   19ff2:	41 80 3c 08 00       	cmpb   $0x0,(%r8,%rcx,1)
                          m++;
   19ff7:	48 89 ce             	mov    %rcx,%rsi
                        while (i + m < argsize && arg[i + m])
   19ffa:	0f 84 a9 06 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   1a000:	50                   	push   %rax
   1a001:	48 b8 b0 b1 17 95 00 	movabs $0x9517b1b0,%rax
   1a008:	00 00 00 
   1a00b:	48 89 05 2e 99 73 00 	mov    %rax,0x73992e(%rip)        # 753940 <edgeId>
   1a012:	58                   	pop    %rax
   1a013:	e8 c8 b7 fe ff       	callq  57e0 <_storeEdge>
   1a018:	50                   	push   %rax
   1a019:	48 c7 c0 6c ec 45 25 	mov    $0x2545ec6c,%rax
   1a020:	48 89 05 19 99 73 00 	mov    %rax,0x739919(%rip)        # 753940 <edgeId>
   1a027:	58                   	pop    %rax
   1a028:	e8 b3 b7 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   1a02d:	49 89 f4             	mov    %rsi,%r12
   1a030:	49 83 c4 01          	add    $0x1,%r12
                        while (i + m < argsize && arg[i + m])
   1a034:	48 89 15 dd 98 73 00 	mov    %rdx,0x7398dd(%rip)        # 753918 <tmpquadone>
   1a03b:	48 89 0d ee 3b 5e 00 	mov    %rcx,0x5e3bee(%rip)        # 5fdc30 <tmpquadtwo>
   1a042:	48 8d 15 a7 3b 5e 00 	lea    0x5e3ba7(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a049:	48 c7 02 7f 0a 00 00 	movq   $0xa7f,(%rdx)
   1a050:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a057:	00 
   1a058:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a05f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a063:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a06a:	00 
   1a06b:	4b 8b 0c 20          	mov    (%r8,%r12,1),%rcx
   1a06f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a073:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a07a:	00 
   1a07b:	ff 32                	pushq  (%rdx)
   1a07d:	48 8b 15 94 98 73 00 	mov    0x739894(%rip),%rdx        # 753918 <tmpquadone>
   1a084:	48 8b 0d a5 3b 5e 00 	mov    0x5e3ba5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a08b:	48 c7 05 ba 98 73 00 	movq   $0x1,0x7398ba(%rip)        # 753950 <cmpPassed>
   1a092:	01 00 00 00 
   1a096:	e8 dd b7 fe ff       	callq  5878 <_storeDataFn>
   1a09b:	43 80 3c 20 00       	cmpb   $0x0,(%r8,%r12,1)
                          m++;
   1a0a0:	4c 89 e6             	mov    %r12,%rsi
                        while (i + m < argsize && arg[i + m])
   1a0a3:	0f 84 00 06 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   1a0a9:	50                   	push   %rax
   1a0aa:	48 c7 c0 7b 51 c9 2a 	mov    $0x2ac9517b,%rax
   1a0b1:	48 89 05 88 98 73 00 	mov    %rax,0x739888(%rip)        # 753940 <edgeId>
   1a0b8:	58                   	pop    %rax
   1a0b9:	e8 22 b7 fe ff       	callq  57e0 <_storeEdge>
   1a0be:	50                   	push   %rax
   1a0bf:	48 c7 c0 5e 54 b2 4a 	mov    $0x4ab2545e,%rax
   1a0c6:	48 89 05 73 98 73 00 	mov    %rax,0x739873(%rip)        # 753940 <edgeId>
   1a0cd:	58                   	pop    %rax
   1a0ce:	e8 0d b7 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   1a0d3:	48 89 f0             	mov    %rsi,%rax
   1a0d6:	48 83 c0 01          	add    $0x1,%rax
                        while (i + m < argsize && arg[i + m])
   1a0da:	48 89 15 37 98 73 00 	mov    %rdx,0x739837(%rip)        # 753918 <tmpquadone>
   1a0e1:	48 89 0d 48 3b 5e 00 	mov    %rcx,0x5e3b48(%rip)        # 5fdc30 <tmpquadtwo>
   1a0e8:	48 8d 15 01 3b 5e 00 	lea    0x5e3b01(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a0ef:	48 c7 02 80 0a 00 00 	movq   $0xa80,(%rdx)
   1a0f6:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a0fd:	00 
   1a0fe:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a105:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a109:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a110:	00 
   1a111:	49 8b 0c 00          	mov    (%r8,%rax,1),%rcx
   1a115:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a119:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a120:	00 
   1a121:	ff 32                	pushq  (%rdx)
   1a123:	48 8b 15 ee 97 73 00 	mov    0x7397ee(%rip),%rdx        # 753918 <tmpquadone>
   1a12a:	48 8b 0d ff 3a 5e 00 	mov    0x5e3aff(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a131:	48 c7 05 14 98 73 00 	movq   $0x1,0x739814(%rip)        # 753950 <cmpPassed>
   1a138:	01 00 00 00 
   1a13c:	e8 37 b7 fe ff       	callq  5878 <_storeDataFn>
   1a141:	41 80 3c 00 00       	cmpb   $0x0,(%r8,%rax,1)
                          m++;
   1a146:	48 89 c6             	mov    %rax,%rsi
                        while (i + m < argsize && arg[i + m])
   1a149:	0f 84 5a 05 00 00    	je     1a6a9 <quotearg_buffer_restyled+0x78a9>
   1a14f:	50                   	push   %rax
   1a150:	48 b8 95 ac 52 be 00 	movabs $0xbe52ac95,%rax
   1a157:	00 00 00 
   1a15a:	48 89 05 df 97 73 00 	mov    %rax,0x7397df(%rip)        # 753940 <edgeId>
   1a161:	58                   	pop    %rax
   1a162:	e8 79 b6 fe ff       	callq  57e0 <_storeEdge>
   1a167:	50                   	push   %rax
   1a168:	48 b8 25 ab 94 af 00 	movabs $0xaf94ab25,%rax
   1a16f:	00 00 00 
   1a172:	48 89 05 c7 97 73 00 	mov    %rax,0x7397c7(%rip)        # 753940 <edgeId>
   1a179:	58                   	pop    %rax
   1a17a:	e8 61 b6 fe ff       	callq  57e0 <_storeEdge>
   1a17f:	48 89 f2             	mov    %rsi,%rdx
   1a182:	50                   	push   %rax
   1a183:	48 c7 c0 c9 2a e5 6b 	mov    $0x6be52ac9,%rax
   1a18a:	48 89 05 af 97 73 00 	mov    %rax,0x7397af(%rip)        # 753940 <edgeId>
   1a191:	58                   	pop    %rax
   1a192:	e8 49 b6 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   1a197:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
                        while (i + m < argsize && arg[i + m])
   1a19b:	48 8d 0c 3b          	lea    (%rbx,%rdi,1),%rcx
                          m++;
   1a19f:	48 89 fa             	mov    %rdi,%rdx
                        while (i + m < argsize && arg[i + m])
   1a1a2:	48 89 15 6f 97 73 00 	mov    %rdx,0x73976f(%rip)        # 753918 <tmpquadone>
   1a1a9:	48 89 1d 80 3a 5e 00 	mov    %rbx,0x5e3a80(%rip)        # 5fdc30 <tmpquadtwo>
   1a1b0:	48 8d 15 39 3a 5e 00 	lea    0x5e3a39(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a1b7:	48 c7 02 81 0a 00 00 	movq   $0xa81,(%rdx)
   1a1be:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1a1c5:	00 
   1a1c6:	48 89 cb             	mov    %rcx,%rbx
   1a1c9:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1a1cd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a1d4:	00 
   1a1d5:	48 89 eb             	mov    %rbp,%rbx
   1a1d8:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1a1dc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a1e3:	00 
   1a1e4:	ff 32                	pushq  (%rdx)
   1a1e6:	48 8b 15 2b 97 73 00 	mov    0x73972b(%rip),%rdx        # 753918 <tmpquadone>
   1a1ed:	48 8b 1d 3c 3a 5e 00 	mov    0x5e3a3c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1a1f4:	48 c7 05 51 97 73 00 	movq   $0x1,0x739751(%rip)        # 753950 <cmpPassed>
   1a1fb:	01 00 00 00 
   1a1ff:	e8 74 b6 fe ff       	callq  5878 <_storeDataFn>
   1a204:	48 39 cd             	cmp    %rcx,%rbp
   1a207:	0f 86 81 04 00 00    	jbe    1a68e <quotearg_buffer_restyled+0x788e>
   1a20d:	50                   	push   %rax
   1a20e:	48 c7 c0 4a f9 9a 67 	mov    $0x679af94a,%rax
   1a215:	48 89 05 24 97 73 00 	mov    %rax,0x739724(%rip)        # 753940 <edgeId>
   1a21c:	58                   	pop    %rax
   1a21d:	e8 be b5 fe ff       	callq  57e0 <_storeEdge>
   1a222:	48 89 15 ef 96 73 00 	mov    %rdx,0x7396ef(%rip)        # 753918 <tmpquadone>
   1a229:	48 89 0d 00 3a 5e 00 	mov    %rcx,0x5e3a00(%rip)        # 5fdc30 <tmpquadtwo>
   1a230:	48 8d 15 b9 39 5e 00 	lea    0x5e39b9(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a237:	48 c7 02 82 0a 00 00 	movq   $0xa82,(%rdx)
   1a23e:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a245:	00 
   1a246:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a24d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a251:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a258:	00 
   1a259:	49 8b 0c 38          	mov    (%r8,%rdi,1),%rcx
   1a25d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a261:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a268:	00 
   1a269:	ff 32                	pushq  (%rdx)
   1a26b:	48 8b 15 a6 96 73 00 	mov    0x7396a6(%rip),%rdx        # 753918 <tmpquadone>
   1a272:	48 8b 0d b7 39 5e 00 	mov    0x5e39b7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a279:	48 c7 05 cc 96 73 00 	movq   $0x1,0x7396cc(%rip)        # 753950 <cmpPassed>
   1a280:	01 00 00 00 
   1a284:	e8 ef b5 fe ff       	callq  5878 <_storeDataFn>
   1a289:	41 80 3c 38 00       	cmpb   $0x0,(%r8,%rdi,1)
   1a28e:	0f 84 fa 03 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a294:	50                   	push   %rax
   1a295:	48 c7 c0 29 5f f3 2c 	mov    $0x2cf35f29,%rax
   1a29c:	48 89 05 9d 96 73 00 	mov    %rax,0x73969d(%rip)        # 753940 <edgeId>
   1a2a3:	58                   	pop    %rax
   1a2a4:	e8 37 b5 fe ff       	callq  57e0 <_storeEdge>
                          m++;
   1a2a9:	48 83 c2 01          	add    $0x1,%rdx
                        while (i + m < argsize && arg[i + m])
   1a2ad:	48 89 0d 64 96 73 00 	mov    %rcx,0x739664(%rip)        # 753918 <tmpquadone>
   1a2b4:	48 89 1d 75 39 5e 00 	mov    %rbx,0x5e3975(%rip)        # 5fdc30 <tmpquadtwo>
   1a2bb:	48 8d 0d 2e 39 5e 00 	lea    0x5e392e(%rip),%rcx        # 5fdbf0 <funcinptr>
   1a2c2:	48 c7 01 83 0a 00 00 	movq   $0xa83,(%rcx)
   1a2c9:	48 c7 41 08 62 00 00 	movq   $0x62,0x8(%rcx)
   1a2d0:	00 
   1a2d1:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
   1a2d8:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1a2dc:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1a2e3:	00 
   1a2e4:	49 8b 1c 10          	mov    (%r8,%rdx,1),%rbx
   1a2e8:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1a2ec:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1a2f3:	00 
   1a2f4:	ff 31                	pushq  (%rcx)
   1a2f6:	48 8b 0d 1b 96 73 00 	mov    0x73961b(%rip),%rcx        # 753918 <tmpquadone>
   1a2fd:	48 8b 1d 2c 39 5e 00 	mov    0x5e392c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1a304:	48 c7 05 41 96 73 00 	movq   $0x1,0x739641(%rip)        # 753950 <cmpPassed>
   1a30b:	01 00 00 00 
   1a30f:	e8 64 b5 fe ff       	callq  5878 <_storeDataFn>
   1a314:	41 80 3c 10 00       	cmpb   $0x0,(%r8,%rdx,1)
   1a319:	0f 84 6f 03 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a31f:	50                   	push   %rax
   1a320:	48 b8 be e6 59 86 00 	movabs $0x8659e6be,%rax
   1a327:	00 00 00 
   1a32a:	48 89 05 0f 96 73 00 	mov    %rax,0x73960f(%rip)        # 753940 <edgeId>
   1a331:	58                   	pop    %rax
   1a332:	e8 a9 b4 fe ff       	callq  57e0 <_storeEdge>
   1a337:	48 89 15 da 95 73 00 	mov    %rdx,0x7395da(%rip)        # 753918 <tmpquadone>
   1a33e:	48 89 0d eb 38 5e 00 	mov    %rcx,0x5e38eb(%rip)        # 5fdc30 <tmpquadtwo>
   1a345:	48 8d 15 a4 38 5e 00 	lea    0x5e38a4(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a34c:	48 c7 02 84 0a 00 00 	movq   $0xa84,(%rdx)
   1a353:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a35a:	00 
   1a35b:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a362:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a366:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a36d:	00 
   1a36e:	49 8b 4c 38 02       	mov    0x2(%r8,%rdi,1),%rcx
   1a373:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a377:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a37e:	00 
   1a37f:	ff 32                	pushq  (%rdx)
   1a381:	48 8b 15 90 95 73 00 	mov    0x739590(%rip),%rdx        # 753918 <tmpquadone>
   1a388:	48 8b 0d a1 38 5e 00 	mov    0x5e38a1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a38f:	48 c7 05 b6 95 73 00 	movq   $0x1,0x7395b6(%rip)        # 753950 <cmpPassed>
   1a396:	01 00 00 00 
   1a39a:	e8 d9 b4 fe ff       	callq  5878 <_storeDataFn>
   1a39f:	41 80 7c 38 02 00    	cmpb   $0x0,0x2(%r8,%rdi,1)
                          m++;
   1a3a5:	48 8d 57 02          	lea    0x2(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a3a9:	0f 84 df 02 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a3af:	50                   	push   %rax
   1a3b0:	48 c7 c0 cd b3 0c 79 	mov    $0x790cb3cd,%rax
   1a3b7:	48 89 05 82 95 73 00 	mov    %rax,0x739582(%rip)        # 753940 <edgeId>
   1a3be:	58                   	pop    %rax
   1a3bf:	e8 1c b4 fe ff       	callq  57e0 <_storeEdge>
   1a3c4:	48 89 15 4d 95 73 00 	mov    %rdx,0x73954d(%rip)        # 753918 <tmpquadone>
   1a3cb:	48 89 0d 5e 38 5e 00 	mov    %rcx,0x5e385e(%rip)        # 5fdc30 <tmpquadtwo>
   1a3d2:	48 8d 15 17 38 5e 00 	lea    0x5e3817(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a3d9:	48 c7 02 85 0a 00 00 	movq   $0xa85,(%rdx)
   1a3e0:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a3e7:	00 
   1a3e8:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a3ef:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a3f3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a3fa:	00 
   1a3fb:	49 8b 4c 38 03       	mov    0x3(%r8,%rdi,1),%rcx
   1a400:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a404:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a40b:	00 
   1a40c:	ff 32                	pushq  (%rdx)
   1a40e:	48 8b 15 03 95 73 00 	mov    0x739503(%rip),%rdx        # 753918 <tmpquadone>
   1a415:	48 8b 0d 14 38 5e 00 	mov    0x5e3814(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a41c:	48 c7 05 29 95 73 00 	movq   $0x1,0x739529(%rip)        # 753950 <cmpPassed>
   1a423:	01 00 00 00 
   1a427:	e8 4c b4 fe ff       	callq  5878 <_storeDataFn>
   1a42c:	41 80 7c 38 03 00    	cmpb   $0x0,0x3(%r8,%rdi,1)
                          m++;
   1a432:	48 8d 57 03          	lea    0x3(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a436:	0f 84 52 02 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a43c:	50                   	push   %rax
   1a43d:	48 b8 67 19 f2 b8 00 	movabs $0xb8f21967,%rax
   1a444:	00 00 00 
   1a447:	48 89 05 f2 94 73 00 	mov    %rax,0x7394f2(%rip)        # 753940 <edgeId>
   1a44e:	58                   	pop    %rax
   1a44f:	e8 8c b3 fe ff       	callq  57e0 <_storeEdge>
   1a454:	48 89 15 bd 94 73 00 	mov    %rdx,0x7394bd(%rip)        # 753918 <tmpquadone>
   1a45b:	48 89 0d ce 37 5e 00 	mov    %rcx,0x5e37ce(%rip)        # 5fdc30 <tmpquadtwo>
   1a462:	48 8d 15 87 37 5e 00 	lea    0x5e3787(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a469:	48 c7 02 86 0a 00 00 	movq   $0xa86,(%rdx)
   1a470:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a477:	00 
   1a478:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a47f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a483:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a48a:	00 
   1a48b:	49 8b 4c 38 04       	mov    0x4(%r8,%rdi,1),%rcx
   1a490:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a494:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a49b:	00 
   1a49c:	ff 32                	pushq  (%rdx)
   1a49e:	48 8b 15 73 94 73 00 	mov    0x739473(%rip),%rdx        # 753918 <tmpquadone>
   1a4a5:	48 8b 0d 84 37 5e 00 	mov    0x5e3784(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a4ac:	48 c7 05 99 94 73 00 	movq   $0x1,0x739499(%rip)        # 753950 <cmpPassed>
   1a4b3:	01 00 00 00 
   1a4b7:	e8 bc b3 fe ff       	callq  5878 <_storeDataFn>
   1a4bc:	41 80 7c 38 04 00    	cmpb   $0x0,0x4(%r8,%rdi,1)
                          m++;
   1a4c2:	48 8d 57 04          	lea    0x4(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a4c6:	0f 84 c2 01 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a4cc:	50                   	push   %rax
   1a4cd:	48 b8 32 e4 71 d1 00 	movabs $0xd171e432,%rax
   1a4d4:	00 00 00 
   1a4d7:	48 89 05 62 94 73 00 	mov    %rax,0x739462(%rip)        # 753940 <edgeId>
   1a4de:	58                   	pop    %rax
   1a4df:	e8 fc b2 fe ff       	callq  57e0 <_storeEdge>
   1a4e4:	48 89 15 2d 94 73 00 	mov    %rdx,0x73942d(%rip)        # 753918 <tmpquadone>
   1a4eb:	48 89 0d 3e 37 5e 00 	mov    %rcx,0x5e373e(%rip)        # 5fdc30 <tmpquadtwo>
   1a4f2:	48 8d 15 f7 36 5e 00 	lea    0x5e36f7(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a4f9:	48 c7 02 87 0a 00 00 	movq   $0xa87,(%rdx)
   1a500:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a507:	00 
   1a508:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a50f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a513:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a51a:	00 
   1a51b:	49 8b 4c 38 05       	mov    0x5(%r8,%rdi,1),%rcx
   1a520:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a524:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a52b:	00 
   1a52c:	ff 32                	pushq  (%rdx)
   1a52e:	48 8b 15 e3 93 73 00 	mov    0x7393e3(%rip),%rdx        # 753918 <tmpquadone>
   1a535:	48 8b 0d f4 36 5e 00 	mov    0x5e36f4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a53c:	48 c7 05 09 94 73 00 	movq   $0x1,0x739409(%rip)        # 753950 <cmpPassed>
   1a543:	01 00 00 00 
   1a547:	e8 2c b3 fe ff       	callq  5878 <_storeDataFn>
   1a54c:	41 80 7c 38 05 00    	cmpb   $0x0,0x5(%r8,%rdi,1)
                          m++;
   1a552:	48 8d 57 05          	lea    0x5(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a556:	0f 84 32 01 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a55c:	50                   	push   %rax
   1a55d:	48 c7 c0 c8 e3 a2 41 	mov    $0x41a2e3c8,%rax
   1a564:	48 89 05 d5 93 73 00 	mov    %rax,0x7393d5(%rip)        # 753940 <edgeId>
   1a56b:	58                   	pop    %rax
   1a56c:	e8 6f b2 fe ff       	callq  57e0 <_storeEdge>
   1a571:	48 89 15 a0 93 73 00 	mov    %rdx,0x7393a0(%rip)        # 753918 <tmpquadone>
   1a578:	48 89 0d b1 36 5e 00 	mov    %rcx,0x5e36b1(%rip)        # 5fdc30 <tmpquadtwo>
   1a57f:	48 8d 15 6a 36 5e 00 	lea    0x5e366a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a586:	48 c7 02 88 0a 00 00 	movq   $0xa88,(%rdx)
   1a58d:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a594:	00 
   1a595:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a59c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a5a0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a5a7:	00 
   1a5a8:	49 8b 4c 38 06       	mov    0x6(%r8,%rdi,1),%rcx
   1a5ad:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a5b1:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a5b8:	00 
   1a5b9:	ff 32                	pushq  (%rdx)
   1a5bb:	48 8b 15 56 93 73 00 	mov    0x739356(%rip),%rdx        # 753918 <tmpquadone>
   1a5c2:	48 8b 0d 67 36 5e 00 	mov    0x5e3667(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a5c9:	48 c7 05 7c 93 73 00 	movq   $0x1,0x73937c(%rip)        # 753950 <cmpPassed>
   1a5d0:	01 00 00 00 
   1a5d4:	e8 9f b2 fe ff       	callq  5878 <_storeDataFn>
   1a5d9:	41 80 7c 38 06 00    	cmpb   $0x0,0x6(%r8,%rdi,1)
                          m++;
   1a5df:	48 8d 57 06          	lea    0x6(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a5e3:	0f 84 a5 00 00 00    	je     1a68e <quotearg_buffer_restyled+0x788e>
   1a5e9:	50                   	push   %rax
   1a5ea:	48 c7 c0 c7 45 83 40 	mov    $0x408345c7,%rax
   1a5f1:	48 89 05 48 93 73 00 	mov    %rax,0x739348(%rip)        # 753940 <edgeId>
   1a5f8:	58                   	pop    %rax
   1a5f9:	e8 e2 b1 fe ff       	callq  57e0 <_storeEdge>
   1a5fe:	48 89 15 13 93 73 00 	mov    %rdx,0x739313(%rip)        # 753918 <tmpquadone>
   1a605:	48 89 0d 24 36 5e 00 	mov    %rcx,0x5e3624(%rip)        # 5fdc30 <tmpquadtwo>
   1a60c:	48 8d 15 dd 35 5e 00 	lea    0x5e35dd(%rip),%rdx        # 5fdbf0 <funcinptr>
   1a613:	48 c7 02 89 0a 00 00 	movq   $0xa89,(%rdx)
   1a61a:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   1a621:	00 
   1a622:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   1a629:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1a62d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1a634:	00 
   1a635:	49 8b 4c 38 07       	mov    0x7(%r8,%rdi,1),%rcx
   1a63a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1a63e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1a645:	00 
   1a646:	ff 32                	pushq  (%rdx)
   1a648:	48 8b 15 c9 92 73 00 	mov    0x7392c9(%rip),%rdx        # 753918 <tmpquadone>
   1a64f:	48 8b 0d da 35 5e 00 	mov    0x5e35da(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1a656:	48 c7 05 ef 92 73 00 	movq   $0x1,0x7392ef(%rip)        # 753950 <cmpPassed>
   1a65d:	01 00 00 00 
   1a661:	e8 12 b2 fe ff       	callq  5878 <_storeDataFn>
   1a666:	41 80 7c 38 07 00    	cmpb   $0x0,0x7(%r8,%rdi,1)
                          m++;
   1a66c:	48 8d 57 07          	lea    0x7(%rdi),%rdx
                        while (i + m < argsize && arg[i + m])
   1a670:	0f 85 0c fb ff ff    	jne    1a182 <quotearg_buffer_restyled+0x7382>
   1a676:	50                   	push   %rax
   1a677:	48 b8 8b 06 81 b4 00 	movabs $0xb481068b,%rax
   1a67e:	00 00 00 
   1a681:	48 89 05 b8 92 73 00 	mov    %rax,0x7392b8(%rip)        # 753940 <edgeId>
   1a688:	58                   	pop    %rax
   1a689:	e8 52 b1 fe ff       	callq  57e0 <_storeEdge>
   1a68e:	50                   	push   %rax
   1a68f:	48 b8 45 83 40 da 00 	movabs $0xda408345,%rax
   1a696:	00 00 00 
   1a699:	48 89 05 a0 92 73 00 	mov    %rax,0x7392a0(%rip)        # 753940 <edgeId>
   1a6a0:	58                   	pop    %rax
   1a6a1:	e8 3a b1 fe ff       	callq  57e0 <_storeEdge>
   1a6a6:	48 89 d6             	mov    %rdx,%rsi
   1a6a9:	50                   	push   %rax
   1a6aa:	48 c7 c0 68 10 48 3b 	mov    $0x3b481068,%rax
   1a6b1:	48 89 05 88 92 73 00 	mov    %rax,0x739288(%rip)        # 753940 <edgeId>
   1a6b8:	58                   	pop    %rax
   1a6b9:	e8 22 b1 fe ff       	callq  57e0 <_storeEdge>
   1a6be:	44 0f b6 64 24 69    	movzbl 0x69(%rsp),%r12d
   1a6c4:	e9 56 c1 ff ff       	jmpq   1681f <quotearg_buffer_restyled+0x3a1f>
   1a6c9:	50                   	push   %rax
   1a6ca:	48 b8 06 81 b4 b3 00 	movabs $0xb3b48106,%rax
   1a6d1:	00 00 00 
   1a6d4:	48 89 05 65 92 73 00 	mov    %rax,0x739265(%rip)        # 753940 <edgeId>
   1a6db:	58                   	pop    %rax
   1a6dc:	e8 ff b0 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "\"";
   1a6e1:	4c 8d 15 13 f4 00 00 	lea    0xf413(%rip),%r10        # 29afb <b64c+0x9b>
   1a6e8:	c6 44 24 6a 00       	movb   $0x0,0x6a(%rsp)
   1a6ed:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   1a6f2:	c6 44 24 6b 01       	movb   $0x1,0x6b(%rsp)
   1a6f7:	c6 44 24 7c 01       	movb   $0x1,0x7c(%rsp)
  size_t len = 0;
   1a6fc:	45 31 ff             	xor    %r15d,%r15d
   1a6ff:	c6 44 24 7d 01       	movb   $0x1,0x7d(%rsp)
      backslash_escapes = true;
   1a704:	c6 44 24 69 01       	movb   $0x1,0x69(%rsp)
      quote_string_len = 1;
   1a709:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   1a710:	00 00 
      quote_string = "\"";
   1a712:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
   1a717:	e9 44 88 ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   1a71c:	50                   	push   %rax
   1a71d:	48 c7 c0 ce 5e 7c 42 	mov    $0x427c5ece,%rax
   1a724:	48 89 05 15 92 73 00 	mov    %rax,0x739215(%rip)        # 753940 <edgeId>
   1a72b:	58                   	pop    %rax
   1a72c:	e8 af b0 fe ff       	callq  57e0 <_storeEdge>
      quote_string = "'";
   1a731:	4c 8d 35 c5 f3 00 00 	lea    0xf3c5(%rip),%r14        # 29afd <b64c+0x9d>
   1a738:	c6 44 24 6a 01       	movb   $0x1,0x6a(%rsp)
   1a73d:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   1a742:	c6 44 24 6b 00       	movb   $0x0,0x6b(%rsp)
   1a747:	c6 44 24 7c 00       	movb   $0x0,0x7c(%rsp)
  size_t len = 0;
   1a74c:	45 31 ff             	xor    %r15d,%r15d
   1a74f:	c6 44 24 7d 01       	movb   $0x1,0x7d(%rsp)
  bool backslash_escapes = false;
   1a754:	c6 44 24 69 00       	movb   $0x0,0x69(%rsp)
      quote_string_len = 1;
   1a759:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
   1a760:	00 00 
      quote_string = "'";
   1a762:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
   1a767:	e9 f4 87 ff ff       	jmpq   12f60 <quotearg_buffer_restyled+0x160>
   1a76c:	50                   	push   %rax
   1a76d:	48 b8 9f 50 3f 90 00 	movabs $0x903f509f,%rax
   1a774:	00 00 00 
   1a777:	48 89 05 c2 91 73 00 	mov    %rax,0x7391c2(%rip)        # 753940 <edgeId>
   1a77e:	58                   	pop    %rax
   1a77f:	e8 5c b0 fe ff       	callq  57e0 <_storeEdge>
   1a784:	8b 74 24 38          	mov    0x38(%rsp),%esi
   1a788:	e8 f3 7c ff ff       	callq  12480 <gettext_quote.part.1>
   1a78d:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   1a792:	e9 45 b7 ff ff       	jmpq   15edc <quotearg_buffer_restyled+0x30dc>
   1a797:	50                   	push   %rax
   1a798:	48 c7 c0 d4 0f 24 44 	mov    $0x44240fd4,%rax
   1a79f:	48 89 05 9a 91 73 00 	mov    %rax,0x73919a(%rip)        # 753940 <edgeId>
   1a7a6:	58                   	pop    %rax
   1a7a7:	e8 34 b0 fe ff       	callq  57e0 <_storeEdge>
   1a7ac:	8b 74 24 38          	mov    0x38(%rsp),%esi
   1a7b0:	48 89 c7             	mov    %rax,%rdi
   1a7b3:	e8 c8 7c ff ff       	callq  12480 <gettext_quote.part.1>
   1a7b8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1a7bd:	e9 5d b6 ff ff       	jmpq   15e1f <quotearg_buffer_restyled+0x301f>
   1a7c2:	50                   	push   %rax
   1a7c3:	48 b8 20 21 ca 8b 00 	movabs $0x8bca2120,%rax
   1a7ca:	00 00 00 
   1a7cd:	48 89 05 6c 91 73 00 	mov    %rax,0x73916c(%rip)        # 753940 <edgeId>
   1a7d4:	58                   	pop    %rax
   1a7d5:	e8 06 b0 fe ff       	callq  57e0 <_storeEdge>
}
   1a7da:	e8 71 71 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1a7df:	50                   	push   %rax
   1a7e0:	48 c7 c0 84 28 2f 6e 	mov    $0x6e2f2884,%rax
   1a7e7:	48 89 05 52 91 73 00 	mov    %rax,0x739152(%rip)        # 753940 <edgeId>
   1a7ee:	58                   	pop    %rax
   1a7ef:	e8 ec af fe ff       	callq  57e0 <_storeEdge>
      abort ();
   1a7f4:	e8 87 70 fe ff       	callq  1880 <abort@plt>
   1a7f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001a800 <clone_quoting_options>:
{
   1a800:	41 54                	push   %r12
   1a802:	55                   	push   %rbp
   1a803:	53                   	push   %rbx
   1a804:	48 89 fb             	mov    %rdi,%rbx
  int e = errno;
   1a807:	e8 84 70 fe ff       	callq  1890 <__errno_location@plt>
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
   1a80c:	48 8d 3d 2d 33 5e 00 	lea    0x5e332d(%rip),%rdi        # 5fdb40 <default_quoting_options>
  int e = errno;
   1a813:	44 8b 20             	mov    (%rax),%r12d
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
   1a816:	48 85 db             	test   %rbx,%rbx
  int e = errno;
   1a819:	48 89 c5             	mov    %rax,%rbp
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
   1a81c:	be 38 00 00 00       	mov    $0x38,%esi
   1a821:	48 0f 45 fb          	cmovne %rbx,%rdi
   1a825:	e8 e6 93 00 00       	callq  23c10 <xmemdup>
  errno = e;
   1a82a:	44 89 65 00          	mov    %r12d,0x0(%rbp)
}
   1a82e:	5b                   	pop    %rbx
   1a82f:	5d                   	pop    %rbp
   1a830:	41 5c                	pop    %r12
   1a832:	c3                   	retq   
   1a833:	0f 1f 00             	nopl   (%rax)
   1a836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a83d:	00 00 00 

000000000001a840 <get_quoting_style>:
  return (o ? o : &default_quoting_options)->style;
   1a840:	48 8d 05 f9 32 5e 00 	lea    0x5e32f9(%rip),%rax        # 5fdb40 <default_quoting_options>
   1a847:	48 85 ff             	test   %rdi,%rdi
   1a84a:	48 0f 44 f8          	cmove  %rax,%rdi
   1a84e:	8b 07                	mov    (%rdi),%eax
}
   1a850:	c3                   	retq   
   1a851:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a856:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a85d:	00 00 00 

000000000001a860 <set_quoting_style>:
  (o ? o : &default_quoting_options)->style = s;
   1a860:	48 8d 05 d9 32 5e 00 	lea    0x5e32d9(%rip),%rax        # 5fdb40 <default_quoting_options>
   1a867:	48 85 ff             	test   %rdi,%rdi
   1a86a:	48 0f 44 f8          	cmove  %rax,%rdi
   1a86e:	89 37                	mov    %esi,(%rdi)
}
   1a870:	c3                   	retq   
   1a871:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a87d:	00 00 00 

000000000001a880 <set_char_quoting>:
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1a880:	48 8d 05 b9 32 5e 00 	lea    0x5e32b9(%rip),%rax        # 5fdb40 <default_quoting_options>
   1a887:	48 85 ff             	test   %rdi,%rdi
   1a88a:	89 f1                	mov    %esi,%ecx
   1a88c:	48 0f 44 f8          	cmove  %rax,%rdi
   1a890:	c0 e9 05             	shr    $0x5,%cl
   1a893:	44 0f b6 c1          	movzbl %cl,%r8d
  int shift = uc % INT_BITS;
   1a897:	89 f1                	mov    %esi,%ecx
  unsigned int *p =
   1a899:	4a 8d 7c 87 08       	lea    0x8(%rdi,%r8,4),%rdi
  int shift = uc % INT_BITS;
   1a89e:	83 e1 1f             	and    $0x1f,%ecx
  int r = (*p >> shift) & 1;
   1a8a1:	8b 37                	mov    (%rdi),%esi
   1a8a3:	89 f0                	mov    %esi,%eax
   1a8a5:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
   1a8a7:	31 c2                	xor    %eax,%edx
  int r = (*p >> shift) & 1;
   1a8a9:	83 e0 01             	and    $0x1,%eax
  *p ^= ((i & 1) ^ r) << shift;
   1a8ac:	83 e2 01             	and    $0x1,%edx
   1a8af:	d3 e2                	shl    %cl,%edx
   1a8b1:	31 f2                	xor    %esi,%edx
   1a8b3:	89 17                	mov    %edx,(%rdi)
}
   1a8b5:	c3                   	retq   
   1a8b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a8bd:	00 00 00 

000000000001a8c0 <set_quoting_flags>:
    o = &default_quoting_options;
   1a8c0:	48 8d 05 79 32 5e 00 	lea    0x5e3279(%rip),%rax        # 5fdb40 <default_quoting_options>
   1a8c7:	48 85 ff             	test   %rdi,%rdi
   1a8ca:	48 0f 44 f8          	cmove  %rax,%rdi
  r = o->flags;
   1a8ce:	8b 47 04             	mov    0x4(%rdi),%eax
  o->flags = i;
   1a8d1:	89 77 04             	mov    %esi,0x4(%rdi)
}
   1a8d4:	c3                   	retq   
   1a8d5:	90                   	nop
   1a8d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a8dd:	00 00 00 

000000000001a8e0 <set_custom_quoting>:
    o = &default_quoting_options;
   1a8e0:	48 8d 05 59 32 5e 00 	lea    0x5e3259(%rip),%rax        # 5fdb40 <default_quoting_options>
   1a8e7:	48 85 ff             	test   %rdi,%rdi
   1a8ea:	48 0f 44 f8          	cmove  %rax,%rdi
  if (!left_quote || !right_quote)
   1a8ee:	48 85 f6             	test   %rsi,%rsi
  o->style = custom_quoting_style;
   1a8f1:	c7 07 08 00 00 00    	movl   $0x8,(%rdi)
  if (!left_quote || !right_quote)
   1a8f7:	74 38                	je     1a931 <set_custom_quoting+0x51>
   1a8f9:	50                   	push   %rax
   1a8fa:	48 c7 c0 f8 a3 c4 33 	mov    $0x33c4a3f8,%rax
   1a901:	48 89 05 38 90 73 00 	mov    %rax,0x739038(%rip)        # 753940 <edgeId>
   1a908:	58                   	pop    %rax
   1a909:	e8 d2 ae fe ff       	callq  57e0 <_storeEdge>
   1a90e:	48 85 d2             	test   %rdx,%rdx
   1a911:	74 1e                	je     1a931 <set_custom_quoting+0x51>
   1a913:	50                   	push   %rax
   1a914:	48 c7 c0 fe 28 f1 0c 	mov    $0xcf128fe,%rax
   1a91b:	48 89 05 1e 90 73 00 	mov    %rax,0x73901e(%rip)        # 753940 <edgeId>
   1a922:	58                   	pop    %rax
   1a923:	e8 b8 ae fe ff       	callq  57e0 <_storeEdge>
  o->left_quote = left_quote;
   1a928:	48 89 77 28          	mov    %rsi,0x28(%rdi)
  o->right_quote = right_quote;
   1a92c:	48 89 57 30          	mov    %rdx,0x30(%rdi)
   1a930:	c3                   	retq   
   1a931:	50                   	push   %rax
   1a932:	48 c7 c0 a3 c4 33 40 	mov    $0x4033c4a3,%rax
   1a939:	48 89 05 00 90 73 00 	mov    %rax,0x739000(%rip)        # 753940 <edgeId>
   1a940:	58                   	pop    %rax
   1a941:	e8 9a ae fe ff       	callq  57e0 <_storeEdge>
{
   1a946:	48 83 ec 08          	sub    $0x8,%rsp
    abort ();
   1a94a:	e8 31 6f fe ff       	callq  1880 <abort@plt>
   1a94f:	90                   	nop

000000000001a950 <quotearg_buffer>:
   ARGSIZE.  */
size_t
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
   1a950:	41 57                	push   %r15
   1a952:	41 56                	push   %r14
   1a954:	49 89 cf             	mov    %rcx,%r15
   1a957:	41 55                	push   %r13
   1a959:	41 54                	push   %r12
   1a95b:	49 89 f5             	mov    %rsi,%r13
   1a95e:	55                   	push   %rbp
   1a95f:	53                   	push   %rbx
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1a960:	48 8d 1d d9 31 5e 00 	lea    0x5e31d9(%rip),%rbx        # 5fdb40 <default_quoting_options>
{
   1a967:	49 89 d6             	mov    %rdx,%r14
   1a96a:	48 83 ec 18          	sub    $0x18,%rsp
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1a96e:	4d 85 c0             	test   %r8,%r8
   1a971:	49 0f 45 d8          	cmovne %r8,%rbx
{
   1a975:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  int e = errno;
   1a97a:	e8 11 6f fe ff       	callq  1890 <__errno_location@plt>
   1a97f:	44 8b 20             	mov    (%rax),%r12d
   1a982:	48 89 c5             	mov    %rax,%rbp
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
   1a985:	48 8d 43 08          	lea    0x8(%rbx),%rax
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
   1a989:	48 83 ec 08          	sub    $0x8,%rsp
   1a98d:	44 8b 4b 04          	mov    0x4(%rbx),%r9d
   1a991:	ff 73 30             	pushq  0x30(%rbx)
   1a994:	44 8b 03             	mov    (%rbx),%r8d
   1a997:	ff 73 28             	pushq  0x28(%rbx)
   1a99a:	4c 89 f9             	mov    %r15,%rcx
   1a99d:	50                   	push   %rax
   1a99e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   1a9a3:	4c 89 f2             	mov    %r14,%rdx
   1a9a6:	4c 89 ee             	mov    %r13,%rsi
   1a9a9:	e8 52 84 ff ff       	callq  12e00 <quotearg_buffer_restyled>
                                       p->left_quote, p->right_quote);
  errno = e;
   1a9ae:	44 89 65 00          	mov    %r12d,0x0(%rbp)
  return r;
}
   1a9b2:	48 83 c4 38          	add    $0x38,%rsp
   1a9b6:	5b                   	pop    %rbx
   1a9b7:	5d                   	pop    %rbp
   1a9b8:	41 5c                	pop    %r12
   1a9ba:	41 5d                	pop    %r13
   1a9bc:	41 5e                	pop    %r14
   1a9be:	41 5f                	pop    %r15
   1a9c0:	c3                   	retq   
   1a9c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a9c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a9cd:	00 00 00 

000000000001a9d0 <quotearg_alloc>:

/* Equivalent to quotearg_alloc (ARG, ARGSIZE, NULL, O).  */
char *
quotearg_alloc (char const *arg, size_t argsize,
                struct quoting_options const *o)
{
   1a9d0:	41 57                	push   %r15
   1a9d2:	41 56                	push   %r14
   1a9d4:	49 89 f7             	mov    %rsi,%r15
   1a9d7:	41 55                	push   %r13
   1a9d9:	41 54                	push   %r12
   1a9db:	49 89 fe             	mov    %rdi,%r14
   1a9de:	55                   	push   %rbp
   1a9df:	53                   	push   %rbx
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1a9e0:	48 8d 1d 59 31 5e 00 	lea    0x5e3159(%rip),%rbx        # 5fdb40 <default_quoting_options>
{
   1a9e7:	48 83 ec 28          	sub    $0x28,%rsp
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1a9eb:	48 85 d2             	test   %rdx,%rdx
   1a9ee:	48 0f 45 da          	cmovne %rdx,%rbx
  int e = errno;
   1a9f2:	e8 99 6e fe ff       	callq  1890 <__errno_location@plt>
   1a9f7:	44 8b 18             	mov    (%rax),%r11d
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
   1a9fa:	8b 6b 04             	mov    0x4(%rbx),%ebp
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
                                             flags, p->quote_these_too,
   1a9fd:	4c 8d 53 08          	lea    0x8(%rbx),%r10
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
   1aa01:	48 83 ec 08          	sub    $0x8,%rsp
   1aa05:	44 8b 03             	mov    (%rbx),%r8d
   1aa08:	4c 89 f9             	mov    %r15,%rcx
   1aa0b:	4c 89 f2             	mov    %r14,%rdx
   1aa0e:	31 f6                	xor    %esi,%esi
   1aa10:	31 ff                	xor    %edi,%edi
  int e = errno;
   1aa12:	44 89 5c 24 24       	mov    %r11d,0x24(%rsp)
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
   1aa17:	83 cd 01             	or     $0x1,%ebp
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
   1aa1a:	ff 73 30             	pushq  0x30(%rbx)
   1aa1d:	ff 73 28             	pushq  0x28(%rbx)
   1aa20:	41 52                	push   %r10
   1aa22:	41 89 e9             	mov    %ebp,%r9d
  int e = errno;
   1aa25:	49 89 c5             	mov    %rax,%r13
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
   1aa28:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
   1aa2d:	e8 ce 83 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1aa32:	48 8d 70 01          	lea    0x1(%rax),%rsi
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
   1aa36:	48 83 c4 20          	add    $0x20,%rsp
   1aa3a:	48 89 f7             	mov    %rsi,%rdi
   1aa3d:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   1aa42:	e8 39 8e 00 00       	callq  23880 <xmalloc>
                                             p->left_quote,
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
   1aa47:	48 83 ec 08          	sub    $0x8,%rsp
   1aa4b:	49 89 c4             	mov    %rax,%r12
   1aa4e:	ff 73 30             	pushq  0x30(%rbx)
   1aa51:	ff 73 28             	pushq  0x28(%rbx)
   1aa54:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
   1aa59:	4c 89 f2             	mov    %r14,%rdx
   1aa5c:	44 8b 03             	mov    (%rbx),%r8d
   1aa5f:	41 89 e9             	mov    %ebp,%r9d
   1aa62:	4c 89 f9             	mov    %r15,%rcx
   1aa65:	4c 89 e7             	mov    %r12,%rdi
   1aa68:	50                   	push   %rax
   1aa69:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   1aa6e:	e8 8d 83 ff ff       	callq  12e00 <quotearg_buffer_restyled>
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
   1aa73:	8b 54 24 3c          	mov    0x3c(%rsp),%edx
}
   1aa77:	4c 89 e0             	mov    %r12,%rax
  errno = e;
   1aa7a:	41 89 55 00          	mov    %edx,0x0(%r13)
}
   1aa7e:	48 83 c4 48          	add    $0x48,%rsp
   1aa82:	5b                   	pop    %rbx
   1aa83:	5d                   	pop    %rbp
   1aa84:	41 5c                	pop    %r12
   1aa86:	41 5d                	pop    %r13
   1aa88:	41 5e                	pop    %r14
   1aa8a:	41 5f                	pop    %r15
   1aa8c:	c3                   	retq   
   1aa8d:	0f 1f 00             	nopl   (%rax)

000000000001aa90 <quotearg_alloc_mem>:
{
   1aa90:	41 57                	push   %r15
   1aa92:	41 56                	push   %r14
   1aa94:	49 89 f7             	mov    %rsi,%r15
   1aa97:	41 55                	push   %r13
   1aa99:	41 54                	push   %r12
   1aa9b:	49 89 d4             	mov    %rdx,%r12
   1aa9e:	55                   	push   %rbp
   1aa9f:	53                   	push   %rbx
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1aaa0:	48 8d 1d 99 30 5e 00 	lea    0x5e3099(%rip),%rbx        # 5fdb40 <default_quoting_options>
{
   1aaa7:	49 89 fe             	mov    %rdi,%r14
   1aaaa:	48 83 ec 38          	sub    $0x38,%rsp
  struct quoting_options const *p = o ? o : &default_quoting_options;
   1aaae:	48 85 c9             	test   %rcx,%rcx
   1aab1:	48 0f 45 d9          	cmovne %rcx,%rbx
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
   1aab5:	31 ed                	xor    %ebp,%ebp
  int e = errno;
   1aab7:	e8 d4 6d fe ff       	callq  1890 <__errno_location@plt>
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
   1aabc:	4d 85 e4             	test   %r12,%r12
  int e = errno;
   1aabf:	49 89 c5             	mov    %rax,%r13
   1aac2:	8b 00                	mov    (%rax),%eax
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
   1aac4:	40 0f 94 c5          	sete   %bpl
   1aac8:	0b 6b 04             	or     0x4(%rbx),%ebp
                                             flags, p->quote_these_too,
   1aacb:	4c 8d 53 08          	lea    0x8(%rbx),%r10
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
   1aacf:	48 83 ec 08          	sub    $0x8,%rsp
   1aad3:	44 8b 03             	mov    (%rbx),%r8d
   1aad6:	4c 89 f9             	mov    %r15,%rcx
  int e = errno;
   1aad9:	89 44 24 14          	mov    %eax,0x14(%rsp)
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
   1aadd:	ff 73 30             	pushq  0x30(%rbx)
   1aae0:	4c 89 f2             	mov    %r14,%rdx
   1aae3:	ff 73 28             	pushq  0x28(%rbx)
   1aae6:	41 52                	push   %r10
   1aae8:	31 f6                	xor    %esi,%esi
   1aaea:	41 89 e9             	mov    %ebp,%r9d
   1aaed:	31 ff                	xor    %edi,%edi
   1aaef:	4c 89 54 24 40       	mov    %r10,0x40(%rsp)
   1aaf4:	e8 07 83 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1aaf9:	48 8d 70 01          	lea    0x1(%rax),%rsi
   1aafd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1ab02:	48 83 c4 20          	add    $0x20,%rsp
   1ab06:	48 89 f7             	mov    %rsi,%rdi
   1ab09:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
   1ab0e:	e8 6d 8d 00 00       	callq  23880 <xmalloc>
   1ab13:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
   1ab18:	48 83 ec 08          	sub    $0x8,%rsp
   1ab1c:	ff 73 30             	pushq  0x30(%rbx)
   1ab1f:	ff 73 28             	pushq  0x28(%rbx)
   1ab22:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
   1ab27:	4c 89 f9             	mov    %r15,%rcx
   1ab2a:	44 8b 03             	mov    (%rbx),%r8d
   1ab2d:	41 89 e9             	mov    %ebp,%r9d
   1ab30:	48 89 c7             	mov    %rax,%rdi
   1ab33:	52                   	push   %rdx
   1ab34:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
   1ab39:	4c 89 f2             	mov    %r14,%rdx
   1ab3c:	e8 bf 82 ff ff       	callq  12e00 <quotearg_buffer_restyled>
  errno = e;
   1ab41:	8b 4c 24 2c          	mov    0x2c(%rsp),%ecx
  if (size)
   1ab45:	48 83 c4 20          	add    $0x20,%rsp
   1ab49:	4d 85 e4             	test   %r12,%r12
  errno = e;
   1ab4c:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  if (size)
   1ab50:	74 1e                	je     1ab70 <quotearg_alloc_mem+0xe0>
   1ab52:	50                   	push   %rax
   1ab53:	48 c7 c0 b1 fc 8e 6a 	mov    $0x6a8efcb1,%rax
   1ab5a:	48 89 05 df 8d 73 00 	mov    %rax,0x738ddf(%rip)        # 753940 <edgeId>
   1ab61:	58                   	pop    %rax
   1ab62:	e8 79 ac fe ff       	callq  57e0 <_storeEdge>
    *size = bufsize - 1;
   1ab67:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
   1ab6c:	4d 89 1c 24          	mov    %r11,(%r12)
   1ab70:	50                   	push   %rax
   1ab71:	48 c7 c0 cb ef a8 66 	mov    $0x66a8efcb,%rax
   1ab78:	48 89 05 c1 8d 73 00 	mov    %rax,0x738dc1(%rip)        # 753940 <edgeId>
   1ab7f:	58                   	pop    %rax
   1ab80:	e8 5b ac fe ff       	callq  57e0 <_storeEdge>
  return buf;
}
   1ab85:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   1ab8a:	48 83 c4 38          	add    $0x38,%rsp
   1ab8e:	5b                   	pop    %rbx
   1ab8f:	5d                   	pop    %rbp
   1ab90:	41 5c                	pop    %r12
   1ab92:	41 5d                	pop    %r13
   1ab94:	41 5e                	pop    %r14
   1ab96:	41 5f                	pop    %r15
   1ab98:	c3                   	retq   
   1ab99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001aba0 <quotearg_free>:
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
   1aba0:	8b 05 b2 24 21 00    	mov    0x2124b2(%rip),%eax        # 22d058 <nslots>
{
   1aba6:	41 54                	push   %r12
   1aba8:	55                   	push   %rbp
  struct slotvec *sv = slotvec;
   1aba9:	48 8b 2d b0 24 21 00 	mov    0x2124b0(%rip),%rbp        # 22d060 <slotvec>
{
   1abb0:	53                   	push   %rbx
  for (i = 1; i < nslots; i++)
   1abb1:	48 89 15 60 8d 73 00 	mov    %rdx,0x738d60(%rip)        # 753918 <tmpquadone>
   1abb8:	48 89 0d 71 30 5e 00 	mov    %rcx,0x5e3071(%rip)        # 5fdc30 <tmpquadtwo>
   1abbf:	48 8d 15 2a 30 5e 00 	lea    0x5e302a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1abc6:	48 c7 02 8a 0a 00 00 	movq   $0xa8a,(%rdx)
   1abcd:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1abd4:	00 
   1abd5:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   1abdc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1abe0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1abe7:	00 
   1abe8:	48 89 c1             	mov    %rax,%rcx
   1abeb:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1abef:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1abf6:	00 
   1abf7:	ff 32                	pushq  (%rdx)
   1abf9:	48 8b 15 18 8d 73 00 	mov    0x738d18(%rip),%rdx        # 753918 <tmpquadone>
   1ac00:	48 8b 0d 29 30 5e 00 	mov    0x5e3029(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ac07:	48 c7 05 3e 8d 73 00 	movq   $0x1,0x738d3e(%rip)        # 753950 <cmpPassed>
   1ac0e:	01 00 00 00 
   1ac12:	e8 61 ac fe ff       	callq  5878 <_storeDataFn>
   1ac17:	83 f8 01             	cmp    $0x1,%eax
   1ac1a:	0f 86 b1 05 00 00    	jbe    1b1d1 <quotearg_free+0x631>
   1ac20:	50                   	push   %rax
   1ac21:	48 b8 1d 11 2c b1 00 	movabs $0xb12c111d,%rax
   1ac28:	00 00 00 
   1ac2b:	48 89 05 0e 8d 73 00 	mov    %rax,0x738d0e(%rip)        # 753940 <edgeId>
   1ac32:	58                   	pop    %rax
   1ac33:	e8 a8 ab fe ff       	callq  57e0 <_storeEdge>
   1ac38:	83 e8 02             	sub    $0x2,%eax
   1ac3b:	48 8d 5d 18          	lea    0x18(%rbp),%rbx
   1ac3f:	48 c1 e0 04          	shl    $0x4,%rax
   1ac43:	4c 8d 64 05 28       	lea    0x28(%rbp,%rax,1),%r12
   1ac48:	4c 89 e2             	mov    %r12,%rdx
   1ac4b:	48 29 da             	sub    %rbx,%rdx
   1ac4e:	48 83 ea 10          	sub    $0x10,%rdx
   1ac52:	48 c1 ea 04          	shr    $0x4,%rdx
   1ac56:	48 83 c2 01          	add    $0x1,%rdx
   1ac5a:	83 e2 07             	and    $0x7,%edx
   1ac5d:	0f 84 8e 04 00 00    	je     1b0f1 <quotearg_free+0x551>
   1ac63:	50                   	push   %rax
   1ac64:	48 b8 82 25 16 f8 00 	movabs $0xf8162582,%rax
   1ac6b:	00 00 00 
   1ac6e:	48 89 05 cb 8c 73 00 	mov    %rax,0x738ccb(%rip)        # 753940 <edgeId>
   1ac75:	58                   	pop    %rax
   1ac76:	e8 65 ab fe ff       	callq  57e0 <_storeEdge>
   1ac7b:	48 89 0d 96 8c 73 00 	mov    %rcx,0x738c96(%rip)        # 753918 <tmpquadone>
   1ac82:	48 89 1d a7 2f 5e 00 	mov    %rbx,0x5e2fa7(%rip)        # 5fdc30 <tmpquadtwo>
   1ac89:	48 8d 0d 60 2f 5e 00 	lea    0x5e2f60(%rip),%rcx        # 5fdbf0 <funcinptr>
   1ac90:	48 c7 01 8b 0a 00 00 	movq   $0xa8b,(%rcx)
   1ac97:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1ac9e:	00 
   1ac9f:	48 c7 c3 01 00 00 00 	mov    $0x1,%rbx
   1aca6:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1acaa:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1acb1:	00 
   1acb2:	48 89 d3             	mov    %rdx,%rbx
   1acb5:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1acb9:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1acc0:	00 
   1acc1:	ff 31                	pushq  (%rcx)
   1acc3:	48 8b 0d 4e 8c 73 00 	mov    0x738c4e(%rip),%rcx        # 753918 <tmpquadone>
   1acca:	48 8b 1d 5f 2f 5e 00 	mov    0x5e2f5f(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1acd1:	48 c7 05 74 8c 73 00 	movq   $0x1,0x738c74(%rip)        # 753950 <cmpPassed>
   1acd8:	01 00 00 00 
   1acdc:	e8 97 ab fe ff       	callq  5878 <_storeDataFn>
   1ace1:	48 83 fa 01          	cmp    $0x1,%rdx
   1ace5:	0f 84 65 03 00 00    	je     1b050 <quotearg_free+0x4b0>
   1aceb:	50                   	push   %rax
   1acec:	48 b8 60 89 05 fe 00 	movabs $0xfe058960,%rax
   1acf3:	00 00 00 
   1acf6:	48 89 05 43 8c 73 00 	mov    %rax,0x738c43(%rip)        # 753940 <edgeId>
   1acfd:	58                   	pop    %rax
   1acfe:	e8 dd aa fe ff       	callq  57e0 <_storeEdge>
   1ad03:	48 89 0d 0e 8c 73 00 	mov    %rcx,0x738c0e(%rip)        # 753918 <tmpquadone>
   1ad0a:	48 89 1d 1f 2f 5e 00 	mov    %rbx,0x5e2f1f(%rip)        # 5fdc30 <tmpquadtwo>
   1ad11:	48 8d 0d d8 2e 5e 00 	lea    0x5e2ed8(%rip),%rcx        # 5fdbf0 <funcinptr>
   1ad18:	48 c7 01 8c 0a 00 00 	movq   $0xa8c,(%rcx)
   1ad1f:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1ad26:	00 
   1ad27:	48 c7 c3 02 00 00 00 	mov    $0x2,%rbx
   1ad2e:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1ad32:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1ad39:	00 
   1ad3a:	48 89 d3             	mov    %rdx,%rbx
   1ad3d:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1ad41:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1ad48:	00 
   1ad49:	ff 31                	pushq  (%rcx)
   1ad4b:	48 8b 0d c6 8b 73 00 	mov    0x738bc6(%rip),%rcx        # 753918 <tmpquadone>
   1ad52:	48 8b 1d d7 2e 5e 00 	mov    0x5e2ed7(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1ad59:	48 c7 05 ec 8b 73 00 	movq   $0x1,0x738bec(%rip)        # 753950 <cmpPassed>
   1ad60:	01 00 00 00 
   1ad64:	e8 0f ab fe ff       	callq  5878 <_storeDataFn>
   1ad69:	48 83 fa 02          	cmp    $0x2,%rdx
   1ad6d:	0f 84 b9 02 00 00    	je     1b02c <quotearg_free+0x48c>
   1ad73:	50                   	push   %rax
   1ad74:	48 c7 c0 58 62 81 7f 	mov    $0x7f816258,%rax
   1ad7b:	48 89 05 be 8b 73 00 	mov    %rax,0x738bbe(%rip)        # 753940 <edgeId>
   1ad82:	58                   	pop    %rax
   1ad83:	e8 58 aa fe ff       	callq  57e0 <_storeEdge>
   1ad88:	48 89 0d 89 8b 73 00 	mov    %rcx,0x738b89(%rip)        # 753918 <tmpquadone>
   1ad8f:	48 89 1d 9a 2e 5e 00 	mov    %rbx,0x5e2e9a(%rip)        # 5fdc30 <tmpquadtwo>
   1ad96:	48 8d 0d 53 2e 5e 00 	lea    0x5e2e53(%rip),%rcx        # 5fdbf0 <funcinptr>
   1ad9d:	48 c7 01 8d 0a 00 00 	movq   $0xa8d,(%rcx)
   1ada4:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1adab:	00 
   1adac:	48 c7 c3 03 00 00 00 	mov    $0x3,%rbx
   1adb3:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1adb7:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1adbe:	00 
   1adbf:	48 89 d3             	mov    %rdx,%rbx
   1adc2:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1adc6:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1adcd:	00 
   1adce:	ff 31                	pushq  (%rcx)
   1add0:	48 8b 0d 41 8b 73 00 	mov    0x738b41(%rip),%rcx        # 753918 <tmpquadone>
   1add7:	48 8b 1d 52 2e 5e 00 	mov    0x5e2e52(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1adde:	48 c7 05 67 8b 73 00 	movq   $0x1,0x738b67(%rip)        # 753950 <cmpPassed>
   1ade5:	01 00 00 00 
   1ade9:	e8 8a aa fe ff       	callq  5878 <_storeDataFn>
   1adee:	48 83 fa 03          	cmp    $0x3,%rdx
   1adf2:	0f 84 13 02 00 00    	je     1b00b <quotearg_free+0x46b>
   1adf8:	50                   	push   %rax
   1adf9:	48 c7 c0 96 58 e0 1f 	mov    $0x1fe05896,%rax
   1ae00:	48 89 05 39 8b 73 00 	mov    %rax,0x738b39(%rip)        # 753940 <edgeId>
   1ae07:	58                   	pop    %rax
   1ae08:	e8 d3 a9 fe ff       	callq  57e0 <_storeEdge>
   1ae0d:	48 89 0d 04 8b 73 00 	mov    %rcx,0x738b04(%rip)        # 753918 <tmpquadone>
   1ae14:	48 89 1d 15 2e 5e 00 	mov    %rbx,0x5e2e15(%rip)        # 5fdc30 <tmpquadtwo>
   1ae1b:	48 8d 0d ce 2d 5e 00 	lea    0x5e2dce(%rip),%rcx        # 5fdbf0 <funcinptr>
   1ae22:	48 c7 01 8e 0a 00 00 	movq   $0xa8e,(%rcx)
   1ae29:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1ae30:	00 
   1ae31:	48 c7 c3 04 00 00 00 	mov    $0x4,%rbx
   1ae38:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1ae3c:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1ae43:	00 
   1ae44:	48 89 d3             	mov    %rdx,%rbx
   1ae47:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1ae4b:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1ae52:	00 
   1ae53:	ff 31                	pushq  (%rcx)
   1ae55:	48 8b 0d bc 8a 73 00 	mov    0x738abc(%rip),%rcx        # 753918 <tmpquadone>
   1ae5c:	48 8b 1d cd 2d 5e 00 	mov    0x5e2dcd(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1ae63:	48 c7 05 e2 8a 73 00 	movq   $0x1,0x738ae2(%rip)        # 753950 <cmpPassed>
   1ae6a:	01 00 00 00 
   1ae6e:	e8 05 aa fe ff       	callq  5878 <_storeDataFn>
   1ae73:	48 83 fa 04          	cmp    $0x4,%rdx
   1ae77:	0f 84 6a 01 00 00    	je     1afe7 <quotearg_free+0x447>
   1ae7d:	50                   	push   %rax
   1ae7e:	48 c7 c0 25 16 f8 47 	mov    $0x47f81625,%rax
   1ae85:	48 89 05 b4 8a 73 00 	mov    %rax,0x738ab4(%rip)        # 753940 <edgeId>
   1ae8c:	58                   	pop    %rax
   1ae8d:	e8 4e a9 fe ff       	callq  57e0 <_storeEdge>
   1ae92:	48 89 0d 7f 8a 73 00 	mov    %rcx,0x738a7f(%rip)        # 753918 <tmpquadone>
   1ae99:	48 89 1d 90 2d 5e 00 	mov    %rbx,0x5e2d90(%rip)        # 5fdc30 <tmpquadtwo>
   1aea0:	48 8d 0d 49 2d 5e 00 	lea    0x5e2d49(%rip),%rcx        # 5fdbf0 <funcinptr>
   1aea7:	48 c7 01 8f 0a 00 00 	movq   $0xa8f,(%rcx)
   1aeae:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1aeb5:	00 
   1aeb6:	48 c7 c3 05 00 00 00 	mov    $0x5,%rbx
   1aebd:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1aec1:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1aec8:	00 
   1aec9:	48 89 d3             	mov    %rdx,%rbx
   1aecc:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1aed0:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1aed7:	00 
   1aed8:	ff 31                	pushq  (%rcx)
   1aeda:	48 8b 0d 37 8a 73 00 	mov    0x738a37(%rip),%rcx        # 753918 <tmpquadone>
   1aee1:	48 8b 1d 48 2d 5e 00 	mov    0x5e2d48(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1aee8:	48 c7 05 5d 8a 73 00 	movq   $0x1,0x738a5d(%rip)        # 753950 <cmpPassed>
   1aeef:	01 00 00 00 
   1aef3:	e8 80 a9 fe ff       	callq  5878 <_storeDataFn>
   1aef8:	48 83 fa 05          	cmp    $0x5,%rdx
   1aefc:	0f 84 c1 00 00 00    	je     1afc3 <quotearg_free+0x423>
   1af02:	50                   	push   %rax
   1af03:	48 b8 89 05 fe 91 00 	movabs $0x91fe0589,%rax
   1af0a:	00 00 00 
   1af0d:	48 89 05 2c 8a 73 00 	mov    %rax,0x738a2c(%rip)        # 753940 <edgeId>
   1af14:	58                   	pop    %rax
   1af15:	e8 c6 a8 fe ff       	callq  57e0 <_storeEdge>
   1af1a:	48 89 0d f7 89 73 00 	mov    %rcx,0x7389f7(%rip)        # 753918 <tmpquadone>
   1af21:	48 89 1d 08 2d 5e 00 	mov    %rbx,0x5e2d08(%rip)        # 5fdc30 <tmpquadtwo>
   1af28:	48 8d 0d c1 2c 5e 00 	lea    0x5e2cc1(%rip),%rcx        # 5fdbf0 <funcinptr>
   1af2f:	48 c7 01 90 0a 00 00 	movq   $0xa90,(%rcx)
   1af36:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1af3d:	00 
   1af3e:	48 c7 c3 06 00 00 00 	mov    $0x6,%rbx
   1af45:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1af49:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1af50:	00 
   1af51:	48 89 d3             	mov    %rdx,%rbx
   1af54:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1af58:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1af5f:	00 
   1af60:	ff 31                	pushq  (%rcx)
   1af62:	48 8b 0d af 89 73 00 	mov    0x7389af(%rip),%rcx        # 753918 <tmpquadone>
   1af69:	48 8b 1d c0 2c 5e 00 	mov    0x5e2cc0(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1af70:	48 c7 05 d5 89 73 00 	movq   $0x1,0x7389d5(%rip)        # 753950 <cmpPassed>
   1af77:	01 00 00 00 
   1af7b:	e8 f8 a8 fe ff       	callq  5878 <_storeDataFn>
   1af80:	48 83 fa 06          	cmp    $0x6,%rdx
   1af84:	0f 85 d6 03 00 00    	jne    1b360 <quotearg_free+0x7c0>
   1af8a:	50                   	push   %rax
   1af8b:	48 b8 62 81 7f e4 00 	movabs $0xe47f8162,%rax
   1af92:	00 00 00 
   1af95:	48 89 05 a4 89 73 00 	mov    %rax,0x7389a4(%rip)        # 753940 <edgeId>
   1af9c:	58                   	pop    %rax
   1af9d:	e8 3e a8 fe ff       	callq  57e0 <_storeEdge>
   1afa2:	50                   	push   %rax
   1afa3:	48 c7 c0 58 e0 1f 79 	mov    $0x791fe058,%rax
   1afaa:	48 89 05 8f 89 73 00 	mov    %rax,0x73898f(%rip)        # 753940 <edgeId>
   1afb1:	58                   	pop    %rax
   1afb2:	e8 29 a8 fe ff       	callq  57e0 <_storeEdge>
    free (sv[i].val);
   1afb7:	48 8b 3b             	mov    (%rbx),%rdi
   1afba:	48 83 c3 10          	add    $0x10,%rbx
   1afbe:	e8 ad 68 fe ff       	callq  1870 <free@plt>
   1afc3:	50                   	push   %rax
   1afc4:	48 b8 81 7f e4 e5 00 	movabs $0xe5e47f81,%rax
   1afcb:	00 00 00 
   1afce:	48 89 05 6b 89 73 00 	mov    %rax,0x73896b(%rip)        # 753940 <edgeId>
   1afd5:	58                   	pop    %rax
   1afd6:	e8 05 a8 fe ff       	callq  57e0 <_storeEdge>
   1afdb:	48 8b 3b             	mov    (%rbx),%rdi
   1afde:	48 83 c3 10          	add    $0x10,%rbx
   1afe2:	e8 89 68 fe ff       	callq  1870 <free@plt>
   1afe7:	50                   	push   %rax
   1afe8:	48 b8 fc 23 2f cf 00 	movabs $0xcf2f23fc,%rax
   1afef:	00 00 00 
   1aff2:	48 89 05 47 89 73 00 	mov    %rax,0x738947(%rip)        # 753940 <edgeId>
   1aff9:	58                   	pop    %rax
   1affa:	e8 e1 a7 fe ff       	callq  57e0 <_storeEdge>
   1afff:	48 8b 3b             	mov    (%rbx),%rdi
   1b002:	48 83 c3 10          	add    $0x10,%rbx
   1b006:	e8 65 68 fe ff       	callq  1870 <free@plt>
   1b00b:	50                   	push   %rax
   1b00c:	48 c7 c0 1f 79 79 5e 	mov    $0x5e79791f,%rax
   1b013:	48 89 05 26 89 73 00 	mov    %rax,0x738926(%rip)        # 753940 <edgeId>
   1b01a:	58                   	pop    %rax
   1b01b:	e8 c0 a7 fe ff       	callq  57e0 <_storeEdge>
   1b020:	48 8b 3b             	mov    (%rbx),%rdi
   1b023:	48 83 c3 10          	add    $0x10,%rbx
   1b027:	e8 44 68 fe ff       	callq  1870 <free@plt>
   1b02c:	50                   	push   %rax
   1b02d:	48 b8 c8 cb f3 aa 00 	movabs $0xaaf3cbc8,%rax
   1b034:	00 00 00 
   1b037:	48 89 05 02 89 73 00 	mov    %rax,0x738902(%rip)        # 753940 <edgeId>
   1b03e:	58                   	pop    %rax
   1b03f:	e8 9c a7 fe ff       	callq  57e0 <_storeEdge>
   1b044:	48 8b 3b             	mov    (%rbx),%rdi
   1b047:	48 83 c3 10          	add    $0x10,%rbx
   1b04b:	e8 20 68 fe ff       	callq  1870 <free@plt>
   1b050:	50                   	push   %rax
   1b051:	48 c7 c0 5e 9e 57 2d 	mov    $0x2d579e5e,%rax
   1b058:	48 89 05 e1 88 73 00 	mov    %rax,0x7388e1(%rip)        # 753940 <edgeId>
   1b05f:	58                   	pop    %rax
   1b060:	e8 7b a7 fe ff       	callq  57e0 <_storeEdge>
   1b065:	48 8b 3b             	mov    (%rbx),%rdi
   1b068:	48 83 c3 10          	add    $0x10,%rbx
   1b06c:	e8 ff 67 fe ff       	callq  1870 <free@plt>
  for (i = 1; i < nslots; i++)
   1b071:	48 89 15 a0 88 73 00 	mov    %rdx,0x7388a0(%rip)        # 753918 <tmpquadone>
   1b078:	48 89 0d b1 2b 5e 00 	mov    %rcx,0x5e2bb1(%rip)        # 5fdc30 <tmpquadtwo>
   1b07f:	48 8d 15 6a 2b 5e 00 	lea    0x5e2b6a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b086:	48 c7 02 91 0a 00 00 	movq   $0xa91,(%rdx)
   1b08d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b094:	00 
   1b095:	4c 89 e1             	mov    %r12,%rcx
   1b098:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b09c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b0a3:	00 
   1b0a4:	48 89 d9             	mov    %rbx,%rcx
   1b0a7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b0ab:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b0b2:	00 
   1b0b3:	ff 32                	pushq  (%rdx)
   1b0b5:	48 8b 15 5c 88 73 00 	mov    0x73885c(%rip),%rdx        # 753918 <tmpquadone>
   1b0bc:	48 8b 0d 6d 2b 5e 00 	mov    0x5e2b6d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b0c3:	48 c7 05 82 88 73 00 	movq   $0x1,0x738882(%rip)        # 753950 <cmpPassed>
   1b0ca:	01 00 00 00 
   1b0ce:	e8 a5 a7 fe ff       	callq  5878 <_storeDataFn>
   1b0d3:	4c 39 e3             	cmp    %r12,%rbx
   1b0d6:	0f 84 f5 00 00 00    	je     1b1d1 <quotearg_free+0x631>
   1b0dc:	50                   	push   %rax
   1b0dd:	48 c7 c0 3c af 5a 1a 	mov    $0x1a5aaf3c,%rax
   1b0e4:	48 89 05 55 88 73 00 	mov    %rax,0x738855(%rip)        # 753940 <edgeId>
   1b0eb:	58                   	pop    %rax
   1b0ec:	e8 ef a6 fe ff       	callq  57e0 <_storeEdge>
   1b0f1:	50                   	push   %rax
   1b0f2:	48 c7 c0 9e 57 2d 0d 	mov    $0xd2d579e,%rax
   1b0f9:	48 89 05 40 88 73 00 	mov    %rax,0x738840(%rip)        # 753940 <edgeId>
   1b100:	58                   	pop    %rax
   1b101:	e8 da a6 fe ff       	callq  57e0 <_storeEdge>
    free (sv[i].val);
   1b106:	48 8b 3b             	mov    (%rbx),%rdi
   1b109:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
   1b10d:	e8 5e 67 fe ff       	callq  1870 <free@plt>
   1b112:	48 8b 7b 90          	mov    -0x70(%rbx),%rdi
   1b116:	e8 55 67 fe ff       	callq  1870 <free@plt>
   1b11b:	48 8b 7b a0          	mov    -0x60(%rbx),%rdi
   1b11f:	e8 4c 67 fe ff       	callq  1870 <free@plt>
   1b124:	48 8b 7b b0          	mov    -0x50(%rbx),%rdi
   1b128:	e8 43 67 fe ff       	callq  1870 <free@plt>
   1b12d:	48 8b 7b c0          	mov    -0x40(%rbx),%rdi
   1b131:	e8 3a 67 fe ff       	callq  1870 <free@plt>
   1b136:	48 8b 7b d0          	mov    -0x30(%rbx),%rdi
   1b13a:	e8 31 67 fe ff       	callq  1870 <free@plt>
   1b13f:	48 8b 7b e0          	mov    -0x20(%rbx),%rdi
   1b143:	e8 28 67 fe ff       	callq  1870 <free@plt>
   1b148:	48 8b 7b f0          	mov    -0x10(%rbx),%rdi
   1b14c:	e8 1f 67 fe ff       	callq  1870 <free@plt>
  for (i = 1; i < nslots; i++)
   1b151:	48 89 15 c0 87 73 00 	mov    %rdx,0x7387c0(%rip)        # 753918 <tmpquadone>
   1b158:	48 89 0d d1 2a 5e 00 	mov    %rcx,0x5e2ad1(%rip)        # 5fdc30 <tmpquadtwo>
   1b15f:	48 8d 15 8a 2a 5e 00 	lea    0x5e2a8a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b166:	48 c7 02 92 0a 00 00 	movq   $0xa92,(%rdx)
   1b16d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b174:	00 
   1b175:	4c 89 e1             	mov    %r12,%rcx
   1b178:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b17c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b183:	00 
   1b184:	48 89 d9             	mov    %rbx,%rcx
   1b187:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b18b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b192:	00 
   1b193:	ff 32                	pushq  (%rdx)
   1b195:	48 8b 15 7c 87 73 00 	mov    0x73877c(%rip),%rdx        # 753918 <tmpquadone>
   1b19c:	48 8b 0d 8d 2a 5e 00 	mov    0x5e2a8d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b1a3:	48 c7 05 a2 87 73 00 	movq   $0x1,0x7387a2(%rip)        # 753950 <cmpPassed>
   1b1aa:	01 00 00 00 
   1b1ae:	e8 c5 a6 fe ff       	callq  5878 <_storeDataFn>
   1b1b3:	4c 39 e3             	cmp    %r12,%rbx
   1b1b6:	0f 85 35 ff ff ff    	jne    1b0f1 <quotearg_free+0x551>
   1b1bc:	50                   	push   %rax
   1b1bd:	48 c7 c0 00 4c df 51 	mov    $0x51df4c00,%rax
   1b1c4:	48 89 05 75 87 73 00 	mov    %rax,0x738775(%rip)        # 753940 <edgeId>
   1b1cb:	58                   	pop    %rax
   1b1cc:	e8 0f a6 fe ff       	callq  57e0 <_storeEdge>
   1b1d1:	50                   	push   %rax
   1b1d2:	48 b8 00 a6 ef a8 00 	movabs $0xa8efa600,%rax
   1b1d9:	00 00 00 
   1b1dc:	48 89 05 5d 87 73 00 	mov    %rax,0x73875d(%rip)        # 753940 <edgeId>
   1b1e3:	58                   	pop    %rax
   1b1e4:	e8 f7 a5 fe ff       	callq  57e0 <_storeEdge>
  if (sv[0].val != slot0)
   1b1e9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
   1b1ed:	4c 8d 25 4c 28 5e 00 	lea    0x5e284c(%rip),%r12        # 5fda40 <slot0>
   1b1f4:	48 89 15 1d 87 73 00 	mov    %rdx,0x73871d(%rip)        # 753918 <tmpquadone>
   1b1fb:	48 89 0d 2e 2a 5e 00 	mov    %rcx,0x5e2a2e(%rip)        # 5fdc30 <tmpquadtwo>
   1b202:	48 8d 15 e7 29 5e 00 	lea    0x5e29e7(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b209:	48 c7 02 93 0a 00 00 	movq   $0xa93,(%rdx)
   1b210:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b217:	00 
   1b218:	4c 89 e1             	mov    %r12,%rcx
   1b21b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b21f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b226:	00 
   1b227:	48 89 f9             	mov    %rdi,%rcx
   1b22a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b22e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b235:	00 
   1b236:	ff 32                	pushq  (%rdx)
   1b238:	48 8b 15 d9 86 73 00 	mov    0x7386d9(%rip),%rdx        # 753918 <tmpquadone>
   1b23f:	48 8b 0d ea 29 5e 00 	mov    0x5e29ea(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b246:	48 c7 05 ff 86 73 00 	movq   $0x1,0x7386ff(%rip)        # 753950 <cmpPassed>
   1b24d:	01 00 00 00 
   1b251:	e8 22 a6 fe ff       	callq  5878 <_storeDataFn>
   1b256:	4c 39 e7             	cmp    %r12,%rdi
   1b259:	74 2f                	je     1b28a <quotearg_free+0x6ea>
   1b25b:	50                   	push   %rax
   1b25c:	48 b8 30 7d 47 c5 00 	movabs $0xc5477d30,%rax
   1b263:	00 00 00 
   1b266:	48 89 05 d3 86 73 00 	mov    %rax,0x7386d3(%rip)        # 753940 <edgeId>
   1b26d:	58                   	pop    %rax
   1b26e:	e8 6d a5 fe ff       	callq  57e0 <_storeEdge>
    {
      free (sv[0].val);
   1b273:	e8 f8 65 fe ff       	callq  1870 <free@plt>
      slotvec0.size = sizeof slot0;
   1b278:	48 c7 05 ed 1d 21 00 	movq   $0x100,0x211ded(%rip)        # 22d070 <slotvec0>
   1b27f:	00 01 00 00 
      slotvec0.val = slot0;
   1b283:	4c 89 25 ee 1d 21 00 	mov    %r12,0x211dee(%rip)        # 22d078 <slotvec0+0x8>
   1b28a:	50                   	push   %rax
   1b28b:	48 b8 7d 47 c5 bd 00 	movabs $0xbdc5477d,%rax
   1b292:	00 00 00 
   1b295:	48 89 05 a4 86 73 00 	mov    %rax,0x7386a4(%rip)        # 753940 <edgeId>
   1b29c:	58                   	pop    %rax
   1b29d:	e8 3e a5 fe ff       	callq  57e0 <_storeEdge>
    }
  if (sv != &slotvec0)
   1b2a2:	48 8d 1d c7 1d 21 00 	lea    0x211dc7(%rip),%rbx        # 22d070 <slotvec0>
   1b2a9:	48 89 15 68 86 73 00 	mov    %rdx,0x738668(%rip)        # 753918 <tmpquadone>
   1b2b0:	48 89 0d 79 29 5e 00 	mov    %rcx,0x5e2979(%rip)        # 5fdc30 <tmpquadtwo>
   1b2b7:	48 8d 15 32 29 5e 00 	lea    0x5e2932(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b2be:	48 c7 02 94 0a 00 00 	movq   $0xa94,(%rdx)
   1b2c5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b2cc:	00 
   1b2cd:	48 89 d9             	mov    %rbx,%rcx
   1b2d0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b2d4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b2db:	00 
   1b2dc:	48 89 e9             	mov    %rbp,%rcx
   1b2df:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b2e3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b2ea:	00 
   1b2eb:	ff 32                	pushq  (%rdx)
   1b2ed:	48 8b 15 24 86 73 00 	mov    0x738624(%rip),%rdx        # 753918 <tmpquadone>
   1b2f4:	48 8b 0d 35 29 5e 00 	mov    0x5e2935(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b2fb:	48 c7 05 4a 86 73 00 	movq   $0x1,0x73864a(%rip)        # 753950 <cmpPassed>
   1b302:	01 00 00 00 
   1b306:	e8 6d a5 fe ff       	callq  5878 <_storeDataFn>
   1b30b:	48 39 dd             	cmp    %rbx,%rbp
   1b30e:	74 24                	je     1b334 <quotearg_free+0x794>
   1b310:	50                   	push   %rax
   1b311:	48 c7 c0 77 54 dc 2b 	mov    $0x2bdc5477,%rax
   1b318:	48 89 05 21 86 73 00 	mov    %rax,0x738621(%rip)        # 753940 <edgeId>
   1b31f:	58                   	pop    %rax
   1b320:	e8 bb a4 fe ff       	callq  57e0 <_storeEdge>
    {
      free (sv);
   1b325:	48 89 ef             	mov    %rbp,%rdi
   1b328:	e8 43 65 fe ff       	callq  1870 <free@plt>
      slotvec = &slotvec0;
   1b32d:	48 89 1d 2c 1d 21 00 	mov    %rbx,0x211d2c(%rip)        # 22d060 <slotvec>
   1b334:	50                   	push   %rax
   1b335:	48 b8 a8 b8 57 80 00 	movabs $0x8057b8a8,%rax
   1b33c:	00 00 00 
   1b33f:	48 89 05 fa 85 73 00 	mov    %rax,0x7385fa(%rip)        # 753940 <edgeId>
   1b346:	58                   	pop    %rax
   1b347:	e8 94 a4 fe ff       	callq  57e0 <_storeEdge>
    }
  nslots = 1;
}
   1b34c:	5b                   	pop    %rbx
  nslots = 1;
   1b34d:	c7 05 01 1d 21 00 01 	movl   $0x1,0x211d01(%rip)        # 22d058 <nslots>
   1b354:	00 00 00 
}
   1b357:	5d                   	pop    %rbp
   1b358:	41 5c                	pop    %r12
   1b35a:	c3                   	retq   
   1b35b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1b360:	50                   	push   %rax
   1b361:	48 c7 c0 2b c0 0e 21 	mov    $0x210ec02b,%rax
   1b368:	48 89 05 d1 85 73 00 	mov    %rax,0x7385d1(%rip)        # 753940 <edgeId>
   1b36f:	58                   	pop    %rax
   1b370:	e8 6b a4 fe ff       	callq  57e0 <_storeEdge>
    free (sv[i].val);
   1b375:	48 8b 3b             	mov    (%rbx),%rdi
   1b378:	48 8d 5d 28          	lea    0x28(%rbp),%rbx
   1b37c:	e8 ef 64 fe ff       	callq  1870 <free@plt>
   1b381:	e9 1c fc ff ff       	jmpq   1afa2 <quotearg_free+0x402>
   1b386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1b38d:	00 00 00 

000000000001b390 <quotearg_n>:
  }
}

char *
quotearg_n (int n, char const *arg)
{
   1b390:	41 57                	push   %r15
   1b392:	41 56                	push   %r14
   1b394:	41 55                	push   %r13
   1b396:	41 54                	push   %r12
   1b398:	49 89 f5             	mov    %rsi,%r13
   1b39b:	55                   	push   %rbp
   1b39c:	53                   	push   %rbx
   1b39d:	48 63 ef             	movslq %edi,%rbp
   1b3a0:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   1b3a4:	e8 e7 64 fe ff       	callq  1890 <__errno_location@plt>
  if (n < 0)
   1b3a9:	85 ed                	test   %ebp,%ebp
  int e = errno;
   1b3ab:	44 8b 30             	mov    (%rax),%r14d
  struct slotvec *sv = slotvec;
   1b3ae:	48 8b 1d ab 1c 21 00 	mov    0x211cab(%rip),%rbx        # 22d060 <slotvec>
  if (n < 0)
   1b3b5:	0f 88 f6 03 00 00    	js     1b7b1 <quotearg_n+0x421>
   1b3bb:	50                   	push   %rax
   1b3bc:	48 b8 f7 5d 78 8a 00 	movabs $0x8a785df7,%rax
   1b3c3:	00 00 00 
   1b3c6:	48 89 05 73 85 73 00 	mov    %rax,0x738573(%rip)        # 753940 <edgeId>
   1b3cd:	58                   	pop    %rax
   1b3ce:	e8 0d a4 fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1b3d3:	48 89 15 3e 85 73 00 	mov    %rdx,0x73853e(%rip)        # 753918 <tmpquadone>
   1b3da:	48 89 0d 4f 28 5e 00 	mov    %rcx,0x5e284f(%rip)        # 5fdc30 <tmpquadtwo>
   1b3e1:	48 8d 15 08 28 5e 00 	lea    0x5e2808(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b3e8:	48 c7 02 95 0a 00 00 	movq   $0xa95,(%rdx)
   1b3ef:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1b3f6:	00 
   1b3f7:	48 8b 0d 5a 1c 21 00 	mov    0x211c5a(%rip),%rcx        # 22d058 <nslots>
   1b3fe:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b402:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b409:	00 
   1b40a:	48 89 e9             	mov    %rbp,%rcx
   1b40d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b411:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b418:	00 
   1b419:	ff 32                	pushq  (%rdx)
   1b41b:	48 8b 15 f6 84 73 00 	mov    0x7384f6(%rip),%rdx        # 753918 <tmpquadone>
   1b422:	48 8b 0d 07 28 5e 00 	mov    0x5e2807(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b429:	48 c7 05 1c 85 73 00 	movq   $0x1,0x73851c(%rip)        # 753950 <cmpPassed>
   1b430:	01 00 00 00 
   1b434:	e8 3f a4 fe ff       	callq  5878 <_storeDataFn>
   1b439:	3b 2d 19 1c 21 00    	cmp    0x211c19(%rip),%ebp        # 22d058 <nslots>
   1b43f:	49 89 c4             	mov    %rax,%r12
   1b442:	0f 82 00 01 00 00    	jb     1b548 <quotearg_n+0x1b8>
   1b448:	50                   	push   %rax
   1b449:	48 c7 c0 df 85 a7 18 	mov    $0x18a785df,%rax
   1b450:	48 89 05 e9 84 73 00 	mov    %rax,0x7384e9(%rip)        # 753940 <edgeId>
   1b457:	58                   	pop    %rax
   1b458:	e8 83 a3 fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1b45d:	8d 55 01             	lea    0x1(%rbp),%edx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b460:	48 8d 05 09 1c 21 00 	lea    0x211c09(%rip),%rax        # 22d070 <slotvec0>
   1b467:	48 89 d6             	mov    %rdx,%rsi
      size_t n1 = n0 + 1;
   1b46a:	49 89 d7             	mov    %rdx,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b46d:	48 c1 e6 04          	shl    $0x4,%rsi
   1b471:	48 89 15 a0 84 73 00 	mov    %rdx,0x7384a0(%rip)        # 753918 <tmpquadone>
   1b478:	48 89 0d b1 27 5e 00 	mov    %rcx,0x5e27b1(%rip)        # 5fdc30 <tmpquadtwo>
   1b47f:	48 8d 15 6a 27 5e 00 	lea    0x5e276a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b486:	48 c7 02 96 0a 00 00 	movq   $0xa96,(%rdx)
   1b48d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b494:	00 
   1b495:	48 89 c1             	mov    %rax,%rcx
   1b498:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b49c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b4a3:	00 
   1b4a4:	48 89 d9             	mov    %rbx,%rcx
   1b4a7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b4ab:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b4b2:	00 
   1b4b3:	ff 32                	pushq  (%rdx)
   1b4b5:	48 8b 15 5c 84 73 00 	mov    0x73845c(%rip),%rdx        # 753918 <tmpquadone>
   1b4bc:	48 8b 0d 6d 27 5e 00 	mov    0x5e276d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b4c3:	48 c7 05 82 84 73 00 	movq   $0x1,0x738482(%rip)        # 753950 <cmpPassed>
   1b4ca:	01 00 00 00 
   1b4ce:	e8 a5 a3 fe ff       	callq  5878 <_storeDataFn>
   1b4d3:	48 39 c3             	cmp    %rax,%rbx
   1b4d6:	0f 84 94 02 00 00    	je     1b770 <quotearg_n+0x3e0>
   1b4dc:	50                   	push   %rax
   1b4dd:	48 b8 3c c5 e8 b1 00 	movabs $0xb1e8c53c,%rax
   1b4e4:	00 00 00 
   1b4e7:	48 89 05 52 84 73 00 	mov    %rax,0x738452(%rip)        # 753940 <edgeId>
   1b4ee:	58                   	pop    %rax
   1b4ef:	e8 ec a2 fe ff       	callq  57e0 <_storeEdge>
   1b4f4:	48 89 df             	mov    %rbx,%rdi
   1b4f7:	48 89 14 24          	mov    %rdx,(%rsp)
   1b4fb:	e8 00 84 00 00       	callq  23900 <xrealloc>
   1b500:	48 8b 14 24          	mov    (%rsp),%rdx
   1b504:	48 89 c3             	mov    %rax,%rbx
   1b507:	48 89 05 52 1b 21 00 	mov    %rax,0x211b52(%rip)        # 22d060 <slotvec>
   1b50e:	50                   	push   %rax
   1b50f:	48 b8 62 f4 58 f2 00 	movabs $0xf258f462,%rax
   1b516:	00 00 00 
   1b519:	48 89 05 20 84 73 00 	mov    %rax,0x738420(%rip)        # 753940 <edgeId>
   1b520:	58                   	pop    %rax
   1b521:	e8 ba a2 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1b526:	8b 3d 2c 1b 21 00    	mov    0x211b2c(%rip),%edi        # 22d058 <nslots>
   1b52c:	31 f6                	xor    %esi,%esi
   1b52e:	48 29 fa             	sub    %rdi,%rdx
   1b531:	48 c1 e7 04          	shl    $0x4,%rdi
   1b535:	48 c1 e2 04          	shl    $0x4,%rdx
   1b539:	48 01 df             	add    %rbx,%rdi
   1b53c:	e8 af 64 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1b541:	44 89 3d 10 1b 21 00 	mov    %r15d,0x211b10(%rip)        # 22d058 <nslots>
   1b548:	50                   	push   %rax
   1b549:	48 b8 ef 95 4e 9c 00 	movabs $0x9c4e95ef,%rax
   1b550:	00 00 00 
   1b553:	48 89 05 e6 83 73 00 	mov    %rax,0x7383e6(%rip)        # 753940 <edgeId>
   1b55a:	58                   	pop    %rax
   1b55b:	e8 80 a2 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b560:	44 8b 0d dd 25 5e 00 	mov    0x5e25dd(%rip),%r9d        # 5fdb44 <default_quoting_options+0x4>
    size_t size = sv[n].size;
   1b567:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b56b:	4c 8d 3d d6 25 5e 00 	lea    0x5e25d6(%rip),%r15        # 5fdb48 <default_quoting_options+0x8>
    size_t size = sv[n].size;
   1b572:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b575:	48 83 ec 08          	sub    $0x8,%rsp
   1b579:	44 8b 05 c0 25 5e 00 	mov    0x5e25c0(%rip),%r8d        # 5fdb40 <default_quoting_options>
    size_t size = sv[n].size;
   1b580:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1b583:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b587:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b58e:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b592:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b595:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b59a:	ff 35 d0 25 5e 00    	pushq  0x5e25d0(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1b5a0:	ff 35 c2 25 5e 00    	pushq  0x5e25c2(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1b5a6:	41 57                	push   %r15
   1b5a8:	4c 89 de             	mov    %r11,%rsi
   1b5ab:	48 89 ef             	mov    %rbp,%rdi
   1b5ae:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1b5b3:	e8 48 78 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1b5b8:	48 83 c4 20          	add    $0x20,%rsp
   1b5bc:	48 8b 0c 24          	mov    (%rsp),%rcx
   1b5c0:	48 89 15 51 83 73 00 	mov    %rdx,0x738351(%rip)        # 753918 <tmpquadone>
   1b5c7:	48 89 1d 62 26 5e 00 	mov    %rbx,0x5e2662(%rip)        # 5fdc30 <tmpquadtwo>
   1b5ce:	48 8d 15 1b 26 5e 00 	lea    0x5e261b(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b5d5:	48 c7 02 97 0a 00 00 	movq   $0xa97,(%rdx)
   1b5dc:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b5e3:	00 
   1b5e4:	48 89 c3             	mov    %rax,%rbx
   1b5e7:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1b5eb:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b5f2:	00 
   1b5f3:	48 89 cb             	mov    %rcx,%rbx
   1b5f6:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1b5fa:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b601:	00 
   1b602:	ff 32                	pushq  (%rdx)
   1b604:	48 8b 15 0d 83 73 00 	mov    0x73830d(%rip),%rdx        # 753918 <tmpquadone>
   1b60b:	48 8b 1d 1e 26 5e 00 	mov    0x5e261e(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1b612:	48 c7 05 33 83 73 00 	movq   $0x1,0x738333(%rip)        # 753950 <cmpPassed>
   1b619:	01 00 00 00 
   1b61d:	e8 56 a2 fe ff       	callq  5878 <_storeDataFn>
   1b622:	48 39 c1             	cmp    %rax,%rcx
   1b625:	0f 87 16 01 00 00    	ja     1b741 <quotearg_n+0x3b1>
   1b62b:	50                   	push   %rax
   1b62c:	48 b8 91 5e 08 c5 00 	movabs $0xc5085e91,%rax
   1b633:	00 00 00 
   1b636:	48 89 05 03 83 73 00 	mov    %rax,0x738303(%rip)        # 753940 <edgeId>
   1b63d:	58                   	pop    %rax
   1b63e:	e8 9d a1 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1b643:	48 8d 3d f6 23 5e 00 	lea    0x5e23f6(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1b64a:	48 8d 70 01          	lea    0x1(%rax),%rsi
        if (val != slot0)
   1b64e:	48 89 15 c3 82 73 00 	mov    %rdx,0x7382c3(%rip)        # 753918 <tmpquadone>
   1b655:	48 89 0d d4 25 5e 00 	mov    %rcx,0x5e25d4(%rip)        # 5fdc30 <tmpquadtwo>
   1b65c:	48 8d 15 8d 25 5e 00 	lea    0x5e258d(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b663:	48 c7 02 98 0a 00 00 	movq   $0xa98,(%rdx)
   1b66a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b671:	00 
   1b672:	48 89 f9             	mov    %rdi,%rcx
   1b675:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b679:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b680:	00 
   1b681:	48 89 e9             	mov    %rbp,%rcx
   1b684:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b688:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b68f:	00 
   1b690:	ff 32                	pushq  (%rdx)
   1b692:	48 8b 15 7f 82 73 00 	mov    0x73827f(%rip),%rdx        # 753918 <tmpquadone>
   1b699:	48 8b 0d 90 25 5e 00 	mov    0x5e2590(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b6a0:	48 c7 05 a5 82 73 00 	movq   $0x1,0x7382a5(%rip)        # 753950 <cmpPassed>
   1b6a7:	01 00 00 00 
   1b6ab:	e8 c8 a1 fe ff       	callq  5878 <_storeDataFn>
   1b6b0:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   1b6b3:	48 89 33             	mov    %rsi,(%rbx)
        if (val != slot0)
   1b6b6:	74 28                	je     1b6e0 <quotearg_n+0x350>
   1b6b8:	50                   	push   %rax
   1b6b9:	48 b8 0b a1 f8 b1 00 	movabs $0xb1f8a10b,%rax
   1b6c0:	00 00 00 
   1b6c3:	48 89 05 76 82 73 00 	mov    %rax,0x738276(%rip)        # 753940 <edgeId>
   1b6ca:	58                   	pop    %rax
   1b6cb:	e8 10 a1 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1b6d0:	48 89 ef             	mov    %rbp,%rdi
   1b6d3:	48 89 34 24          	mov    %rsi,(%rsp)
   1b6d7:	e8 94 61 fe ff       	callq  1870 <free@plt>
   1b6dc:	48 8b 34 24          	mov    (%rsp),%rsi
   1b6e0:	50                   	push   %rax
   1b6e1:	48 c7 c0 a1 f8 b1 3e 	mov    $0x3eb1f8a1,%rax
   1b6e8:	48 89 05 51 82 73 00 	mov    %rax,0x738251(%rip)        # 753940 <edgeId>
   1b6ef:	58                   	pop    %rax
   1b6f0:	e8 eb a0 fe ff       	callq  57e0 <_storeEdge>
   1b6f5:	48 89 f7             	mov    %rsi,%rdi
   1b6f8:	48 89 34 24          	mov    %rsi,(%rsp)
   1b6fc:	e8 7f 81 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1b701:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1b705:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1b709:	44 8b 05 30 24 5e 00 	mov    0x5e2430(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1b710:	ff 35 5a 24 5e 00    	pushq  0x5e245a(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1b716:	ff 35 4c 24 5e 00    	pushq  0x5e244c(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1b71c:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1b723:	41 57                	push   %r15
   1b725:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1b72a:	4c 89 ea             	mov    %r13,%rdx
   1b72d:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1b732:	48 89 c7             	mov    %rax,%rdi
   1b735:	48 89 c5             	mov    %rax,%rbp
   1b738:	e8 c3 76 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1b73d:	48 83 c4 20          	add    $0x20,%rsp
   1b741:	50                   	push   %rax
   1b742:	48 b8 10 60 9a a7 00 	movabs $0xa79a6010,%rax
   1b749:	00 00 00 
   1b74c:	48 89 05 ed 81 73 00 	mov    %rax,0x7381ed(%rip)        # 753940 <edgeId>
   1b753:	58                   	pop    %rax
   1b754:	e8 87 a0 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1b759:	45 89 34 24          	mov    %r14d,(%r12)
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
}
   1b75d:	48 83 c4 18          	add    $0x18,%rsp
   1b761:	48 89 e8             	mov    %rbp,%rax
   1b764:	5b                   	pop    %rbx
   1b765:	5d                   	pop    %rbp
   1b766:	41 5c                	pop    %r12
   1b768:	41 5d                	pop    %r13
   1b76a:	41 5e                	pop    %r14
   1b76c:	41 5f                	pop    %r15
   1b76e:	c3                   	retq   
   1b76f:	90                   	nop
   1b770:	50                   	push   %rax
   1b771:	48 b8 46 38 08 e0 00 	movabs $0xe0083846,%rax
   1b778:	00 00 00 
   1b77b:	48 89 05 be 81 73 00 	mov    %rax,0x7381be(%rip)        # 753940 <edgeId>
   1b782:	58                   	pop    %rax
   1b783:	e8 58 a0 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b788:	31 ff                	xor    %edi,%edi
   1b78a:	48 89 14 24          	mov    %rdx,(%rsp)
   1b78e:	e8 6d 81 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1b793:	66 0f 6f 05 d5 18 21 	movdqa 0x2118d5(%rip),%xmm0        # 22d070 <slotvec0>
   1b79a:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b79b:	48 89 c3             	mov    %rax,%rbx
   1b79e:	48 89 05 bb 18 21 00 	mov    %rax,0x2118bb(%rip)        # 22d060 <slotvec>
   1b7a5:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   1b7a9:	0f 11 00             	movups %xmm0,(%rax)
   1b7ac:	e9 5d fd ff ff       	jmpq   1b50e <quotearg_n+0x17e>
   1b7b1:	50                   	push   %rax
   1b7b2:	48 b8 00 d7 fb e9 00 	movabs $0xe9fbd700,%rax
   1b7b9:	00 00 00 
   1b7bc:	48 89 05 7d 81 73 00 	mov    %rax,0x73817d(%rip)        # 753940 <edgeId>
   1b7c3:	58                   	pop    %rax
   1b7c4:	e8 17 a0 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1b7c9:	e8 b2 60 fe ff       	callq  1880 <abort@plt>
   1b7ce:	66 90                	xchg   %ax,%ax

000000000001b7d0 <quotearg_n_mem>:

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
   1b7d0:	41 57                	push   %r15
   1b7d2:	41 56                	push   %r14
   1b7d4:	49 89 d6             	mov    %rdx,%r14
   1b7d7:	41 55                	push   %r13
   1b7d9:	41 54                	push   %r12
   1b7db:	49 89 f5             	mov    %rsi,%r13
   1b7de:	55                   	push   %rbp
   1b7df:	53                   	push   %rbx
   1b7e0:	48 63 ef             	movslq %edi,%rbp
   1b7e3:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   1b7e7:	e8 a4 60 fe ff       	callq  1890 <__errno_location@plt>
   1b7ec:	49 89 c4             	mov    %rax,%r12
   1b7ef:	8b 00                	mov    (%rax),%eax
  if (n < 0)
   1b7f1:	85 ed                	test   %ebp,%ebp
  struct slotvec *sv = slotvec;
   1b7f3:	48 8b 1d 66 18 21 00 	mov    0x211866(%rip),%rbx        # 22d060 <slotvec>
  int e = errno;
   1b7fa:	89 44 24 08          	mov    %eax,0x8(%rsp)
  if (n < 0)
   1b7fe:	0f 88 f5 03 00 00    	js     1bbf9 <quotearg_n_mem+0x429>
   1b804:	50                   	push   %rax
   1b805:	48 b8 45 9d a0 e3 00 	movabs $0xe3a09d45,%rax
   1b80c:	00 00 00 
   1b80f:	48 89 05 2a 81 73 00 	mov    %rax,0x73812a(%rip)        # 753940 <edgeId>
   1b816:	58                   	pop    %rax
   1b817:	e8 c4 9f fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1b81c:	48 89 15 f5 80 73 00 	mov    %rdx,0x7380f5(%rip)        # 753918 <tmpquadone>
   1b823:	48 89 0d 06 24 5e 00 	mov    %rcx,0x5e2406(%rip)        # 5fdc30 <tmpquadtwo>
   1b82a:	48 8d 15 bf 23 5e 00 	lea    0x5e23bf(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b831:	48 c7 02 99 0a 00 00 	movq   $0xa99,(%rdx)
   1b838:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1b83f:	00 
   1b840:	48 8b 0d 11 18 21 00 	mov    0x211811(%rip),%rcx        # 22d058 <nslots>
   1b847:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1b84b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b852:	00 
   1b853:	48 89 e9             	mov    %rbp,%rcx
   1b856:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1b85a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b861:	00 
   1b862:	ff 32                	pushq  (%rdx)
   1b864:	48 8b 15 ad 80 73 00 	mov    0x7380ad(%rip),%rdx        # 753918 <tmpquadone>
   1b86b:	48 8b 0d be 23 5e 00 	mov    0x5e23be(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1b872:	48 c7 05 d3 80 73 00 	movq   $0x1,0x7380d3(%rip)        # 753950 <cmpPassed>
   1b879:	01 00 00 00 
   1b87d:	e8 f6 9f fe ff       	callq  5878 <_storeDataFn>
   1b882:	3b 2d d0 17 21 00    	cmp    0x2117d0(%rip),%ebp        # 22d058 <nslots>
   1b888:	0f 82 00 01 00 00    	jb     1b98e <quotearg_n_mem+0x1be>
   1b88e:	50                   	push   %rax
   1b88f:	48 b8 a8 13 74 bc 00 	movabs $0xbc7413a8,%rax
   1b896:	00 00 00 
   1b899:	48 89 05 a0 80 73 00 	mov    %rax,0x7380a0(%rip)        # 753940 <edgeId>
   1b8a0:	58                   	pop    %rax
   1b8a1:	e8 3a 9f fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1b8a6:	8d 55 01             	lea    0x1(%rbp),%edx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b8a9:	48 8d 0d c0 17 21 00 	lea    0x2117c0(%rip),%rcx        # 22d070 <slotvec0>
   1b8b0:	48 89 d6             	mov    %rdx,%rsi
      size_t n1 = n0 + 1;
   1b8b3:	49 89 d7             	mov    %rdx,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1b8b6:	48 c1 e6 04          	shl    $0x4,%rsi
   1b8ba:	48 89 15 57 80 73 00 	mov    %rdx,0x738057(%rip)        # 753918 <tmpquadone>
   1b8c1:	48 89 05 68 23 5e 00 	mov    %rax,0x5e2368(%rip)        # 5fdc30 <tmpquadtwo>
   1b8c8:	48 8d 15 21 23 5e 00 	lea    0x5e2321(%rip),%rdx        # 5fdbf0 <funcinptr>
   1b8cf:	48 c7 02 9a 0a 00 00 	movq   $0xa9a,(%rdx)
   1b8d6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1b8dd:	00 
   1b8de:	48 89 c8             	mov    %rcx,%rax
   1b8e1:	48 89 42 10          	mov    %rax,0x10(%rdx)
   1b8e5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1b8ec:	00 
   1b8ed:	48 89 d8             	mov    %rbx,%rax
   1b8f0:	48 89 42 20          	mov    %rax,0x20(%rdx)
   1b8f4:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1b8fb:	00 
   1b8fc:	ff 32                	pushq  (%rdx)
   1b8fe:	48 8b 15 13 80 73 00 	mov    0x738013(%rip),%rdx        # 753918 <tmpquadone>
   1b905:	48 8b 05 24 23 5e 00 	mov    0x5e2324(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1b90c:	48 c7 05 39 80 73 00 	movq   $0x1,0x738039(%rip)        # 753950 <cmpPassed>
   1b913:	01 00 00 00 
   1b917:	e8 5c 9f fe ff       	callq  5878 <_storeDataFn>
   1b91c:	48 39 cb             	cmp    %rcx,%rbx
   1b91f:	0f 84 93 02 00 00    	je     1bbb8 <quotearg_n_mem+0x3e8>
   1b925:	50                   	push   %rax
   1b926:	48 b8 a0 e3 25 c8 00 	movabs $0xc825e3a0,%rax
   1b92d:	00 00 00 
   1b930:	48 89 05 09 80 73 00 	mov    %rax,0x738009(%rip)        # 753940 <edgeId>
   1b937:	58                   	pop    %rax
   1b938:	e8 a3 9e fe ff       	callq  57e0 <_storeEdge>
   1b93d:	48 89 df             	mov    %rbx,%rdi
   1b940:	48 89 14 24          	mov    %rdx,(%rsp)
   1b944:	e8 b7 7f 00 00       	callq  23900 <xrealloc>
   1b949:	48 8b 14 24          	mov    (%rsp),%rdx
   1b94d:	48 89 c3             	mov    %rax,%rbx
   1b950:	48 89 05 09 17 21 00 	mov    %rax,0x211709(%rip)        # 22d060 <slotvec>
   1b957:	50                   	push   %rax
   1b958:	48 c7 c0 f1 12 e4 19 	mov    $0x19e412f1,%rax
   1b95f:	48 89 05 da 7f 73 00 	mov    %rax,0x737fda(%rip)        # 753940 <edgeId>
   1b966:	58                   	pop    %rax
   1b967:	e8 74 9e fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1b96c:	8b 3d e6 16 21 00    	mov    0x2116e6(%rip),%edi        # 22d058 <nslots>
   1b972:	31 f6                	xor    %esi,%esi
   1b974:	48 29 fa             	sub    %rdi,%rdx
   1b977:	48 c1 e7 04          	shl    $0x4,%rdi
   1b97b:	48 c1 e2 04          	shl    $0x4,%rdx
   1b97f:	48 01 df             	add    %rbx,%rdi
   1b982:	e8 69 60 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1b987:	44 89 3d ca 16 21 00 	mov    %r15d,0x2116ca(%rip)        # 22d058 <nslots>
   1b98e:	50                   	push   %rax
   1b98f:	48 b8 68 5a 49 a6 00 	movabs $0xa6495a68,%rax
   1b996:	00 00 00 
   1b999:	48 89 05 a0 7f 73 00 	mov    %rax,0x737fa0(%rip)        # 753940 <edgeId>
   1b9a0:	58                   	pop    %rax
   1b9a1:	e8 3a 9e fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b9a6:	44 8b 0d 97 21 5e 00 	mov    0x5e2197(%rip),%r9d        # 5fdb44 <default_quoting_options+0x4>
    size_t size = sv[n].size;
   1b9ad:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b9b1:	4c 8d 3d 90 21 5e 00 	lea    0x5e2190(%rip),%r15        # 5fdb48 <default_quoting_options+0x8>
    size_t size = sv[n].size;
   1b9b8:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b9bb:	48 83 ec 08          	sub    $0x8,%rsp
   1b9bf:	44 8b 05 7a 21 5e 00 	mov    0x5e217a(%rip),%r8d        # 5fdb40 <default_quoting_options>
    size_t size = sv[n].size;
   1b9c6:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1b9c9:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b9cd:	4c 89 f1             	mov    %r14,%rcx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b9d0:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b9d4:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1b9d7:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1b9dc:	ff 35 8e 21 5e 00    	pushq  0x5e218e(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1b9e2:	ff 35 80 21 5e 00    	pushq  0x5e2180(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1b9e8:	41 57                	push   %r15
   1b9ea:	4c 89 de             	mov    %r11,%rsi
   1b9ed:	48 89 ef             	mov    %rbp,%rdi
   1b9f0:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1b9f5:	e8 06 74 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1b9fa:	48 83 c4 20          	add    $0x20,%rsp
   1b9fe:	48 8b 34 24          	mov    (%rsp),%rsi
   1ba02:	48 89 15 0f 7f 73 00 	mov    %rdx,0x737f0f(%rip)        # 753918 <tmpquadone>
   1ba09:	48 89 0d 20 22 5e 00 	mov    %rcx,0x5e2220(%rip)        # 5fdc30 <tmpquadtwo>
   1ba10:	48 8d 15 d9 21 5e 00 	lea    0x5e21d9(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ba17:	48 c7 02 9b 0a 00 00 	movq   $0xa9b,(%rdx)
   1ba1e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1ba25:	00 
   1ba26:	48 89 c1             	mov    %rax,%rcx
   1ba29:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ba2d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ba34:	00 
   1ba35:	48 89 f1             	mov    %rsi,%rcx
   1ba38:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1ba3c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ba43:	00 
   1ba44:	ff 32                	pushq  (%rdx)
   1ba46:	48 8b 15 cb 7e 73 00 	mov    0x737ecb(%rip),%rdx        # 753918 <tmpquadone>
   1ba4d:	48 8b 0d dc 21 5e 00 	mov    0x5e21dc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ba54:	48 c7 05 f1 7e 73 00 	movq   $0x1,0x737ef1(%rip)        # 753950 <cmpPassed>
   1ba5b:	01 00 00 00 
   1ba5f:	e8 14 9e fe ff       	callq  5878 <_storeDataFn>
   1ba64:	48 39 c6             	cmp    %rax,%rsi
   1ba67:	0f 87 12 01 00 00    	ja     1bb7f <quotearg_n_mem+0x3af>
   1ba6d:	50                   	push   %rax
   1ba6e:	48 c7 c0 a6 48 de 61 	mov    $0x61de48a6,%rax
   1ba75:	48 89 05 c4 7e 73 00 	mov    %rax,0x737ec4(%rip)        # 753940 <edgeId>
   1ba7c:	58                   	pop    %rax
   1ba7d:	e8 5e 9d fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1ba82:	48 8d 3d b7 1f 5e 00 	lea    0x5e1fb7(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1ba89:	4c 8d 40 01          	lea    0x1(%rax),%r8
        if (val != slot0)
   1ba8d:	48 89 15 84 7e 73 00 	mov    %rdx,0x737e84(%rip)        # 753918 <tmpquadone>
   1ba94:	48 89 0d 95 21 5e 00 	mov    %rcx,0x5e2195(%rip)        # 5fdc30 <tmpquadtwo>
   1ba9b:	48 8d 15 4e 21 5e 00 	lea    0x5e214e(%rip),%rdx        # 5fdbf0 <funcinptr>
   1baa2:	48 c7 02 9c 0a 00 00 	movq   $0xa9c,(%rdx)
   1baa9:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1bab0:	00 
   1bab1:	48 89 f9             	mov    %rdi,%rcx
   1bab4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1bab8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1babf:	00 
   1bac0:	48 89 e9             	mov    %rbp,%rcx
   1bac3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1bac7:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1bace:	00 
   1bacf:	ff 32                	pushq  (%rdx)
   1bad1:	48 8b 15 40 7e 73 00 	mov    0x737e40(%rip),%rdx        # 753918 <tmpquadone>
   1bad8:	48 8b 0d 51 21 5e 00 	mov    0x5e2151(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1badf:	48 c7 05 66 7e 73 00 	movq   $0x1,0x737e66(%rip)        # 753950 <cmpPassed>
   1bae6:	01 00 00 00 
   1baea:	e8 89 9d fe ff       	callq  5878 <_storeDataFn>
   1baef:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   1baf2:	4c 89 03             	mov    %r8,(%rbx)
        if (val != slot0)
   1baf5:	74 28                	je     1bb1f <quotearg_n_mem+0x34f>
   1baf7:	50                   	push   %rax
   1baf8:	48 b8 c9 3b 6c d1 00 	movabs $0xd16c3bc9,%rax
   1baff:	00 00 00 
   1bb02:	48 89 05 37 7e 73 00 	mov    %rax,0x737e37(%rip)        # 753940 <edgeId>
   1bb09:	58                   	pop    %rax
   1bb0a:	e8 d1 9c fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1bb0f:	48 89 ef             	mov    %rbp,%rdi
   1bb12:	4c 89 04 24          	mov    %r8,(%rsp)
   1bb16:	e8 55 5d fe ff       	callq  1870 <free@plt>
   1bb1b:	4c 8b 04 24          	mov    (%rsp),%r8
   1bb1f:	50                   	push   %rax
   1bb20:	48 b8 3b 6c d1 e6 00 	movabs $0xe6d16c3b,%rax
   1bb27:	00 00 00 
   1bb2a:	48 89 05 0f 7e 73 00 	mov    %rax,0x737e0f(%rip)        # 753940 <edgeId>
   1bb31:	58                   	pop    %rax
   1bb32:	e8 a9 9c fe ff       	callq  57e0 <_storeEdge>
   1bb37:	4c 89 c7             	mov    %r8,%rdi
   1bb3a:	4c 89 04 24          	mov    %r8,(%rsp)
   1bb3e:	e8 3d 7d 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1bb43:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1bb47:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1bb4b:	44 8b 05 ee 1f 5e 00 	mov    0x5e1fee(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1bb52:	ff 35 18 20 5e 00    	pushq  0x5e2018(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1bb58:	ff 35 0a 20 5e 00    	pushq  0x5e200a(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1bb5e:	4c 89 f1             	mov    %r14,%rcx
   1bb61:	41 57                	push   %r15
   1bb63:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1bb68:	4c 89 ea             	mov    %r13,%rdx
   1bb6b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1bb70:	48 89 c7             	mov    %rax,%rdi
   1bb73:	48 89 c5             	mov    %rax,%rbp
   1bb76:	e8 85 72 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1bb7b:	48 83 c4 20          	add    $0x20,%rsp
   1bb7f:	50                   	push   %rax
   1bb80:	48 b8 95 a8 11 98 00 	movabs $0x9811a895,%rax
   1bb87:	00 00 00 
   1bb8a:	48 89 05 af 7d 73 00 	mov    %rax,0x737daf(%rip)        # 753940 <edgeId>
   1bb91:	58                   	pop    %rax
   1bb92:	e8 49 9c fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1bb97:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
}
   1bb9c:	48 89 e8             	mov    %rbp,%rax
    errno = e;
   1bb9f:	45 89 14 24          	mov    %r10d,(%r12)
}
   1bba3:	48 83 c4 18          	add    $0x18,%rsp
   1bba7:	5b                   	pop    %rbx
   1bba8:	5d                   	pop    %rbp
   1bba9:	41 5c                	pop    %r12
   1bbab:	41 5d                	pop    %r13
   1bbad:	41 5e                	pop    %r14
   1bbaf:	41 5f                	pop    %r15
   1bbb1:	c3                   	retq   
   1bbb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1bbb8:	50                   	push   %rax
   1bbb9:	48 b8 77 02 6f ca 00 	movabs $0xca6f0277,%rax
   1bbc0:	00 00 00 
   1bbc3:	48 89 05 76 7d 73 00 	mov    %rax,0x737d76(%rip)        # 753940 <edgeId>
   1bbca:	58                   	pop    %rax
   1bbcb:	e8 10 9c fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bbd0:	31 ff                	xor    %edi,%edi
   1bbd2:	48 89 14 24          	mov    %rdx,(%rsp)
   1bbd6:	e8 25 7d 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1bbdb:	66 0f 6f 05 8d 14 21 	movdqa 0x21148d(%rip),%xmm0        # 22d070 <slotvec0>
   1bbe2:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bbe3:	48 89 c3             	mov    %rax,%rbx
   1bbe6:	48 89 05 73 14 21 00 	mov    %rax,0x211473(%rip)        # 22d060 <slotvec>
   1bbed:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   1bbf1:	0f 11 00             	movups %xmm0,(%rax)
   1bbf4:	e9 5e fd ff ff       	jmpq   1b957 <quotearg_n_mem+0x187>
   1bbf9:	50                   	push   %rax
   1bbfa:	48 b8 53 9e 90 cb 00 	movabs $0xcb909e53,%rax
   1bc01:	00 00 00 
   1bc04:	48 89 05 35 7d 73 00 	mov    %rax,0x737d35(%rip)        # 753940 <edgeId>
   1bc0b:	58                   	pop    %rax
   1bc0c:	e8 cf 9b fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1bc11:	e8 6a 5c fe ff       	callq  1880 <abort@plt>
   1bc16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1bc1d:	00 00 00 

000000000001bc20 <quotearg>:

char *
quotearg (char const *arg)
{
   1bc20:	41 57                	push   %r15
   1bc22:	41 56                	push   %r14
   1bc24:	41 55                	push   %r13
   1bc26:	41 54                	push   %r12
   1bc28:	49 89 fd             	mov    %rdi,%r13
   1bc2b:	55                   	push   %rbp
   1bc2c:	53                   	push   %rbx
   1bc2d:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   1bc31:	e8 5a 5c fe ff       	callq  1890 <__errno_location@plt>
   1bc36:	49 89 c4             	mov    %rax,%r12
   1bc39:	44 8b 38             	mov    (%rax),%r15d
  if (nslots <= n0)
   1bc3c:	8b 05 16 14 21 00    	mov    0x211416(%rip),%eax        # 22d058 <nslots>
  struct slotvec *sv = slotvec;
   1bc42:	48 8b 1d 17 14 21 00 	mov    0x211417(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1bc49:	85 c0                	test   %eax,%eax
   1bc4b:	0f 85 f8 00 00 00    	jne    1bd49 <quotearg+0x129>
   1bc51:	50                   	push   %rax
   1bc52:	48 b8 a6 ab fe a0 00 	movabs $0xa0feaba6,%rax
   1bc59:	00 00 00 
   1bc5c:	48 89 05 dd 7c 73 00 	mov    %rax,0x737cdd(%rip)        # 753940 <edgeId>
   1bc63:	58                   	pop    %rax
   1bc64:	e8 77 9b fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bc69:	48 8d 15 00 14 21 00 	lea    0x211400(%rip),%rdx        # 22d070 <slotvec0>
   1bc70:	48 89 0d a1 7c 73 00 	mov    %rcx,0x737ca1(%rip)        # 753918 <tmpquadone>
   1bc77:	48 89 05 b2 1f 5e 00 	mov    %rax,0x5e1fb2(%rip)        # 5fdc30 <tmpquadtwo>
   1bc7e:	48 8d 0d 6b 1f 5e 00 	lea    0x5e1f6b(%rip),%rcx        # 5fdbf0 <funcinptr>
   1bc85:	48 c7 01 9d 0a 00 00 	movq   $0xa9d,(%rcx)
   1bc8c:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1bc93:	00 
   1bc94:	48 89 d0             	mov    %rdx,%rax
   1bc97:	48 89 41 10          	mov    %rax,0x10(%rcx)
   1bc9b:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1bca2:	00 
   1bca3:	48 89 d8             	mov    %rbx,%rax
   1bca6:	48 89 41 20          	mov    %rax,0x20(%rcx)
   1bcaa:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1bcb1:	00 
   1bcb2:	ff 31                	pushq  (%rcx)
   1bcb4:	48 8b 0d 5d 7c 73 00 	mov    0x737c5d(%rip),%rcx        # 753918 <tmpquadone>
   1bcbb:	48 8b 05 6e 1f 5e 00 	mov    0x5e1f6e(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1bcc2:	48 c7 05 83 7c 73 00 	movq   $0x1,0x737c83(%rip)        # 753950 <cmpPassed>
   1bcc9:	01 00 00 00 
   1bccd:	e8 a6 9b fe ff       	callq  5878 <_storeDataFn>
   1bcd2:	48 39 d3             	cmp    %rdx,%rbx
   1bcd5:	0f 84 95 02 00 00    	je     1bf70 <quotearg+0x350>
   1bcdb:	50                   	push   %rax
   1bcdc:	48 b8 ae fa 83 e6 00 	movabs $0xe683faae,%rax
   1bce3:	00 00 00 
   1bce6:	48 89 05 53 7c 73 00 	mov    %rax,0x737c53(%rip)        # 753940 <edgeId>
   1bced:	58                   	pop    %rax
   1bcee:	e8 ed 9a fe ff       	callq  57e0 <_storeEdge>
   1bcf3:	48 89 df             	mov    %rbx,%rdi
   1bcf6:	be 10 00 00 00       	mov    $0x10,%esi
   1bcfb:	e8 00 7c 00 00       	callq  23900 <xrealloc>
   1bd00:	48 89 c3             	mov    %rax,%rbx
   1bd03:	48 89 05 56 13 21 00 	mov    %rax,0x211356(%rip)        # 22d060 <slotvec>
   1bd0a:	50                   	push   %rax
   1bd0b:	48 c7 c0 fa 83 e6 29 	mov    $0x29e683fa,%rax
   1bd12:	48 89 05 27 7c 73 00 	mov    %rax,0x737c27(%rip)        # 753940 <edgeId>
   1bd19:	58                   	pop    %rax
   1bd1a:	e8 c1 9a fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1bd1f:	8b 3d 33 13 21 00    	mov    0x211333(%rip),%edi        # 22d058 <nslots>
   1bd25:	ba 01 00 00 00       	mov    $0x1,%edx
   1bd2a:	31 f6                	xor    %esi,%esi
   1bd2c:	48 29 fa             	sub    %rdi,%rdx
   1bd2f:	48 c1 e7 04          	shl    $0x4,%rdi
   1bd33:	48 c1 e2 04          	shl    $0x4,%rdx
   1bd37:	48 01 df             	add    %rbx,%rdi
   1bd3a:	e8 b1 5c fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1bd3f:	c7 05 0f 13 21 00 01 	movl   $0x1,0x21130f(%rip)        # 22d058 <nslots>
   1bd46:	00 00 00 
   1bd49:	50                   	push   %rax
   1bd4a:	48 b8 f1 c7 a0 e3 00 	movabs $0xe3a0c7f1,%rax
   1bd51:	00 00 00 
   1bd54:	48 89 05 e5 7b 73 00 	mov    %rax,0x737be5(%rip)        # 753940 <edgeId>
   1bd5b:	58                   	pop    %rax
   1bd5c:	e8 7f 9a fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1bd61:	44 8b 0d dc 1d 5e 00 	mov    0x5e1ddc(%rip),%r9d        # 5fdb44 <default_quoting_options+0x4>
    size_t size = sv[n].size;
   1bd68:	4c 8b 1b             	mov    (%rbx),%r11
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1bd6b:	4c 8d 35 d6 1d 5e 00 	lea    0x5e1dd6(%rip),%r14        # 5fdb48 <default_quoting_options+0x8>
    char *val = sv[n].val;
   1bd72:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1bd76:	48 83 ec 08          	sub    $0x8,%rsp
   1bd7a:	44 8b 05 bf 1d 5e 00 	mov    0x5e1dbf(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1bd81:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1bd88:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1bd8b:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1bd8f:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1bd92:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1bd97:	ff 35 d3 1d 5e 00    	pushq  0x5e1dd3(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1bd9d:	48 89 ef             	mov    %rbp,%rdi
   1bda0:	ff 35 c2 1d 5e 00    	pushq  0x5e1dc2(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1bda6:	41 56                	push   %r14
   1bda8:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1bdad:	e8 4e 70 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1bdb2:	48 83 c4 20          	add    $0x20,%rsp
   1bdb6:	48 8b 0c 24          	mov    (%rsp),%rcx
   1bdba:	48 89 15 57 7b 73 00 	mov    %rdx,0x737b57(%rip)        # 753918 <tmpquadone>
   1bdc1:	48 89 1d 68 1e 5e 00 	mov    %rbx,0x5e1e68(%rip)        # 5fdc30 <tmpquadtwo>
   1bdc8:	48 8d 15 21 1e 5e 00 	lea    0x5e1e21(%rip),%rdx        # 5fdbf0 <funcinptr>
   1bdcf:	48 c7 02 9e 0a 00 00 	movq   $0xa9e,(%rdx)
   1bdd6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1bddd:	00 
   1bdde:	48 89 c3             	mov    %rax,%rbx
   1bde1:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1bde5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1bdec:	00 
   1bded:	48 89 cb             	mov    %rcx,%rbx
   1bdf0:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1bdf4:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1bdfb:	00 
   1bdfc:	ff 32                	pushq  (%rdx)
   1bdfe:	48 8b 15 13 7b 73 00 	mov    0x737b13(%rip),%rdx        # 753918 <tmpquadone>
   1be05:	48 8b 1d 24 1e 5e 00 	mov    0x5e1e24(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1be0c:	48 c7 05 39 7b 73 00 	movq   $0x1,0x737b39(%rip)        # 753950 <cmpPassed>
   1be13:	01 00 00 00 
   1be17:	e8 5c 9a fe ff       	callq  5878 <_storeDataFn>
   1be1c:	48 39 c1             	cmp    %rax,%rcx
   1be1f:	0f 87 16 01 00 00    	ja     1bf3b <quotearg+0x31b>
   1be25:	50                   	push   %rax
   1be26:	48 b8 6a 02 e7 ab 00 	movabs $0xabe7026a,%rax
   1be2d:	00 00 00 
   1be30:	48 89 05 09 7b 73 00 	mov    %rax,0x737b09(%rip)        # 753940 <edgeId>
   1be37:	58                   	pop    %rax
   1be38:	e8 a3 99 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1be3d:	48 8d 3d fc 1b 5e 00 	lea    0x5e1bfc(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1be44:	48 8d 70 01          	lea    0x1(%rax),%rsi
        if (val != slot0)
   1be48:	48 89 15 c9 7a 73 00 	mov    %rdx,0x737ac9(%rip)        # 753918 <tmpquadone>
   1be4f:	48 89 0d da 1d 5e 00 	mov    %rcx,0x5e1dda(%rip)        # 5fdc30 <tmpquadtwo>
   1be56:	48 8d 15 93 1d 5e 00 	lea    0x5e1d93(%rip),%rdx        # 5fdbf0 <funcinptr>
   1be5d:	48 c7 02 9f 0a 00 00 	movq   $0xa9f,(%rdx)
   1be64:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1be6b:	00 
   1be6c:	48 89 f9             	mov    %rdi,%rcx
   1be6f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1be73:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1be7a:	00 
   1be7b:	48 89 e9             	mov    %rbp,%rcx
   1be7e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1be82:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1be89:	00 
   1be8a:	ff 32                	pushq  (%rdx)
   1be8c:	48 8b 15 85 7a 73 00 	mov    0x737a85(%rip),%rdx        # 753918 <tmpquadone>
   1be93:	48 8b 0d 96 1d 5e 00 	mov    0x5e1d96(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1be9a:	48 c7 05 ab 7a 73 00 	movq   $0x1,0x737aab(%rip)        # 753950 <cmpPassed>
   1bea1:	01 00 00 00 
   1bea5:	e8 ce 99 fe ff       	callq  5878 <_storeDataFn>
   1beaa:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   1bead:	48 89 33             	mov    %rsi,(%rbx)
        if (val != slot0)
   1beb0:	74 28                	je     1beda <quotearg+0x2ba>
   1beb2:	50                   	push   %rax
   1beb3:	48 b8 e0 7c 95 e2 00 	movabs $0xe2957ce0,%rax
   1beba:	00 00 00 
   1bebd:	48 89 05 7c 7a 73 00 	mov    %rax,0x737a7c(%rip)        # 753940 <edgeId>
   1bec4:	58                   	pop    %rax
   1bec5:	e8 16 99 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1beca:	48 89 ef             	mov    %rbp,%rdi
   1becd:	48 89 34 24          	mov    %rsi,(%rsp)
   1bed1:	e8 9a 59 fe ff       	callq  1870 <free@plt>
   1bed6:	48 8b 34 24          	mov    (%rsp),%rsi
   1beda:	50                   	push   %rax
   1bedb:	48 c7 c0 7c 95 e2 52 	mov    $0x52e2957c,%rax
   1bee2:	48 89 05 57 7a 73 00 	mov    %rax,0x737a57(%rip)        # 753940 <edgeId>
   1bee9:	58                   	pop    %rax
   1beea:	e8 f1 98 fe ff       	callq  57e0 <_storeEdge>
   1beef:	48 89 f7             	mov    %rsi,%rdi
   1bef2:	48 89 34 24          	mov    %rsi,(%rsp)
   1bef6:	e8 85 79 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1befb:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1beff:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1bf03:	44 8b 05 36 1c 5e 00 	mov    0x5e1c36(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1bf0a:	ff 35 60 1c 5e 00    	pushq  0x5e1c60(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1bf10:	ff 35 52 1c 5e 00    	pushq  0x5e1c52(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1bf16:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1bf1d:	41 56                	push   %r14
   1bf1f:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1bf24:	4c 89 ea             	mov    %r13,%rdx
   1bf27:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1bf2c:	48 89 c7             	mov    %rax,%rdi
   1bf2f:	48 89 c5             	mov    %rax,%rbp
   1bf32:	e8 c9 6e ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1bf37:	48 83 c4 20          	add    $0x20,%rsp
   1bf3b:	50                   	push   %rax
   1bf3c:	48 c7 c0 f7 d1 7d 7c 	mov    $0x7c7dd1f7,%rax
   1bf43:	48 89 05 f6 79 73 00 	mov    %rax,0x7379f6(%rip)        # 753940 <edgeId>
   1bf4a:	58                   	pop    %rax
   1bf4b:	e8 90 98 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1bf50:	45 89 3c 24          	mov    %r15d,(%r12)
  return quotearg_n (0, arg);
}
   1bf54:	48 83 c4 18          	add    $0x18,%rsp
   1bf58:	48 89 e8             	mov    %rbp,%rax
   1bf5b:	5b                   	pop    %rbx
   1bf5c:	5d                   	pop    %rbp
   1bf5d:	41 5c                	pop    %r12
   1bf5f:	41 5d                	pop    %r13
   1bf61:	41 5e                	pop    %r14
   1bf63:	41 5f                	pop    %r15
   1bf65:	c3                   	retq   
   1bf66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1bf6d:	00 00 00 
   1bf70:	50                   	push   %rax
   1bf71:	48 c7 c0 92 c2 b4 1b 	mov    $0x1bb4c292,%rax
   1bf78:	48 89 05 c1 79 73 00 	mov    %rax,0x7379c1(%rip)        # 753940 <edgeId>
   1bf7f:	58                   	pop    %rax
   1bf80:	e8 5b 98 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bf85:	be 10 00 00 00       	mov    $0x10,%esi
   1bf8a:	31 ff                	xor    %edi,%edi
   1bf8c:	e8 6f 79 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1bf91:	66 0f 6f 05 d7 10 21 	movdqa 0x2110d7(%rip),%xmm0        # 22d070 <slotvec0>
   1bf98:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bf99:	48 89 c3             	mov    %rax,%rbx
   1bf9c:	48 89 05 bd 10 21 00 	mov    %rax,0x2110bd(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1bfa3:	0f 11 00             	movups %xmm0,(%rax)
   1bfa6:	e9 5f fd ff ff       	jmpq   1bd0a <quotearg+0xea>
   1bfab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001bfb0 <quotearg_mem>:

char *
quotearg_mem (char const *arg, size_t argsize)
{
   1bfb0:	41 57                	push   %r15
   1bfb2:	41 56                	push   %r14
   1bfb4:	49 89 f6             	mov    %rsi,%r14
   1bfb7:	41 55                	push   %r13
   1bfb9:	41 54                	push   %r12
   1bfbb:	49 89 fd             	mov    %rdi,%r13
   1bfbe:	55                   	push   %rbp
   1bfbf:	53                   	push   %rbx
   1bfc0:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   1bfc4:	e8 c7 58 fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   1bfc9:	8b 15 89 10 21 00    	mov    0x211089(%rip),%edx        # 22d058 <nslots>
  int e = errno;
   1bfcf:	49 89 c4             	mov    %rax,%r12
   1bfd2:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   1bfd4:	48 8b 1d 85 10 21 00 	mov    0x211085(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1bfdb:	85 d2                	test   %edx,%edx
  int e = errno;
   1bfdd:	89 44 24 08          	mov    %eax,0x8(%rsp)
  if (nslots <= n0)
   1bfe1:	0f 85 fb 00 00 00    	jne    1c0e2 <quotearg_mem+0x132>
   1bfe7:	50                   	push   %rax
   1bfe8:	48 b8 5c 8a 82 a3 00 	movabs $0xa3828a5c,%rax
   1bfef:	00 00 00 
   1bff2:	48 89 05 47 79 73 00 	mov    %rax,0x737947(%rip)        # 753940 <edgeId>
   1bff9:	58                   	pop    %rax
   1bffa:	e8 e1 97 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1bfff:	48 8d 0d 6a 10 21 00 	lea    0x21106a(%rip),%rcx        # 22d070 <slotvec0>
   1c006:	48 89 15 0b 79 73 00 	mov    %rdx,0x73790b(%rip)        # 753918 <tmpquadone>
   1c00d:	48 89 05 1c 1c 5e 00 	mov    %rax,0x5e1c1c(%rip)        # 5fdc30 <tmpquadtwo>
   1c014:	48 8d 15 d5 1b 5e 00 	lea    0x5e1bd5(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c01b:	48 c7 02 a0 0a 00 00 	movq   $0xaa0,(%rdx)
   1c022:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c029:	00 
   1c02a:	48 89 c8             	mov    %rcx,%rax
   1c02d:	48 89 42 10          	mov    %rax,0x10(%rdx)
   1c031:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c038:	00 
   1c039:	48 89 d8             	mov    %rbx,%rax
   1c03c:	48 89 42 20          	mov    %rax,0x20(%rdx)
   1c040:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c047:	00 
   1c048:	ff 32                	pushq  (%rdx)
   1c04a:	48 8b 15 c7 78 73 00 	mov    0x7378c7(%rip),%rdx        # 753918 <tmpquadone>
   1c051:	48 8b 05 d8 1b 5e 00 	mov    0x5e1bd8(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1c058:	48 c7 05 ed 78 73 00 	movq   $0x1,0x7378ed(%rip)        # 753950 <cmpPassed>
   1c05f:	01 00 00 00 
   1c063:	e8 10 98 fe ff       	callq  5878 <_storeDataFn>
   1c068:	48 39 cb             	cmp    %rcx,%rbx
   1c06b:	0f 84 8f 02 00 00    	je     1c300 <quotearg_mem+0x350>
   1c071:	50                   	push   %rax
   1c072:	48 b8 29 0a 8e d6 00 	movabs $0xd68e0a29,%rax
   1c079:	00 00 00 
   1c07c:	48 89 05 bd 78 73 00 	mov    %rax,0x7378bd(%rip)        # 753940 <edgeId>
   1c083:	58                   	pop    %rax
   1c084:	e8 57 97 fe ff       	callq  57e0 <_storeEdge>
   1c089:	48 89 df             	mov    %rbx,%rdi
   1c08c:	be 10 00 00 00       	mov    $0x10,%esi
   1c091:	e8 6a 78 00 00       	callq  23900 <xrealloc>
   1c096:	48 89 c3             	mov    %rax,%rbx
   1c099:	48 89 05 c0 0f 21 00 	mov    %rax,0x210fc0(%rip)        # 22d060 <slotvec>
   1c0a0:	50                   	push   %rax
   1c0a1:	48 b8 0a 8e d6 f3 00 	movabs $0xf3d68e0a,%rax
   1c0a8:	00 00 00 
   1c0ab:	48 89 05 8e 78 73 00 	mov    %rax,0x73788e(%rip)        # 753940 <edgeId>
   1c0b2:	58                   	pop    %rax
   1c0b3:	e8 28 97 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1c0b8:	8b 3d 9a 0f 21 00    	mov    0x210f9a(%rip),%edi        # 22d058 <nslots>
   1c0be:	ba 01 00 00 00       	mov    $0x1,%edx
   1c0c3:	31 f6                	xor    %esi,%esi
   1c0c5:	48 29 fa             	sub    %rdi,%rdx
   1c0c8:	48 c1 e7 04          	shl    $0x4,%rdi
   1c0cc:	48 c1 e2 04          	shl    $0x4,%rdx
   1c0d0:	48 01 df             	add    %rbx,%rdi
   1c0d3:	e8 18 59 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1c0d8:	c7 05 76 0f 21 00 01 	movl   $0x1,0x210f76(%rip)        # 22d058 <nslots>
   1c0df:	00 00 00 
   1c0e2:	50                   	push   %rax
   1c0e3:	48 c7 c0 9f a4 e7 29 	mov    $0x29e7a49f,%rax
   1c0ea:	48 89 05 4f 78 73 00 	mov    %rax,0x73784f(%rip)        # 753940 <edgeId>
   1c0f1:	58                   	pop    %rax
   1c0f2:	e8 e9 96 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1c0f7:	44 8b 0d 46 1a 5e 00 	mov    0x5e1a46(%rip),%r9d        # 5fdb44 <default_quoting_options+0x4>
    size_t size = sv[n].size;
   1c0fe:	4c 8b 1b             	mov    (%rbx),%r11
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c101:	4c 8d 3d 40 1a 5e 00 	lea    0x5e1a40(%rip),%r15        # 5fdb48 <default_quoting_options+0x8>
    char *val = sv[n].val;
   1c108:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c10c:	48 83 ec 08          	sub    $0x8,%rsp
   1c110:	44 8b 05 29 1a 5e 00 	mov    0x5e1a29(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1c117:	4c 89 f1             	mov    %r14,%rcx
   1c11a:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1c11d:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c121:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1c124:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c129:	ff 35 41 1a 5e 00    	pushq  0x5e1a41(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1c12f:	48 89 ef             	mov    %rbp,%rdi
   1c132:	ff 35 30 1a 5e 00    	pushq  0x5e1a30(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1c138:	41 57                	push   %r15
   1c13a:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1c13f:	e8 bc 6c ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1c144:	48 83 c4 20          	add    $0x20,%rsp
   1c148:	48 8b 34 24          	mov    (%rsp),%rsi
   1c14c:	48 89 15 c5 77 73 00 	mov    %rdx,0x7377c5(%rip)        # 753918 <tmpquadone>
   1c153:	48 89 0d d6 1a 5e 00 	mov    %rcx,0x5e1ad6(%rip)        # 5fdc30 <tmpquadtwo>
   1c15a:	48 8d 15 8f 1a 5e 00 	lea    0x5e1a8f(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c161:	48 c7 02 a1 0a 00 00 	movq   $0xaa1,(%rdx)
   1c168:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c16f:	00 
   1c170:	48 89 c1             	mov    %rax,%rcx
   1c173:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c177:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c17e:	00 
   1c17f:	48 89 f1             	mov    %rsi,%rcx
   1c182:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c186:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c18d:	00 
   1c18e:	ff 32                	pushq  (%rdx)
   1c190:	48 8b 15 81 77 73 00 	mov    0x737781(%rip),%rdx        # 753918 <tmpquadone>
   1c197:	48 8b 0d 92 1a 5e 00 	mov    0x5e1a92(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c19e:	48 c7 05 a7 77 73 00 	movq   $0x1,0x7377a7(%rip)        # 753950 <cmpPassed>
   1c1a5:	01 00 00 00 
   1c1a9:	e8 ca 96 fe ff       	callq  5878 <_storeDataFn>
   1c1ae:	48 39 c6             	cmp    %rax,%rsi
   1c1b1:	0f 87 12 01 00 00    	ja     1c2c9 <quotearg_mem+0x319>
   1c1b7:	50                   	push   %rax
   1c1b8:	48 c7 c0 66 4e c5 27 	mov    $0x27c54e66,%rax
   1c1bf:	48 89 05 7a 77 73 00 	mov    %rax,0x73777a(%rip)        # 753940 <edgeId>
   1c1c6:	58                   	pop    %rax
   1c1c7:	e8 14 96 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1c1cc:	48 8d 3d 6d 18 5e 00 	lea    0x5e186d(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1c1d3:	4c 8d 40 01          	lea    0x1(%rax),%r8
        if (val != slot0)
   1c1d7:	48 89 15 3a 77 73 00 	mov    %rdx,0x73773a(%rip)        # 753918 <tmpquadone>
   1c1de:	48 89 0d 4b 1a 5e 00 	mov    %rcx,0x5e1a4b(%rip)        # 5fdc30 <tmpquadtwo>
   1c1e5:	48 8d 15 04 1a 5e 00 	lea    0x5e1a04(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c1ec:	48 c7 02 a2 0a 00 00 	movq   $0xaa2,(%rdx)
   1c1f3:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c1fa:	00 
   1c1fb:	48 89 f9             	mov    %rdi,%rcx
   1c1fe:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c202:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c209:	00 
   1c20a:	48 89 e9             	mov    %rbp,%rcx
   1c20d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c211:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c218:	00 
   1c219:	ff 32                	pushq  (%rdx)
   1c21b:	48 8b 15 f6 76 73 00 	mov    0x7376f6(%rip),%rdx        # 753918 <tmpquadone>
   1c222:	48 8b 0d 07 1a 5e 00 	mov    0x5e1a07(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c229:	48 c7 05 1c 77 73 00 	movq   $0x1,0x73771c(%rip)        # 753950 <cmpPassed>
   1c230:	01 00 00 00 
   1c234:	e8 3f 96 fe ff       	callq  5878 <_storeDataFn>
   1c239:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   1c23c:	4c 89 03             	mov    %r8,(%rbx)
        if (val != slot0)
   1c23f:	74 28                	je     1c269 <quotearg_mem+0x2b9>
   1c241:	50                   	push   %rax
   1c242:	48 b8 a9 f8 c4 cb 00 	movabs $0xcbc4f8a9,%rax
   1c249:	00 00 00 
   1c24c:	48 89 05 ed 76 73 00 	mov    %rax,0x7376ed(%rip)        # 753940 <edgeId>
   1c253:	58                   	pop    %rax
   1c254:	e8 87 95 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1c259:	48 89 ef             	mov    %rbp,%rdi
   1c25c:	4c 89 04 24          	mov    %r8,(%rsp)
   1c260:	e8 0b 56 fe ff       	callq  1870 <free@plt>
   1c265:	4c 8b 04 24          	mov    (%rsp),%r8
   1c269:	50                   	push   %rax
   1c26a:	48 b8 f8 c4 cb e0 00 	movabs $0xe0cbc4f8,%rax
   1c271:	00 00 00 
   1c274:	48 89 05 c5 76 73 00 	mov    %rax,0x7376c5(%rip)        # 753940 <edgeId>
   1c27b:	58                   	pop    %rax
   1c27c:	e8 5f 95 fe ff       	callq  57e0 <_storeEdge>
   1c281:	4c 89 c7             	mov    %r8,%rdi
   1c284:	4c 89 04 24          	mov    %r8,(%rsp)
   1c288:	e8 f3 75 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1c28d:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1c291:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1c295:	44 8b 05 a4 18 5e 00 	mov    0x5e18a4(%rip),%r8d        # 5fdb40 <default_quoting_options>
   1c29c:	ff 35 ce 18 5e 00    	pushq  0x5e18ce(%rip)        # 5fdb70 <default_quoting_options+0x30>
   1c2a2:	ff 35 c0 18 5e 00    	pushq  0x5e18c0(%rip)        # 5fdb68 <default_quoting_options+0x28>
   1c2a8:	4c 89 f1             	mov    %r14,%rcx
   1c2ab:	41 57                	push   %r15
   1c2ad:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1c2b2:	4c 89 ea             	mov    %r13,%rdx
   1c2b5:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1c2ba:	48 89 c7             	mov    %rax,%rdi
   1c2bd:	48 89 c5             	mov    %rax,%rbp
   1c2c0:	e8 3b 6b ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1c2c5:	48 83 c4 20          	add    $0x20,%rsp
   1c2c9:	50                   	push   %rax
   1c2ca:	48 b8 1c 55 3c 80 00 	movabs $0x803c551c,%rax
   1c2d1:	00 00 00 
   1c2d4:	48 89 05 65 76 73 00 	mov    %rax,0x737665(%rip)        # 753940 <edgeId>
   1c2db:	58                   	pop    %rax
   1c2dc:	e8 ff 94 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1c2e1:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  return quotearg_n_mem (0, arg, argsize);
}
   1c2e6:	48 89 e8             	mov    %rbp,%rax
    errno = e;
   1c2e9:	45 89 14 24          	mov    %r10d,(%r12)
}
   1c2ed:	48 83 c4 18          	add    $0x18,%rsp
   1c2f1:	5b                   	pop    %rbx
   1c2f2:	5d                   	pop    %rbp
   1c2f3:	41 5c                	pop    %r12
   1c2f5:	41 5d                	pop    %r13
   1c2f7:	41 5e                	pop    %r14
   1c2f9:	41 5f                	pop    %r15
   1c2fb:	c3                   	retq   
   1c2fc:	0f 1f 40 00          	nopl   0x0(%rax)
   1c300:	50                   	push   %rax
   1c301:	48 c7 c0 47 6e a4 7f 	mov    $0x7fa46e47,%rax
   1c308:	48 89 05 31 76 73 00 	mov    %rax,0x737631(%rip)        # 753940 <edgeId>
   1c30f:	58                   	pop    %rax
   1c310:	e8 cb 94 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c315:	be 10 00 00 00       	mov    $0x10,%esi
   1c31a:	31 ff                	xor    %edi,%edi
   1c31c:	e8 df 75 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1c321:	66 0f 6f 05 47 0d 21 	movdqa 0x210d47(%rip),%xmm0        # 22d070 <slotvec0>
   1c328:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c329:	48 89 c3             	mov    %rax,%rbx
   1c32c:	48 89 05 2d 0d 21 00 	mov    %rax,0x210d2d(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1c333:	0f 11 00             	movups %xmm0,(%rax)
   1c336:	e9 65 fd ff ff       	jmpq   1c0a0 <quotearg_mem+0xf0>
   1c33b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c340 <quotearg_n_style>:

char *
quotearg_n_style (int n, enum quoting_style s, char const *arg)
{
   1c340:	41 57                	push   %r15
   1c342:	41 56                	push   %r14
   1c344:	41 55                	push   %r13
   1c346:	41 54                	push   %r12
   1c348:	55                   	push   %rbp
   1c349:	53                   	push   %rbx
   1c34a:	48 83 ec 58          	sub    $0x58,%rsp
   1c34e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1c355:	00 00 
   1c357:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1c35c:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
   1c35e:	48 89 15 b3 75 73 00 	mov    %rdx,0x7375b3(%rip)        # 753918 <tmpquadone>
   1c365:	48 89 0d c4 18 5e 00 	mov    %rcx,0x5e18c4(%rip)        # 5fdc30 <tmpquadtwo>
   1c36c:	48 8d 15 7d 18 5e 00 	lea    0x5e187d(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c373:	48 c7 02 a3 0a 00 00 	movq   $0xaa3,(%rdx)
   1c37a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1c381:	00 
   1c382:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   1c389:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c38d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c394:	00 
   1c395:	48 89 f1             	mov    %rsi,%rcx
   1c398:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c39c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c3a3:	00 
   1c3a4:	ff 32                	pushq  (%rdx)
   1c3a6:	48 8b 15 6b 75 73 00 	mov    0x73756b(%rip),%rdx        # 753918 <tmpquadone>
   1c3ad:	48 8b 0d 7c 18 5e 00 	mov    0x5e187c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c3b4:	48 c7 05 91 75 73 00 	movq   $0x1,0x737591(%rip)        # 753950 <cmpPassed>
   1c3bb:	01 00 00 00 
   1c3bf:	e8 b4 94 fe ff       	callq  5878 <_storeDataFn>
   1c3c4:	83 fe 08             	cmp    $0x8,%esi
   1c3c7:	0f 84 ab 04 00 00    	je     1c878 <quotearg_n_style+0x538>
   1c3cd:	50                   	push   %rax
   1c3ce:	48 c7 c0 ca 62 72 7e 	mov    $0x7e7262ca,%rax
   1c3d5:	48 89 05 64 75 73 00 	mov    %rax,0x737564(%rip)        # 753940 <edgeId>
   1c3dc:	58                   	pop    %rax
   1c3dd:	e8 fe 93 fe ff       	callq  57e0 <_storeEdge>
  return o;
   1c3e2:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1c3e6:	48 63 ef             	movslq %edi,%rbp
   1c3e9:	49 89 d6             	mov    %rdx,%r14
   1c3ec:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1c3f0:	89 74 24 10          	mov    %esi,0x10(%rsp)
   1c3f4:	89 74 24 08          	mov    %esi,0x8(%rsp)
   1c3f8:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
   1c3ff:	00 
   1c400:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   1c405:	0f 11 44 24 28       	movups %xmm0,0x28(%rsp)
   1c40a:	0f 11 4c 24 38       	movups %xmm1,0x38(%rsp)
  int e = errno;
   1c40f:	e8 7c 54 fe ff       	callq  1890 <__errno_location@plt>
   1c414:	49 89 c5             	mov    %rax,%r13
  if (n < 0)
   1c417:	85 ed                	test   %ebp,%ebp
  int e = errno;
   1c419:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   1c41b:	48 8b 1d 3e 0c 21 00 	mov    0x210c3e(%rip),%rbx        # 22d060 <slotvec>
  int e = errno;
   1c422:	89 44 24 04          	mov    %eax,0x4(%rsp)
  if (n < 0)
   1c426:	0f 88 4c 04 00 00    	js     1c878 <quotearg_n_style+0x538>
   1c42c:	50                   	push   %rax
   1c42d:	48 b8 d6 61 3c 81 00 	movabs $0x813c61d6,%rax
   1c434:	00 00 00 
   1c437:	48 89 05 02 75 73 00 	mov    %rax,0x737502(%rip)        # 753940 <edgeId>
   1c43e:	58                   	pop    %rax
   1c43f:	e8 9c 93 fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1c444:	48 89 15 cd 74 73 00 	mov    %rdx,0x7374cd(%rip)        # 753918 <tmpquadone>
   1c44b:	48 89 0d de 17 5e 00 	mov    %rcx,0x5e17de(%rip)        # 5fdc30 <tmpquadtwo>
   1c452:	48 8d 15 97 17 5e 00 	lea    0x5e1797(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c459:	48 c7 02 a4 0a 00 00 	movq   $0xaa4,(%rdx)
   1c460:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1c467:	00 
   1c468:	48 8b 0d e9 0b 21 00 	mov    0x210be9(%rip),%rcx        # 22d058 <nslots>
   1c46f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c473:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c47a:	00 
   1c47b:	48 89 e9             	mov    %rbp,%rcx
   1c47e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c482:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c489:	00 
   1c48a:	ff 32                	pushq  (%rdx)
   1c48c:	48 8b 15 85 74 73 00 	mov    0x737485(%rip),%rdx        # 753918 <tmpquadone>
   1c493:	48 8b 0d 96 17 5e 00 	mov    0x5e1796(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c49a:	48 c7 05 ab 74 73 00 	movq   $0x1,0x7374ab(%rip)        # 753950 <cmpPassed>
   1c4a1:	01 00 00 00 
   1c4a5:	e8 ce 93 fe ff       	callq  5878 <_storeDataFn>
   1c4aa:	3b 2d a8 0b 21 00    	cmp    0x210ba8(%rip),%ebp        # 22d058 <nslots>
   1c4b0:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
   1c4b5:	0f 83 5d 02 00 00    	jae    1c718 <quotearg_n_style+0x3d8>
   1c4bb:	50                   	push   %rax
   1c4bc:	48 b8 1d c6 13 98 00 	movabs $0x9813c61d,%rax
   1c4c3:	00 00 00 
   1c4c6:	48 89 05 73 74 73 00 	mov    %rax,0x737473(%rip)        # 753940 <edgeId>
   1c4cd:	58                   	pop    %rax
   1c4ce:	e8 0d 93 fe ff       	callq  57e0 <_storeEdge>
   1c4d3:	31 c9                	xor    %ecx,%ecx
   1c4d5:	31 d2                	xor    %edx,%edx
   1c4d7:	41 bc 01 00 00 00    	mov    $0x1,%r12d
   1c4dd:	50                   	push   %rax
   1c4de:	48 b8 30 9e c0 a4 00 	movabs $0xa4c09e30,%rax
   1c4e5:	00 00 00 
   1c4e8:	48 89 05 51 74 73 00 	mov    %rax,0x737451(%rip)        # 753940 <edgeId>
   1c4ef:	58                   	pop    %rax
   1c4f0:	e8 eb 92 fe ff       	callq  57e0 <_storeEdge>
    size_t size = sv[n].size;
   1c4f5:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c4f9:	48 83 ec 08          	sub    $0x8,%rsp
   1c4fd:	45 89 e1             	mov    %r12d,%r9d
    size_t size = sv[n].size;
   1c500:	48 01 eb             	add    %rbp,%rbx
   1c503:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1c506:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1c50a:	52                   	push   %rdx
   1c50b:	51                   	push   %rcx
   1c50c:	4c 89 f2             	mov    %r14,%rdx
   1c50f:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1c516:	48 8d 6c 24 28       	lea    0x28(%rsp),%rbp
   1c51b:	4c 89 ff             	mov    %r15,%rdi
   1c51e:	48 8d 75 08          	lea    0x8(%rbp),%rsi
   1c522:	56                   	push   %rsi
   1c523:	4c 89 de             	mov    %r11,%rsi
   1c526:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
   1c52b:	e8 d0 68 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1c530:	48 83 c4 20          	add    $0x20,%rsp
   1c534:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   1c539:	48 89 15 d8 73 73 00 	mov    %rdx,0x7373d8(%rip)        # 753918 <tmpquadone>
   1c540:	48 89 0d e9 16 5e 00 	mov    %rcx,0x5e16e9(%rip)        # 5fdc30 <tmpquadtwo>
   1c547:	48 8d 15 a2 16 5e 00 	lea    0x5e16a2(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c54e:	48 c7 02 a5 0a 00 00 	movq   $0xaa5,(%rdx)
   1c555:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c55c:	00 
   1c55d:	48 89 c1             	mov    %rax,%rcx
   1c560:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c564:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c56b:	00 
   1c56c:	4c 89 d1             	mov    %r10,%rcx
   1c56f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c573:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c57a:	00 
   1c57b:	ff 32                	pushq  (%rdx)
   1c57d:	48 8b 15 94 73 73 00 	mov    0x737394(%rip),%rdx        # 753918 <tmpquadone>
   1c584:	48 8b 0d a5 16 5e 00 	mov    0x5e16a5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c58b:	48 c7 05 ba 73 73 00 	movq   $0x1,0x7373ba(%rip)        # 753950 <cmpPassed>
   1c592:	01 00 00 00 
   1c596:	e8 dd 92 fe ff       	callq  5878 <_storeDataFn>
   1c59b:	49 39 c2             	cmp    %rax,%r10
   1c59e:	0f 87 11 01 00 00    	ja     1c6b5 <quotearg_n_style+0x375>
   1c5a4:	50                   	push   %rax
   1c5a5:	48 c7 c0 f2 f5 6f 54 	mov    $0x546ff5f2,%rax
   1c5ac:	48 89 05 8d 73 73 00 	mov    %rax,0x73738d(%rip)        # 753940 <edgeId>
   1c5b3:	58                   	pop    %rax
   1c5b4:	e8 27 92 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1c5b9:	4c 8d 05 80 14 5e 00 	lea    0x5e1480(%rip),%r8        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1c5c0:	48 8d 40 01          	lea    0x1(%rax),%rax
        if (val != slot0)
   1c5c4:	48 89 15 4d 73 73 00 	mov    %rdx,0x73734d(%rip)        # 753918 <tmpquadone>
   1c5cb:	48 89 0d 5e 16 5e 00 	mov    %rcx,0x5e165e(%rip)        # 5fdc30 <tmpquadtwo>
   1c5d2:	48 8d 15 17 16 5e 00 	lea    0x5e1617(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c5d9:	48 c7 02 a6 0a 00 00 	movq   $0xaa6,(%rdx)
   1c5e0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c5e7:	00 
   1c5e8:	4c 89 c1             	mov    %r8,%rcx
   1c5eb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c5ef:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c5f6:	00 
   1c5f7:	4c 89 f9             	mov    %r15,%rcx
   1c5fa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c5fe:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c605:	00 
   1c606:	ff 32                	pushq  (%rdx)
   1c608:	48 8b 15 09 73 73 00 	mov    0x737309(%rip),%rdx        # 753918 <tmpquadone>
   1c60f:	48 8b 0d 1a 16 5e 00 	mov    0x5e161a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c616:	48 c7 05 2f 73 73 00 	movq   $0x1,0x73732f(%rip)        # 753950 <cmpPassed>
   1c61d:	01 00 00 00 
   1c621:	e8 52 92 fe ff       	callq  5878 <_storeDataFn>
   1c626:	4d 39 c7             	cmp    %r8,%r15
        sv[n].size = size = qsize + 1;
   1c629:	48 89 03             	mov    %rax,(%rbx)
        if (val != slot0)
   1c62c:	74 2a                	je     1c658 <quotearg_n_style+0x318>
   1c62e:	50                   	push   %rax
   1c62f:	48 b8 fe 8d aa c1 00 	movabs $0xc1aa8dfe,%rax
   1c636:	00 00 00 
   1c639:	48 89 05 00 73 73 00 	mov    %rax,0x737300(%rip)        # 753940 <edgeId>
   1c640:	58                   	pop    %rax
   1c641:	e8 9a 91 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1c646:	4c 89 ff             	mov    %r15,%rdi
   1c649:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   1c64e:	e8 1d 52 fe ff       	callq  1870 <free@plt>
   1c653:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1c658:	50                   	push   %rax
   1c659:	48 c7 c0 8d aa c1 79 	mov    $0x79c1aa8d,%rax
   1c660:	48 89 05 d9 72 73 00 	mov    %rax,0x7372d9(%rip)        # 753940 <edgeId>
   1c667:	58                   	pop    %rax
   1c668:	e8 73 91 fe ff       	callq  57e0 <_storeEdge>
   1c66d:	48 89 c7             	mov    %rax,%rdi
   1c670:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1c675:	48 83 c5 08          	add    $0x8,%rbp
   1c679:	e8 02 72 00 00       	callq  23880 <xmalloc>
   1c67e:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1c682:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1c686:	45 89 e1             	mov    %r12d,%r9d
   1c689:	ff 74 24 48          	pushq  0x48(%rsp)
   1c68d:	ff 74 24 48          	pushq  0x48(%rsp)
   1c691:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1c698:	55                   	push   %rbp
   1c699:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1c69e:	4c 89 f2             	mov    %r14,%rdx
   1c6a1:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   1c6a6:	48 89 c7             	mov    %rax,%rdi
   1c6a9:	49 89 c7             	mov    %rax,%r15
   1c6ac:	e8 4f 67 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1c6b1:	48 83 c4 20          	add    $0x20,%rsp
   1c6b5:	50                   	push   %rax
   1c6b6:	48 c7 c0 62 11 b1 73 	mov    $0x73b11162,%rax
   1c6bd:	48 89 05 7c 72 73 00 	mov    %rax,0x73727c(%rip)        # 753940 <edgeId>
   1c6c4:	58                   	pop    %rax
   1c6c5:	e8 16 91 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1c6ca:	44 8b 74 24 04       	mov    0x4(%rsp),%r14d
  struct quoting_options const o = quoting_options_from_style (s);
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
}
   1c6cf:	4c 89 f8             	mov    %r15,%rax
   1c6d2:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1c6d7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1c6de:	00 00 
    errno = e;
   1c6e0:	45 89 75 00          	mov    %r14d,0x0(%r13)
}
   1c6e4:	0f 85 a8 01 00 00    	jne    1c892 <quotearg_n_style+0x552>
   1c6ea:	50                   	push   %rax
   1c6eb:	48 b8 9d 03 7c c7 00 	movabs $0xc77c039d,%rax
   1c6f2:	00 00 00 
   1c6f5:	48 89 05 44 72 73 00 	mov    %rax,0x737244(%rip)        # 753940 <edgeId>
   1c6fc:	58                   	pop    %rax
   1c6fd:	e8 de 90 fe ff       	callq  57e0 <_storeEdge>
   1c702:	48 83 c4 58          	add    $0x58,%rsp
   1c706:	5b                   	pop    %rbx
   1c707:	5d                   	pop    %rbp
   1c708:	41 5c                	pop    %r12
   1c70a:	41 5d                	pop    %r13
   1c70c:	41 5e                	pop    %r14
   1c70e:	41 5f                	pop    %r15
   1c710:	c3                   	retq   
   1c711:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1c718:	50                   	push   %rax
   1c719:	48 c7 c0 77 3c 5a 22 	mov    $0x225a3c77,%rax
   1c720:	48 89 05 19 72 73 00 	mov    %rax,0x737219(%rip)        # 753940 <edgeId>
   1c727:	58                   	pop    %rax
   1c728:	e8 b3 90 fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1c72d:	8d 7d 01             	lea    0x1(%rbp),%edi
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c730:	4c 8d 0d 39 09 21 00 	lea    0x210939(%rip),%r9        # 22d070 <slotvec0>
   1c737:	48 89 fe             	mov    %rdi,%rsi
      size_t n1 = n0 + 1;
   1c73a:	49 89 ff             	mov    %rdi,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c73d:	48 c1 e6 04          	shl    $0x4,%rsi
   1c741:	48 89 15 d0 71 73 00 	mov    %rdx,0x7371d0(%rip)        # 753918 <tmpquadone>
   1c748:	48 89 0d e1 14 5e 00 	mov    %rcx,0x5e14e1(%rip)        # 5fdc30 <tmpquadtwo>
   1c74f:	48 8d 15 9a 14 5e 00 	lea    0x5e149a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c756:	48 c7 02 a7 0a 00 00 	movq   $0xaa7,(%rdx)
   1c75d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1c764:	00 
   1c765:	4c 89 c9             	mov    %r9,%rcx
   1c768:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c76c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c773:	00 
   1c774:	48 89 d9             	mov    %rbx,%rcx
   1c777:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c77b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c782:	00 
   1c783:	ff 32                	pushq  (%rdx)
   1c785:	48 8b 15 8c 71 73 00 	mov    0x73718c(%rip),%rdx        # 753918 <tmpquadone>
   1c78c:	48 8b 0d 9d 14 5e 00 	mov    0x5e149d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c793:	48 c7 05 b2 71 73 00 	movq   $0x1,0x7371b2(%rip)        # 753950 <cmpPassed>
   1c79a:	01 00 00 00 
   1c79e:	e8 d5 90 fe ff       	callq  5878 <_storeDataFn>
   1c7a3:	4c 39 cb             	cmp    %r9,%rbx
   1c7a6:	0f 84 8c 00 00 00    	je     1c838 <quotearg_n_style+0x4f8>
   1c7ac:	50                   	push   %rax
   1c7ad:	48 b8 2d 11 1f f6 00 	movabs $0xf61f112d,%rax
   1c7b4:	00 00 00 
   1c7b7:	48 89 05 82 71 73 00 	mov    %rax,0x737182(%rip)        # 753940 <edgeId>
   1c7be:	58                   	pop    %rax
   1c7bf:	e8 1c 90 fe ff       	callq  57e0 <_storeEdge>
   1c7c4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   1c7c9:	48 89 df             	mov    %rbx,%rdi
   1c7cc:	e8 2f 71 00 00       	callq  23900 <xrealloc>
   1c7d1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   1c7d6:	48 89 c3             	mov    %rax,%rbx
   1c7d9:	48 89 05 80 08 21 00 	mov    %rax,0x210880(%rip)        # 22d060 <slotvec>
   1c7e0:	50                   	push   %rax
   1c7e1:	48 c7 c0 c4 87 3d 1e 	mov    $0x1e3d87c4,%rax
   1c7e8:	48 89 05 51 71 73 00 	mov    %rax,0x737151(%rip)        # 753940 <edgeId>
   1c7ef:	58                   	pop    %rax
   1c7f0:	e8 eb 8f fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1c7f5:	8b 3d 5d 08 21 00    	mov    0x21085d(%rip),%edi        # 22d058 <nslots>
   1c7fb:	31 f6                	xor    %esi,%esi
   1c7fd:	48 29 fa             	sub    %rdi,%rdx
   1c800:	48 c1 e7 04          	shl    $0x4,%rdi
   1c804:	48 c1 e2 04          	shl    $0x4,%rdx
   1c808:	48 01 df             	add    %rbx,%rdi
   1c80b:	e8 e0 51 fe ff       	callq  19f0 <memset@plt>
   1c810:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
      nslots = n1;
   1c815:	44 89 3d 3c 08 21 00 	mov    %r15d,0x21083c(%rip)        # 22d058 <nslots>
   1c81c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
   1c821:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   1c826:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   1c82b:	41 83 cc 01          	or     $0x1,%r12d
   1c82f:	e9 a9 fc ff ff       	jmpq   1c4dd <quotearg_n_style+0x19d>
   1c834:	0f 1f 40 00          	nopl   0x0(%rax)
   1c838:	50                   	push   %rax
   1c839:	48 c7 c0 ca 67 08 53 	mov    $0x530867ca,%rax
   1c840:	48 89 05 f9 70 73 00 	mov    %rax,0x7370f9(%rip)        # 753940 <edgeId>
   1c847:	58                   	pop    %rax
   1c848:	e8 93 8f fe ff       	callq  57e0 <_storeEdge>
   1c84d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c852:	31 ff                	xor    %edi,%edi
   1c854:	e8 a7 70 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1c859:	66 0f 6f 15 0f 08 21 	movdqa 0x21080f(%rip),%xmm2        # 22d070 <slotvec0>
   1c860:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1c861:	48 89 c3             	mov    %rax,%rbx
   1c864:	48 89 05 f5 07 21 00 	mov    %rax,0x2107f5(%rip)        # 22d060 <slotvec>
   1c86b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
        *sv = slotvec0;
   1c870:	0f 11 10             	movups %xmm2,(%rax)
   1c873:	e9 68 ff ff ff       	jmpq   1c7e0 <quotearg_n_style+0x4a0>
   1c878:	50                   	push   %rax
   1c879:	48 c7 c0 c2 54 68 5d 	mov    $0x5d6854c2,%rax
   1c880:	48 89 05 b9 70 73 00 	mov    %rax,0x7370b9(%rip)        # 753940 <edgeId>
   1c887:	58                   	pop    %rax
   1c888:	e8 53 8f fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1c88d:	e8 ee 4f fe ff       	callq  1880 <abort@plt>
   1c892:	50                   	push   %rax
   1c893:	48 b8 2a b4 2e ba 00 	movabs $0xba2eb42a,%rax
   1c89a:	00 00 00 
   1c89d:	48 89 05 9c 70 73 00 	mov    %rax,0x73709c(%rip)        # 753940 <edgeId>
   1c8a4:	58                   	pop    %rax
   1c8a5:	e8 36 8f fe ff       	callq  57e0 <_storeEdge>
}
   1c8aa:	e8 a1 50 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1c8af:	90                   	nop

000000000001c8b0 <quotearg_n_style_mem>:

char *
quotearg_n_style_mem (int n, enum quoting_style s,
                      char const *arg, size_t argsize)
{
   1c8b0:	41 57                	push   %r15
   1c8b2:	41 56                	push   %r14
   1c8b4:	41 55                	push   %r13
   1c8b6:	41 54                	push   %r12
   1c8b8:	55                   	push   %rbp
   1c8b9:	53                   	push   %rbx
   1c8ba:	48 83 ec 68          	sub    $0x68,%rsp
   1c8be:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1c8c5:	00 00 
   1c8c7:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
   1c8cc:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
   1c8ce:	48 89 15 43 70 73 00 	mov    %rdx,0x737043(%rip)        # 753918 <tmpquadone>
   1c8d5:	48 89 0d 54 13 5e 00 	mov    %rcx,0x5e1354(%rip)        # 5fdc30 <tmpquadtwo>
   1c8dc:	48 8d 15 0d 13 5e 00 	lea    0x5e130d(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c8e3:	48 c7 02 a8 0a 00 00 	movq   $0xaa8,(%rdx)
   1c8ea:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1c8f1:	00 
   1c8f2:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   1c8f9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c8fd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c904:	00 
   1c905:	48 89 f1             	mov    %rsi,%rcx
   1c908:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c90c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c913:	00 
   1c914:	ff 32                	pushq  (%rdx)
   1c916:	48 8b 15 fb 6f 73 00 	mov    0x736ffb(%rip),%rdx        # 753918 <tmpquadone>
   1c91d:	48 8b 0d 0c 13 5e 00 	mov    0x5e130c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1c924:	48 c7 05 21 70 73 00 	movq   $0x1,0x737021(%rip)        # 753950 <cmpPassed>
   1c92b:	01 00 00 00 
   1c92f:	e8 44 8f fe ff       	callq  5878 <_storeDataFn>
   1c934:	83 fe 08             	cmp    $0x8,%esi
   1c937:	0f 84 ab 04 00 00    	je     1cde8 <quotearg_n_style_mem+0x538>
   1c93d:	50                   	push   %rax
   1c93e:	48 c7 c0 61 fe f3 1b 	mov    $0x1bf3fe61,%rax
   1c945:	48 89 05 f4 6f 73 00 	mov    %rax,0x736ff4(%rip)        # 753940 <edgeId>
   1c94c:	58                   	pop    %rax
   1c94d:	e8 8e 8e fe ff       	callq  57e0 <_storeEdge>
  return o;
   1c952:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1c956:	48 63 ef             	movslq %edi,%rbp
   1c959:	49 89 d6             	mov    %rdx,%r14
   1c95c:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1c960:	49 89 cf             	mov    %rcx,%r15
   1c963:	89 74 24 20          	mov    %esi,0x20(%rsp)
   1c967:	89 74 24 08          	mov    %esi,0x8(%rsp)
   1c96b:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
   1c972:	00 
   1c973:	0f 11 44 24 28       	movups %xmm0,0x28(%rsp)
   1c978:	0f 11 44 24 38       	movups %xmm0,0x38(%rsp)
   1c97d:	0f 11 4c 24 48       	movups %xmm1,0x48(%rsp)
  int e = errno;
   1c982:	e8 09 4f fe ff       	callq  1890 <__errno_location@plt>
   1c987:	49 89 c5             	mov    %rax,%r13
  if (n < 0)
   1c98a:	85 ed                	test   %ebp,%ebp
  int e = errno;
   1c98c:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   1c98e:	48 8b 1d cb 06 21 00 	mov    0x2106cb(%rip),%rbx        # 22d060 <slotvec>
  int e = errno;
   1c995:	89 44 24 14          	mov    %eax,0x14(%rsp)
  if (n < 0)
   1c999:	0f 88 49 04 00 00    	js     1cde8 <quotearg_n_style_mem+0x538>
   1c99f:	50                   	push   %rax
   1c9a0:	48 c7 c0 dd 8e c7 6f 	mov    $0x6fc78edd,%rax
   1c9a7:	48 89 05 92 6f 73 00 	mov    %rax,0x736f92(%rip)        # 753940 <edgeId>
   1c9ae:	58                   	pop    %rax
   1c9af:	e8 2c 8e fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1c9b4:	48 89 15 5d 6f 73 00 	mov    %rdx,0x736f5d(%rip)        # 753918 <tmpquadone>
   1c9bb:	48 89 0d 6e 12 5e 00 	mov    %rcx,0x5e126e(%rip)        # 5fdc30 <tmpquadtwo>
   1c9c2:	48 8d 15 27 12 5e 00 	lea    0x5e1227(%rip),%rdx        # 5fdbf0 <funcinptr>
   1c9c9:	48 c7 02 a9 0a 00 00 	movq   $0xaa9,(%rdx)
   1c9d0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1c9d7:	00 
   1c9d8:	48 8b 0d 79 06 21 00 	mov    0x210679(%rip),%rcx        # 22d058 <nslots>
   1c9df:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1c9e3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1c9ea:	00 
   1c9eb:	48 89 e9             	mov    %rbp,%rcx
   1c9ee:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1c9f2:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1c9f9:	00 
   1c9fa:	ff 32                	pushq  (%rdx)
   1c9fc:	48 8b 15 15 6f 73 00 	mov    0x736f15(%rip),%rdx        # 753918 <tmpquadone>
   1ca03:	48 8b 0d 26 12 5e 00 	mov    0x5e1226(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ca0a:	48 c7 05 3b 6f 73 00 	movq   $0x1,0x736f3b(%rip)        # 753950 <cmpPassed>
   1ca11:	01 00 00 00 
   1ca15:	e8 5e 8e fe ff       	callq  5878 <_storeDataFn>
   1ca1a:	3b 2d 38 06 21 00    	cmp    0x210638(%rip),%ebp        # 22d058 <nslots>
   1ca20:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
   1ca25:	0f 83 55 02 00 00    	jae    1cc80 <quotearg_n_style_mem+0x3d0>
   1ca2b:	50                   	push   %rax
   1ca2c:	48 c7 c0 ed 78 fc 46 	mov    $0x46fc78ed,%rax
   1ca33:	48 89 05 06 6f 73 00 	mov    %rax,0x736f06(%rip)        # 753940 <edgeId>
   1ca3a:	58                   	pop    %rax
   1ca3b:	e8 a0 8d fe ff       	callq  57e0 <_storeEdge>
   1ca40:	31 c9                	xor    %ecx,%ecx
   1ca42:	31 d2                	xor    %edx,%edx
   1ca44:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%rsp)
   1ca4b:	00 
   1ca4c:	50                   	push   %rax
   1ca4d:	48 c7 c0 c7 e3 37 62 	mov    $0x6237e3c7,%rax
   1ca54:	48 89 05 e5 6e 73 00 	mov    %rax,0x736ee5(%rip)        # 753940 <edgeId>
   1ca5b:	58                   	pop    %rax
   1ca5c:	e8 7f 8d fe ff       	callq  57e0 <_storeEdge>
    size_t size = sv[n].size;
   1ca61:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1ca65:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1ca69:	48 01 eb             	add    %rbp,%rbx
   1ca6c:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1ca6f:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1ca73:	52                   	push   %rdx
   1ca74:	51                   	push   %rcx
   1ca75:	4c 89 f2             	mov    %r14,%rdx
   1ca78:	4c 89 f9             	mov    %r15,%rcx
   1ca7b:	48 8d 6c 24 38       	lea    0x38(%rsp),%rbp
   1ca80:	4c 89 de             	mov    %r11,%rsi
   1ca83:	4c 89 e7             	mov    %r12,%rdi
   1ca86:	4c 8d 55 08          	lea    0x8(%rbp),%r10
   1ca8a:	41 52                	push   %r10
   1ca8c:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
   1ca91:	4c 89 5c 24 38       	mov    %r11,0x38(%rsp)
   1ca96:	e8 65 63 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1ca9b:	48 83 c4 20          	add    $0x20,%rsp
   1ca9f:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
   1caa4:	48 89 15 6d 6e 73 00 	mov    %rdx,0x736e6d(%rip)        # 753918 <tmpquadone>
   1caab:	48 89 0d 7e 11 5e 00 	mov    %rcx,0x5e117e(%rip)        # 5fdc30 <tmpquadtwo>
   1cab2:	48 8d 15 37 11 5e 00 	lea    0x5e1137(%rip),%rdx        # 5fdbf0 <funcinptr>
   1cab9:	48 c7 02 aa 0a 00 00 	movq   $0xaaa,(%rdx)
   1cac0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1cac7:	00 
   1cac8:	48 89 c1             	mov    %rax,%rcx
   1cacb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1cacf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1cad6:	00 
   1cad7:	4c 89 c1             	mov    %r8,%rcx
   1cada:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1cade:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1cae5:	00 
   1cae6:	ff 32                	pushq  (%rdx)
   1cae8:	48 8b 15 29 6e 73 00 	mov    0x736e29(%rip),%rdx        # 753918 <tmpquadone>
   1caef:	48 8b 0d 3a 11 5e 00 	mov    0x5e113a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1caf6:	48 c7 05 4f 6e 73 00 	movq   $0x1,0x736e4f(%rip)        # 753950 <cmpPassed>
   1cafd:	01 00 00 00 
   1cb01:	e8 72 8d fe ff       	callq  5878 <_storeDataFn>
   1cb06:	49 39 c0             	cmp    %rax,%r8
   1cb09:	0f 87 0f 01 00 00    	ja     1cc1e <quotearg_n_style_mem+0x36e>
   1cb0f:	50                   	push   %rax
   1cb10:	48 b8 3a 7c bf e7 00 	movabs $0xe7bf7c3a,%rax
   1cb17:	00 00 00 
   1cb1a:	48 89 05 1f 6e 73 00 	mov    %rax,0x736e1f(%rip)        # 753940 <edgeId>
   1cb21:	58                   	pop    %rax
   1cb22:	e8 b9 8c fe ff       	callq  57e0 <_storeEdge>
        sv[n].size = size = qsize + 1;
   1cb27:	48 8d 48 01          	lea    0x1(%rax),%rcx
        if (val != slot0)
   1cb2b:	48 8d 05 0e 0f 5e 00 	lea    0x5e0f0e(%rip),%rax        # 5fda40 <slot0>
   1cb32:	48 89 15 df 6d 73 00 	mov    %rdx,0x736ddf(%rip)        # 753918 <tmpquadone>
   1cb39:	48 89 0d f0 10 5e 00 	mov    %rcx,0x5e10f0(%rip)        # 5fdc30 <tmpquadtwo>
   1cb40:	48 8d 15 a9 10 5e 00 	lea    0x5e10a9(%rip),%rdx        # 5fdbf0 <funcinptr>
   1cb47:	48 c7 02 ab 0a 00 00 	movq   $0xaab,(%rdx)
   1cb4e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1cb55:	00 
   1cb56:	48 89 c1             	mov    %rax,%rcx
   1cb59:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1cb5d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1cb64:	00 
   1cb65:	4c 89 e1             	mov    %r12,%rcx
   1cb68:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1cb6c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1cb73:	00 
   1cb74:	ff 32                	pushq  (%rdx)
   1cb76:	48 8b 15 9b 6d 73 00 	mov    0x736d9b(%rip),%rdx        # 753918 <tmpquadone>
   1cb7d:	48 8b 0d ac 10 5e 00 	mov    0x5e10ac(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1cb84:	48 c7 05 c1 6d 73 00 	movq   $0x1,0x736dc1(%rip)        # 753950 <cmpPassed>
   1cb8b:	01 00 00 00 
   1cb8f:	e8 e4 8c fe ff       	callq  5878 <_storeDataFn>
   1cb94:	49 39 c4             	cmp    %rax,%r12
        sv[n].size = size = qsize + 1;
   1cb97:	48 89 0b             	mov    %rcx,(%rbx)
        if (val != slot0)
   1cb9a:	74 27                	je     1cbc3 <quotearg_n_style_mem+0x313>
   1cb9c:	50                   	push   %rax
   1cb9d:	48 c7 c0 ef f7 dc 3f 	mov    $0x3fdcf7ef,%rax
   1cba4:	48 89 05 95 6d 73 00 	mov    %rax,0x736d95(%rip)        # 753940 <edgeId>
   1cbab:	58                   	pop    %rax
   1cbac:	e8 2f 8c fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1cbb1:	4c 89 e7             	mov    %r12,%rdi
   1cbb4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   1cbb9:	e8 b2 4c fe ff       	callq  1870 <free@plt>
   1cbbe:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
   1cbc3:	50                   	push   %rax
   1cbc4:	48 c7 c0 f7 dc 3f 0b 	mov    $0xb3fdcf7,%rax
   1cbcb:	48 89 05 6e 6d 73 00 	mov    %rax,0x736d6e(%rip)        # 753940 <edgeId>
   1cbd2:	58                   	pop    %rax
   1cbd3:	e8 08 8c fe ff       	callq  57e0 <_storeEdge>
   1cbd8:	48 89 cf             	mov    %rcx,%rdi
   1cbdb:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1cbe0:	48 83 c5 08          	add    $0x8,%rbp
   1cbe4:	e8 97 6c 00 00       	callq  23880 <xmalloc>
   1cbe9:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1cbed:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1cbf1:	4c 89 f9             	mov    %r15,%rcx
   1cbf4:	ff 74 24 58          	pushq  0x58(%rsp)
   1cbf8:	ff 74 24 58          	pushq  0x58(%rsp)
   1cbfc:	4c 89 f2             	mov    %r14,%rdx
   1cbff:	55                   	push   %rbp
   1cc00:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
   1cc05:	48 89 c7             	mov    %rax,%rdi
   1cc08:	44 8b 44 24 40       	mov    0x40(%rsp),%r8d
   1cc0d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
   1cc12:	49 89 c4             	mov    %rax,%r12
   1cc15:	e8 e6 61 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1cc1a:	48 83 c4 20          	add    $0x20,%rsp
   1cc1e:	50                   	push   %rax
   1cc1f:	48 b8 62 9a 25 d4 00 	movabs $0xd4259a62,%rax
   1cc26:	00 00 00 
   1cc29:	48 89 05 10 6d 73 00 	mov    %rax,0x736d10(%rip)        # 753940 <edgeId>
   1cc30:	58                   	pop    %rax
   1cc31:	e8 aa 8b fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1cc36:	44 8b 74 24 14       	mov    0x14(%rsp),%r14d
  struct quoting_options const o = quoting_options_from_style (s);
  return quotearg_n_options (n, arg, argsize, &o);
}
   1cc3b:	4c 89 e0             	mov    %r12,%rax
   1cc3e:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
   1cc43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1cc4a:	00 00 
    errno = e;
   1cc4c:	45 89 75 00          	mov    %r14d,0x0(%r13)
}
   1cc50:	0f 85 ac 01 00 00    	jne    1ce02 <quotearg_n_style_mem+0x552>
   1cc56:	50                   	push   %rax
   1cc57:	48 b8 a1 b6 84 c3 00 	movabs $0xc384b6a1,%rax
   1cc5e:	00 00 00 
   1cc61:	48 89 05 d8 6c 73 00 	mov    %rax,0x736cd8(%rip)        # 753940 <edgeId>
   1cc68:	58                   	pop    %rax
   1cc69:	e8 72 8b fe ff       	callq  57e0 <_storeEdge>
   1cc6e:	48 83 c4 68          	add    $0x68,%rsp
   1cc72:	5b                   	pop    %rbx
   1cc73:	5d                   	pop    %rbp
   1cc74:	41 5c                	pop    %r12
   1cc76:	41 5d                	pop    %r13
   1cc78:	41 5e                	pop    %r14
   1cc7a:	41 5f                	pop    %r15
   1cc7c:	c3                   	retq   
   1cc7d:	0f 1f 00             	nopl   (%rax)
   1cc80:	50                   	push   %rax
   1cc81:	48 c7 c0 1c 86 18 4e 	mov    $0x4e18861c,%rax
   1cc88:	48 89 05 b1 6c 73 00 	mov    %rax,0x736cb1(%rip)        # 753940 <edgeId>
   1cc8f:	58                   	pop    %rax
   1cc90:	e8 4b 8b fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1cc95:	8d 7d 01             	lea    0x1(%rbp),%edi
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1cc98:	4c 8d 0d d1 03 21 00 	lea    0x2103d1(%rip),%r9        # 22d070 <slotvec0>
   1cc9f:	48 89 fe             	mov    %rdi,%rsi
      size_t n1 = n0 + 1;
   1cca2:	49 89 fc             	mov    %rdi,%r12
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1cca5:	48 c1 e6 04          	shl    $0x4,%rsi
   1cca9:	48 89 15 68 6c 73 00 	mov    %rdx,0x736c68(%rip)        # 753918 <tmpquadone>
   1ccb0:	48 89 0d 79 0f 5e 00 	mov    %rcx,0x5e0f79(%rip)        # 5fdc30 <tmpquadtwo>
   1ccb7:	48 8d 15 32 0f 5e 00 	lea    0x5e0f32(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ccbe:	48 c7 02 ac 0a 00 00 	movq   $0xaac,(%rdx)
   1ccc5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1cccc:	00 
   1cccd:	4c 89 c9             	mov    %r9,%rcx
   1ccd0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ccd4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ccdb:	00 
   1ccdc:	48 89 d9             	mov    %rbx,%rcx
   1ccdf:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1cce3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ccea:	00 
   1cceb:	ff 32                	pushq  (%rdx)
   1cced:	48 8b 15 24 6c 73 00 	mov    0x736c24(%rip),%rdx        # 753918 <tmpquadone>
   1ccf4:	48 8b 0d 35 0f 5e 00 	mov    0x5e0f35(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ccfb:	48 c7 05 4a 6c 73 00 	movq   $0x1,0x736c4a(%rip)        # 753950 <cmpPassed>
   1cd02:	01 00 00 00 
   1cd06:	e8 6d 8b fe ff       	callq  5878 <_storeDataFn>
   1cd0b:	4c 39 cb             	cmp    %r9,%rbx
   1cd0e:	0f 84 94 00 00 00    	je     1cda8 <quotearg_n_style_mem+0x4f8>
   1cd14:	50                   	push   %rax
   1cd15:	48 b8 0c a7 83 f6 00 	movabs $0xf683a70c,%rax
   1cd1c:	00 00 00 
   1cd1f:	48 89 05 1a 6c 73 00 	mov    %rax,0x736c1a(%rip)        # 753940 <edgeId>
   1cd26:	58                   	pop    %rax
   1cd27:	e8 b4 8a fe ff       	callq  57e0 <_storeEdge>
   1cd2c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   1cd31:	48 89 df             	mov    %rbx,%rdi
   1cd34:	e8 c7 6b 00 00       	callq  23900 <xrealloc>
   1cd39:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   1cd3e:	48 89 c3             	mov    %rax,%rbx
   1cd41:	48 89 05 18 03 21 00 	mov    %rax,0x210318(%rip)        # 22d060 <slotvec>
   1cd48:	50                   	push   %rax
   1cd49:	48 b8 e9 a0 3d df 00 	movabs $0xdf3da0e9,%rax
   1cd50:	00 00 00 
   1cd53:	48 89 05 e6 6b 73 00 	mov    %rax,0x736be6(%rip)        # 753940 <edgeId>
   1cd5a:	58                   	pop    %rax
   1cd5b:	e8 80 8a fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1cd60:	8b 3d f2 02 21 00    	mov    0x2102f2(%rip),%edi        # 22d058 <nslots>
   1cd66:	31 f6                	xor    %esi,%esi
   1cd68:	48 29 fa             	sub    %rdi,%rdx
   1cd6b:	48 c1 e7 04          	shl    $0x4,%rdi
   1cd6f:	48 c1 e2 04          	shl    $0x4,%rdx
   1cd73:	48 01 df             	add    %rbx,%rdi
   1cd76:	e8 75 4c fe ff       	callq  19f0 <memset@plt>
   1cd7b:	8b 74 24 24          	mov    0x24(%rsp),%esi
      nslots = n1;
   1cd7f:	44 89 25 d2 02 21 00 	mov    %r12d,0x2102d2(%rip)        # 22d058 <nslots>
   1cd86:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
   1cd8b:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1cd90:	44 8b 44 24 20       	mov    0x20(%rsp),%r8d
   1cd95:	83 ce 01             	or     $0x1,%esi
   1cd98:	89 74 24 08          	mov    %esi,0x8(%rsp)
   1cd9c:	e9 ab fc ff ff       	jmpq   1ca4c <quotearg_n_style_mem+0x19c>
   1cda1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1cda8:	50                   	push   %rax
   1cda9:	48 c7 c0 a7 45 08 74 	mov    $0x740845a7,%rax
   1cdb0:	48 89 05 89 6b 73 00 	mov    %rax,0x736b89(%rip)        # 753940 <edgeId>
   1cdb7:	58                   	pop    %rax
   1cdb8:	e8 23 8a fe ff       	callq  57e0 <_storeEdge>
   1cdbd:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1cdc2:	31 ff                	xor    %edi,%edi
   1cdc4:	e8 37 6b 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1cdc9:	66 0f 6f 15 9f 02 21 	movdqa 0x21029f(%rip),%xmm2        # 22d070 <slotvec0>
   1cdd0:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1cdd1:	48 89 c3             	mov    %rax,%rbx
   1cdd4:	48 89 05 85 02 21 00 	mov    %rax,0x210285(%rip)        # 22d060 <slotvec>
   1cddb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
        *sv = slotvec0;
   1cde0:	0f 11 10             	movups %xmm2,(%rax)
   1cde3:	e9 60 ff ff ff       	jmpq   1cd48 <quotearg_n_style_mem+0x498>
   1cde8:	50                   	push   %rax
   1cde9:	48 c7 c0 02 1d 34 57 	mov    $0x57341d02,%rax
   1cdf0:	48 89 05 49 6b 73 00 	mov    %rax,0x736b49(%rip)        # 753940 <edgeId>
   1cdf7:	58                   	pop    %rax
   1cdf8:	e8 e3 89 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1cdfd:	e8 7e 4a fe ff       	callq  1880 <abort@plt>
   1ce02:	50                   	push   %rax
   1ce03:	48 b8 0e 9a ab b4 00 	movabs $0xb4ab9a0e,%rax
   1ce0a:	00 00 00 
   1ce0d:	48 89 05 2c 6b 73 00 	mov    %rax,0x736b2c(%rip)        # 753940 <edgeId>
   1ce14:	58                   	pop    %rax
   1ce15:	e8 c6 89 fe ff       	callq  57e0 <_storeEdge>
}
   1ce1a:	e8 31 4b fe ff       	callq  1950 <__stack_chk_fail@plt>
   1ce1f:	90                   	nop

000000000001ce20 <quotearg_style>:

char *
quotearg_style (enum quoting_style s, char const *arg)
{
   1ce20:	41 57                	push   %r15
   1ce22:	41 56                	push   %r14
   1ce24:	41 55                	push   %r13
   1ce26:	41 54                	push   %r12
   1ce28:	55                   	push   %rbp
   1ce29:	53                   	push   %rbx
   1ce2a:	48 83 ec 58          	sub    $0x58,%rsp
   1ce2e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1ce35:	00 00 
   1ce37:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1ce3c:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
   1ce3e:	48 89 15 d3 6a 73 00 	mov    %rdx,0x736ad3(%rip)        # 753918 <tmpquadone>
   1ce45:	48 89 0d e4 0d 5e 00 	mov    %rcx,0x5e0de4(%rip)        # 5fdc30 <tmpquadtwo>
   1ce4c:	48 8d 15 9d 0d 5e 00 	lea    0x5e0d9d(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ce53:	48 c7 02 ad 0a 00 00 	movq   $0xaad,(%rdx)
   1ce5a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1ce61:	00 
   1ce62:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   1ce69:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ce6d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ce74:	00 
   1ce75:	48 89 f9             	mov    %rdi,%rcx
   1ce78:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1ce7c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ce83:	00 
   1ce84:	ff 32                	pushq  (%rdx)
   1ce86:	48 8b 15 8b 6a 73 00 	mov    0x736a8b(%rip),%rdx        # 753918 <tmpquadone>
   1ce8d:	48 8b 0d 9c 0d 5e 00 	mov    0x5e0d9c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ce94:	48 c7 05 b1 6a 73 00 	movq   $0x1,0x736ab1(%rip)        # 753950 <cmpPassed>
   1ce9b:	01 00 00 00 
   1ce9f:	e8 d4 89 fe ff       	callq  5878 <_storeDataFn>
   1cea4:	83 ff 08             	cmp    $0x8,%edi
   1cea7:	0f 84 26 04 00 00    	je     1d2d3 <quotearg_style+0x4b3>
   1cead:	50                   	push   %rax
   1ceae:	48 c7 c0 21 c5 b0 1e 	mov    $0x1eb0c521,%rax
   1ceb5:	48 89 05 84 6a 73 00 	mov    %rax,0x736a84(%rip)        # 753940 <edgeId>
   1cebc:	58                   	pop    %rax
   1cebd:	e8 1e 89 fe ff       	callq  57e0 <_storeEdge>
  return o;
   1cec2:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1cec6:	49 89 f6             	mov    %rsi,%r14
   1cec9:	89 7c 24 10          	mov    %edi,0x10(%rsp)
   1cecd:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1ced1:	89 7c 24 08          	mov    %edi,0x8(%rsp)
   1ced5:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
   1cedc:	00 
   1cedd:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   1cee2:	0f 11 44 24 28       	movups %xmm0,0x28(%rsp)
   1cee7:	0f 11 4c 24 38       	movups %xmm1,0x38(%rsp)
  int e = errno;
   1ceec:	e8 9f 49 fe ff       	callq  1890 <__errno_location@plt>
   1cef1:	49 89 c5             	mov    %rax,%r13
  if (nslots <= n0)
   1cef4:	8b 15 5e 01 21 00    	mov    0x21015e(%rip),%edx        # 22d058 <nslots>
  int e = errno;
   1cefa:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   1cefc:	48 8b 1d 5d 01 21 00 	mov    0x21015d(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1cf03:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
   1cf08:	85 d2                	test   %edx,%edx
  int e = errno;
   1cf0a:	89 44 24 04          	mov    %eax,0x4(%rsp)
  if (nslots <= n0)
   1cf0e:	0f 84 4c 02 00 00    	je     1d160 <quotearg_style+0x340>
   1cf14:	50                   	push   %rax
   1cf15:	48 c7 c0 63 9f 9d 6d 	mov    $0x6d9d9f63,%rax
   1cf1c:	48 89 05 1d 6a 73 00 	mov    %rax,0x736a1d(%rip)        # 753940 <edgeId>
   1cf23:	58                   	pop    %rax
   1cf24:	e8 b7 88 fe ff       	callq  57e0 <_storeEdge>
   1cf29:	31 c9                	xor    %ecx,%ecx
   1cf2b:	31 f6                	xor    %esi,%esi
   1cf2d:	41 bc 01 00 00 00    	mov    $0x1,%r12d
   1cf33:	50                   	push   %rax
   1cf34:	48 c7 c0 fb ec 6c 7b 	mov    $0x7b6cecfb,%rax
   1cf3b:	48 89 05 fe 69 73 00 	mov    %rax,0x7369fe(%rip)        # 753940 <edgeId>
   1cf42:	58                   	pop    %rax
   1cf43:	e8 98 88 fe ff       	callq  57e0 <_storeEdge>
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1cf48:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1cf4c:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1cf4f:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1cf53:	56                   	push   %rsi
   1cf54:	51                   	push   %rcx
   1cf55:	4c 89 f2             	mov    %r14,%rdx
   1cf58:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1cf5f:	48 8d 6c 24 28       	lea    0x28(%rsp),%rbp
   1cf64:	4c 89 de             	mov    %r11,%rsi
   1cf67:	4c 89 ff             	mov    %r15,%rdi
   1cf6a:	4c 8d 4d 08          	lea    0x8(%rbp),%r9
   1cf6e:	41 51                	push   %r9
   1cf70:	45 89 e1             	mov    %r12d,%r9d
   1cf73:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
   1cf78:	e8 83 5e ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1cf7d:	48 83 c4 20          	add    $0x20,%rsp
   1cf81:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   1cf86:	48 89 15 8b 69 73 00 	mov    %rdx,0x73698b(%rip)        # 753918 <tmpquadone>
   1cf8d:	48 89 0d 9c 0c 5e 00 	mov    %rcx,0x5e0c9c(%rip)        # 5fdc30 <tmpquadtwo>
   1cf94:	48 8d 15 55 0c 5e 00 	lea    0x5e0c55(%rip),%rdx        # 5fdbf0 <funcinptr>
   1cf9b:	48 c7 02 ae 0a 00 00 	movq   $0xaae,(%rdx)
   1cfa2:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1cfa9:	00 
   1cfaa:	48 89 c1             	mov    %rax,%rcx
   1cfad:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1cfb1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1cfb8:	00 
   1cfb9:	4c 89 d1             	mov    %r10,%rcx
   1cfbc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1cfc0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1cfc7:	00 
   1cfc8:	ff 32                	pushq  (%rdx)
   1cfca:	48 8b 15 47 69 73 00 	mov    0x736947(%rip),%rdx        # 753918 <tmpquadone>
   1cfd1:	48 8b 0d 58 0c 5e 00 	mov    0x5e0c58(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1cfd8:	48 c7 05 6d 69 73 00 	movq   $0x1,0x73696d(%rip)        # 753950 <cmpPassed>
   1cfdf:	01 00 00 00 
   1cfe3:	e8 90 88 fe ff       	callq  5878 <_storeDataFn>
   1cfe8:	49 39 c2             	cmp    %rax,%r10
   1cfeb:	0f 87 11 01 00 00    	ja     1d102 <quotearg_style+0x2e2>
   1cff1:	50                   	push   %rax
   1cff2:	48 c7 c0 d7 c4 cc 60 	mov    $0x60ccc4d7,%rax
   1cff9:	48 89 05 40 69 73 00 	mov    %rax,0x736940(%rip)        # 753940 <edgeId>
   1d000:	58                   	pop    %rax
   1d001:	e8 da 87 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1d006:	4c 8d 05 33 0a 5e 00 	lea    0x5e0a33(%rip),%r8        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1d00d:	48 8d 40 01          	lea    0x1(%rax),%rax
        if (val != slot0)
   1d011:	48 89 15 00 69 73 00 	mov    %rdx,0x736900(%rip)        # 753918 <tmpquadone>
   1d018:	48 89 0d 11 0c 5e 00 	mov    %rcx,0x5e0c11(%rip)        # 5fdc30 <tmpquadtwo>
   1d01f:	48 8d 15 ca 0b 5e 00 	lea    0x5e0bca(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d026:	48 c7 02 af 0a 00 00 	movq   $0xaaf,(%rdx)
   1d02d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d034:	00 
   1d035:	4c 89 c1             	mov    %r8,%rcx
   1d038:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d03c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d043:	00 
   1d044:	4c 89 f9             	mov    %r15,%rcx
   1d047:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d04b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d052:	00 
   1d053:	ff 32                	pushq  (%rdx)
   1d055:	48 8b 15 bc 68 73 00 	mov    0x7368bc(%rip),%rdx        # 753918 <tmpquadone>
   1d05c:	48 8b 0d cd 0b 5e 00 	mov    0x5e0bcd(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d063:	48 c7 05 e2 68 73 00 	movq   $0x1,0x7368e2(%rip)        # 753950 <cmpPassed>
   1d06a:	01 00 00 00 
   1d06e:	e8 05 88 fe ff       	callq  5878 <_storeDataFn>
   1d073:	4d 39 c7             	cmp    %r8,%r15
        sv[n].size = size = qsize + 1;
   1d076:	48 89 03             	mov    %rax,(%rbx)
        if (val != slot0)
   1d079:	74 2a                	je     1d0a5 <quotearg_style+0x285>
   1d07b:	50                   	push   %rax
   1d07c:	48 b8 98 19 4c 82 00 	movabs $0x824c1998,%rax
   1d083:	00 00 00 
   1d086:	48 89 05 b3 68 73 00 	mov    %rax,0x7368b3(%rip)        # 753940 <edgeId>
   1d08d:	58                   	pop    %rax
   1d08e:	e8 4d 87 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1d093:	4c 89 ff             	mov    %r15,%rdi
   1d096:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   1d09b:	e8 d0 47 fe ff       	callq  1870 <free@plt>
   1d0a0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1d0a5:	50                   	push   %rax
   1d0a6:	48 c7 c0 19 4c 82 5b 	mov    $0x5b824c19,%rax
   1d0ad:	48 89 05 8c 68 73 00 	mov    %rax,0x73688c(%rip)        # 753940 <edgeId>
   1d0b4:	58                   	pop    %rax
   1d0b5:	e8 26 87 fe ff       	callq  57e0 <_storeEdge>
   1d0ba:	48 89 c7             	mov    %rax,%rdi
   1d0bd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1d0c2:	48 83 c5 08          	add    $0x8,%rbp
   1d0c6:	e8 b5 67 00 00       	callq  23880 <xmalloc>
   1d0cb:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1d0cf:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1d0d3:	45 89 e1             	mov    %r12d,%r9d
   1d0d6:	ff 74 24 48          	pushq  0x48(%rsp)
   1d0da:	ff 74 24 48          	pushq  0x48(%rsp)
   1d0de:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1d0e5:	55                   	push   %rbp
   1d0e6:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1d0eb:	4c 89 f2             	mov    %r14,%rdx
   1d0ee:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   1d0f3:	48 89 c7             	mov    %rax,%rdi
   1d0f6:	49 89 c7             	mov    %rax,%r15
   1d0f9:	e8 02 5d ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1d0fe:	48 83 c4 20          	add    $0x20,%rsp
   1d102:	50                   	push   %rax
   1d103:	48 c7 c0 0e 86 d4 71 	mov    $0x71d4860e,%rax
   1d10a:	48 89 05 2f 68 73 00 	mov    %rax,0x73682f(%rip)        # 753940 <edgeId>
   1d111:	58                   	pop    %rax
   1d112:	e8 c9 86 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1d117:	44 8b 74 24 04       	mov    0x4(%rsp),%r14d
  return quotearg_n_style (0, s, arg);
}
   1d11c:	4c 89 f8             	mov    %r15,%rax
   1d11f:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1d124:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1d12b:	00 00 
    errno = e;
   1d12d:	45 89 75 00          	mov    %r14d,0x0(%r13)
}
   1d131:	0f 85 7f 01 00 00    	jne    1d2b6 <quotearg_style+0x496>
   1d137:	50                   	push   %rax
   1d138:	48 b8 8e dc 23 d3 00 	movabs $0xd323dc8e,%rax
   1d13f:	00 00 00 
   1d142:	48 89 05 f7 67 73 00 	mov    %rax,0x7367f7(%rip)        # 753940 <edgeId>
   1d149:	58                   	pop    %rax
   1d14a:	e8 91 86 fe ff       	callq  57e0 <_storeEdge>
   1d14f:	48 83 c4 58          	add    $0x58,%rsp
   1d153:	5b                   	pop    %rbx
   1d154:	5d                   	pop    %rbp
   1d155:	41 5c                	pop    %r12
   1d157:	41 5d                	pop    %r13
   1d159:	41 5e                	pop    %r14
   1d15b:	41 5f                	pop    %r15
   1d15d:	c3                   	retq   
   1d15e:	66 90                	xchg   %ax,%ax
   1d160:	50                   	push   %rax
   1d161:	48 c7 c0 32 dd bf 4d 	mov    $0x4dbfdd32,%rax
   1d168:	48 89 05 d1 67 73 00 	mov    %rax,0x7367d1(%rip)        # 753940 <edgeId>
   1d16f:	58                   	pop    %rax
   1d170:	e8 6b 86 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d175:	48 8d 3d f4 fe 20 00 	lea    0x20fef4(%rip),%rdi        # 22d070 <slotvec0>
   1d17c:	48 89 15 95 67 73 00 	mov    %rdx,0x736795(%rip)        # 753918 <tmpquadone>
   1d183:	48 89 0d a6 0a 5e 00 	mov    %rcx,0x5e0aa6(%rip)        # 5fdc30 <tmpquadtwo>
   1d18a:	48 8d 15 5f 0a 5e 00 	lea    0x5e0a5f(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d191:	48 c7 02 b0 0a 00 00 	movq   $0xab0,(%rdx)
   1d198:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d19f:	00 
   1d1a0:	48 89 f9             	mov    %rdi,%rcx
   1d1a3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d1a7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d1ae:	00 
   1d1af:	48 89 d9             	mov    %rbx,%rcx
   1d1b2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d1b6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d1bd:	00 
   1d1be:	ff 32                	pushq  (%rdx)
   1d1c0:	48 8b 15 51 67 73 00 	mov    0x736751(%rip),%rdx        # 753918 <tmpquadone>
   1d1c7:	48 8b 0d 62 0a 5e 00 	mov    0x5e0a62(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d1ce:	48 c7 05 77 67 73 00 	movq   $0x1,0x736777(%rip)        # 753950 <cmpPassed>
   1d1d5:	01 00 00 00 
   1d1d9:	e8 9a 86 fe ff       	callq  5878 <_storeDataFn>
   1d1de:	48 39 fb             	cmp    %rdi,%rbx
   1d1e1:	0f 84 91 00 00 00    	je     1d278 <quotearg_style+0x458>
   1d1e7:	50                   	push   %rax
   1d1e8:	48 b8 f7 6f 13 ad 00 	movabs $0xad136ff7,%rax
   1d1ef:	00 00 00 
   1d1f2:	48 89 05 47 67 73 00 	mov    %rax,0x736747(%rip)        # 753940 <edgeId>
   1d1f9:	58                   	pop    %rax
   1d1fa:	e8 e1 85 fe ff       	callq  57e0 <_storeEdge>
   1d1ff:	48 89 df             	mov    %rbx,%rdi
   1d202:	be 10 00 00 00       	mov    $0x10,%esi
   1d207:	e8 f4 66 00 00       	callq  23900 <xrealloc>
   1d20c:	48 89 c3             	mov    %rax,%rbx
   1d20f:	48 89 05 4a fe 20 00 	mov    %rax,0x20fe4a(%rip)        # 22d060 <slotvec>
   1d216:	50                   	push   %rax
   1d217:	48 c7 c0 6f 13 ad 45 	mov    $0x45ad136f,%rax
   1d21e:	48 89 05 1b 67 73 00 	mov    %rax,0x73671b(%rip)        # 753940 <edgeId>
   1d225:	58                   	pop    %rax
   1d226:	e8 b5 85 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1d22b:	8b 3d 27 fe 20 00    	mov    0x20fe27(%rip),%edi        # 22d058 <nslots>
   1d231:	ba 01 00 00 00       	mov    $0x1,%edx
   1d236:	31 f6                	xor    %esi,%esi
   1d238:	48 29 fa             	sub    %rdi,%rdx
   1d23b:	48 c1 e7 04          	shl    $0x4,%rdi
   1d23f:	48 c1 e2 04          	shl    $0x4,%rdx
   1d243:	48 01 df             	add    %rbx,%rdi
   1d246:	e8 a5 47 fe ff       	callq  19f0 <memset@plt>
   1d24b:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
      nslots = n1;
   1d250:	c7 05 fe fd 20 00 01 	movl   $0x1,0x20fdfe(%rip)        # 22d058 <nslots>
   1d257:	00 00 00 
   1d25a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   1d25f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   1d264:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   1d269:	41 83 cc 01          	or     $0x1,%r12d
   1d26d:	e9 c1 fc ff ff       	jmpq   1cf33 <quotearg_style+0x113>
   1d272:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1d278:	50                   	push   %rax
   1d279:	48 b8 6e 10 90 d4 00 	movabs $0xd490106e,%rax
   1d280:	00 00 00 
   1d283:	48 89 05 b6 66 73 00 	mov    %rax,0x7366b6(%rip)        # 753940 <edgeId>
   1d28a:	58                   	pop    %rax
   1d28b:	e8 50 85 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d290:	be 10 00 00 00       	mov    $0x10,%esi
   1d295:	31 ff                	xor    %edi,%edi
   1d297:	e8 64 66 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1d29c:	66 0f 6f 15 cc fd 20 	movdqa 0x20fdcc(%rip),%xmm2        # 22d070 <slotvec0>
   1d2a3:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d2a4:	48 89 c3             	mov    %rax,%rbx
   1d2a7:	48 89 05 b2 fd 20 00 	mov    %rax,0x20fdb2(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1d2ae:	0f 11 10             	movups %xmm2,(%rax)
   1d2b1:	e9 60 ff ff ff       	jmpq   1d216 <quotearg_style+0x3f6>
   1d2b6:	50                   	push   %rax
   1d2b7:	48 b8 90 d4 b3 91 00 	movabs $0x91b3d490,%rax
   1d2be:	00 00 00 
   1d2c1:	48 89 05 78 66 73 00 	mov    %rax,0x736678(%rip)        # 753940 <edgeId>
   1d2c8:	58                   	pop    %rax
   1d2c9:	e8 12 85 fe ff       	callq  57e0 <_storeEdge>
}
   1d2ce:	e8 7d 46 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1d2d3:	50                   	push   %rax
   1d2d4:	48 c7 c0 ea d9 c8 69 	mov    $0x69c8d9ea,%rax
   1d2db:	48 89 05 5e 66 73 00 	mov    %rax,0x73665e(%rip)        # 753940 <edgeId>
   1d2e2:	58                   	pop    %rax
   1d2e3:	e8 f8 84 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1d2e8:	e8 93 45 fe ff       	callq  1880 <abort@plt>
   1d2ed:	0f 1f 00             	nopl   (%rax)

000000000001d2f0 <quotearg_style_mem>:

char *
quotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)
{
   1d2f0:	41 57                	push   %r15
   1d2f2:	41 56                	push   %r14
   1d2f4:	41 55                	push   %r13
   1d2f6:	41 54                	push   %r12
   1d2f8:	55                   	push   %rbp
   1d2f9:	53                   	push   %rbx
   1d2fa:	48 83 ec 58          	sub    $0x58,%rsp
   1d2fe:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d305:	00 00 
   1d307:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1d30c:	31 c0                	xor    %eax,%eax
  if (style == custom_quoting_style)
   1d30e:	48 89 15 03 66 73 00 	mov    %rdx,0x736603(%rip)        # 753918 <tmpquadone>
   1d315:	48 89 0d 14 09 5e 00 	mov    %rcx,0x5e0914(%rip)        # 5fdc30 <tmpquadtwo>
   1d31c:	48 8d 15 cd 08 5e 00 	lea    0x5e08cd(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d323:	48 c7 02 b1 0a 00 00 	movq   $0xab1,(%rdx)
   1d32a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1d331:	00 
   1d332:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
   1d339:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d33d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d344:	00 
   1d345:	48 89 f9             	mov    %rdi,%rcx
   1d348:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d34c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d353:	00 
   1d354:	ff 32                	pushq  (%rdx)
   1d356:	48 8b 15 bb 65 73 00 	mov    0x7365bb(%rip),%rdx        # 753918 <tmpquadone>
   1d35d:	48 8b 0d cc 08 5e 00 	mov    0x5e08cc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d364:	48 c7 05 e1 65 73 00 	movq   $0x1,0x7365e1(%rip)        # 753950 <cmpPassed>
   1d36b:	01 00 00 00 
   1d36f:	e8 04 85 fe ff       	callq  5878 <_storeDataFn>
   1d374:	83 ff 08             	cmp    $0x8,%edi
   1d377:	0f 84 2e 04 00 00    	je     1d7ab <quotearg_style_mem+0x4bb>
   1d37d:	50                   	push   %rax
   1d37e:	48 b8 fb 32 d4 ef 00 	movabs $0xefd432fb,%rax
   1d385:	00 00 00 
   1d388:	48 89 05 b1 65 73 00 	mov    %rax,0x7365b1(%rip)        # 753940 <edgeId>
   1d38f:	58                   	pop    %rax
   1d390:	e8 4b 84 fe ff       	callq  57e0 <_storeEdge>
  return o;
   1d395:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1d399:	49 89 d7             	mov    %rdx,%r15
   1d39c:	49 89 f6             	mov    %rsi,%r14
   1d39f:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1d3a3:	89 7c 24 10          	mov    %edi,0x10(%rsp)
   1d3a7:	89 3c 24             	mov    %edi,(%rsp)
   1d3aa:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
   1d3b1:	00 
   1d3b2:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   1d3b7:	0f 11 44 24 28       	movups %xmm0,0x28(%rsp)
   1d3bc:	0f 11 4c 24 38       	movups %xmm1,0x38(%rsp)
  int e = errno;
   1d3c1:	e8 ca 44 fe ff       	callq  1890 <__errno_location@plt>
   1d3c6:	49 89 c5             	mov    %rax,%r13
  if (nslots <= n0)
   1d3c9:	8b 15 89 fc 20 00    	mov    0x20fc89(%rip),%edx        # 22d058 <nslots>
  int e = errno;
   1d3cf:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   1d3d1:	48 8b 1d 88 fc 20 00 	mov    0x20fc88(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1d3d8:	44 8b 04 24          	mov    (%rsp),%r8d
   1d3dc:	85 d2                	test   %edx,%edx
  int e = errno;
   1d3de:	89 44 24 04          	mov    %eax,0x4(%rsp)
  if (nslots <= n0)
   1d3e2:	0f 84 50 02 00 00    	je     1d638 <quotearg_style_mem+0x348>
   1d3e8:	50                   	push   %rax
   1d3e9:	48 b8 1e da d0 8c 00 	movabs $0x8cd0da1e,%rax
   1d3f0:	00 00 00 
   1d3f3:	48 89 05 46 65 73 00 	mov    %rax,0x736546(%rip)        # 753940 <edgeId>
   1d3fa:	58                   	pop    %rax
   1d3fb:	e8 e0 83 fe ff       	callq  57e0 <_storeEdge>
   1d400:	31 c9                	xor    %ecx,%ecx
   1d402:	31 f6                	xor    %esi,%esi
   1d404:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
   1d40b:	50                   	push   %rax
   1d40c:	48 b8 d0 86 66 94 00 	movabs $0x946686d0,%rax
   1d413:	00 00 00 
   1d416:	48 89 05 23 65 73 00 	mov    %rax,0x736523(%rip)        # 753940 <edgeId>
   1d41d:	58                   	pop    %rax
   1d41e:	e8 bd 83 fe ff       	callq  57e0 <_storeEdge>
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1d423:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1d427:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1d42a:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1d42e:	56                   	push   %rsi
   1d42f:	51                   	push   %rcx
   1d430:	4c 89 f2             	mov    %r14,%rdx
   1d433:	4c 89 f9             	mov    %r15,%rcx
   1d436:	48 8d 6c 24 28       	lea    0x28(%rsp),%rbp
   1d43b:	4c 89 de             	mov    %r11,%rsi
   1d43e:	4c 89 e7             	mov    %r12,%rdi
   1d441:	4c 8d 4d 08          	lea    0x8(%rbp),%r9
   1d445:	41 51                	push   %r9
   1d447:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   1d44c:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
   1d451:	e8 aa 59 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1d456:	48 83 c4 20          	add    $0x20,%rsp
   1d45a:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   1d45f:	48 89 15 b2 64 73 00 	mov    %rdx,0x7364b2(%rip)        # 753918 <tmpquadone>
   1d466:	48 89 0d c3 07 5e 00 	mov    %rcx,0x5e07c3(%rip)        # 5fdc30 <tmpquadtwo>
   1d46d:	48 8d 15 7c 07 5e 00 	lea    0x5e077c(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d474:	48 c7 02 b2 0a 00 00 	movq   $0xab2,(%rdx)
   1d47b:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d482:	00 
   1d483:	48 89 c1             	mov    %rax,%rcx
   1d486:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d48a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d491:	00 
   1d492:	4c 89 d1             	mov    %r10,%rcx
   1d495:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d499:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d4a0:	00 
   1d4a1:	ff 32                	pushq  (%rdx)
   1d4a3:	48 8b 15 6e 64 73 00 	mov    0x73646e(%rip),%rdx        # 753918 <tmpquadone>
   1d4aa:	48 8b 0d 7f 07 5e 00 	mov    0x5e077f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d4b1:	48 c7 05 94 64 73 00 	movq   $0x1,0x736494(%rip)        # 753950 <cmpPassed>
   1d4b8:	01 00 00 00 
   1d4bc:	e8 b7 83 fe ff       	callq  5878 <_storeDataFn>
   1d4c1:	49 39 c2             	cmp    %rax,%r10
   1d4c4:	0f 87 0f 01 00 00    	ja     1d5d9 <quotearg_style_mem+0x2e9>
   1d4ca:	50                   	push   %rax
   1d4cb:	48 b8 1d 8b 33 ac 00 	movabs $0xac338b1d,%rax
   1d4d2:	00 00 00 
   1d4d5:	48 89 05 64 64 73 00 	mov    %rax,0x736464(%rip)        # 753940 <edgeId>
   1d4dc:	58                   	pop    %rax
   1d4dd:	e8 fe 82 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1d4e2:	4c 8d 05 57 05 5e 00 	lea    0x5e0557(%rip),%r8        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1d4e9:	48 8d 40 01          	lea    0x1(%rax),%rax
        if (val != slot0)
   1d4ed:	48 89 15 24 64 73 00 	mov    %rdx,0x736424(%rip)        # 753918 <tmpquadone>
   1d4f4:	48 89 0d 35 07 5e 00 	mov    %rcx,0x5e0735(%rip)        # 5fdc30 <tmpquadtwo>
   1d4fb:	48 8d 15 ee 06 5e 00 	lea    0x5e06ee(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d502:	48 c7 02 b3 0a 00 00 	movq   $0xab3,(%rdx)
   1d509:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d510:	00 
   1d511:	4c 89 c1             	mov    %r8,%rcx
   1d514:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d518:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d51f:	00 
   1d520:	4c 89 e1             	mov    %r12,%rcx
   1d523:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d527:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d52e:	00 
   1d52f:	ff 32                	pushq  (%rdx)
   1d531:	48 8b 15 e0 63 73 00 	mov    0x7363e0(%rip),%rdx        # 753918 <tmpquadone>
   1d538:	48 8b 0d f1 06 5e 00 	mov    0x5e06f1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d53f:	48 c7 05 06 64 73 00 	movq   $0x1,0x736406(%rip)        # 753950 <cmpPassed>
   1d546:	01 00 00 00 
   1d54a:	e8 29 83 fe ff       	callq  5878 <_storeDataFn>
   1d54f:	4d 39 c4             	cmp    %r8,%r12
        sv[n].size = size = qsize + 1;
   1d552:	48 89 03             	mov    %rax,(%rbx)
        if (val != slot0)
   1d555:	74 27                	je     1d57e <quotearg_style_mem+0x28e>
   1d557:	50                   	push   %rax
   1d558:	48 c7 c0 71 86 b5 24 	mov    $0x24b58671,%rax
   1d55f:	48 89 05 da 63 73 00 	mov    %rax,0x7363da(%rip)        # 753940 <edgeId>
   1d566:	58                   	pop    %rax
   1d567:	e8 74 82 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1d56c:	4c 89 e7             	mov    %r12,%rdi
   1d56f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   1d574:	e8 f7 42 fe ff       	callq  1870 <free@plt>
   1d579:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1d57e:	50                   	push   %rax
   1d57f:	48 c7 c0 86 b5 24 25 	mov    $0x2524b586,%rax
   1d586:	48 89 05 b3 63 73 00 	mov    %rax,0x7363b3(%rip)        # 753940 <edgeId>
   1d58d:	58                   	pop    %rax
   1d58e:	e8 4d 82 fe ff       	callq  57e0 <_storeEdge>
   1d593:	48 89 c7             	mov    %rax,%rdi
   1d596:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1d59b:	48 83 c5 08          	add    $0x8,%rbp
   1d59f:	e8 dc 62 00 00       	callq  23880 <xmalloc>
   1d5a4:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1d5a8:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1d5ac:	4c 89 f9             	mov    %r15,%rcx
   1d5af:	ff 74 24 48          	pushq  0x48(%rsp)
   1d5b3:	ff 74 24 48          	pushq  0x48(%rsp)
   1d5b7:	4c 89 f2             	mov    %r14,%rdx
   1d5ba:	55                   	push   %rbp
   1d5bb:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   1d5c0:	48 89 c7             	mov    %rax,%rdi
   1d5c3:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1d5c8:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   1d5cd:	49 89 c4             	mov    %rax,%r12
   1d5d0:	e8 2b 58 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1d5d5:	48 83 c4 20          	add    $0x20,%rsp
   1d5d9:	50                   	push   %rax
   1d5da:	48 c7 c0 89 95 d0 2e 	mov    $0x2ed09589,%rax
   1d5e1:	48 89 05 58 63 73 00 	mov    %rax,0x736358(%rip)        # 753940 <edgeId>
   1d5e8:	58                   	pop    %rax
   1d5e9:	e8 f2 81 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1d5ee:	44 8b 74 24 04       	mov    0x4(%rsp),%r14d
  return quotearg_n_style_mem (0, s, arg, argsize);
}
   1d5f3:	4c 89 e0             	mov    %r12,%rax
   1d5f6:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1d5fb:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1d602:	00 00 
    errno = e;
   1d604:	45 89 75 00          	mov    %r14d,0x0(%r13)
}
   1d608:	0f 85 80 01 00 00    	jne    1d78e <quotearg_style_mem+0x49e>
   1d60e:	50                   	push   %rax
   1d60f:	48 b8 a5 1f f3 a4 00 	movabs $0xa4f31fa5,%rax
   1d616:	00 00 00 
   1d619:	48 89 05 20 63 73 00 	mov    %rax,0x736320(%rip)        # 753940 <edgeId>
   1d620:	58                   	pop    %rax
   1d621:	e8 ba 81 fe ff       	callq  57e0 <_storeEdge>
   1d626:	48 83 c4 58          	add    $0x58,%rsp
   1d62a:	5b                   	pop    %rbx
   1d62b:	5d                   	pop    %rbp
   1d62c:	41 5c                	pop    %r12
   1d62e:	41 5d                	pop    %r13
   1d630:	41 5e                	pop    %r14
   1d632:	41 5f                	pop    %r15
   1d634:	c3                   	retq   
   1d635:	0f 1f 00             	nopl   (%rax)
   1d638:	50                   	push   %rax
   1d639:	48 c7 c0 27 6d cf 18 	mov    $0x18cf6d27,%rax
   1d640:	48 89 05 f9 62 73 00 	mov    %rax,0x7362f9(%rip)        # 753940 <edgeId>
   1d647:	58                   	pop    %rax
   1d648:	e8 93 81 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d64d:	48 8d 3d 1c fa 20 00 	lea    0x20fa1c(%rip),%rdi        # 22d070 <slotvec0>
   1d654:	48 89 15 bd 62 73 00 	mov    %rdx,0x7362bd(%rip)        # 753918 <tmpquadone>
   1d65b:	48 89 0d ce 05 5e 00 	mov    %rcx,0x5e05ce(%rip)        # 5fdc30 <tmpquadtwo>
   1d662:	48 8d 15 87 05 5e 00 	lea    0x5e0587(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d669:	48 c7 02 b4 0a 00 00 	movq   $0xab4,(%rdx)
   1d670:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d677:	00 
   1d678:	48 89 f9             	mov    %rdi,%rcx
   1d67b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d67f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d686:	00 
   1d687:	48 89 d9             	mov    %rbx,%rcx
   1d68a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d68e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d695:	00 
   1d696:	ff 32                	pushq  (%rdx)
   1d698:	48 8b 15 79 62 73 00 	mov    0x736279(%rip),%rdx        # 753918 <tmpquadone>
   1d69f:	48 8b 0d 8a 05 5e 00 	mov    0x5e058a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d6a6:	48 c7 05 9f 62 73 00 	movq   $0x1,0x73629f(%rip)        # 753950 <cmpPassed>
   1d6ad:	01 00 00 00 
   1d6b1:	e8 c2 81 fe ff       	callq  5878 <_storeDataFn>
   1d6b6:	48 39 fb             	cmp    %rdi,%rbx
   1d6b9:	0f 84 91 00 00 00    	je     1d750 <quotearg_style_mem+0x460>
   1d6bf:	50                   	push   %rax
   1d6c0:	48 c7 c0 db 33 86 79 	mov    $0x798633db,%rax
   1d6c7:	48 89 05 72 62 73 00 	mov    %rax,0x736272(%rip)        # 753940 <edgeId>
   1d6ce:	58                   	pop    %rax
   1d6cf:	e8 0c 81 fe ff       	callq  57e0 <_storeEdge>
   1d6d4:	48 89 df             	mov    %rbx,%rdi
   1d6d7:	be 10 00 00 00       	mov    $0x10,%esi
   1d6dc:	e8 1f 62 00 00       	callq  23900 <xrealloc>
   1d6e1:	48 89 c3             	mov    %rax,%rbx
   1d6e4:	48 89 05 75 f9 20 00 	mov    %rax,0x20f975(%rip)        # 22d060 <slotvec>
   1d6eb:	50                   	push   %rax
   1d6ec:	48 c7 c0 33 86 79 49 	mov    $0x49798633,%rax
   1d6f3:	48 89 05 46 62 73 00 	mov    %rax,0x736246(%rip)        # 753940 <edgeId>
   1d6fa:	58                   	pop    %rax
   1d6fb:	e8 e0 80 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1d700:	8b 3d 52 f9 20 00    	mov    0x20f952(%rip),%edi        # 22d058 <nslots>
   1d706:	ba 01 00 00 00       	mov    $0x1,%edx
   1d70b:	31 f6                	xor    %esi,%esi
   1d70d:	48 29 fa             	sub    %rdi,%rdx
   1d710:	48 c1 e7 04          	shl    $0x4,%rdi
   1d714:	48 c1 e2 04          	shl    $0x4,%rdx
   1d718:	48 01 df             	add    %rbx,%rdi
   1d71b:	e8 d0 42 fe ff       	callq  19f0 <memset@plt>
   1d720:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
      nslots = n1;
   1d724:	c7 05 2a f9 20 00 01 	movl   $0x1,0x20f92a(%rip)        # 22d058 <nslots>
   1d72b:	00 00 00 
   1d72e:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   1d733:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   1d738:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   1d73d:	83 cd 01             	or     $0x1,%ebp
   1d740:	89 2c 24             	mov    %ebp,(%rsp)
   1d743:	e9 c3 fc ff ff       	jmpq   1d40b <quotearg_style_mem+0x11b>
   1d748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d74f:	00 
   1d750:	50                   	push   %rax
   1d751:	48 b8 a3 24 bf bf 00 	movabs $0xbfbf24a3,%rax
   1d758:	00 00 00 
   1d75b:	48 89 05 de 61 73 00 	mov    %rax,0x7361de(%rip)        # 753940 <edgeId>
   1d762:	58                   	pop    %rax
   1d763:	e8 78 80 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d768:	be 10 00 00 00       	mov    $0x10,%esi
   1d76d:	31 ff                	xor    %edi,%edi
   1d76f:	e8 8c 61 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1d774:	66 0f 6f 15 f4 f8 20 	movdqa 0x20f8f4(%rip),%xmm2        # 22d070 <slotvec0>
   1d77b:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d77c:	48 89 c3             	mov    %rax,%rbx
   1d77f:	48 89 05 da f8 20 00 	mov    %rax,0x20f8da(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1d786:	0f 11 10             	movups %xmm2,(%rax)
   1d789:	e9 5d ff ff ff       	jmpq   1d6eb <quotearg_style_mem+0x3fb>
   1d78e:	50                   	push   %rax
   1d78f:	48 b8 bf bf 57 c4 00 	movabs $0xc457bfbf,%rax
   1d796:	00 00 00 
   1d799:	48 89 05 a0 61 73 00 	mov    %rax,0x7361a0(%rip)        # 753940 <edgeId>
   1d7a0:	58                   	pop    %rax
   1d7a1:	e8 3a 80 fe ff       	callq  57e0 <_storeEdge>
}
   1d7a6:	e8 a5 41 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1d7ab:	50                   	push   %rax
   1d7ac:	48 c7 c0 df 2b 62 70 	mov    $0x70622bdf,%rax
   1d7b3:	48 89 05 86 61 73 00 	mov    %rax,0x736186(%rip)        # 753940 <edgeId>
   1d7ba:	58                   	pop    %rax
   1d7bb:	e8 20 80 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1d7c0:	e8 bb 40 fe ff       	callq  1880 <abort@plt>
   1d7c5:	90                   	nop
   1d7c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1d7cd:	00 00 00 

000000000001d7d0 <quotearg_char_mem>:

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
   1d7d0:	41 57                	push   %r15
   1d7d2:	41 56                	push   %r14
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1d7d4:	89 d1                	mov    %edx,%ecx
{
   1d7d6:	41 55                	push   %r13
   1d7d8:	41 54                	push   %r12
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1d7da:	c0 e9 05             	shr    $0x5,%cl
{
   1d7dd:	55                   	push   %rbp
   1d7de:	53                   	push   %rbx
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1d7df:	0f b6 d9             	movzbl %cl,%ebx
{
   1d7e2:	49 89 f7             	mov    %rsi,%r15
  int shift = uc % INT_BITS;
   1d7e5:	89 d1                	mov    %edx,%ecx
{
   1d7e7:	49 89 fe             	mov    %rdi,%r14
   1d7ea:	48 83 ec 58          	sub    $0x58,%rsp
  int shift = uc % INT_BITS;
   1d7ee:	83 e1 1f             	and    $0x1f,%ecx
  unsigned int *p =
   1d7f1:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  struct quoting_options options;
  options = default_quoting_options;
   1d7f6:	66 0f 6f 05 42 03 5e 	movdqa 0x5e0342(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1d7fd:	00 
{
   1d7fe:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d805:	00 00 
   1d807:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1d80c:	31 c0                	xor    %eax,%eax
  options = default_quoting_options;
   1d80e:	48 8b 05 5b 03 5e 00 	mov    0x5e035b(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  unsigned int *p =
   1d815:	48 8d 74 9d 08       	lea    0x8(%rbp,%rbx,4),%rsi
  options = default_quoting_options;
   1d81a:	66 0f 6f 0d 2e 03 5e 	movdqa 0x5e032e(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1d821:	00 
   1d822:	66 0f 6f 15 36 03 5e 	movdqa 0x5e0336(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1d829:	00 
   1d82a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1d82f:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   1d834:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1d839:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  int r = (*p >> shift) & 1;
   1d83e:	8b 16                	mov    (%rsi),%edx
   1d840:	89 d7                	mov    %edx,%edi
   1d842:	d3 ef                	shr    %cl,%edi
  *p ^= ((i & 1) ^ r) << shift;
   1d844:	f7 d7                	not    %edi
   1d846:	83 e7 01             	and    $0x1,%edi
   1d849:	d3 e7                	shl    %cl,%edi
   1d84b:	31 d7                	xor    %edx,%edi
   1d84d:	89 3e                	mov    %edi,(%rsi)
  int e = errno;
   1d84f:	e8 3c 40 fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   1d854:	44 8b 0d fd f7 20 00 	mov    0x20f7fd(%rip),%r9d        # 22d058 <nslots>
  int e = errno;
   1d85b:	44 8b 00             	mov    (%rax),%r8d
   1d85e:	49 89 c5             	mov    %rax,%r13
  struct slotvec *sv = slotvec;
   1d861:	48 8b 1d f8 f7 20 00 	mov    0x20f7f8(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1d868:	45 85 c9             	test   %r9d,%r9d
  int e = errno;
   1d86b:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  if (nslots <= n0)
   1d870:	0f 85 f5 00 00 00    	jne    1d96b <quotearg_char_mem+0x19b>
   1d876:	50                   	push   %rax
   1d877:	48 c7 c0 5c d3 e7 2d 	mov    $0x2de7d35c,%rax
   1d87e:	48 89 05 bb 60 73 00 	mov    %rax,0x7360bb(%rip)        # 753940 <edgeId>
   1d885:	58                   	pop    %rax
   1d886:	e8 55 7f fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1d88b:	4c 8d 15 de f7 20 00 	lea    0x20f7de(%rip),%r10        # 22d070 <slotvec0>
   1d892:	48 89 15 7f 60 73 00 	mov    %rdx,0x73607f(%rip)        # 753918 <tmpquadone>
   1d899:	48 89 0d 90 03 5e 00 	mov    %rcx,0x5e0390(%rip)        # 5fdc30 <tmpquadtwo>
   1d8a0:	48 8d 15 49 03 5e 00 	lea    0x5e0349(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d8a7:	48 c7 02 b5 0a 00 00 	movq   $0xab5,(%rdx)
   1d8ae:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d8b5:	00 
   1d8b6:	4c 89 d1             	mov    %r10,%rcx
   1d8b9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d8bd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d8c4:	00 
   1d8c5:	48 89 d9             	mov    %rbx,%rcx
   1d8c8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1d8cc:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1d8d3:	00 
   1d8d4:	ff 32                	pushq  (%rdx)
   1d8d6:	48 8b 15 3b 60 73 00 	mov    0x73603b(%rip),%rdx        # 753918 <tmpquadone>
   1d8dd:	48 8b 0d 4c 03 5e 00 	mov    0x5e034c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1d8e4:	48 c7 05 61 60 73 00 	movq   $0x1,0x736061(%rip)        # 753950 <cmpPassed>
   1d8eb:	01 00 00 00 
   1d8ef:	e8 84 7f fe ff       	callq  5878 <_storeDataFn>
   1d8f4:	4c 39 d3             	cmp    %r10,%rbx
   1d8f7:	0f 84 9b 02 00 00    	je     1db98 <quotearg_char_mem+0x3c8>
   1d8fd:	50                   	push   %rax
   1d8fe:	48 b8 4d 9f b7 ec 00 	movabs $0xecb79f4d,%rax
   1d905:	00 00 00 
   1d908:	48 89 05 31 60 73 00 	mov    %rax,0x736031(%rip)        # 753940 <edgeId>
   1d90f:	58                   	pop    %rax
   1d910:	e8 cb 7e fe ff       	callq  57e0 <_storeEdge>
   1d915:	48 89 df             	mov    %rbx,%rdi
   1d918:	be 10 00 00 00       	mov    $0x10,%esi
   1d91d:	e8 de 5f 00 00       	callq  23900 <xrealloc>
   1d922:	48 89 c3             	mov    %rax,%rbx
   1d925:	48 89 05 34 f7 20 00 	mov    %rax,0x20f734(%rip)        # 22d060 <slotvec>
   1d92c:	50                   	push   %rax
   1d92d:	48 c7 c0 9f b7 ec 7b 	mov    $0x7becb79f,%rax
   1d934:	48 89 05 05 60 73 00 	mov    %rax,0x736005(%rip)        # 753940 <edgeId>
   1d93b:	58                   	pop    %rax
   1d93c:	e8 9f 7e fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1d941:	8b 3d 11 f7 20 00    	mov    0x20f711(%rip),%edi        # 22d058 <nslots>
   1d947:	ba 01 00 00 00       	mov    $0x1,%edx
   1d94c:	31 f6                	xor    %esi,%esi
   1d94e:	48 29 fa             	sub    %rdi,%rdx
   1d951:	48 c1 e7 04          	shl    $0x4,%rdi
   1d955:	48 c1 e2 04          	shl    $0x4,%rdx
   1d959:	48 01 df             	add    %rbx,%rdi
   1d95c:	e8 8f 40 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1d961:	c7 05 ed f6 20 00 01 	movl   $0x1,0x20f6ed(%rip)        # 22d058 <nslots>
   1d968:	00 00 00 
   1d96b:	50                   	push   %rax
   1d96c:	48 c7 c0 a3 56 55 76 	mov    $0x765556a3,%rax
   1d973:	48 89 05 c6 5f 73 00 	mov    %rax,0x735fc6(%rip)        # 753940 <edgeId>
   1d97a:	58                   	pop    %rax
   1d97b:	e8 60 7e fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1d980:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1d985:	48 8d 45 08          	lea    0x8(%rbp),%rax
   1d989:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1d98d:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1d990:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1d994:	4c 89 f9             	mov    %r15,%rcx
   1d997:	4c 89 f2             	mov    %r14,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1d99a:	41 83 c9 01          	or     $0x1,%r9d
   1d99e:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1d9a3:	ff 74 24 48          	pushq  0x48(%rsp)
   1d9a7:	4c 89 de             	mov    %r11,%rsi
   1d9aa:	ff 74 24 48          	pushq  0x48(%rsp)
   1d9ae:	50                   	push   %rax
   1d9af:	4c 89 e7             	mov    %r12,%rdi
   1d9b2:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1d9b7:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1d9bc:	e8 3f 54 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1d9c1:	48 83 c4 20          	add    $0x20,%rsp
   1d9c5:	48 8b 34 24          	mov    (%rsp),%rsi
   1d9c9:	48 89 15 48 5f 73 00 	mov    %rdx,0x735f48(%rip)        # 753918 <tmpquadone>
   1d9d0:	48 89 0d 59 02 5e 00 	mov    %rcx,0x5e0259(%rip)        # 5fdc30 <tmpquadtwo>
   1d9d7:	48 8d 15 12 02 5e 00 	lea    0x5e0212(%rip),%rdx        # 5fdbf0 <funcinptr>
   1d9de:	48 c7 02 b6 0a 00 00 	movq   $0xab6,(%rdx)
   1d9e5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1d9ec:	00 
   1d9ed:	48 89 c1             	mov    %rax,%rcx
   1d9f0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1d9f4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1d9fb:	00 
   1d9fc:	48 89 f1             	mov    %rsi,%rcx
   1d9ff:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1da03:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1da0a:	00 
   1da0b:	ff 32                	pushq  (%rdx)
   1da0d:	48 8b 15 04 5f 73 00 	mov    0x735f04(%rip),%rdx        # 753918 <tmpquadone>
   1da14:	48 8b 0d 15 02 5e 00 	mov    0x5e0215(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1da1b:	48 c7 05 2a 5f 73 00 	movq   $0x1,0x735f2a(%rip)        # 753950 <cmpPassed>
   1da22:	01 00 00 00 
   1da26:	e8 4d 7e fe ff       	callq  5878 <_storeDataFn>
   1da2b:	48 39 c6             	cmp    %rax,%rsi
   1da2e:	0f 87 09 01 00 00    	ja     1db3d <quotearg_char_mem+0x36d>
   1da34:	50                   	push   %rax
   1da35:	48 c7 c0 e3 c3 dc 5e 	mov    $0x5edcc3e3,%rax
   1da3c:	48 89 05 fd 5e 73 00 	mov    %rax,0x735efd(%rip)        # 753940 <edgeId>
   1da43:	58                   	pop    %rax
   1da44:	e8 97 7d fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1da49:	48 8d 0d f0 ff 5d 00 	lea    0x5dfff0(%rip),%rcx        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1da50:	48 8d 50 01          	lea    0x1(%rax),%rdx
        if (val != slot0)
   1da54:	48 89 15 bd 5e 73 00 	mov    %rdx,0x735ebd(%rip)        # 753918 <tmpquadone>
   1da5b:	48 89 1d ce 01 5e 00 	mov    %rbx,0x5e01ce(%rip)        # 5fdc30 <tmpquadtwo>
   1da62:	48 8d 15 87 01 5e 00 	lea    0x5e0187(%rip),%rdx        # 5fdbf0 <funcinptr>
   1da69:	48 c7 02 b7 0a 00 00 	movq   $0xab7,(%rdx)
   1da70:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1da77:	00 
   1da78:	48 89 cb             	mov    %rcx,%rbx
   1da7b:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   1da7f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1da86:	00 
   1da87:	4c 89 e3             	mov    %r12,%rbx
   1da8a:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   1da8e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1da95:	00 
   1da96:	ff 32                	pushq  (%rdx)
   1da98:	48 8b 15 79 5e 73 00 	mov    0x735e79(%rip),%rdx        # 753918 <tmpquadone>
   1da9f:	48 8b 1d 8a 01 5e 00 	mov    0x5e018a(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1daa6:	48 c7 05 9f 5e 73 00 	movq   $0x1,0x735e9f(%rip)        # 753950 <cmpPassed>
   1daad:	01 00 00 00 
   1dab1:	e8 c2 7d fe ff       	callq  5878 <_storeDataFn>
   1dab6:	49 39 cc             	cmp    %rcx,%r12
        sv[n].size = size = qsize + 1;
   1dab9:	48 89 13             	mov    %rdx,(%rbx)
        if (val != slot0)
   1dabc:	74 25                	je     1dae3 <quotearg_char_mem+0x313>
   1dabe:	50                   	push   %rax
   1dabf:	48 c7 c0 98 db cb 47 	mov    $0x47cbdb98,%rax
   1dac6:	48 89 05 73 5e 73 00 	mov    %rax,0x735e73(%rip)        # 753940 <edgeId>
   1dacd:	58                   	pop    %rax
   1dace:	e8 0d 7d fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1dad3:	4c 89 e7             	mov    %r12,%rdi
   1dad6:	48 89 14 24          	mov    %rdx,(%rsp)
   1dada:	e8 91 3d fe ff       	callq  1870 <free@plt>
   1dadf:	48 8b 14 24          	mov    (%rsp),%rdx
   1dae3:	50                   	push   %rax
   1dae4:	48 c7 c0 db cb 47 3b 	mov    $0x3b47cbdb,%rax
   1daeb:	48 89 05 4e 5e 73 00 	mov    %rax,0x735e4e(%rip)        # 753940 <edgeId>
   1daf2:	58                   	pop    %rax
   1daf3:	e8 e8 7c fe ff       	callq  57e0 <_storeEdge>
   1daf8:	48 89 d7             	mov    %rdx,%rdi
   1dafb:	48 89 14 24          	mov    %rdx,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1daff:	48 83 c5 08          	add    $0x8,%rbp
   1db03:	e8 78 5d 00 00       	callq  23880 <xmalloc>
   1db08:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1db0c:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1db10:	4c 89 f9             	mov    %r15,%rcx
   1db13:	ff 74 24 48          	pushq  0x48(%rsp)
   1db17:	ff 74 24 48          	pushq  0x48(%rsp)
   1db1b:	4c 89 f2             	mov    %r14,%rdx
   1db1e:	55                   	push   %rbp
   1db1f:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1db24:	48 89 c7             	mov    %rax,%rdi
   1db27:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1db2c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1db31:	49 89 c4             	mov    %rax,%r12
   1db34:	e8 c7 52 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1db39:	48 83 c4 20          	add    $0x20,%rsp
   1db3d:	50                   	push   %rax
   1db3e:	48 b8 0e fa 03 cf 00 	movabs $0xcf03fa0e,%rax
   1db45:	00 00 00 
   1db48:	48 89 05 f1 5d 73 00 	mov    %rax,0x735df1(%rip)        # 753940 <edgeId>
   1db4f:	58                   	pop    %rax
   1db50:	e8 8b 7c fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1db55:	8b 7c 24 08          	mov    0x8(%rsp),%edi
  set_char_quoting (&options, ch, 1);
  return quotearg_n_options (0, arg, argsize, &options);
}
   1db59:	4c 89 e0             	mov    %r12,%rax
   1db5c:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
   1db61:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
   1db68:	00 00 
    errno = e;
   1db6a:	41 89 7d 00          	mov    %edi,0x0(%r13)
}
   1db6e:	75 66                	jne    1dbd6 <quotearg_char_mem+0x406>
   1db70:	50                   	push   %rax
   1db71:	48 c7 c0 78 e6 08 2c 	mov    $0x2c08e678,%rax
   1db78:	48 89 05 c1 5d 73 00 	mov    %rax,0x735dc1(%rip)        # 753940 <edgeId>
   1db7f:	58                   	pop    %rax
   1db80:	e8 5b 7c fe ff       	callq  57e0 <_storeEdge>
   1db85:	48 83 c4 58          	add    $0x58,%rsp
   1db89:	5b                   	pop    %rbx
   1db8a:	5d                   	pop    %rbp
   1db8b:	41 5c                	pop    %r12
   1db8d:	41 5d                	pop    %r13
   1db8f:	41 5e                	pop    %r14
   1db91:	41 5f                	pop    %r15
   1db93:	c3                   	retq   
   1db94:	0f 1f 40 00          	nopl   0x0(%rax)
   1db98:	50                   	push   %rax
   1db99:	48 b8 b0 fc 2b e9 00 	movabs $0xe92bfcb0,%rax
   1dba0:	00 00 00 
   1dba3:	48 89 05 96 5d 73 00 	mov    %rax,0x735d96(%rip)        # 753940 <edgeId>
   1dbaa:	58                   	pop    %rax
   1dbab:	e8 30 7c fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1dbb0:	be 10 00 00 00       	mov    $0x10,%esi
   1dbb5:	31 ff                	xor    %edi,%edi
   1dbb7:	e8 44 5d 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1dbbc:	66 0f 6f 1d ac f4 20 	movdqa 0x20f4ac(%rip),%xmm3        # 22d070 <slotvec0>
   1dbc3:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1dbc4:	48 89 c3             	mov    %rax,%rbx
   1dbc7:	48 89 05 92 f4 20 00 	mov    %rax,0x20f492(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1dbce:	0f 11 18             	movups %xmm3,(%rax)
   1dbd1:	e9 56 fd ff ff       	jmpq   1d92c <quotearg_char_mem+0x15c>
   1dbd6:	50                   	push   %rax
   1dbd7:	48 c7 c0 92 be 9c 73 	mov    $0x739cbe92,%rax
   1dbde:	48 89 05 5b 5d 73 00 	mov    %rax,0x735d5b(%rip)        # 753940 <edgeId>
   1dbe5:	58                   	pop    %rax
   1dbe6:	e8 f5 7b fe ff       	callq  57e0 <_storeEdge>
}
   1dbeb:	e8 60 3d fe ff       	callq  1950 <__stack_chk_fail@plt>

000000000001dbf0 <quotearg_char>:

char *
quotearg_char (char const *arg, char ch)
{
   1dbf0:	41 57                	push   %r15
   1dbf2:	41 56                	push   %r14
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1dbf4:	89 f2                	mov    %esi,%edx
{
   1dbf6:	41 55                	push   %r13
   1dbf8:	41 54                	push   %r12
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1dbfa:	c0 ea 05             	shr    $0x5,%dl
{
   1dbfd:	55                   	push   %rbp
   1dbfe:	53                   	push   %rbx
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
   1dbff:	0f b6 ca             	movzbl %dl,%ecx
{
   1dc02:	48 89 fd             	mov    %rdi,%rbp
   1dc05:	48 83 ec 58          	sub    $0x58,%rsp
  unsigned int *p =
   1dc09:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  options = default_quoting_options;
   1dc0e:	66 0f 6f 05 2a ff 5d 	movdqa 0x5dff2a(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1dc15:	00 
{
   1dc16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1dc1d:	00 00 
   1dc1f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1dc24:	31 c0                	xor    %eax,%eax
  options = default_quoting_options;
   1dc26:	48 8b 05 43 ff 5d 00 	mov    0x5dff43(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  unsigned int *p =
   1dc2d:	48 8d 7c 8b 08       	lea    0x8(%rbx,%rcx,4),%rdi
  int shift = uc % INT_BITS;
   1dc32:	89 f1                	mov    %esi,%ecx
  options = default_quoting_options;
   1dc34:	66 0f 6f 0d 14 ff 5d 	movdqa 0x5dff14(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1dc3b:	00 
  int shift = uc % INT_BITS;
   1dc3c:	83 e1 1f             	and    $0x1f,%ecx
  options = default_quoting_options;
   1dc3f:	66 0f 6f 15 19 ff 5d 	movdqa 0x5dff19(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1dc46:	00 
   1dc47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1dc4c:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   1dc51:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1dc56:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  int r = (*p >> shift) & 1;
   1dc5b:	8b 37                	mov    (%rdi),%esi
   1dc5d:	41 89 f0             	mov    %esi,%r8d
   1dc60:	41 d3 e8             	shr    %cl,%r8d
  *p ^= ((i & 1) ^ r) << shift;
   1dc63:	41 f7 d0             	not    %r8d
   1dc66:	41 83 e0 01          	and    $0x1,%r8d
   1dc6a:	41 d3 e0             	shl    %cl,%r8d
   1dc6d:	41 31 f0             	xor    %esi,%r8d
   1dc70:	44 89 07             	mov    %r8d,(%rdi)
  int e = errno;
   1dc73:	e8 18 3c fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   1dc78:	44 8b 0d d9 f3 20 00 	mov    0x20f3d9(%rip),%r9d        # 22d058 <nslots>
  int e = errno;
   1dc7f:	49 89 c6             	mov    %rax,%r14
   1dc82:	44 8b 38             	mov    (%rax),%r15d
  struct slotvec *sv = slotvec;
   1dc85:	4c 8b 25 d4 f3 20 00 	mov    0x20f3d4(%rip),%r12        # 22d060 <slotvec>
  if (nslots <= n0)
   1dc8c:	45 85 c9             	test   %r9d,%r9d
   1dc8f:	0f 85 f5 00 00 00    	jne    1dd8a <quotearg_char+0x19a>
   1dc95:	50                   	push   %rax
   1dc96:	48 b8 e3 0a d2 9b 00 	movabs $0x9bd20ae3,%rax
   1dc9d:	00 00 00 
   1dca0:	48 89 05 99 5c 73 00 	mov    %rax,0x735c99(%rip)        # 753940 <edgeId>
   1dca7:	58                   	pop    %rax
   1dca8:	e8 33 7b fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1dcad:	4c 8d 15 bc f3 20 00 	lea    0x20f3bc(%rip),%r10        # 22d070 <slotvec0>
   1dcb4:	48 89 15 5d 5c 73 00 	mov    %rdx,0x735c5d(%rip)        # 753918 <tmpquadone>
   1dcbb:	48 89 0d 6e ff 5d 00 	mov    %rcx,0x5dff6e(%rip)        # 5fdc30 <tmpquadtwo>
   1dcc2:	48 8d 15 27 ff 5d 00 	lea    0x5dff27(%rip),%rdx        # 5fdbf0 <funcinptr>
   1dcc9:	48 c7 02 b8 0a 00 00 	movq   $0xab8,(%rdx)
   1dcd0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1dcd7:	00 
   1dcd8:	4c 89 d1             	mov    %r10,%rcx
   1dcdb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1dcdf:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1dce6:	00 
   1dce7:	4c 89 e1             	mov    %r12,%rcx
   1dcea:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1dcee:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1dcf5:	00 
   1dcf6:	ff 32                	pushq  (%rdx)
   1dcf8:	48 8b 15 19 5c 73 00 	mov    0x735c19(%rip),%rdx        # 753918 <tmpquadone>
   1dcff:	48 8b 0d 2a ff 5d 00 	mov    0x5dff2a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1dd06:	48 c7 05 3f 5c 73 00 	movq   $0x1,0x735c3f(%rip)        # 753950 <cmpPassed>
   1dd0d:	01 00 00 00 
   1dd11:	e8 62 7b fe ff       	callq  5878 <_storeDataFn>
   1dd16:	4d 39 d4             	cmp    %r10,%r12
   1dd19:	0f 84 a9 02 00 00    	je     1dfc8 <quotearg_char+0x3d8>
   1dd1f:	50                   	push   %rax
   1dd20:	48 c7 c0 2b 48 6f 22 	mov    $0x226f482b,%rax
   1dd27:	48 89 05 12 5c 73 00 	mov    %rax,0x735c12(%rip)        # 753940 <edgeId>
   1dd2e:	58                   	pop    %rax
   1dd2f:	e8 ac 7a fe ff       	callq  57e0 <_storeEdge>
   1dd34:	4c 89 e7             	mov    %r12,%rdi
   1dd37:	be 10 00 00 00       	mov    $0x10,%esi
   1dd3c:	e8 bf 5b 00 00       	callq  23900 <xrealloc>
   1dd41:	49 89 c4             	mov    %rax,%r12
   1dd44:	48 89 05 15 f3 20 00 	mov    %rax,0x20f315(%rip)        # 22d060 <slotvec>
   1dd4b:	50                   	push   %rax
   1dd4c:	48 c7 c0 48 6f 22 76 	mov    $0x76226f48,%rax
   1dd53:	48 89 05 e6 5b 73 00 	mov    %rax,0x735be6(%rip)        # 753940 <edgeId>
   1dd5a:	58                   	pop    %rax
   1dd5b:	e8 80 7a fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1dd60:	8b 3d f2 f2 20 00    	mov    0x20f2f2(%rip),%edi        # 22d058 <nslots>
   1dd66:	ba 01 00 00 00       	mov    $0x1,%edx
   1dd6b:	31 f6                	xor    %esi,%esi
   1dd6d:	48 29 fa             	sub    %rdi,%rdx
   1dd70:	48 c1 e7 04          	shl    $0x4,%rdi
   1dd74:	48 c1 e2 04          	shl    $0x4,%rdx
   1dd78:	4c 01 e7             	add    %r12,%rdi
   1dd7b:	e8 70 3c fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1dd80:	c7 05 ce f2 20 00 01 	movl   $0x1,0x20f2ce(%rip)        # 22d058 <nslots>
   1dd87:	00 00 00 
   1dd8a:	50                   	push   %rax
   1dd8b:	48 b8 93 b5 bb f3 00 	movabs $0xf3bbb593,%rax
   1dd92:	00 00 00 
   1dd95:	48 89 05 a4 5b 73 00 	mov    %rax,0x735ba4(%rip)        # 753940 <edgeId>
   1dd9c:	58                   	pop    %rax
   1dd9d:	e8 3e 7a fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1dda2:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1dda7:	48 8d 43 08          	lea    0x8(%rbx),%rax
   1ddab:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1ddaf:	4d 8b 1c 24          	mov    (%r12),%r11
    char *val = sv[n].val;
   1ddb3:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1ddb8:	48 89 ea             	mov    %rbp,%rdx
   1ddbb:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1ddc2:	41 83 c9 01          	or     $0x1,%r9d
   1ddc6:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1ddcb:	ff 74 24 48          	pushq  0x48(%rsp)
   1ddcf:	4c 89 de             	mov    %r11,%rsi
   1ddd2:	ff 74 24 48          	pushq  0x48(%rsp)
   1ddd6:	50                   	push   %rax
   1ddd7:	4c 89 ef             	mov    %r13,%rdi
   1ddda:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1dddf:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1dde4:	e8 17 50 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1dde9:	48 83 c4 20          	add    $0x20,%rsp
   1dded:	48 8b 14 24          	mov    (%rsp),%rdx
   1ddf1:	48 89 0d 20 5b 73 00 	mov    %rcx,0x735b20(%rip)        # 753918 <tmpquadone>
   1ddf8:	48 89 1d 31 fe 5d 00 	mov    %rbx,0x5dfe31(%rip)        # 5fdc30 <tmpquadtwo>
   1ddff:	48 8d 0d ea fd 5d 00 	lea    0x5dfdea(%rip),%rcx        # 5fdbf0 <funcinptr>
   1de06:	48 c7 01 b9 0a 00 00 	movq   $0xab9,(%rcx)
   1de0d:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   1de14:	00 
   1de15:	48 89 c3             	mov    %rax,%rbx
   1de18:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   1de1c:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   1de23:	00 
   1de24:	48 89 d3             	mov    %rdx,%rbx
   1de27:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   1de2b:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   1de32:	00 
   1de33:	ff 31                	pushq  (%rcx)
   1de35:	48 8b 0d dc 5a 73 00 	mov    0x735adc(%rip),%rcx        # 753918 <tmpquadone>
   1de3c:	48 8b 1d ed fd 5d 00 	mov    0x5dfded(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   1de43:	48 c7 05 02 5b 73 00 	movq   $0x1,0x735b02(%rip)        # 753950 <cmpPassed>
   1de4a:	01 00 00 00 
   1de4e:	e8 25 7a fe ff       	callq  5878 <_storeDataFn>
   1de53:	48 39 c2             	cmp    %rax,%rdx
   1de56:	0f 87 15 01 00 00    	ja     1df71 <quotearg_char+0x381>
   1de5c:	50                   	push   %rax
   1de5d:	48 c7 c0 40 9e 59 02 	mov    $0x2599e40,%rax
   1de64:	48 89 05 d5 5a 73 00 	mov    %rax,0x735ad5(%rip)        # 753940 <edgeId>
   1de6b:	58                   	pop    %rax
   1de6c:	e8 6f 79 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1de71:	48 8d 3d c8 fb 5d 00 	lea    0x5dfbc8(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1de78:	48 8d 48 01          	lea    0x1(%rax),%rcx
        if (val != slot0)
   1de7c:	48 89 15 95 5a 73 00 	mov    %rdx,0x735a95(%rip)        # 753918 <tmpquadone>
   1de83:	48 89 0d a6 fd 5d 00 	mov    %rcx,0x5dfda6(%rip)        # 5fdc30 <tmpquadtwo>
   1de8a:	48 8d 15 5f fd 5d 00 	lea    0x5dfd5f(%rip),%rdx        # 5fdbf0 <funcinptr>
   1de91:	48 c7 02 ba 0a 00 00 	movq   $0xaba,(%rdx)
   1de98:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1de9f:	00 
   1dea0:	48 89 f9             	mov    %rdi,%rcx
   1dea3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1dea7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1deae:	00 
   1deaf:	4c 89 e9             	mov    %r13,%rcx
   1deb2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1deb6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1debd:	00 
   1debe:	ff 32                	pushq  (%rdx)
   1dec0:	48 8b 15 51 5a 73 00 	mov    0x735a51(%rip),%rdx        # 753918 <tmpquadone>
   1dec7:	48 8b 0d 62 fd 5d 00 	mov    0x5dfd62(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1dece:	48 c7 05 77 5a 73 00 	movq   $0x1,0x735a77(%rip)        # 753950 <cmpPassed>
   1ded5:	01 00 00 00 
   1ded9:	e8 9a 79 fe ff       	callq  5878 <_storeDataFn>
   1dede:	49 39 fd             	cmp    %rdi,%r13
        sv[n].size = size = qsize + 1;
   1dee1:	49 89 0c 24          	mov    %rcx,(%r12)
        if (val != slot0)
   1dee5:	74 28                	je     1df0f <quotearg_char+0x31f>
   1dee7:	50                   	push   %rax
   1dee8:	48 b8 33 4b e0 a3 00 	movabs $0xa3e04b33,%rax
   1deef:	00 00 00 
   1def2:	48 89 05 47 5a 73 00 	mov    %rax,0x735a47(%rip)        # 753940 <edgeId>
   1def9:	58                   	pop    %rax
   1defa:	e8 e1 78 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1deff:	4c 89 ef             	mov    %r13,%rdi
   1df02:	48 89 0c 24          	mov    %rcx,(%rsp)
   1df06:	e8 65 39 fe ff       	callq  1870 <free@plt>
   1df0b:	48 8b 0c 24          	mov    (%rsp),%rcx
   1df0f:	50                   	push   %rax
   1df10:	48 b8 4b e0 a3 b0 00 	movabs $0xb0a3e04b,%rax
   1df17:	00 00 00 
   1df1a:	48 89 05 1f 5a 73 00 	mov    %rax,0x735a1f(%rip)        # 753940 <edgeId>
   1df21:	58                   	pop    %rax
   1df22:	e8 b9 78 fe ff       	callq  57e0 <_storeEdge>
   1df27:	48 89 cf             	mov    %rcx,%rdi
   1df2a:	48 89 0c 24          	mov    %rcx,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1df2e:	48 83 c3 08          	add    $0x8,%rbx
   1df32:	e8 49 59 00 00       	callq  23880 <xmalloc>
   1df37:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1df3b:	49 89 44 24 08       	mov    %rax,0x8(%r12)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1df40:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1df47:	ff 74 24 48          	pushq  0x48(%rsp)
   1df4b:	ff 74 24 48          	pushq  0x48(%rsp)
   1df4f:	48 89 ea             	mov    %rbp,%rdx
   1df52:	53                   	push   %rbx
   1df53:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1df58:	48 89 c7             	mov    %rax,%rdi
   1df5b:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1df60:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1df65:	49 89 c5             	mov    %rax,%r13
   1df68:	e8 93 4e ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1df6d:	48 83 c4 20          	add    $0x20,%rsp
   1df71:	50                   	push   %rax
   1df72:	48 b8 b1 06 1a fe 00 	movabs $0xfe1a06b1,%rax
   1df79:	00 00 00 
   1df7c:	48 89 05 bd 59 73 00 	mov    %rax,0x7359bd(%rip)        # 753940 <edgeId>
   1df83:	58                   	pop    %rax
   1df84:	e8 57 78 fe ff       	callq  57e0 <_storeEdge>
  return quotearg_char_mem (arg, SIZE_MAX, ch);
}
   1df89:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
   1df8e:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
   1df95:	00 00 
    errno = e;
   1df97:	45 89 3e             	mov    %r15d,(%r14)
}
   1df9a:	4c 89 e8             	mov    %r13,%rax
   1df9d:	75 67                	jne    1e006 <quotearg_char+0x416>
   1df9f:	50                   	push   %rax
   1dfa0:	48 c7 c0 fe cc b8 01 	mov    $0x1b8ccfe,%rax
   1dfa7:	48 89 05 92 59 73 00 	mov    %rax,0x735992(%rip)        # 753940 <edgeId>
   1dfae:	58                   	pop    %rax
   1dfaf:	e8 2c 78 fe ff       	callq  57e0 <_storeEdge>
   1dfb4:	48 83 c4 58          	add    $0x58,%rsp
   1dfb8:	5b                   	pop    %rbx
   1dfb9:	5d                   	pop    %rbp
   1dfba:	41 5c                	pop    %r12
   1dfbc:	41 5d                	pop    %r13
   1dfbe:	41 5e                	pop    %r14
   1dfc0:	41 5f                	pop    %r15
   1dfc2:	c3                   	retq   
   1dfc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1dfc8:	50                   	push   %rax
   1dfc9:	48 b8 0d d8 79 a7 00 	movabs $0xa779d80d,%rax
   1dfd0:	00 00 00 
   1dfd3:	48 89 05 66 59 73 00 	mov    %rax,0x735966(%rip)        # 753940 <edgeId>
   1dfda:	58                   	pop    %rax
   1dfdb:	e8 00 78 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1dfe0:	be 10 00 00 00       	mov    $0x10,%esi
   1dfe5:	31 ff                	xor    %edi,%edi
   1dfe7:	e8 14 59 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1dfec:	66 0f 6f 1d 7c f0 20 	movdqa 0x20f07c(%rip),%xmm3        # 22d070 <slotvec0>
   1dff3:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1dff4:	49 89 c4             	mov    %rax,%r12
   1dff7:	48 89 05 62 f0 20 00 	mov    %rax,0x20f062(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1dffe:	0f 11 18             	movups %xmm3,(%rax)
   1e001:	e9 45 fd ff ff       	jmpq   1dd4b <quotearg_char+0x15b>
   1e006:	50                   	push   %rax
   1e007:	48 c7 c0 9d 0e 6c 16 	mov    $0x166c0e9d,%rax
   1e00e:	48 89 05 2b 59 73 00 	mov    %rax,0x73592b(%rip)        # 753940 <edgeId>
   1e015:	58                   	pop    %rax
   1e016:	e8 c5 77 fe ff       	callq  57e0 <_storeEdge>
}
   1e01b:	e8 30 39 fe ff       	callq  1950 <__stack_chk_fail@plt>

000000000001e020 <quotearg_colon>:

char *
quotearg_colon (char const *arg)
{
   1e020:	41 57                	push   %r15
   1e022:	41 56                	push   %r14
   1e024:	41 55                	push   %r13
   1e026:	41 54                	push   %r12
   1e028:	49 89 fc             	mov    %rdi,%r12
   1e02b:	55                   	push   %rbp
   1e02c:	53                   	push   %rbx
   1e02d:	48 83 ec 58          	sub    $0x58,%rsp
  options = default_quoting_options;
   1e031:	66 0f 6f 05 07 fb 5d 	movdqa 0x5dfb07(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1e038:	00 
{
   1e039:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1e040:	00 00 
   1e042:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1e047:	31 c0                	xor    %eax,%eax
  options = default_quoting_options;
   1e049:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  int r = (*p >> shift) & 1;
   1e04e:	8b 54 24 1c          	mov    0x1c(%rsp),%edx
  options = default_quoting_options;
   1e052:	48 8b 05 17 fb 5d 00 	mov    0x5dfb17(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  *p ^= ((i & 1) ^ r) << shift;
   1e059:	89 d1                	mov    %edx,%ecx
  options = default_quoting_options;
   1e05b:	66 0f 6f 0d ed fa 5d 	movdqa 0x5dfaed(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1e062:	00 
  *p ^= ((i & 1) ^ r) << shift;
   1e063:	f7 d1                	not    %ecx
  options = default_quoting_options;
   1e065:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1e06a:	66 0f 6f 15 ee fa 5d 	movdqa 0x5dfaee(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1e071:	00 
  *p ^= ((i & 1) ^ r) << shift;
   1e072:	81 e1 00 00 00 04    	and    $0x4000000,%ecx
   1e078:	31 d1                	xor    %edx,%ecx
  options = default_quoting_options;
   1e07a:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
  *p ^= ((i & 1) ^ r) << shift;
   1e07f:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  options = default_quoting_options;
   1e083:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  int e = errno;
   1e088:	e8 03 38 fe ff       	callq  1890 <__errno_location@plt>
   1e08d:	49 89 c6             	mov    %rax,%r14
  if (nslots <= n0)
   1e090:	8b 35 c2 ef 20 00    	mov    0x20efc2(%rip),%esi        # 22d058 <nslots>
  int e = errno;
   1e096:	44 8b 38             	mov    (%rax),%r15d
  struct slotvec *sv = slotvec;
   1e099:	48 8b 1d c0 ef 20 00 	mov    0x20efc0(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1e0a0:	85 f6                	test   %esi,%esi
   1e0a2:	0f 85 f5 00 00 00    	jne    1e19d <quotearg_colon+0x17d>
   1e0a8:	50                   	push   %rax
   1e0a9:	48 b8 f2 9c e5 fe 00 	movabs $0xfee59cf2,%rax
   1e0b0:	00 00 00 
   1e0b3:	48 89 05 86 58 73 00 	mov    %rax,0x735886(%rip)        # 753940 <edgeId>
   1e0ba:	58                   	pop    %rax
   1e0bb:	e8 20 77 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e0c0:	48 8d 3d a9 ef 20 00 	lea    0x20efa9(%rip),%rdi        # 22d070 <slotvec0>
   1e0c7:	48 89 15 4a 58 73 00 	mov    %rdx,0x73584a(%rip)        # 753918 <tmpquadone>
   1e0ce:	48 89 0d 5b fb 5d 00 	mov    %rcx,0x5dfb5b(%rip)        # 5fdc30 <tmpquadtwo>
   1e0d5:	48 8d 15 14 fb 5d 00 	lea    0x5dfb14(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e0dc:	48 c7 02 bb 0a 00 00 	movq   $0xabb,(%rdx)
   1e0e3:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e0ea:	00 
   1e0eb:	48 89 f9             	mov    %rdi,%rcx
   1e0ee:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e0f2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e0f9:	00 
   1e0fa:	48 89 d9             	mov    %rbx,%rcx
   1e0fd:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e101:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e108:	00 
   1e109:	ff 32                	pushq  (%rdx)
   1e10b:	48 8b 15 06 58 73 00 	mov    0x735806(%rip),%rdx        # 753918 <tmpquadone>
   1e112:	48 8b 0d 17 fb 5d 00 	mov    0x5dfb17(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e119:	48 c7 05 2c 58 73 00 	movq   $0x1,0x73582c(%rip)        # 753950 <cmpPassed>
   1e120:	01 00 00 00 
   1e124:	e8 4f 77 fe ff       	callq  5878 <_storeDataFn>
   1e129:	48 39 fb             	cmp    %rdi,%rbx
   1e12c:	0f 84 a6 02 00 00    	je     1e3d8 <quotearg_colon+0x3b8>
   1e132:	50                   	push   %rax
   1e133:	48 c7 c0 73 96 fb 4b 	mov    $0x4bfb9673,%rax
   1e13a:	48 89 05 ff 57 73 00 	mov    %rax,0x7357ff(%rip)        # 753940 <edgeId>
   1e141:	58                   	pop    %rax
   1e142:	e8 99 76 fe ff       	callq  57e0 <_storeEdge>
   1e147:	48 89 df             	mov    %rbx,%rdi
   1e14a:	be 10 00 00 00       	mov    $0x10,%esi
   1e14f:	e8 ac 57 00 00       	callq  23900 <xrealloc>
   1e154:	48 89 c3             	mov    %rax,%rbx
   1e157:	48 89 05 02 ef 20 00 	mov    %rax,0x20ef02(%rip)        # 22d060 <slotvec>
   1e15e:	50                   	push   %rax
   1e15f:	48 c7 c0 96 fb 4b 49 	mov    $0x494bfb96,%rax
   1e166:	48 89 05 d3 57 73 00 	mov    %rax,0x7357d3(%rip)        # 753940 <edgeId>
   1e16d:	58                   	pop    %rax
   1e16e:	e8 6d 76 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1e173:	8b 3d df ee 20 00    	mov    0x20eedf(%rip),%edi        # 22d058 <nslots>
   1e179:	ba 01 00 00 00       	mov    $0x1,%edx
   1e17e:	31 f6                	xor    %esi,%esi
   1e180:	48 29 fa             	sub    %rdi,%rdx
   1e183:	48 c1 e7 04          	shl    $0x4,%rdi
   1e187:	48 c1 e2 04          	shl    $0x4,%rdx
   1e18b:	48 01 df             	add    %rbx,%rdi
   1e18e:	e8 5d 38 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1e193:	c7 05 bb ee 20 00 01 	movl   $0x1,0x20eebb(%rip)        # 22d058 <nslots>
   1e19a:	00 00 00 
   1e19d:	50                   	push   %rax
   1e19e:	48 b8 72 50 bb d9 00 	movabs $0xd9bb5072,%rax
   1e1a5:	00 00 00 
   1e1a8:	48 89 05 91 57 73 00 	mov    %rax,0x735791(%rip)        # 753940 <edgeId>
   1e1af:	58                   	pop    %rax
   1e1b0:	e8 2b 76 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e1b5:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e1ba:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1e1be:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1e1c1:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e1c5:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1e1cc:	4c 89 e2             	mov    %r12,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e1cf:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e1d3:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e1d6:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e1db:	ff 74 24 48          	pushq  0x48(%rsp)
   1e1df:	48 89 ef             	mov    %rbp,%rdi
   1e1e2:	ff 74 24 48          	pushq  0x48(%rsp)
   1e1e6:	4c 8d 6c 24 28       	lea    0x28(%rsp),%r13
   1e1eb:	4d 8d 45 08          	lea    0x8(%r13),%r8
   1e1ef:	41 50                	push   %r8
   1e1f1:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1e1f6:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1e1fb:	e8 00 4c ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1e200:	48 83 c4 20          	add    $0x20,%rsp
   1e204:	4c 8b 14 24          	mov    (%rsp),%r10
   1e208:	48 89 15 09 57 73 00 	mov    %rdx,0x735709(%rip)        # 753918 <tmpquadone>
   1e20f:	48 89 0d 1a fa 5d 00 	mov    %rcx,0x5dfa1a(%rip)        # 5fdc30 <tmpquadtwo>
   1e216:	48 8d 15 d3 f9 5d 00 	lea    0x5df9d3(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e21d:	48 c7 02 bc 0a 00 00 	movq   $0xabc,(%rdx)
   1e224:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e22b:	00 
   1e22c:	48 89 c1             	mov    %rax,%rcx
   1e22f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e233:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e23a:	00 
   1e23b:	4c 89 d1             	mov    %r10,%rcx
   1e23e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e242:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e249:	00 
   1e24a:	ff 32                	pushq  (%rdx)
   1e24c:	48 8b 15 c5 56 73 00 	mov    0x7356c5(%rip),%rdx        # 753918 <tmpquadone>
   1e253:	48 8b 0d d6 f9 5d 00 	mov    0x5df9d6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e25a:	48 c7 05 eb 56 73 00 	movq   $0x1,0x7356eb(%rip)        # 753950 <cmpPassed>
   1e261:	01 00 00 00 
   1e265:	e8 0e 76 fe ff       	callq  5878 <_storeDataFn>
   1e26a:	49 39 c2             	cmp    %rax,%r10
   1e26d:	0f 87 0e 01 00 00    	ja     1e381 <quotearg_colon+0x361>
   1e273:	50                   	push   %rax
   1e274:	48 c7 c0 b0 c9 2c 7d 	mov    $0x7d2cc9b0,%rax
   1e27b:	48 89 05 be 56 73 00 	mov    %rax,0x7356be(%rip)        # 753940 <edgeId>
   1e282:	58                   	pop    %rax
   1e283:	e8 58 75 fe ff       	callq  57e0 <_storeEdge>
        sv[n].size = size = qsize + 1;
   1e288:	48 8d 50 01          	lea    0x1(%rax),%rdx
        if (val != slot0)
   1e28c:	48 8d 05 ad f7 5d 00 	lea    0x5df7ad(%rip),%rax        # 5fda40 <slot0>
   1e293:	48 89 15 7e 56 73 00 	mov    %rdx,0x73567e(%rip)        # 753918 <tmpquadone>
   1e29a:	48 89 0d 8f f9 5d 00 	mov    %rcx,0x5df98f(%rip)        # 5fdc30 <tmpquadtwo>
   1e2a1:	48 8d 15 48 f9 5d 00 	lea    0x5df948(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e2a8:	48 c7 02 bd 0a 00 00 	movq   $0xabd,(%rdx)
   1e2af:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e2b6:	00 
   1e2b7:	48 89 c1             	mov    %rax,%rcx
   1e2ba:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e2be:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e2c5:	00 
   1e2c6:	48 89 e9             	mov    %rbp,%rcx
   1e2c9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e2cd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e2d4:	00 
   1e2d5:	ff 32                	pushq  (%rdx)
   1e2d7:	48 8b 15 3a 56 73 00 	mov    0x73563a(%rip),%rdx        # 753918 <tmpquadone>
   1e2de:	48 8b 0d 4b f9 5d 00 	mov    0x5df94b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e2e5:	48 c7 05 60 56 73 00 	movq   $0x1,0x735660(%rip)        # 753950 <cmpPassed>
   1e2ec:	01 00 00 00 
   1e2f0:	e8 83 75 fe ff       	callq  5878 <_storeDataFn>
   1e2f5:	48 39 c5             	cmp    %rax,%rbp
        sv[n].size = size = qsize + 1;
   1e2f8:	48 89 13             	mov    %rdx,(%rbx)
        if (val != slot0)
   1e2fb:	74 25                	je     1e322 <quotearg_colon+0x302>
   1e2fd:	50                   	push   %rax
   1e2fe:	48 c7 c0 99 a5 6f 5d 	mov    $0x5d6fa599,%rax
   1e305:	48 89 05 34 56 73 00 	mov    %rax,0x735634(%rip)        # 753940 <edgeId>
   1e30c:	58                   	pop    %rax
   1e30d:	e8 ce 74 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1e312:	48 89 ef             	mov    %rbp,%rdi
   1e315:	48 89 14 24          	mov    %rdx,(%rsp)
   1e319:	e8 52 35 fe ff       	callq  1870 <free@plt>
   1e31e:	48 8b 14 24          	mov    (%rsp),%rdx
   1e322:	50                   	push   %rax
   1e323:	48 c7 c0 a5 6f 5d 37 	mov    $0x375d6fa5,%rax
   1e32a:	48 89 05 0f 56 73 00 	mov    %rax,0x73560f(%rip)        # 753940 <edgeId>
   1e331:	58                   	pop    %rax
   1e332:	e8 a9 74 fe ff       	callq  57e0 <_storeEdge>
   1e337:	48 89 d7             	mov    %rdx,%rdi
   1e33a:	48 89 14 24          	mov    %rdx,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1e33e:	49 83 c5 08          	add    $0x8,%r13
   1e342:	e8 39 55 00 00       	callq  23880 <xmalloc>
   1e347:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1e34b:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1e34f:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1e356:	ff 74 24 48          	pushq  0x48(%rsp)
   1e35a:	ff 74 24 48          	pushq  0x48(%rsp)
   1e35e:	4c 89 e2             	mov    %r12,%rdx
   1e361:	41 55                	push   %r13
   1e363:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1e368:	48 89 c7             	mov    %rax,%rdi
   1e36b:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1e370:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1e375:	48 89 c5             	mov    %rax,%rbp
   1e378:	e8 83 4a ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1e37d:	48 83 c4 20          	add    $0x20,%rsp
   1e381:	50                   	push   %rax
   1e382:	48 b8 e3 d6 ca 9a 00 	movabs $0x9acad6e3,%rax
   1e389:	00 00 00 
   1e38c:	48 89 05 ad 55 73 00 	mov    %rax,0x7355ad(%rip)        # 753940 <edgeId>
   1e393:	58                   	pop    %rax
   1e394:	e8 47 74 fe ff       	callq  57e0 <_storeEdge>
  return quotearg_char (arg, ':');
}
   1e399:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1e39e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1e3a5:	00 00 
    errno = e;
   1e3a7:	45 89 3e             	mov    %r15d,(%r14)
}
   1e3aa:	48 89 e8             	mov    %rbp,%rax
   1e3ad:	75 67                	jne    1e416 <quotearg_colon+0x3f6>
   1e3af:	50                   	push   %rax
   1e3b0:	48 c7 c0 13 66 8e 7a 	mov    $0x7a8e6613,%rax
   1e3b7:	48 89 05 82 55 73 00 	mov    %rax,0x735582(%rip)        # 753940 <edgeId>
   1e3be:	58                   	pop    %rax
   1e3bf:	e8 1c 74 fe ff       	callq  57e0 <_storeEdge>
   1e3c4:	48 83 c4 58          	add    $0x58,%rsp
   1e3c8:	5b                   	pop    %rbx
   1e3c9:	5d                   	pop    %rbp
   1e3ca:	41 5c                	pop    %r12
   1e3cc:	41 5d                	pop    %r13
   1e3ce:	41 5e                	pop    %r14
   1e3d0:	41 5f                	pop    %r15
   1e3d2:	c3                   	retq   
   1e3d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e3d8:	50                   	push   %rax
   1e3d9:	48 b8 d4 73 92 da 00 	movabs $0xda9273d4,%rax
   1e3e0:	00 00 00 
   1e3e3:	48 89 05 56 55 73 00 	mov    %rax,0x735556(%rip)        # 753940 <edgeId>
   1e3ea:	58                   	pop    %rax
   1e3eb:	e8 f0 73 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e3f0:	be 10 00 00 00       	mov    $0x10,%esi
   1e3f5:	31 ff                	xor    %edi,%edi
   1e3f7:	e8 04 55 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1e3fc:	66 0f 6f 1d 6c ec 20 	movdqa 0x20ec6c(%rip),%xmm3        # 22d070 <slotvec0>
   1e403:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e404:	48 89 c3             	mov    %rax,%rbx
   1e407:	48 89 05 52 ec 20 00 	mov    %rax,0x20ec52(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1e40e:	0f 11 18             	movups %xmm3,(%rax)
   1e411:	e9 48 fd ff ff       	jmpq   1e15e <quotearg_colon+0x13e>
   1e416:	50                   	push   %rax
   1e417:	48 c7 c0 b5 d9 4c 11 	mov    $0x114cd9b5,%rax
   1e41e:	48 89 05 1b 55 73 00 	mov    %rax,0x73551b(%rip)        # 753940 <edgeId>
   1e425:	58                   	pop    %rax
   1e426:	e8 b5 73 fe ff       	callq  57e0 <_storeEdge>
}
   1e42b:	e8 20 35 fe ff       	callq  1950 <__stack_chk_fail@plt>

000000000001e430 <quotearg_colon_mem>:

char *
quotearg_colon_mem (char const *arg, size_t argsize)
{
   1e430:	41 57                	push   %r15
   1e432:	41 56                	push   %r14
   1e434:	49 89 f7             	mov    %rsi,%r15
   1e437:	41 55                	push   %r13
   1e439:	41 54                	push   %r12
   1e43b:	49 89 fe             	mov    %rdi,%r14
   1e43e:	55                   	push   %rbp
   1e43f:	53                   	push   %rbx
   1e440:	48 83 ec 58          	sub    $0x58,%rsp
  options = default_quoting_options;
   1e444:	66 0f 6f 05 f4 f6 5d 	movdqa 0x5df6f4(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1e44b:	00 
{
   1e44c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1e453:	00 00 
   1e455:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1e45a:	31 c0                	xor    %eax,%eax
  options = default_quoting_options;
   1e45c:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  int r = (*p >> shift) & 1;
   1e461:	8b 54 24 1c          	mov    0x1c(%rsp),%edx
  options = default_quoting_options;
   1e465:	48 8b 05 04 f7 5d 00 	mov    0x5df704(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  *p ^= ((i & 1) ^ r) << shift;
   1e46c:	89 d1                	mov    %edx,%ecx
  options = default_quoting_options;
   1e46e:	66 0f 6f 0d da f6 5d 	movdqa 0x5df6da(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1e475:	00 
  *p ^= ((i & 1) ^ r) << shift;
   1e476:	f7 d1                	not    %ecx
  options = default_quoting_options;
   1e478:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1e47d:	66 0f 6f 15 db f6 5d 	movdqa 0x5df6db(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1e484:	00 
  *p ^= ((i & 1) ^ r) << shift;
   1e485:	81 e1 00 00 00 04    	and    $0x4000000,%ecx
   1e48b:	31 d1                	xor    %edx,%ecx
  options = default_quoting_options;
   1e48d:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
  *p ^= ((i & 1) ^ r) << shift;
   1e492:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  options = default_quoting_options;
   1e496:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  int e = errno;
   1e49b:	e8 f0 33 fe ff       	callq  1890 <__errno_location@plt>
   1e4a0:	49 89 c5             	mov    %rax,%r13
  if (nslots <= n0)
   1e4a3:	8b 35 af eb 20 00    	mov    0x20ebaf(%rip),%esi        # 22d058 <nslots>
  int e = errno;
   1e4a9:	8b 18                	mov    (%rax),%ebx
  if (nslots <= n0)
   1e4ab:	85 f6                	test   %esi,%esi
  int e = errno;
   1e4ad:	89 5c 24 08          	mov    %ebx,0x8(%rsp)
  struct slotvec *sv = slotvec;
   1e4b1:	48 8b 1d a8 eb 20 00 	mov    0x20eba8(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1e4b8:	0f 85 f5 00 00 00    	jne    1e5b3 <quotearg_colon_mem+0x183>
   1e4be:	50                   	push   %rax
   1e4bf:	48 c7 c0 b2 17 90 4c 	mov    $0x4c9017b2,%rax
   1e4c6:	48 89 05 73 54 73 00 	mov    %rax,0x735473(%rip)        # 753940 <edgeId>
   1e4cd:	58                   	pop    %rax
   1e4ce:	e8 0d 73 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e4d3:	48 8d 3d 96 eb 20 00 	lea    0x20eb96(%rip),%rdi        # 22d070 <slotvec0>
   1e4da:	48 89 15 37 54 73 00 	mov    %rdx,0x735437(%rip)        # 753918 <tmpquadone>
   1e4e1:	48 89 0d 48 f7 5d 00 	mov    %rcx,0x5df748(%rip)        # 5fdc30 <tmpquadtwo>
   1e4e8:	48 8d 15 01 f7 5d 00 	lea    0x5df701(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e4ef:	48 c7 02 be 0a 00 00 	movq   $0xabe,(%rdx)
   1e4f6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e4fd:	00 
   1e4fe:	48 89 f9             	mov    %rdi,%rcx
   1e501:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e505:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e50c:	00 
   1e50d:	48 89 d9             	mov    %rbx,%rcx
   1e510:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e514:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e51b:	00 
   1e51c:	ff 32                	pushq  (%rdx)
   1e51e:	48 8b 15 f3 53 73 00 	mov    0x7353f3(%rip),%rdx        # 753918 <tmpquadone>
   1e525:	48 8b 0d 04 f7 5d 00 	mov    0x5df704(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e52c:	48 c7 05 19 54 73 00 	movq   $0x1,0x735419(%rip)        # 753950 <cmpPassed>
   1e533:	01 00 00 00 
   1e537:	e8 3c 73 fe ff       	callq  5878 <_storeDataFn>
   1e53c:	48 39 fb             	cmp    %rdi,%rbx
   1e53f:	0f 84 ab 02 00 00    	je     1e7f0 <quotearg_colon_mem+0x3c0>
   1e545:	50                   	push   %rax
   1e546:	48 b8 5e 40 32 e9 00 	movabs $0xe932405e,%rax
   1e54d:	00 00 00 
   1e550:	48 89 05 e9 53 73 00 	mov    %rax,0x7353e9(%rip)        # 753940 <edgeId>
   1e557:	58                   	pop    %rax
   1e558:	e8 83 72 fe ff       	callq  57e0 <_storeEdge>
   1e55d:	48 89 df             	mov    %rbx,%rdi
   1e560:	be 10 00 00 00       	mov    $0x10,%esi
   1e565:	e8 96 53 00 00       	callq  23900 <xrealloc>
   1e56a:	48 89 c3             	mov    %rax,%rbx
   1e56d:	48 89 05 ec ea 20 00 	mov    %rax,0x20eaec(%rip)        # 22d060 <slotvec>
   1e574:	50                   	push   %rax
   1e575:	48 c7 c0 40 32 e9 79 	mov    $0x79e93240,%rax
   1e57c:	48 89 05 bd 53 73 00 	mov    %rax,0x7353bd(%rip)        # 753940 <edgeId>
   1e583:	58                   	pop    %rax
   1e584:	e8 57 72 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1e589:	8b 3d c9 ea 20 00    	mov    0x20eac9(%rip),%edi        # 22d058 <nslots>
   1e58f:	ba 01 00 00 00       	mov    $0x1,%edx
   1e594:	31 f6                	xor    %esi,%esi
   1e596:	48 29 fa             	sub    %rdi,%rdx
   1e599:	48 c1 e7 04          	shl    $0x4,%rdi
   1e59d:	48 c1 e2 04          	shl    $0x4,%rdx
   1e5a1:	48 01 df             	add    %rbx,%rdi
   1e5a4:	e8 47 34 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1e5a9:	c7 05 a5 ea 20 00 01 	movl   $0x1,0x20eaa5(%rip)        # 22d058 <nslots>
   1e5b0:	00 00 00 
   1e5b3:	50                   	push   %rax
   1e5b4:	48 b8 2b 30 86 b7 00 	movabs $0xb786302b,%rax
   1e5bb:	00 00 00 
   1e5be:	48 89 05 7b 53 73 00 	mov    %rax,0x73537b(%rip)        # 753940 <edgeId>
   1e5c5:	58                   	pop    %rax
   1e5c6:	e8 15 72 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e5cb:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e5d0:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1e5d4:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1e5d7:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e5db:	4c 89 f9             	mov    %r15,%rcx
   1e5de:	4c 89 f2             	mov    %r14,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e5e1:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e5e5:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1e5e8:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1e5ed:	ff 74 24 48          	pushq  0x48(%rsp)
   1e5f1:	48 89 ef             	mov    %rbp,%rdi
   1e5f4:	ff 74 24 48          	pushq  0x48(%rsp)
   1e5f8:	4c 8d 64 24 28       	lea    0x28(%rsp),%r12
   1e5fd:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
   1e602:	41 50                	push   %r8
   1e604:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1e609:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1e60e:	e8 ed 47 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1e613:	48 83 c4 20          	add    $0x20,%rsp
   1e617:	4c 8b 14 24          	mov    (%rsp),%r10
   1e61b:	48 89 15 f6 52 73 00 	mov    %rdx,0x7352f6(%rip)        # 753918 <tmpquadone>
   1e622:	48 89 0d 07 f6 5d 00 	mov    %rcx,0x5df607(%rip)        # 5fdc30 <tmpquadtwo>
   1e629:	48 8d 15 c0 f5 5d 00 	lea    0x5df5c0(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e630:	48 c7 02 bf 0a 00 00 	movq   $0xabf,(%rdx)
   1e637:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e63e:	00 
   1e63f:	48 89 c1             	mov    %rax,%rcx
   1e642:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e646:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e64d:	00 
   1e64e:	4c 89 d1             	mov    %r10,%rcx
   1e651:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e655:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e65c:	00 
   1e65d:	ff 32                	pushq  (%rdx)
   1e65f:	48 8b 15 b2 52 73 00 	mov    0x7352b2(%rip),%rdx        # 753918 <tmpquadone>
   1e666:	48 8b 0d c3 f5 5d 00 	mov    0x5df5c3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e66d:	48 c7 05 d8 52 73 00 	movq   $0x1,0x7352d8(%rip)        # 753950 <cmpPassed>
   1e674:	01 00 00 00 
   1e678:	e8 fb 71 fe ff       	callq  5878 <_storeDataFn>
   1e67d:	49 39 c2             	cmp    %rax,%r10
   1e680:	0f 87 0d 01 00 00    	ja     1e793 <quotearg_colon_mem+0x363>
   1e686:	50                   	push   %rax
   1e687:	48 b8 50 f7 06 b8 00 	movabs $0xb806f750,%rax
   1e68e:	00 00 00 
   1e691:	48 89 05 a8 52 73 00 	mov    %rax,0x7352a8(%rip)        # 753940 <edgeId>
   1e698:	58                   	pop    %rax
   1e699:	e8 42 71 fe ff       	callq  57e0 <_storeEdge>
        sv[n].size = size = qsize + 1;
   1e69e:	48 8d 50 01          	lea    0x1(%rax),%rdx
        if (val != slot0)
   1e6a2:	48 8d 05 97 f3 5d 00 	lea    0x5df397(%rip),%rax        # 5fda40 <slot0>
   1e6a9:	48 89 15 68 52 73 00 	mov    %rdx,0x735268(%rip)        # 753918 <tmpquadone>
   1e6b0:	48 89 0d 79 f5 5d 00 	mov    %rcx,0x5df579(%rip)        # 5fdc30 <tmpquadtwo>
   1e6b7:	48 8d 15 32 f5 5d 00 	lea    0x5df532(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e6be:	48 c7 02 c0 0a 00 00 	movq   $0xac0,(%rdx)
   1e6c5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e6cc:	00 
   1e6cd:	48 89 c1             	mov    %rax,%rcx
   1e6d0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e6d4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e6db:	00 
   1e6dc:	48 89 e9             	mov    %rbp,%rcx
   1e6df:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e6e3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e6ea:	00 
   1e6eb:	ff 32                	pushq  (%rdx)
   1e6ed:	48 8b 15 24 52 73 00 	mov    0x735224(%rip),%rdx        # 753918 <tmpquadone>
   1e6f4:	48 8b 0d 35 f5 5d 00 	mov    0x5df535(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e6fb:	48 c7 05 4a 52 73 00 	movq   $0x1,0x73524a(%rip)        # 753950 <cmpPassed>
   1e702:	01 00 00 00 
   1e706:	e8 6d 71 fe ff       	callq  5878 <_storeDataFn>
   1e70b:	48 39 c5             	cmp    %rax,%rbp
        sv[n].size = size = qsize + 1;
   1e70e:	48 89 13             	mov    %rdx,(%rbx)
        if (val != slot0)
   1e711:	74 25                	je     1e738 <quotearg_colon_mem+0x308>
   1e713:	50                   	push   %rax
   1e714:	48 c7 c0 de 00 77 58 	mov    $0x587700de,%rax
   1e71b:	48 89 05 1e 52 73 00 	mov    %rax,0x73521e(%rip)        # 753940 <edgeId>
   1e722:	58                   	pop    %rax
   1e723:	e8 b8 70 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1e728:	48 89 ef             	mov    %rbp,%rdi
   1e72b:	48 89 14 24          	mov    %rdx,(%rsp)
   1e72f:	e8 3c 31 fe ff       	callq  1870 <free@plt>
   1e734:	48 8b 14 24          	mov    (%rsp),%rdx
   1e738:	50                   	push   %rax
   1e739:	48 c7 c0 00 77 58 5c 	mov    $0x5c587700,%rax
   1e740:	48 89 05 f9 51 73 00 	mov    %rax,0x7351f9(%rip)        # 753940 <edgeId>
   1e747:	58                   	pop    %rax
   1e748:	e8 93 70 fe ff       	callq  57e0 <_storeEdge>
   1e74d:	48 89 d7             	mov    %rdx,%rdi
   1e750:	48 89 14 24          	mov    %rdx,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1e754:	49 83 c4 08          	add    $0x8,%r12
   1e758:	e8 23 51 00 00       	callq  23880 <xmalloc>
   1e75d:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1e761:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1e765:	4c 89 f9             	mov    %r15,%rcx
   1e768:	ff 74 24 48          	pushq  0x48(%rsp)
   1e76c:	ff 74 24 48          	pushq  0x48(%rsp)
   1e770:	4c 89 f2             	mov    %r14,%rdx
   1e773:	41 54                	push   %r12
   1e775:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1e77a:	48 89 c7             	mov    %rax,%rdi
   1e77d:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1e782:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1e787:	48 89 c5             	mov    %rax,%rbp
   1e78a:	e8 71 46 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1e78f:	48 83 c4 20          	add    $0x20,%rsp
   1e793:	50                   	push   %rax
   1e794:	48 c7 c0 9b b1 ba 0d 	mov    $0xdbab19b,%rax
   1e79b:	48 89 05 9e 51 73 00 	mov    %rax,0x73519e(%rip)        # 753940 <edgeId>
   1e7a2:	58                   	pop    %rax
   1e7a3:	e8 38 70 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1e7a8:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
  return quotearg_char_mem (arg, argsize, ':');
}
   1e7ac:	48 89 e8             	mov    %rbp,%rax
    errno = e;
   1e7af:	41 89 4d 00          	mov    %ecx,0x0(%r13)
}
   1e7b3:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1e7b8:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1e7bf:	00 00 
   1e7c1:	75 68                	jne    1e82b <quotearg_colon_mem+0x3fb>
   1e7c3:	50                   	push   %rax
   1e7c4:	48 c7 c0 03 5d 8b 0b 	mov    $0xb8b5d03,%rax
   1e7cb:	48 89 05 6e 51 73 00 	mov    %rax,0x73516e(%rip)        # 753940 <edgeId>
   1e7d2:	58                   	pop    %rax
   1e7d3:	e8 08 70 fe ff       	callq  57e0 <_storeEdge>
   1e7d8:	48 83 c4 58          	add    $0x58,%rsp
   1e7dc:	5b                   	pop    %rbx
   1e7dd:	5d                   	pop    %rbp
   1e7de:	41 5c                	pop    %r12
   1e7e0:	41 5d                	pop    %r13
   1e7e2:	41 5e                	pop    %r14
   1e7e4:	41 5f                	pop    %r15
   1e7e6:	c3                   	retq   
   1e7e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e7ee:	00 00 
   1e7f0:	50                   	push   %rax
   1e7f1:	48 c7 c0 2e 58 0d 08 	mov    $0x80d582e,%rax
   1e7f8:	48 89 05 41 51 73 00 	mov    %rax,0x735141(%rip)        # 753940 <edgeId>
   1e7ff:	58                   	pop    %rax
   1e800:	e8 db 6f fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e805:	be 10 00 00 00       	mov    $0x10,%esi
   1e80a:	31 ff                	xor    %edi,%edi
   1e80c:	e8 ef 50 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1e811:	66 0f 6f 1d 57 e8 20 	movdqa 0x20e857(%rip),%xmm3        # 22d070 <slotvec0>
   1e818:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e819:	48 89 c3             	mov    %rax,%rbx
   1e81c:	48 89 05 3d e8 20 00 	mov    %rax,0x20e83d(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1e823:	0f 11 18             	movups %xmm3,(%rax)
   1e826:	e9 49 fd ff ff       	jmpq   1e574 <quotearg_colon_mem+0x144>
   1e82b:	50                   	push   %rax
   1e82c:	48 c7 c0 20 f0 54 33 	mov    $0x3354f020,%rax
   1e833:	48 89 05 06 51 73 00 	mov    %rax,0x735106(%rip)        # 753940 <edgeId>
   1e83a:	58                   	pop    %rax
   1e83b:	e8 a0 6f fe ff       	callq  57e0 <_storeEdge>
}
   1e840:	e8 0b 31 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1e845:	90                   	nop
   1e846:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1e84d:	00 00 00 

000000000001e850 <quotearg_n_custom>:

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
   1e850:	41 57                	push   %r15
   1e852:	41 56                	push   %r14
   1e854:	41 55                	push   %r13
   1e856:	41 54                	push   %r12
   1e858:	55                   	push   %rbp
   1e859:	53                   	push   %rbx
   1e85a:	48 83 ec 58          	sub    $0x58,%rsp
   1e85e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1e865:	00 00 
   1e867:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1e86c:	31 c0                	xor    %eax,%eax
char *
quotearg_n_custom_mem (int n, char const *left_quote,
                       char const *right_quote,
                       char const *arg, size_t argsize)
{
  struct quoting_options o = default_quoting_options;
   1e86e:	48 8b 05 fb f2 5d 00 	mov    0x5df2fb(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  if (!left_quote || !right_quote)
   1e875:	48 85 f6             	test   %rsi,%rsi
  struct quoting_options o = default_quoting_options;
   1e878:	66 0f 6f 05 c0 f2 5d 	movdqa 0x5df2c0(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1e87f:	00 
   1e880:	66 0f 6f 0d c8 f2 5d 	movdqa 0x5df2c8(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1e887:	00 
   1e888:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1e88d:	66 0f 6f 15 cb f2 5d 	movdqa 0x5df2cb(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1e894:	00 
   1e895:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  o->style = custom_quoting_style;
   1e89a:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%rsp)
   1e8a1:	00 
  struct quoting_options o = default_quoting_options;
   1e8a2:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1e8a7:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  if (!left_quote || !right_quote)
   1e8ac:	0f 84 8f 04 00 00    	je     1ed41 <quotearg_n_custom+0x4f1>
   1e8b2:	50                   	push   %rax
   1e8b3:	48 c7 c0 75 8b f3 3e 	mov    $0x3ef38b75,%rax
   1e8ba:	48 89 05 7f 50 73 00 	mov    %rax,0x73507f(%rip)        # 753940 <edgeId>
   1e8c1:	58                   	pop    %rax
   1e8c2:	e8 19 6f fe ff       	callq  57e0 <_storeEdge>
   1e8c7:	48 85 d2             	test   %rdx,%rdx
   1e8ca:	0f 84 71 04 00 00    	je     1ed41 <quotearg_n_custom+0x4f1>
   1e8d0:	50                   	push   %rax
   1e8d1:	48 b8 dd e2 bc 8f 00 	movabs $0x8fbce2dd,%rax
   1e8d8:	00 00 00 
   1e8db:	48 89 05 5e 50 73 00 	mov    %rax,0x73505e(%rip)        # 753940 <edgeId>
   1e8e2:	58                   	pop    %rax
   1e8e3:	e8 f8 6e fe ff       	callq  57e0 <_storeEdge>
   1e8e8:	48 63 ef             	movslq %edi,%rbp
   1e8eb:	49 89 f7             	mov    %rsi,%r15
   1e8ee:	49 89 cd             	mov    %rcx,%r13
  o->left_quote = left_quote;
   1e8f1:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  o->right_quote = right_quote;
   1e8f6:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   1e8fb:	48 89 14 24          	mov    %rdx,(%rsp)
  int e = errno;
   1e8ff:	e8 8c 2f fe ff       	callq  1890 <__errno_location@plt>
  if (n < 0)
   1e904:	85 ed                	test   %ebp,%ebp
  int e = errno;
   1e906:	49 89 c4             	mov    %rax,%r12
   1e909:	44 8b 30             	mov    (%rax),%r14d
  struct slotvec *sv = slotvec;
   1e90c:	48 8b 1d 4d e7 20 00 	mov    0x20e74d(%rip),%rbx        # 22d060 <slotvec>
  if (n < 0)
   1e913:	0f 88 28 04 00 00    	js     1ed41 <quotearg_n_custom+0x4f1>
   1e919:	50                   	push   %rax
   1e91a:	48 b8 91 6d af a6 00 	movabs $0xa6af6d91,%rax
   1e921:	00 00 00 
   1e924:	48 89 05 15 50 73 00 	mov    %rax,0x735015(%rip)        # 753940 <edgeId>
   1e92b:	58                   	pop    %rax
   1e92c:	e8 af 6e fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1e931:	48 89 15 e0 4f 73 00 	mov    %rdx,0x734fe0(%rip)        # 753918 <tmpquadone>
   1e938:	48 89 0d f1 f2 5d 00 	mov    %rcx,0x5df2f1(%rip)        # 5fdc30 <tmpquadtwo>
   1e93f:	48 8d 15 aa f2 5d 00 	lea    0x5df2aa(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e946:	48 c7 02 c1 0a 00 00 	movq   $0xac1,(%rdx)
   1e94d:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1e954:	00 
   1e955:	48 8b 0d fc e6 20 00 	mov    0x20e6fc(%rip),%rcx        # 22d058 <nslots>
   1e95c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1e960:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1e967:	00 
   1e968:	48 89 e9             	mov    %rbp,%rcx
   1e96b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1e96f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1e976:	00 
   1e977:	ff 32                	pushq  (%rdx)
   1e979:	48 8b 15 98 4f 73 00 	mov    0x734f98(%rip),%rdx        # 753918 <tmpquadone>
   1e980:	48 8b 0d a9 f2 5d 00 	mov    0x5df2a9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1e987:	48 c7 05 be 4f 73 00 	movq   $0x1,0x734fbe(%rip)        # 753950 <cmpPassed>
   1e98e:	01 00 00 00 
   1e992:	e8 e1 6e fe ff       	callq  5878 <_storeDataFn>
   1e997:	3b 2d bb e6 20 00    	cmp    0x20e6bb(%rip),%ebp        # 22d058 <nslots>
   1e99d:	41 b8 08 00 00 00    	mov    $0x8,%r8d
   1e9a3:	48 8b 34 24          	mov    (%rsp),%rsi
   1e9a7:	0f 82 0f 01 00 00    	jb     1eabc <quotearg_n_custom+0x26c>
   1e9ad:	50                   	push   %rax
   1e9ae:	48 b8 6c 7b 35 e5 00 	movabs $0xe5357b6c,%rax
   1e9b5:	00 00 00 
   1e9b8:	48 89 05 81 4f 73 00 	mov    %rax,0x734f81(%rip)        # 753940 <edgeId>
   1e9bf:	58                   	pop    %rax
   1e9c0:	e8 1b 6e fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1e9c5:	8d 55 01             	lea    0x1(%rbp),%edx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e9c8:	48 8d 0d a1 e6 20 00 	lea    0x20e6a1(%rip),%rcx        # 22d070 <slotvec0>
   1e9cf:	48 89 d6             	mov    %rdx,%rsi
      size_t n1 = n0 + 1;
   1e9d2:	49 89 d7             	mov    %rdx,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1e9d5:	48 c1 e6 04          	shl    $0x4,%rsi
   1e9d9:	48 89 15 38 4f 73 00 	mov    %rdx,0x734f38(%rip)        # 753918 <tmpquadone>
   1e9e0:	48 89 05 49 f2 5d 00 	mov    %rax,0x5df249(%rip)        # 5fdc30 <tmpquadtwo>
   1e9e7:	48 8d 15 02 f2 5d 00 	lea    0x5df202(%rip),%rdx        # 5fdbf0 <funcinptr>
   1e9ee:	48 c7 02 c2 0a 00 00 	movq   $0xac2,(%rdx)
   1e9f5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1e9fc:	00 
   1e9fd:	48 89 c8             	mov    %rcx,%rax
   1ea00:	48 89 42 10          	mov    %rax,0x10(%rdx)
   1ea04:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ea0b:	00 
   1ea0c:	48 89 d8             	mov    %rbx,%rax
   1ea0f:	48 89 42 20          	mov    %rax,0x20(%rdx)
   1ea13:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ea1a:	00 
   1ea1b:	ff 32                	pushq  (%rdx)
   1ea1d:	48 8b 15 f4 4e 73 00 	mov    0x734ef4(%rip),%rdx        # 753918 <tmpquadone>
   1ea24:	48 8b 05 05 f2 5d 00 	mov    0x5df205(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1ea2b:	48 c7 05 1a 4f 73 00 	movq   $0x1,0x734f1a(%rip)        # 753950 <cmpPassed>
   1ea32:	01 00 00 00 
   1ea36:	e8 3d 6e fe ff       	callq  5878 <_storeDataFn>
   1ea3b:	48 39 cb             	cmp    %rcx,%rbx
   1ea3e:	0f 84 bc 02 00 00    	je     1ed00 <quotearg_n_custom+0x4b0>
   1ea44:	50                   	push   %rax
   1ea45:	48 c7 c0 ab 29 df 50 	mov    $0x50df29ab,%rax
   1ea4c:	48 89 05 ed 4e 73 00 	mov    %rax,0x734eed(%rip)        # 753940 <edgeId>
   1ea53:	58                   	pop    %rax
   1ea54:	e8 87 6d fe ff       	callq  57e0 <_storeEdge>
   1ea59:	48 89 df             	mov    %rbx,%rdi
   1ea5c:	48 89 14 24          	mov    %rdx,(%rsp)
   1ea60:	e8 9b 4e 00 00       	callq  23900 <xrealloc>
   1ea65:	48 8b 14 24          	mov    (%rsp),%rdx
   1ea69:	48 89 c3             	mov    %rax,%rbx
   1ea6c:	48 89 05 ed e5 20 00 	mov    %rax,0x20e5ed(%rip)        # 22d060 <slotvec>
   1ea73:	50                   	push   %rax
   1ea74:	48 b8 ca 37 54 ad 00 	movabs $0xad5437ca,%rax
   1ea7b:	00 00 00 
   1ea7e:	48 89 05 bb 4e 73 00 	mov    %rax,0x734ebb(%rip)        # 753940 <edgeId>
   1ea85:	58                   	pop    %rax
   1ea86:	e8 55 6d fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1ea8b:	8b 3d c7 e5 20 00    	mov    0x20e5c7(%rip),%edi        # 22d058 <nslots>
   1ea91:	31 f6                	xor    %esi,%esi
   1ea93:	48 29 fa             	sub    %rdi,%rdx
   1ea96:	48 c1 e7 04          	shl    $0x4,%rdi
   1ea9a:	48 c1 e2 04          	shl    $0x4,%rdx
   1ea9e:	48 01 df             	add    %rbx,%rdi
   1eaa1:	e8 4a 2f fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1eaa6:	44 89 3d ab e5 20 00 	mov    %r15d,0x20e5ab(%rip)        # 22d058 <nslots>
   1eaad:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   1eab2:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
   1eab7:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   1eabc:	50                   	push   %rax
   1eabd:	48 b8 3e e4 9d f0 00 	movabs $0xf09de43e,%rax
   1eac4:	00 00 00 
   1eac7:	48 89 05 72 4e 73 00 	mov    %rax,0x734e72(%rip)        # 753940 <edgeId>
   1eace:	58                   	pop    %rax
   1eacf:	e8 0c 6d fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1ead4:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t size = sv[n].size;
   1ead9:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1eadd:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1eae1:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1eae4:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1eaeb:	4c 89 ea             	mov    %r13,%rdx
    size_t size = sv[n].size;
   1eaee:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1eaf1:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1eaf5:	41 83 c9 01          	or     $0x1,%r9d
   1eaf9:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1eafe:	56                   	push   %rsi
   1eaff:	41 57                	push   %r15
   1eb01:	4c 89 de             	mov    %r11,%rsi
   1eb04:	4c 8d 7c 24 28       	lea    0x28(%rsp),%r15
   1eb09:	49 8d 7f 08          	lea    0x8(%r15),%rdi
   1eb0d:	57                   	push   %rdi
   1eb0e:	48 89 ef             	mov    %rbp,%rdi
   1eb11:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1eb16:	e8 e5 42 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1eb1b:	48 83 c4 20          	add    $0x20,%rsp
   1eb1f:	4c 8b 04 24          	mov    (%rsp),%r8
   1eb23:	48 89 15 ee 4d 73 00 	mov    %rdx,0x734dee(%rip)        # 753918 <tmpquadone>
   1eb2a:	48 89 0d ff f0 5d 00 	mov    %rcx,0x5df0ff(%rip)        # 5fdc30 <tmpquadtwo>
   1eb31:	48 8d 15 b8 f0 5d 00 	lea    0x5df0b8(%rip),%rdx        # 5fdbf0 <funcinptr>
   1eb38:	48 c7 02 c3 0a 00 00 	movq   $0xac3,(%rdx)
   1eb3f:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1eb46:	00 
   1eb47:	48 89 c1             	mov    %rax,%rcx
   1eb4a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1eb4e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1eb55:	00 
   1eb56:	4c 89 c1             	mov    %r8,%rcx
   1eb59:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1eb5d:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1eb64:	00 
   1eb65:	ff 32                	pushq  (%rdx)
   1eb67:	48 8b 15 aa 4d 73 00 	mov    0x734daa(%rip),%rdx        # 753918 <tmpquadone>
   1eb6e:	48 8b 0d bb f0 5d 00 	mov    0x5df0bb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1eb75:	48 c7 05 d0 4d 73 00 	movq   $0x1,0x734dd0(%rip)        # 753950 <cmpPassed>
   1eb7c:	01 00 00 00 
   1eb80:	e8 f3 6c fe ff       	callq  5878 <_storeDataFn>
   1eb85:	49 39 c0             	cmp    %rax,%r8
   1eb88:	0f 87 17 01 00 00    	ja     1eca5 <quotearg_n_custom+0x455>
   1eb8e:	50                   	push   %rax
   1eb8f:	48 b8 85 9e e5 d8 00 	movabs $0xd8e59e85,%rax
   1eb96:	00 00 00 
   1eb99:	48 89 05 a0 4d 73 00 	mov    %rax,0x734da0(%rip)        # 753940 <edgeId>
   1eba0:	58                   	pop    %rax
   1eba1:	e8 3a 6c fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1eba6:	4c 8d 0d 93 ee 5d 00 	lea    0x5dee93(%rip),%r9        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1ebad:	4c 8d 50 01          	lea    0x1(%rax),%r10
        if (val != slot0)
   1ebb1:	48 89 15 60 4d 73 00 	mov    %rdx,0x734d60(%rip)        # 753918 <tmpquadone>
   1ebb8:	48 89 0d 71 f0 5d 00 	mov    %rcx,0x5df071(%rip)        # 5fdc30 <tmpquadtwo>
   1ebbf:	48 8d 15 2a f0 5d 00 	lea    0x5df02a(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ebc6:	48 c7 02 c4 0a 00 00 	movq   $0xac4,(%rdx)
   1ebcd:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1ebd4:	00 
   1ebd5:	4c 89 c9             	mov    %r9,%rcx
   1ebd8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ebdc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ebe3:	00 
   1ebe4:	48 89 e9             	mov    %rbp,%rcx
   1ebe7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1ebeb:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ebf2:	00 
   1ebf3:	ff 32                	pushq  (%rdx)
   1ebf5:	48 8b 15 1c 4d 73 00 	mov    0x734d1c(%rip),%rdx        # 753918 <tmpquadone>
   1ebfc:	48 8b 0d 2d f0 5d 00 	mov    0x5df02d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ec03:	48 c7 05 42 4d 73 00 	movq   $0x1,0x734d42(%rip)        # 753950 <cmpPassed>
   1ec0a:	01 00 00 00 
   1ec0e:	e8 65 6c fe ff       	callq  5878 <_storeDataFn>
   1ec13:	4c 39 cd             	cmp    %r9,%rbp
        sv[n].size = size = qsize + 1;
   1ec16:	4c 89 13             	mov    %r10,(%rbx)
        if (val != slot0)
   1ec19:	74 28                	je     1ec43 <quotearg_n_custom+0x3f3>
   1ec1b:	50                   	push   %rax
   1ec1c:	48 b8 b3 1c 9b d5 00 	movabs $0xd59b1cb3,%rax
   1ec23:	00 00 00 
   1ec26:	48 89 05 13 4d 73 00 	mov    %rax,0x734d13(%rip)        # 753940 <edgeId>
   1ec2d:	58                   	pop    %rax
   1ec2e:	e8 ad 6b fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1ec33:	48 89 ef             	mov    %rbp,%rdi
   1ec36:	4c 89 14 24          	mov    %r10,(%rsp)
   1ec3a:	e8 31 2c fe ff       	callq  1870 <free@plt>
   1ec3f:	4c 8b 14 24          	mov    (%rsp),%r10
   1ec43:	50                   	push   %rax
   1ec44:	48 b8 1c 9b d5 cf 00 	movabs $0xcfd59b1c,%rax
   1ec4b:	00 00 00 
   1ec4e:	48 89 05 eb 4c 73 00 	mov    %rax,0x734ceb(%rip)        # 753940 <edgeId>
   1ec55:	58                   	pop    %rax
   1ec56:	e8 85 6b fe ff       	callq  57e0 <_storeEdge>
   1ec5b:	4c 89 d7             	mov    %r10,%rdi
   1ec5e:	4c 89 14 24          	mov    %r10,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1ec62:	49 83 c7 08          	add    $0x8,%r15
   1ec66:	e8 15 4c 00 00       	callq  23880 <xmalloc>
   1ec6b:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1ec6f:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1ec73:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1ec7a:	ff 74 24 48          	pushq  0x48(%rsp)
   1ec7e:	ff 74 24 48          	pushq  0x48(%rsp)
   1ec82:	4c 89 ea             	mov    %r13,%rdx
   1ec85:	41 57                	push   %r15
   1ec87:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1ec8c:	48 89 c7             	mov    %rax,%rdi
   1ec8f:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1ec94:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1ec99:	48 89 c5             	mov    %rax,%rbp
   1ec9c:	e8 5f 41 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1eca1:	48 83 c4 20          	add    $0x20,%rsp
   1eca5:	50                   	push   %rax
   1eca6:	48 c7 c0 84 81 d9 6b 	mov    $0x6bd98184,%rax
   1ecad:	48 89 05 8c 4c 73 00 	mov    %rax,0x734c8c(%rip)        # 753940 <edgeId>
   1ecb4:	58                   	pop    %rax
   1ecb5:	e8 26 6b fe ff       	callq  57e0 <_storeEdge>
}
   1ecba:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1ecbf:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1ecc6:	00 00 
    errno = e;
   1ecc8:	45 89 34 24          	mov    %r14d,(%r12)
}
   1eccc:	48 89 e8             	mov    %rbp,%rax
   1eccf:	0f 85 89 00 00 00    	jne    1ed5e <quotearg_n_custom+0x50e>
   1ecd5:	50                   	push   %rax
   1ecd6:	48 b8 6b 69 7d f0 00 	movabs $0xf07d696b,%rax
   1ecdd:	00 00 00 
   1ece0:	48 89 05 59 4c 73 00 	mov    %rax,0x734c59(%rip)        # 753940 <edgeId>
   1ece7:	58                   	pop    %rax
   1ece8:	e8 f3 6a fe ff       	callq  57e0 <_storeEdge>
   1eced:	48 83 c4 58          	add    $0x58,%rsp
   1ecf1:	5b                   	pop    %rbx
   1ecf2:	5d                   	pop    %rbp
   1ecf3:	41 5c                	pop    %r12
   1ecf5:	41 5d                	pop    %r13
   1ecf7:	41 5e                	pop    %r14
   1ecf9:	41 5f                	pop    %r15
   1ecfb:	c3                   	retq   
   1ecfc:	0f 1f 40 00          	nopl   0x0(%rax)
   1ed00:	50                   	push   %rax
   1ed01:	48 b8 83 87 de b2 00 	movabs $0xb2de8783,%rax
   1ed08:	00 00 00 
   1ed0b:	48 89 05 2e 4c 73 00 	mov    %rax,0x734c2e(%rip)        # 753940 <edgeId>
   1ed12:	58                   	pop    %rax
   1ed13:	e8 c8 6a fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1ed18:	31 ff                	xor    %edi,%edi
   1ed1a:	48 89 14 24          	mov    %rdx,(%rsp)
   1ed1e:	e8 dd 4b 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1ed23:	66 0f 6f 1d 45 e3 20 	movdqa 0x20e345(%rip),%xmm3        # 22d070 <slotvec0>
   1ed2a:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1ed2b:	48 89 c3             	mov    %rax,%rbx
   1ed2e:	48 89 05 2b e3 20 00 	mov    %rax,0x20e32b(%rip)        # 22d060 <slotvec>
   1ed35:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   1ed39:	0f 11 18             	movups %xmm3,(%rax)
   1ed3c:	e9 32 fd ff ff       	jmpq   1ea73 <quotearg_n_custom+0x223>
   1ed41:	50                   	push   %rax
   1ed42:	48 b8 b2 39 da f6 00 	movabs $0xf6da39b2,%rax
   1ed49:	00 00 00 
   1ed4c:	48 89 05 ed 4b 73 00 	mov    %rax,0x734bed(%rip)        # 753940 <edgeId>
   1ed53:	58                   	pop    %rax
   1ed54:	e8 87 6a fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1ed59:	e8 22 2b fe ff       	callq  1880 <abort@plt>
   1ed5e:	50                   	push   %rax
   1ed5f:	48 b8 1c 6d fb d7 00 	movabs $0xd7fb6d1c,%rax
   1ed66:	00 00 00 
   1ed69:	48 89 05 d0 4b 73 00 	mov    %rax,0x734bd0(%rip)        # 753940 <edgeId>
   1ed70:	58                   	pop    %rax
   1ed71:	e8 6a 6a fe ff       	callq  57e0 <_storeEdge>
}
   1ed76:	e8 d5 2b fe ff       	callq  1950 <__stack_chk_fail@plt>
   1ed7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ed80 <quotearg_n_custom_mem>:
{
   1ed80:	41 57                	push   %r15
   1ed82:	41 56                	push   %r14
   1ed84:	41 55                	push   %r13
   1ed86:	41 54                	push   %r12
   1ed88:	55                   	push   %rbp
   1ed89:	53                   	push   %rbx
   1ed8a:	48 83 ec 58          	sub    $0x58,%rsp
   1ed8e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1ed95:	00 00 
   1ed97:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1ed9c:	31 c0                	xor    %eax,%eax
  struct quoting_options o = default_quoting_options;
   1ed9e:	48 8b 05 cb ed 5d 00 	mov    0x5dedcb(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  if (!left_quote || !right_quote)
   1eda5:	48 85 f6             	test   %rsi,%rsi
  struct quoting_options o = default_quoting_options;
   1eda8:	66 0f 6f 05 90 ed 5d 	movdqa 0x5ded90(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1edaf:	00 
   1edb0:	66 0f 6f 0d 98 ed 5d 	movdqa 0x5ded98(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1edb7:	00 
   1edb8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1edbd:	66 0f 6f 15 9b ed 5d 	movdqa 0x5ded9b(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1edc4:	00 
   1edc5:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  o->style = custom_quoting_style;
   1edca:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%rsp)
   1edd1:	00 
  struct quoting_options o = default_quoting_options;
   1edd2:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1edd7:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  if (!left_quote || !right_quote)
   1eddc:	0f 84 8c 04 00 00    	je     1f26e <quotearg_n_custom_mem+0x4ee>
   1ede2:	50                   	push   %rax
   1ede3:	48 c7 c0 ce f0 9a 4b 	mov    $0x4b9af0ce,%rax
   1edea:	48 89 05 4f 4b 73 00 	mov    %rax,0x734b4f(%rip)        # 753940 <edgeId>
   1edf1:	58                   	pop    %rax
   1edf2:	e8 e9 69 fe ff       	callq  57e0 <_storeEdge>
   1edf7:	48 85 d2             	test   %rdx,%rdx
   1edfa:	0f 84 6e 04 00 00    	je     1f26e <quotearg_n_custom_mem+0x4ee>
   1ee00:	50                   	push   %rax
   1ee01:	48 b8 33 bc e6 d2 00 	movabs $0xd2e6bc33,%rax
   1ee08:	00 00 00 
   1ee0b:	48 89 05 2e 4b 73 00 	mov    %rax,0x734b2e(%rip)        # 753940 <edgeId>
   1ee12:	58                   	pop    %rax
   1ee13:	e8 c8 69 fe ff       	callq  57e0 <_storeEdge>
   1ee18:	48 63 ef             	movslq %edi,%rbp
  o->right_quote = right_quote;
   1ee1b:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   1ee20:	48 89 14 24          	mov    %rdx,(%rsp)
   1ee24:	49 89 f4             	mov    %rsi,%r12
   1ee27:	49 89 ce             	mov    %rcx,%r14
   1ee2a:	4d 89 c7             	mov    %r8,%r15
  o->left_quote = left_quote;
   1ee2d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  int e = errno;
   1ee32:	e8 59 2a fe ff       	callq  1890 <__errno_location@plt>
   1ee37:	8b 10                	mov    (%rax),%edx
  if (n < 0)
   1ee39:	85 ed                	test   %ebp,%ebp
  int e = errno;
   1ee3b:	49 89 c5             	mov    %rax,%r13
  struct slotvec *sv = slotvec;
   1ee3e:	48 8b 1d 1b e2 20 00 	mov    0x20e21b(%rip),%rbx        # 22d060 <slotvec>
  int e = errno;
   1ee45:	89 54 24 08          	mov    %edx,0x8(%rsp)
  if (n < 0)
   1ee49:	0f 88 1f 04 00 00    	js     1f26e <quotearg_n_custom_mem+0x4ee>
   1ee4f:	50                   	push   %rax
   1ee50:	48 b8 7b be 3c bd 00 	movabs $0xbd3cbe7b,%rax
   1ee57:	00 00 00 
   1ee5a:	48 89 05 df 4a 73 00 	mov    %rax,0x734adf(%rip)        # 753940 <edgeId>
   1ee61:	58                   	pop    %rax
   1ee62:	e8 79 69 fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1ee67:	48 89 15 aa 4a 73 00 	mov    %rdx,0x734aaa(%rip)        # 753918 <tmpquadone>
   1ee6e:	48 89 0d bb ed 5d 00 	mov    %rcx,0x5dedbb(%rip)        # 5fdc30 <tmpquadtwo>
   1ee75:	48 8d 15 74 ed 5d 00 	lea    0x5ded74(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ee7c:	48 c7 02 c5 0a 00 00 	movq   $0xac5,(%rdx)
   1ee83:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1ee8a:	00 
   1ee8b:	48 8b 0d c6 e1 20 00 	mov    0x20e1c6(%rip),%rcx        # 22d058 <nslots>
   1ee92:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ee96:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ee9d:	00 
   1ee9e:	48 89 e9             	mov    %rbp,%rcx
   1eea1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1eea5:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1eeac:	00 
   1eead:	ff 32                	pushq  (%rdx)
   1eeaf:	48 8b 15 62 4a 73 00 	mov    0x734a62(%rip),%rdx        # 753918 <tmpquadone>
   1eeb6:	48 8b 0d 73 ed 5d 00 	mov    0x5ded73(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1eebd:	48 c7 05 88 4a 73 00 	movq   $0x1,0x734a88(%rip)        # 753950 <cmpPassed>
   1eec4:	01 00 00 00 
   1eec8:	e8 ab 69 fe ff       	callq  5878 <_storeDataFn>
   1eecd:	3b 2d 85 e1 20 00    	cmp    0x20e185(%rip),%ebp        # 22d058 <nslots>
   1eed3:	41 b8 08 00 00 00    	mov    $0x8,%r8d
   1eed9:	48 8b 34 24          	mov    (%rsp),%rsi
   1eedd:	0f 82 0f 01 00 00    	jb     1eff2 <quotearg_n_custom_mem+0x272>
   1eee3:	50                   	push   %rax
   1eee4:	48 b8 f3 e5 e9 9d 00 	movabs $0x9de9e5f3,%rax
   1eeeb:	00 00 00 
   1eeee:	48 89 05 4b 4a 73 00 	mov    %rax,0x734a4b(%rip)        # 753940 <edgeId>
   1eef5:	58                   	pop    %rax
   1eef6:	e8 e5 68 fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1eefb:	8d 4d 01             	lea    0x1(%rbp),%ecx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1eefe:	48 8d 3d 6b e1 20 00 	lea    0x20e16b(%rip),%rdi        # 22d070 <slotvec0>
   1ef05:	48 89 ce             	mov    %rcx,%rsi
      size_t n1 = n0 + 1;
   1ef08:	49 89 cc             	mov    %rcx,%r12
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1ef0b:	48 c1 e6 04          	shl    $0x4,%rsi
   1ef0f:	48 89 15 02 4a 73 00 	mov    %rdx,0x734a02(%rip)        # 753918 <tmpquadone>
   1ef16:	48 89 0d 13 ed 5d 00 	mov    %rcx,0x5ded13(%rip)        # 5fdc30 <tmpquadtwo>
   1ef1d:	48 8d 15 cc ec 5d 00 	lea    0x5deccc(%rip),%rdx        # 5fdbf0 <funcinptr>
   1ef24:	48 c7 02 c6 0a 00 00 	movq   $0xac6,(%rdx)
   1ef2b:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1ef32:	00 
   1ef33:	48 89 f9             	mov    %rdi,%rcx
   1ef36:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1ef3a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1ef41:	00 
   1ef42:	48 89 d9             	mov    %rbx,%rcx
   1ef45:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1ef49:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1ef50:	00 
   1ef51:	ff 32                	pushq  (%rdx)
   1ef53:	48 8b 15 be 49 73 00 	mov    0x7349be(%rip),%rdx        # 753918 <tmpquadone>
   1ef5a:	48 8b 0d cf ec 5d 00 	mov    0x5deccf(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1ef61:	48 c7 05 e4 49 73 00 	movq   $0x1,0x7349e4(%rip)        # 753950 <cmpPassed>
   1ef68:	01 00 00 00 
   1ef6c:	e8 07 69 fe ff       	callq  5878 <_storeDataFn>
   1ef71:	48 39 fb             	cmp    %rdi,%rbx
   1ef74:	0f 84 b6 02 00 00    	je     1f230 <quotearg_n_custom_mem+0x4b0>
   1ef7a:	50                   	push   %rax
   1ef7b:	48 c7 c0 4f ef d4 08 	mov    $0x8d4ef4f,%rax
   1ef82:	48 89 05 b7 49 73 00 	mov    %rax,0x7349b7(%rip)        # 753940 <edgeId>
   1ef89:	58                   	pop    %rax
   1ef8a:	e8 51 68 fe ff       	callq  57e0 <_storeEdge>
   1ef8f:	48 89 df             	mov    %rbx,%rdi
   1ef92:	48 89 0c 24          	mov    %rcx,(%rsp)
   1ef96:	e8 65 49 00 00       	callq  23900 <xrealloc>
   1ef9b:	48 8b 14 24          	mov    (%rsp),%rdx
   1ef9f:	48 89 c3             	mov    %rax,%rbx
   1efa2:	48 89 05 b7 e0 20 00 	mov    %rax,0x20e0b7(%rip)        # 22d060 <slotvec>
   1efa9:	50                   	push   %rax
   1efaa:	48 b8 3b 35 c2 c5 00 	movabs $0xc5c2353b,%rax
   1efb1:	00 00 00 
   1efb4:	48 89 05 85 49 73 00 	mov    %rax,0x734985(%rip)        # 753940 <edgeId>
   1efbb:	58                   	pop    %rax
   1efbc:	e8 1f 68 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1efc1:	8b 3d 91 e0 20 00    	mov    0x20e091(%rip),%edi        # 22d058 <nslots>
   1efc7:	31 f6                	xor    %esi,%esi
   1efc9:	48 29 fa             	sub    %rdi,%rdx
   1efcc:	48 c1 e7 04          	shl    $0x4,%rdi
   1efd0:	48 c1 e2 04          	shl    $0x4,%rdx
   1efd4:	48 01 df             	add    %rbx,%rdi
   1efd7:	e8 14 2a fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1efdc:	44 89 25 75 e0 20 00 	mov    %r12d,0x20e075(%rip)        # 22d058 <nslots>
   1efe3:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   1efe8:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
   1efed:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   1eff2:	50                   	push   %rax
   1eff3:	48 c7 c0 96 2d cc 2e 	mov    $0x2ecc2d96,%rax
   1effa:	48 89 05 3f 49 73 00 	mov    %rax,0x73493f(%rip)        # 753940 <edgeId>
   1f001:	58                   	pop    %rax
   1f002:	e8 d9 67 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f007:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t size = sv[n].size;
   1f00c:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f010:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1f014:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f017:	4c 89 f9             	mov    %r15,%rcx
   1f01a:	4c 89 f2             	mov    %r14,%rdx
    size_t size = sv[n].size;
   1f01d:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1f020:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f024:	41 83 c9 01          	or     $0x1,%r9d
   1f028:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f02d:	56                   	push   %rsi
   1f02e:	41 54                	push   %r12
   1f030:	4c 89 de             	mov    %r11,%rsi
   1f033:	48 89 ef             	mov    %rbp,%rdi
   1f036:	4c 8d 64 24 28       	lea    0x28(%rsp),%r12
   1f03b:	4d 8d 54 24 08       	lea    0x8(%r12),%r10
   1f040:	41 52                	push   %r10
   1f042:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1f047:	e8 b4 3d ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1f04c:	48 83 c4 20          	add    $0x20,%rsp
   1f050:	4c 8b 04 24          	mov    (%rsp),%r8
   1f054:	48 89 15 bd 48 73 00 	mov    %rdx,0x7348bd(%rip)        # 753918 <tmpquadone>
   1f05b:	48 89 0d ce eb 5d 00 	mov    %rcx,0x5debce(%rip)        # 5fdc30 <tmpquadtwo>
   1f062:	48 8d 15 87 eb 5d 00 	lea    0x5deb87(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f069:	48 c7 02 c7 0a 00 00 	movq   $0xac7,(%rdx)
   1f070:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f077:	00 
   1f078:	48 89 c1             	mov    %rax,%rcx
   1f07b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f07f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f086:	00 
   1f087:	4c 89 c1             	mov    %r8,%rcx
   1f08a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f08e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f095:	00 
   1f096:	ff 32                	pushq  (%rdx)
   1f098:	48 8b 15 79 48 73 00 	mov    0x734879(%rip),%rdx        # 753918 <tmpquadone>
   1f09f:	48 8b 0d 8a eb 5d 00 	mov    0x5deb8a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f0a6:	48 c7 05 9f 48 73 00 	movq   $0x1,0x73489f(%rip)        # 753950 <cmpPassed>
   1f0ad:	01 00 00 00 
   1f0b1:	e8 c2 67 fe ff       	callq  5878 <_storeDataFn>
   1f0b6:	49 39 c0             	cmp    %rax,%r8
   1f0b9:	0f 87 0d 01 00 00    	ja     1f1cc <quotearg_n_custom_mem+0x44c>
   1f0bf:	50                   	push   %rax
   1f0c0:	48 c7 c0 ac 84 ef 26 	mov    $0x26ef84ac,%rax
   1f0c7:	48 89 05 72 48 73 00 	mov    %rax,0x734872(%rip)        # 753940 <edgeId>
   1f0ce:	58                   	pop    %rax
   1f0cf:	e8 0c 67 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1f0d4:	4c 8d 0d 65 e9 5d 00 	lea    0x5de965(%rip),%r9        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1f0db:	48 8d 40 01          	lea    0x1(%rax),%rax
        if (val != slot0)
   1f0df:	48 89 15 32 48 73 00 	mov    %rdx,0x734832(%rip)        # 753918 <tmpquadone>
   1f0e6:	48 89 0d 43 eb 5d 00 	mov    %rcx,0x5deb43(%rip)        # 5fdc30 <tmpquadtwo>
   1f0ed:	48 8d 15 fc ea 5d 00 	lea    0x5deafc(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f0f4:	48 c7 02 c8 0a 00 00 	movq   $0xac8,(%rdx)
   1f0fb:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f102:	00 
   1f103:	4c 89 c9             	mov    %r9,%rcx
   1f106:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f10a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f111:	00 
   1f112:	48 89 e9             	mov    %rbp,%rcx
   1f115:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f119:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f120:	00 
   1f121:	ff 32                	pushq  (%rdx)
   1f123:	48 8b 15 ee 47 73 00 	mov    0x7347ee(%rip),%rdx        # 753918 <tmpquadone>
   1f12a:	48 8b 0d ff ea 5d 00 	mov    0x5deaff(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f131:	48 c7 05 14 48 73 00 	movq   $0x1,0x734814(%rip)        # 753950 <cmpPassed>
   1f138:	01 00 00 00 
   1f13c:	e8 37 67 fe ff       	callq  5878 <_storeDataFn>
   1f141:	4c 39 cd             	cmp    %r9,%rbp
        sv[n].size = size = qsize + 1;
   1f144:	48 89 03             	mov    %rax,(%rbx)
        if (val != slot0)
   1f147:	74 28                	je     1f171 <quotearg_n_custom_mem+0x3f1>
   1f149:	50                   	push   %rax
   1f14a:	48 b8 f0 dd 44 8a 00 	movabs $0x8a44ddf0,%rax
   1f151:	00 00 00 
   1f154:	48 89 05 e5 47 73 00 	mov    %rax,0x7347e5(%rip)        # 753940 <edgeId>
   1f15b:	58                   	pop    %rax
   1f15c:	e8 7f 66 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1f161:	48 89 ef             	mov    %rbp,%rdi
   1f164:	48 89 04 24          	mov    %rax,(%rsp)
   1f168:	e8 03 27 fe ff       	callq  1870 <free@plt>
   1f16d:	48 8b 04 24          	mov    (%rsp),%rax
   1f171:	50                   	push   %rax
   1f172:	48 c7 c0 dd 44 8a 6b 	mov    $0x6b8a44dd,%rax
   1f179:	48 89 05 c0 47 73 00 	mov    %rax,0x7347c0(%rip)        # 753940 <edgeId>
   1f180:	58                   	pop    %rax
   1f181:	e8 5a 66 fe ff       	callq  57e0 <_storeEdge>
   1f186:	48 89 c7             	mov    %rax,%rdi
   1f189:	48 89 04 24          	mov    %rax,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1f18d:	49 83 c4 08          	add    $0x8,%r12
   1f191:	e8 ea 46 00 00       	callq  23880 <xmalloc>
   1f196:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1f19a:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1f19e:	4c 89 f9             	mov    %r15,%rcx
   1f1a1:	ff 74 24 48          	pushq  0x48(%rsp)
   1f1a5:	ff 74 24 48          	pushq  0x48(%rsp)
   1f1a9:	4c 89 f2             	mov    %r14,%rdx
   1f1ac:	41 54                	push   %r12
   1f1ae:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1f1b3:	48 89 c7             	mov    %rax,%rdi
   1f1b6:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1f1bb:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1f1c0:	48 89 c5             	mov    %rax,%rbp
   1f1c3:	e8 38 3c ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1f1c8:	48 83 c4 20          	add    $0x20,%rsp
   1f1cc:	50                   	push   %rax
   1f1cd:	48 b8 f0 b6 4d a7 00 	movabs $0xa74db6f0,%rax
   1f1d4:	00 00 00 
   1f1d7:	48 89 05 62 47 73 00 	mov    %rax,0x734762(%rip)        # 753940 <edgeId>
   1f1de:	58                   	pop    %rax
   1f1df:	e8 fc 65 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1f1e4:	8b 54 24 08          	mov    0x8(%rsp),%edx
  set_custom_quoting (&o, left_quote, right_quote);
  return quotearg_n_options (n, arg, argsize, &o);
}
   1f1e8:	48 89 e8             	mov    %rbp,%rax
   1f1eb:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1f1f0:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1f1f7:	00 00 
    errno = e;
   1f1f9:	41 89 55 00          	mov    %edx,0x0(%r13)
}
   1f1fd:	0f 85 88 00 00 00    	jne    1f28b <quotearg_n_custom_mem+0x50b>
   1f203:	50                   	push   %rax
   1f204:	48 c7 c0 74 aa 7c 5a 	mov    $0x5a7caa74,%rax
   1f20b:	48 89 05 2e 47 73 00 	mov    %rax,0x73472e(%rip)        # 753940 <edgeId>
   1f212:	58                   	pop    %rax
   1f213:	e8 c8 65 fe ff       	callq  57e0 <_storeEdge>
   1f218:	48 83 c4 58          	add    $0x58,%rsp
   1f21c:	5b                   	pop    %rbx
   1f21d:	5d                   	pop    %rbp
   1f21e:	41 5c                	pop    %r12
   1f220:	41 5d                	pop    %r13
   1f222:	41 5e                	pop    %r14
   1f224:	41 5f                	pop    %r15
   1f226:	c3                   	retq   
   1f227:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1f22e:	00 00 
   1f230:	50                   	push   %rax
   1f231:	48 c7 c0 69 51 26 4d 	mov    $0x4d265169,%rax
   1f238:	48 89 05 01 47 73 00 	mov    %rax,0x734701(%rip)        # 753940 <edgeId>
   1f23f:	58                   	pop    %rax
   1f240:	e8 9b 65 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f245:	31 ff                	xor    %edi,%edi
   1f247:	48 89 0c 24          	mov    %rcx,(%rsp)
   1f24b:	e8 b0 46 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1f250:	66 0f 6f 1d 18 de 20 	movdqa 0x20de18(%rip),%xmm3        # 22d070 <slotvec0>
   1f257:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f258:	48 89 c3             	mov    %rax,%rbx
   1f25b:	48 89 05 fe dd 20 00 	mov    %rax,0x20ddfe(%rip)        # 22d060 <slotvec>
   1f262:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   1f266:	0f 11 18             	movups %xmm3,(%rax)
   1f269:	e9 3b fd ff ff       	jmpq   1efa9 <quotearg_n_custom_mem+0x229>
   1f26e:	50                   	push   %rax
   1f26f:	48 b8 34 11 7b ee 00 	movabs $0xee7b1134,%rax
   1f276:	00 00 00 
   1f279:	48 89 05 c0 46 73 00 	mov    %rax,0x7346c0(%rip)        # 753940 <edgeId>
   1f280:	58                   	pop    %rax
   1f281:	e8 5a 65 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1f286:	e8 f5 25 fe ff       	callq  1880 <abort@plt>
   1f28b:	50                   	push   %rax
   1f28c:	48 c7 c0 88 3d f7 1a 	mov    $0x1af73d88,%rax
   1f293:	48 89 05 a6 46 73 00 	mov    %rax,0x7346a6(%rip)        # 753940 <edgeId>
   1f29a:	58                   	pop    %rax
   1f29b:	e8 40 65 fe ff       	callq  57e0 <_storeEdge>
}
   1f2a0:	e8 ab 26 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1f2a5:	90                   	nop
   1f2a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1f2ad:	00 00 00 

000000000001f2b0 <quotearg_custom>:

char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
   1f2b0:	41 57                	push   %r15
   1f2b2:	41 56                	push   %r14
   1f2b4:	41 55                	push   %r13
   1f2b6:	41 54                	push   %r12
   1f2b8:	55                   	push   %rbp
   1f2b9:	53                   	push   %rbx
   1f2ba:	48 83 ec 58          	sub    $0x58,%rsp
   1f2be:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1f2c5:	00 00 
   1f2c7:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1f2cc:	31 c0                	xor    %eax,%eax
  struct quoting_options o = default_quoting_options;
   1f2ce:	48 8b 05 9b e8 5d 00 	mov    0x5de89b(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  if (!left_quote || !right_quote)
   1f2d5:	48 85 ff             	test   %rdi,%rdi
  struct quoting_options o = default_quoting_options;
   1f2d8:	66 0f 6f 05 60 e8 5d 	movdqa 0x5de860(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1f2df:	00 
   1f2e0:	66 0f 6f 0d 68 e8 5d 	movdqa 0x5de868(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1f2e7:	00 
   1f2e8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1f2ed:	66 0f 6f 15 6b e8 5d 	movdqa 0x5de86b(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1f2f4:	00 
   1f2f5:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  o->style = custom_quoting_style;
   1f2fa:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%rsp)
   1f301:	00 
  struct quoting_options o = default_quoting_options;
   1f302:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1f307:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  if (!left_quote || !right_quote)
   1f30c:	0f 84 13 04 00 00    	je     1f725 <quotearg_custom+0x475>
   1f312:	50                   	push   %rax
   1f313:	48 b8 3e 3f 8e b6 00 	movabs $0xb68e3f3e,%rax
   1f31a:	00 00 00 
   1f31d:	48 89 05 1c 46 73 00 	mov    %rax,0x73461c(%rip)        # 753940 <edgeId>
   1f324:	58                   	pop    %rax
   1f325:	e8 b6 64 fe ff       	callq  57e0 <_storeEdge>
   1f32a:	48 85 f6             	test   %rsi,%rsi
   1f32d:	0f 84 f2 03 00 00    	je     1f725 <quotearg_custom+0x475>
   1f333:	50                   	push   %rax
   1f334:	48 c7 c0 cf 8f a3 2d 	mov    $0x2da38fcf,%rax
   1f33b:	48 89 05 fe 45 73 00 	mov    %rax,0x7345fe(%rip)        # 753940 <edgeId>
   1f342:	58                   	pop    %rax
   1f343:	e8 98 64 fe ff       	callq  57e0 <_storeEdge>
   1f348:	49 89 d6             	mov    %rdx,%r14
  o->right_quote = right_quote;
   1f34b:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
   1f350:	48 89 34 24          	mov    %rsi,(%rsp)
   1f354:	49 89 fc             	mov    %rdi,%r12
  o->left_quote = left_quote;
   1f357:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  int e = errno;
   1f35c:	e8 2f 25 fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   1f361:	8b 15 f1 dc 20 00    	mov    0x20dcf1(%rip),%edx        # 22d058 <nslots>
  int e = errno;
   1f367:	49 89 c5             	mov    %rax,%r13
   1f36a:	44 8b 38             	mov    (%rax),%r15d
  struct slotvec *sv = slotvec;
   1f36d:	48 8b 1d ec dc 20 00 	mov    0x20dcec(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1f374:	41 b8 08 00 00 00    	mov    $0x8,%r8d
   1f37a:	48 8b 34 24          	mov    (%rsp),%rsi
   1f37e:	85 d2                	test   %edx,%edx
   1f380:	0f 85 0a 01 00 00    	jne    1f490 <quotearg_custom+0x1e0>
   1f386:	50                   	push   %rax
   1f387:	48 b8 79 4b a5 d6 00 	movabs $0xd6a54b79,%rax
   1f38e:	00 00 00 
   1f391:	48 89 05 a8 45 73 00 	mov    %rax,0x7345a8(%rip)        # 753940 <edgeId>
   1f398:	58                   	pop    %rax
   1f399:	e8 42 64 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f39e:	48 8d 0d cb dc 20 00 	lea    0x20dccb(%rip),%rcx        # 22d070 <slotvec0>
   1f3a5:	48 89 15 6c 45 73 00 	mov    %rdx,0x73456c(%rip)        # 753918 <tmpquadone>
   1f3ac:	48 89 05 7d e8 5d 00 	mov    %rax,0x5de87d(%rip)        # 5fdc30 <tmpquadtwo>
   1f3b3:	48 8d 15 36 e8 5d 00 	lea    0x5de836(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f3ba:	48 c7 02 c9 0a 00 00 	movq   $0xac9,(%rdx)
   1f3c1:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f3c8:	00 
   1f3c9:	48 89 c8             	mov    %rcx,%rax
   1f3cc:	48 89 42 10          	mov    %rax,0x10(%rdx)
   1f3d0:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f3d7:	00 
   1f3d8:	48 89 d8             	mov    %rbx,%rax
   1f3db:	48 89 42 20          	mov    %rax,0x20(%rdx)
   1f3df:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f3e6:	00 
   1f3e7:	ff 32                	pushq  (%rdx)
   1f3e9:	48 8b 15 28 45 73 00 	mov    0x734528(%rip),%rdx        # 753918 <tmpquadone>
   1f3f0:	48 8b 05 39 e8 5d 00 	mov    0x5de839(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1f3f7:	48 c7 05 4e 45 73 00 	movq   $0x1,0x73454e(%rip)        # 753950 <cmpPassed>
   1f3fe:	01 00 00 00 
   1f402:	e8 71 64 fe ff       	callq  5878 <_storeDataFn>
   1f407:	48 39 cb             	cmp    %rcx,%rbx
   1f40a:	0f 84 c0 02 00 00    	je     1f6d0 <quotearg_custom+0x420>
   1f410:	50                   	push   %rax
   1f411:	48 b8 2d 95 5a c3 00 	movabs $0xc35a952d,%rax
   1f418:	00 00 00 
   1f41b:	48 89 05 1e 45 73 00 	mov    %rax,0x73451e(%rip)        # 753940 <edgeId>
   1f422:	58                   	pop    %rax
   1f423:	e8 b8 63 fe ff       	callq  57e0 <_storeEdge>
   1f428:	48 89 df             	mov    %rbx,%rdi
   1f42b:	be 10 00 00 00       	mov    $0x10,%esi
   1f430:	e8 cb 44 00 00       	callq  23900 <xrealloc>
   1f435:	48 89 c3             	mov    %rax,%rbx
   1f438:	48 89 05 21 dc 20 00 	mov    %rax,0x20dc21(%rip)        # 22d060 <slotvec>
   1f43f:	50                   	push   %rax
   1f440:	48 b8 95 5a c3 a4 00 	movabs $0xa4c35a95,%rax
   1f447:	00 00 00 
   1f44a:	48 89 05 ef 44 73 00 	mov    %rax,0x7344ef(%rip)        # 753940 <edgeId>
   1f451:	58                   	pop    %rax
   1f452:	e8 89 63 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1f457:	8b 3d fb db 20 00    	mov    0x20dbfb(%rip),%edi        # 22d058 <nslots>
   1f45d:	ba 01 00 00 00       	mov    $0x1,%edx
   1f462:	31 f6                	xor    %esi,%esi
   1f464:	48 29 fa             	sub    %rdi,%rdx
   1f467:	48 c1 e7 04          	shl    $0x4,%rdi
   1f46b:	48 c1 e2 04          	shl    $0x4,%rdx
   1f46f:	48 01 df             	add    %rbx,%rdi
   1f472:	e8 79 25 fe ff       	callq  19f0 <memset@plt>
   1f477:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   1f47c:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
   1f481:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
      nslots = n1;
   1f486:	c7 05 c8 db 20 00 01 	movl   $0x1,0x20dbc8(%rip)        # 22d058 <nslots>
   1f48d:	00 00 00 
   1f490:	50                   	push   %rax
   1f491:	48 b8 b9 74 0f 97 00 	movabs $0x970f74b9,%rax
   1f498:	00 00 00 
   1f49b:	48 89 05 9e 44 73 00 	mov    %rax,0x73449e(%rip)        # 753940 <edgeId>
   1f4a2:	58                   	pop    %rax
   1f4a3:	e8 38 63 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f4a8:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f4ad:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1f4b1:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1f4b4:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f4b8:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1f4bf:	4c 89 f2             	mov    %r14,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f4c2:	41 83 c9 01          	or     $0x1,%r9d
   1f4c6:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f4cb:	56                   	push   %rsi
   1f4cc:	4c 89 de             	mov    %r11,%rsi
   1f4cf:	41 54                	push   %r12
   1f4d1:	4c 8d 64 24 28       	lea    0x28(%rsp),%r12
   1f4d6:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
   1f4db:	57                   	push   %rdi
   1f4dc:	48 89 ef             	mov    %rbp,%rdi
   1f4df:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1f4e4:	e8 17 39 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1f4e9:	48 83 c4 20          	add    $0x20,%rsp
   1f4ed:	4c 8b 04 24          	mov    (%rsp),%r8
   1f4f1:	48 89 15 20 44 73 00 	mov    %rdx,0x734420(%rip)        # 753918 <tmpquadone>
   1f4f8:	48 89 0d 31 e7 5d 00 	mov    %rcx,0x5de731(%rip)        # 5fdc30 <tmpquadtwo>
   1f4ff:	48 8d 15 ea e6 5d 00 	lea    0x5de6ea(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f506:	48 c7 02 ca 0a 00 00 	movq   $0xaca,(%rdx)
   1f50d:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f514:	00 
   1f515:	48 89 c1             	mov    %rax,%rcx
   1f518:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f51c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f523:	00 
   1f524:	4c 89 c1             	mov    %r8,%rcx
   1f527:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f52b:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f532:	00 
   1f533:	ff 32                	pushq  (%rdx)
   1f535:	48 8b 15 dc 43 73 00 	mov    0x7343dc(%rip),%rdx        # 753918 <tmpquadone>
   1f53c:	48 8b 0d ed e6 5d 00 	mov    0x5de6ed(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f543:	48 c7 05 02 44 73 00 	movq   $0x1,0x734402(%rip)        # 753950 <cmpPassed>
   1f54a:	01 00 00 00 
   1f54e:	e8 25 63 fe ff       	callq  5878 <_storeDataFn>
   1f553:	49 39 c0             	cmp    %rax,%r8
   1f556:	0f 87 14 01 00 00    	ja     1f670 <quotearg_custom+0x3c0>
   1f55c:	50                   	push   %rax
   1f55d:	48 c7 c0 50 4f 18 49 	mov    $0x49184f50,%rax
   1f564:	48 89 05 d5 43 73 00 	mov    %rax,0x7343d5(%rip)        # 753940 <edgeId>
   1f56b:	58                   	pop    %rax
   1f56c:	e8 6f 62 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1f571:	4c 8d 0d c8 e4 5d 00 	lea    0x5de4c8(%rip),%r9        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1f578:	4c 8d 50 01          	lea    0x1(%rax),%r10
        if (val != slot0)
   1f57c:	48 89 15 95 43 73 00 	mov    %rdx,0x734395(%rip)        # 753918 <tmpquadone>
   1f583:	48 89 0d a6 e6 5d 00 	mov    %rcx,0x5de6a6(%rip)        # 5fdc30 <tmpquadtwo>
   1f58a:	48 8d 15 5f e6 5d 00 	lea    0x5de65f(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f591:	48 c7 02 cb 0a 00 00 	movq   $0xacb,(%rdx)
   1f598:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f59f:	00 
   1f5a0:	4c 89 c9             	mov    %r9,%rcx
   1f5a3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f5a7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f5ae:	00 
   1f5af:	48 89 e9             	mov    %rbp,%rcx
   1f5b2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f5b6:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f5bd:	00 
   1f5be:	ff 32                	pushq  (%rdx)
   1f5c0:	48 8b 15 51 43 73 00 	mov    0x734351(%rip),%rdx        # 753918 <tmpquadone>
   1f5c7:	48 8b 0d 62 e6 5d 00 	mov    0x5de662(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f5ce:	48 c7 05 77 43 73 00 	movq   $0x1,0x734377(%rip)        # 753950 <cmpPassed>
   1f5d5:	01 00 00 00 
   1f5d9:	e8 9a 62 fe ff       	callq  5878 <_storeDataFn>
   1f5de:	4c 39 cd             	cmp    %r9,%rbp
        sv[n].size = size = qsize + 1;
   1f5e1:	4c 89 13             	mov    %r10,(%rbx)
        if (val != slot0)
   1f5e4:	74 28                	je     1f60e <quotearg_custom+0x35e>
   1f5e6:	50                   	push   %rax
   1f5e7:	48 b8 09 23 c9 a2 00 	movabs $0xa2c92309,%rax
   1f5ee:	00 00 00 
   1f5f1:	48 89 05 48 43 73 00 	mov    %rax,0x734348(%rip)        # 753940 <edgeId>
   1f5f8:	58                   	pop    %rax
   1f5f9:	e8 e2 61 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1f5fe:	48 89 ef             	mov    %rbp,%rdi
   1f601:	4c 89 14 24          	mov    %r10,(%rsp)
   1f605:	e8 66 22 fe ff       	callq  1870 <free@plt>
   1f60a:	4c 8b 14 24          	mov    (%rsp),%r10
   1f60e:	50                   	push   %rax
   1f60f:	48 b8 23 c9 a2 96 00 	movabs $0x96a2c923,%rax
   1f616:	00 00 00 
   1f619:	48 89 05 20 43 73 00 	mov    %rax,0x734320(%rip)        # 753940 <edgeId>
   1f620:	58                   	pop    %rax
   1f621:	e8 ba 61 fe ff       	callq  57e0 <_storeEdge>
   1f626:	4c 89 d7             	mov    %r10,%rdi
   1f629:	4c 89 14 24          	mov    %r10,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1f62d:	49 83 c4 08          	add    $0x8,%r12
   1f631:	e8 4a 42 00 00       	callq  23880 <xmalloc>
   1f636:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1f63a:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1f63e:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1f645:	ff 74 24 48          	pushq  0x48(%rsp)
   1f649:	ff 74 24 48          	pushq  0x48(%rsp)
   1f64d:	4c 89 f2             	mov    %r14,%rdx
   1f650:	41 54                	push   %r12
   1f652:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1f657:	48 89 c7             	mov    %rax,%rdi
   1f65a:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1f65f:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1f664:	48 89 c5             	mov    %rax,%rbp
   1f667:	e8 94 37 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1f66c:	48 83 c4 20          	add    $0x20,%rsp
   1f670:	50                   	push   %rax
   1f671:	48 b8 3c 2b d1 cf 00 	movabs $0xcfd12b3c,%rax
   1f678:	00 00 00 
   1f67b:	48 89 05 be 42 73 00 	mov    %rax,0x7342be(%rip)        # 753940 <edgeId>
   1f682:	58                   	pop    %rax
   1f683:	e8 58 61 fe ff       	callq  57e0 <_storeEdge>
  return quotearg_n_custom (0, left_quote, right_quote, arg);
}
   1f688:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1f68d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1f694:	00 00 
    errno = e;
   1f696:	45 89 7d 00          	mov    %r15d,0x0(%r13)
}
   1f69a:	48 89 e8             	mov    %rbp,%rax
   1f69d:	75 6c                	jne    1f70b <quotearg_custom+0x45b>
   1f69f:	50                   	push   %rax
   1f6a0:	48 b8 59 9c 75 b2 00 	movabs $0xb2759c59,%rax
   1f6a7:	00 00 00 
   1f6aa:	48 89 05 8f 42 73 00 	mov    %rax,0x73428f(%rip)        # 753940 <edgeId>
   1f6b1:	58                   	pop    %rax
   1f6b2:	e8 29 61 fe ff       	callq  57e0 <_storeEdge>
   1f6b7:	48 83 c4 58          	add    $0x58,%rsp
   1f6bb:	5b                   	pop    %rbx
   1f6bc:	5d                   	pop    %rbp
   1f6bd:	41 5c                	pop    %r12
   1f6bf:	41 5d                	pop    %r13
   1f6c1:	41 5e                	pop    %r14
   1f6c3:	41 5f                	pop    %r15
   1f6c5:	c3                   	retq   
   1f6c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1f6cd:	00 00 00 
   1f6d0:	50                   	push   %rax
   1f6d1:	48 c7 c0 93 6d 89 7c 	mov    $0x7c896d93,%rax
   1f6d8:	48 89 05 61 42 73 00 	mov    %rax,0x734261(%rip)        # 753940 <edgeId>
   1f6df:	58                   	pop    %rax
   1f6e0:	e8 fb 60 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f6e5:	be 10 00 00 00       	mov    $0x10,%esi
   1f6ea:	31 ff                	xor    %edi,%edi
   1f6ec:	e8 0f 42 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1f6f1:	66 0f 6f 1d 77 d9 20 	movdqa 0x20d977(%rip),%xmm3        # 22d070 <slotvec0>
   1f6f8:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f6f9:	48 89 c3             	mov    %rax,%rbx
   1f6fc:	48 89 05 5d d9 20 00 	mov    %rax,0x20d95d(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1f703:	0f 11 18             	movups %xmm3,(%rax)
   1f706:	e9 34 fd ff ff       	jmpq   1f43f <quotearg_custom+0x18f>
   1f70b:	50                   	push   %rax
   1f70c:	48 c7 c0 7c b5 34 4a 	mov    $0x4a34b57c,%rax
   1f713:	48 89 05 26 42 73 00 	mov    %rax,0x734226(%rip)        # 753940 <edgeId>
   1f71a:	58                   	pop    %rax
   1f71b:	e8 c0 60 fe ff       	callq  57e0 <_storeEdge>
}
   1f720:	e8 2b 22 fe ff       	callq  1950 <__stack_chk_fail@plt>
   1f725:	50                   	push   %rax
   1f726:	48 c7 c0 2d 8d 12 15 	mov    $0x15128d2d,%rax
   1f72d:	48 89 05 0c 42 73 00 	mov    %rax,0x73420c(%rip)        # 753940 <edgeId>
   1f734:	58                   	pop    %rax
   1f735:	e8 a6 60 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1f73a:	e8 41 21 fe ff       	callq  1880 <abort@plt>
   1f73f:	90                   	nop

000000000001f740 <quotearg_custom_mem>:

char *
quotearg_custom_mem (char const *left_quote, char const *right_quote,
                     char const *arg, size_t argsize)
{
   1f740:	41 57                	push   %r15
   1f742:	41 56                	push   %r14
   1f744:	41 55                	push   %r13
   1f746:	41 54                	push   %r12
   1f748:	55                   	push   %rbp
   1f749:	53                   	push   %rbx
   1f74a:	48 83 ec 58          	sub    $0x58,%rsp
   1f74e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1f755:	00 00 
   1f757:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   1f75c:	31 c0                	xor    %eax,%eax
  struct quoting_options o = default_quoting_options;
   1f75e:	48 8b 05 0b e4 5d 00 	mov    0x5de40b(%rip),%rax        # 5fdb70 <default_quoting_options+0x30>
  if (!left_quote || !right_quote)
   1f765:	48 85 ff             	test   %rdi,%rdi
  struct quoting_options o = default_quoting_options;
   1f768:	66 0f 6f 05 d0 e3 5d 	movdqa 0x5de3d0(%rip),%xmm0        # 5fdb40 <default_quoting_options>
   1f76f:	00 
   1f770:	66 0f 6f 0d d8 e3 5d 	movdqa 0x5de3d8(%rip),%xmm1        # 5fdb50 <default_quoting_options+0x10>
   1f777:	00 
   1f778:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   1f77d:	66 0f 6f 15 db e3 5d 	movdqa 0x5de3db(%rip),%xmm2        # 5fdb60 <default_quoting_options+0x20>
   1f784:	00 
   1f785:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  o->style = custom_quoting_style;
   1f78a:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%rsp)
   1f791:	00 
  struct quoting_options o = default_quoting_options;
   1f792:	0f 29 4c 24 20       	movaps %xmm1,0x20(%rsp)
   1f797:	0f 29 54 24 30       	movaps %xmm2,0x30(%rsp)
  if (!left_quote || !right_quote)
   1f79c:	0f 84 06 04 00 00    	je     1fba8 <quotearg_custom_mem+0x468>
   1f7a2:	50                   	push   %rax
   1f7a3:	48 c7 c0 14 81 22 44 	mov    $0x44228114,%rax
   1f7aa:	48 89 05 8f 41 73 00 	mov    %rax,0x73418f(%rip)        # 753940 <edgeId>
   1f7b1:	58                   	pop    %rax
   1f7b2:	e8 29 60 fe ff       	callq  57e0 <_storeEdge>
   1f7b7:	48 85 f6             	test   %rsi,%rsi
   1f7ba:	0f 84 e8 03 00 00    	je     1fba8 <quotearg_custom_mem+0x468>
   1f7c0:	50                   	push   %rax
   1f7c1:	48 b8 45 a0 08 d1 00 	movabs $0xd108a045,%rax
   1f7c8:	00 00 00 
   1f7cb:	48 89 05 6e 41 73 00 	mov    %rax,0x73416e(%rip)        # 753940 <edgeId>
   1f7d2:	58                   	pop    %rax
   1f7d3:	e8 08 60 fe ff       	callq  57e0 <_storeEdge>
   1f7d8:	49 89 fc             	mov    %rdi,%r12
   1f7db:	49 89 d6             	mov    %rdx,%r14
   1f7de:	49 89 cf             	mov    %rcx,%r15
  o->left_quote = left_quote;
   1f7e1:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  o->right_quote = right_quote;
   1f7e6:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
   1f7eb:	48 89 34 24          	mov    %rsi,(%rsp)
  int e = errno;
   1f7ef:	e8 9c 20 fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   1f7f4:	8b 0d 5e d8 20 00    	mov    0x20d85e(%rip),%ecx        # 22d058 <nslots>
  int e = errno;
   1f7fa:	8b 10                	mov    (%rax),%edx
   1f7fc:	49 89 c5             	mov    %rax,%r13
  struct slotvec *sv = slotvec;
   1f7ff:	48 8b 1d 5a d8 20 00 	mov    0x20d85a(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   1f806:	41 b8 08 00 00 00    	mov    $0x8,%r8d
   1f80c:	48 8b 3c 24          	mov    (%rsp),%rdi
   1f810:	85 c9                	test   %ecx,%ecx
  int e = errno;
   1f812:	89 54 24 08          	mov    %edx,0x8(%rsp)
  if (nslots <= n0)
   1f816:	0f 85 07 01 00 00    	jne    1f923 <quotearg_custom_mem+0x1e3>
   1f81c:	50                   	push   %rax
   1f81d:	48 b8 c8 ea 94 dc 00 	movabs $0xdc94eac8,%rax
   1f824:	00 00 00 
   1f827:	48 89 05 12 41 73 00 	mov    %rax,0x734112(%rip)        # 753940 <edgeId>
   1f82e:	58                   	pop    %rax
   1f82f:	e8 ac 5f fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1f834:	48 8d 35 35 d8 20 00 	lea    0x20d835(%rip),%rsi        # 22d070 <slotvec0>
   1f83b:	48 89 15 d6 40 73 00 	mov    %rdx,0x7340d6(%rip)        # 753918 <tmpquadone>
   1f842:	48 89 0d e7 e3 5d 00 	mov    %rcx,0x5de3e7(%rip)        # 5fdc30 <tmpquadtwo>
   1f849:	48 8d 15 a0 e3 5d 00 	lea    0x5de3a0(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f850:	48 c7 02 cc 0a 00 00 	movq   $0xacc,(%rdx)
   1f857:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f85e:	00 
   1f85f:	48 89 f1             	mov    %rsi,%rcx
   1f862:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f866:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f86d:	00 
   1f86e:	48 89 d9             	mov    %rbx,%rcx
   1f871:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f875:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f87c:	00 
   1f87d:	ff 32                	pushq  (%rdx)
   1f87f:	48 8b 15 92 40 73 00 	mov    0x734092(%rip),%rdx        # 753918 <tmpquadone>
   1f886:	48 8b 0d a3 e3 5d 00 	mov    0x5de3a3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f88d:	48 c7 05 b8 40 73 00 	movq   $0x1,0x7340b8(%rip)        # 753950 <cmpPassed>
   1f894:	01 00 00 00 
   1f898:	e8 db 5f fe ff       	callq  5878 <_storeDataFn>
   1f89d:	48 39 f3             	cmp    %rsi,%rbx
   1f8a0:	0f 84 aa 02 00 00    	je     1fb50 <quotearg_custom_mem+0x410>
   1f8a6:	50                   	push   %rax
   1f8a7:	48 c7 c0 ab 53 72 17 	mov    $0x177253ab,%rax
   1f8ae:	48 89 05 8b 40 73 00 	mov    %rax,0x73408b(%rip)        # 753940 <edgeId>
   1f8b5:	58                   	pop    %rax
   1f8b6:	e8 25 5f fe ff       	callq  57e0 <_storeEdge>
   1f8bb:	48 89 df             	mov    %rbx,%rdi
   1f8be:	be 10 00 00 00       	mov    $0x10,%esi
   1f8c3:	e8 38 40 00 00       	callq  23900 <xrealloc>
   1f8c8:	48 89 c3             	mov    %rax,%rbx
   1f8cb:	48 89 05 8e d7 20 00 	mov    %rax,0x20d78e(%rip)        # 22d060 <slotvec>
   1f8d2:	50                   	push   %rax
   1f8d3:	48 b8 53 72 17 c1 00 	movabs $0xc1177253,%rax
   1f8da:	00 00 00 
   1f8dd:	48 89 05 5c 40 73 00 	mov    %rax,0x73405c(%rip)        # 753940 <edgeId>
   1f8e4:	58                   	pop    %rax
   1f8e5:	e8 f6 5e fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1f8ea:	8b 3d 68 d7 20 00    	mov    0x20d768(%rip),%edi        # 22d058 <nslots>
   1f8f0:	ba 01 00 00 00       	mov    $0x1,%edx
   1f8f5:	31 f6                	xor    %esi,%esi
   1f8f7:	48 29 fa             	sub    %rdi,%rdx
   1f8fa:	48 c1 e7 04          	shl    $0x4,%rdi
   1f8fe:	48 01 df             	add    %rbx,%rdi
   1f901:	48 c1 e2 04          	shl    $0x4,%rdx
   1f905:	e8 e6 20 fe ff       	callq  19f0 <memset@plt>
   1f90a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
   1f90f:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
   1f914:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
      nslots = n1;
   1f919:	c7 05 35 d7 20 00 01 	movl   $0x1,0x20d735(%rip)        # 22d058 <nslots>
   1f920:	00 00 00 
   1f923:	50                   	push   %rax
   1f924:	48 c7 c0 59 8a b5 6b 	mov    $0x6bb58a59,%rax
   1f92b:	48 89 05 0e 40 73 00 	mov    %rax,0x73400e(%rip)        # 753940 <edgeId>
   1f932:	58                   	pop    %rax
   1f933:	e8 a8 5e fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f938:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f93d:	48 83 ec 08          	sub    $0x8,%rsp
    size_t size = sv[n].size;
   1f941:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1f944:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f948:	4c 89 f9             	mov    %r15,%rcx
   1f94b:	4c 89 f2             	mov    %r14,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f94e:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f952:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1f955:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1f95a:	57                   	push   %rdi
   1f95b:	48 89 ef             	mov    %rbp,%rdi
   1f95e:	41 54                	push   %r12
   1f960:	4c 8d 64 24 28       	lea    0x28(%rsp),%r12
   1f965:	4d 8d 54 24 08       	lea    0x8(%r12),%r10
   1f96a:	41 52                	push   %r10
   1f96c:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1f971:	e8 8a 34 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1f976:	48 83 c4 20          	add    $0x20,%rsp
   1f97a:	4c 8b 04 24          	mov    (%rsp),%r8
   1f97e:	48 89 15 93 3f 73 00 	mov    %rdx,0x733f93(%rip)        # 753918 <tmpquadone>
   1f985:	48 89 0d a4 e2 5d 00 	mov    %rcx,0x5de2a4(%rip)        # 5fdc30 <tmpquadtwo>
   1f98c:	48 8d 15 5d e2 5d 00 	lea    0x5de25d(%rip),%rdx        # 5fdbf0 <funcinptr>
   1f993:	48 c7 02 cd 0a 00 00 	movq   $0xacd,(%rdx)
   1f99a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1f9a1:	00 
   1f9a2:	48 89 c1             	mov    %rax,%rcx
   1f9a5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1f9a9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1f9b0:	00 
   1f9b1:	4c 89 c1             	mov    %r8,%rcx
   1f9b4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1f9b8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1f9bf:	00 
   1f9c0:	ff 32                	pushq  (%rdx)
   1f9c2:	48 8b 15 4f 3f 73 00 	mov    0x733f4f(%rip),%rdx        # 753918 <tmpquadone>
   1f9c9:	48 8b 0d 60 e2 5d 00 	mov    0x5de260(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1f9d0:	48 c7 05 75 3f 73 00 	movq   $0x1,0x733f75(%rip)        # 753950 <cmpPassed>
   1f9d7:	01 00 00 00 
   1f9db:	e8 98 5e fe ff       	callq  5878 <_storeDataFn>
   1f9e0:	49 39 c0             	cmp    %rax,%r8
   1f9e3:	0f 87 0d 01 00 00    	ja     1faf6 <quotearg_custom_mem+0x3b6>
   1f9e9:	50                   	push   %rax
   1f9ea:	48 c7 c0 4b bf e4 2f 	mov    $0x2fe4bf4b,%rax
   1f9f1:	48 89 05 48 3f 73 00 	mov    %rax,0x733f48(%rip)        # 753940 <edgeId>
   1f9f8:	58                   	pop    %rax
   1f9f9:	e8 e2 5d fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1f9fe:	4c 8d 0d 3b e0 5d 00 	lea    0x5de03b(%rip),%r9        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1fa05:	48 8d 40 01          	lea    0x1(%rax),%rax
        if (val != slot0)
   1fa09:	48 89 15 08 3f 73 00 	mov    %rdx,0x733f08(%rip)        # 753918 <tmpquadone>
   1fa10:	48 89 0d 19 e2 5d 00 	mov    %rcx,0x5de219(%rip)        # 5fdc30 <tmpquadtwo>
   1fa17:	48 8d 15 d2 e1 5d 00 	lea    0x5de1d2(%rip),%rdx        # 5fdbf0 <funcinptr>
   1fa1e:	48 c7 02 ce 0a 00 00 	movq   $0xace,(%rdx)
   1fa25:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1fa2c:	00 
   1fa2d:	4c 89 c9             	mov    %r9,%rcx
   1fa30:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1fa34:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1fa3b:	00 
   1fa3c:	48 89 e9             	mov    %rbp,%rcx
   1fa3f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1fa43:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1fa4a:	00 
   1fa4b:	ff 32                	pushq  (%rdx)
   1fa4d:	48 8b 15 c4 3e 73 00 	mov    0x733ec4(%rip),%rdx        # 753918 <tmpquadone>
   1fa54:	48 8b 0d d5 e1 5d 00 	mov    0x5de1d5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1fa5b:	48 c7 05 ea 3e 73 00 	movq   $0x1,0x733eea(%rip)        # 753950 <cmpPassed>
   1fa62:	01 00 00 00 
   1fa66:	e8 0d 5e fe ff       	callq  5878 <_storeDataFn>
   1fa6b:	4c 39 cd             	cmp    %r9,%rbp
        sv[n].size = size = qsize + 1;
   1fa6e:	48 89 03             	mov    %rax,(%rbx)
        if (val != slot0)
   1fa71:	74 28                	je     1fa9b <quotearg_custom_mem+0x35b>
   1fa73:	50                   	push   %rax
   1fa74:	48 b8 97 fc c5 e4 00 	movabs $0xe4c5fc97,%rax
   1fa7b:	00 00 00 
   1fa7e:	48 89 05 bb 3e 73 00 	mov    %rax,0x733ebb(%rip)        # 753940 <edgeId>
   1fa85:	58                   	pop    %rax
   1fa86:	e8 55 5d fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1fa8b:	48 89 ef             	mov    %rbp,%rdi
   1fa8e:	48 89 04 24          	mov    %rax,(%rsp)
   1fa92:	e8 d9 1d fe ff       	callq  1870 <free@plt>
   1fa97:	48 8b 04 24          	mov    (%rsp),%rax
   1fa9b:	50                   	push   %rax
   1fa9c:	48 c7 c0 fc c5 e4 11 	mov    $0x11e4c5fc,%rax
   1faa3:	48 89 05 96 3e 73 00 	mov    %rax,0x733e96(%rip)        # 753940 <edgeId>
   1faaa:	58                   	pop    %rax
   1faab:	e8 30 5d fe ff       	callq  57e0 <_storeEdge>
   1fab0:	48 89 c7             	mov    %rax,%rdi
   1fab3:	48 89 04 24          	mov    %rax,(%rsp)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1fab7:	49 83 c4 08          	add    $0x8,%r12
   1fabb:	e8 c0 3d 00 00       	callq  23880 <xmalloc>
   1fac0:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1fac4:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1fac8:	4c 89 f9             	mov    %r15,%rcx
   1facb:	ff 74 24 48          	pushq  0x48(%rsp)
   1facf:	ff 74 24 48          	pushq  0x48(%rsp)
   1fad3:	4c 89 f2             	mov    %r14,%rdx
   1fad6:	41 54                	push   %r12
   1fad8:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1fadd:	48 89 c7             	mov    %rax,%rdi
   1fae0:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   1fae5:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1faea:	48 89 c5             	mov    %rax,%rbp
   1faed:	e8 0e 33 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1faf2:	48 83 c4 20          	add    $0x20,%rsp
   1faf6:	50                   	push   %rax
   1faf7:	48 b8 ce 28 b4 b8 00 	movabs $0xb8b428ce,%rax
   1fafe:	00 00 00 
   1fb01:	48 89 05 38 3e 73 00 	mov    %rax,0x733e38(%rip)        # 753940 <edgeId>
   1fb08:	58                   	pop    %rax
   1fb09:	e8 d2 5c fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1fb0e:	8b 54 24 08          	mov    0x8(%rsp),%edx
  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,
                                argsize);
}
   1fb12:	48 89 e8             	mov    %rbp,%rax
   1fb15:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   1fb1a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1fb21:	00 00 
    errno = e;
   1fb23:	41 89 55 00          	mov    %edx,0x0(%r13)
}
   1fb27:	75 65                	jne    1fb8e <quotearg_custom_mem+0x44e>
   1fb29:	50                   	push   %rax
   1fb2a:	48 c7 c0 ae 37 7b 68 	mov    $0x687b37ae,%rax
   1fb31:	48 89 05 08 3e 73 00 	mov    %rax,0x733e08(%rip)        # 753940 <edgeId>
   1fb38:	58                   	pop    %rax
   1fb39:	e8 a2 5c fe ff       	callq  57e0 <_storeEdge>
   1fb3e:	48 83 c4 58          	add    $0x58,%rsp
   1fb42:	5b                   	pop    %rbx
   1fb43:	5d                   	pop    %rbp
   1fb44:	41 5c                	pop    %r12
   1fb46:	41 5d                	pop    %r13
   1fb48:	41 5e                	pop    %r14
   1fb4a:	41 5f                	pop    %r15
   1fb4c:	c3                   	retq   
   1fb4d:	0f 1f 00             	nopl   (%rax)
   1fb50:	50                   	push   %rax
   1fb51:	48 b8 a1 11 ba ee 00 	movabs $0xeeba11a1,%rax
   1fb58:	00 00 00 
   1fb5b:	48 89 05 de 3d 73 00 	mov    %rax,0x733dde(%rip)        # 753940 <edgeId>
   1fb62:	58                   	pop    %rax
   1fb63:	e8 78 5c fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1fb68:	be 10 00 00 00       	mov    $0x10,%esi
   1fb6d:	31 ff                	xor    %edi,%edi
   1fb6f:	e8 8c 3d 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1fb74:	66 0f 6f 1d f4 d4 20 	movdqa 0x20d4f4(%rip),%xmm3        # 22d070 <slotvec0>
   1fb7b:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1fb7c:	48 89 c3             	mov    %rax,%rbx
   1fb7f:	48 89 05 da d4 20 00 	mov    %rax,0x20d4da(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   1fb86:	0f 11 18             	movups %xmm3,(%rax)
   1fb89:	e9 44 fd ff ff       	jmpq   1f8d2 <quotearg_custom_mem+0x192>
   1fb8e:	50                   	push   %rax
   1fb8f:	48 c7 c0 dd f3 3a 07 	mov    $0x73af3dd,%rax
   1fb96:	48 89 05 a3 3d 73 00 	mov    %rax,0x733da3(%rip)        # 753940 <edgeId>
   1fb9d:	58                   	pop    %rax
   1fb9e:	e8 3d 5c fe ff       	callq  57e0 <_storeEdge>
}
   1fba3:	e8 a8 1d fe ff       	callq  1950 <__stack_chk_fail@plt>
   1fba8:	50                   	push   %rax
   1fba9:	48 b8 79 9d 83 ed 00 	movabs $0xed839d79,%rax
   1fbb0:	00 00 00 
   1fbb3:	48 89 05 86 3d 73 00 	mov    %rax,0x733d86(%rip)        # 753940 <edgeId>
   1fbba:	58                   	pop    %rax
   1fbbb:	e8 20 5c fe ff       	callq  57e0 <_storeEdge>
    abort ();
   1fbc0:	e8 bb 1c fe ff       	callq  1880 <abort@plt>
   1fbc5:	90                   	nop
   1fbc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1fbcd:	00 00 00 

000000000001fbd0 <quote_n_mem>:
    NULL, NULL
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
   1fbd0:	41 57                	push   %r15
   1fbd2:	41 56                	push   %r14
   1fbd4:	49 89 d6             	mov    %rdx,%r14
   1fbd7:	41 55                	push   %r13
   1fbd9:	41 54                	push   %r12
   1fbdb:	49 89 f5             	mov    %rsi,%r13
   1fbde:	55                   	push   %rbp
   1fbdf:	53                   	push   %rbx
   1fbe0:	48 63 ef             	movslq %edi,%rbp
   1fbe3:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   1fbe7:	e8 a4 1c fe ff       	callq  1890 <__errno_location@plt>
   1fbec:	49 89 c4             	mov    %rax,%r12
   1fbef:	8b 00                	mov    (%rax),%eax
  if (n < 0)
   1fbf1:	85 ed                	test   %ebp,%ebp
  struct slotvec *sv = slotvec;
   1fbf3:	48 8b 1d 66 d4 20 00 	mov    0x20d466(%rip),%rbx        # 22d060 <slotvec>
  int e = errno;
   1fbfa:	89 44 24 08          	mov    %eax,0x8(%rsp)
  if (n < 0)
   1fbfe:	0f 88 f2 03 00 00    	js     1fff6 <quote_n_mem+0x426>
   1fc04:	50                   	push   %rax
   1fc05:	48 b8 7f 9f 8d a5 00 	movabs $0xa58d9f7f,%rax
   1fc0c:	00 00 00 
   1fc0f:	48 89 05 2a 3d 73 00 	mov    %rax,0x733d2a(%rip)        # 753940 <edgeId>
   1fc16:	58                   	pop    %rax
   1fc17:	e8 c4 5b fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   1fc1c:	48 89 15 f5 3c 73 00 	mov    %rdx,0x733cf5(%rip)        # 753918 <tmpquadone>
   1fc23:	48 89 0d 06 e0 5d 00 	mov    %rcx,0x5de006(%rip)        # 5fdc30 <tmpquadtwo>
   1fc2a:	48 8d 15 bf df 5d 00 	lea    0x5ddfbf(%rip),%rdx        # 5fdbf0 <funcinptr>
   1fc31:	48 c7 02 cf 0a 00 00 	movq   $0xacf,(%rdx)
   1fc38:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   1fc3f:	00 
   1fc40:	48 8b 0d 11 d4 20 00 	mov    0x20d411(%rip),%rcx        # 22d058 <nslots>
   1fc47:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1fc4b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1fc52:	00 
   1fc53:	48 89 e9             	mov    %rbp,%rcx
   1fc56:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1fc5a:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1fc61:	00 
   1fc62:	ff 32                	pushq  (%rdx)
   1fc64:	48 8b 15 ad 3c 73 00 	mov    0x733cad(%rip),%rdx        # 753918 <tmpquadone>
   1fc6b:	48 8b 0d be df 5d 00 	mov    0x5ddfbe(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1fc72:	48 c7 05 d3 3c 73 00 	movq   $0x1,0x733cd3(%rip)        # 753950 <cmpPassed>
   1fc79:	01 00 00 00 
   1fc7d:	e8 f6 5b fe ff       	callq  5878 <_storeDataFn>
   1fc82:	3b 2d d0 d3 20 00    	cmp    0x20d3d0(%rip),%ebp        # 22d058 <nslots>
   1fc88:	0f 82 03 01 00 00    	jb     1fd91 <quote_n_mem+0x1c1>
   1fc8e:	50                   	push   %rax
   1fc8f:	48 b8 ef b3 b1 f4 00 	movabs $0xf4b1b3ef,%rax
   1fc96:	00 00 00 
   1fc99:	48 89 05 a0 3c 73 00 	mov    %rax,0x733ca0(%rip)        # 753940 <edgeId>
   1fca0:	58                   	pop    %rax
   1fca1:	e8 3a 5b fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   1fca6:	8d 55 01             	lea    0x1(%rbp),%edx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1fca9:	48 8d 0d c0 d3 20 00 	lea    0x20d3c0(%rip),%rcx        # 22d070 <slotvec0>
   1fcb0:	48 89 d6             	mov    %rdx,%rsi
      size_t n1 = n0 + 1;
   1fcb3:	49 89 d7             	mov    %rdx,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1fcb6:	48 c1 e6 04          	shl    $0x4,%rsi
   1fcba:	48 89 15 57 3c 73 00 	mov    %rdx,0x733c57(%rip)        # 753918 <tmpquadone>
   1fcc1:	48 89 05 68 df 5d 00 	mov    %rax,0x5ddf68(%rip)        # 5fdc30 <tmpquadtwo>
   1fcc8:	48 8d 15 21 df 5d 00 	lea    0x5ddf21(%rip),%rdx        # 5fdbf0 <funcinptr>
   1fccf:	48 c7 02 d0 0a 00 00 	movq   $0xad0,(%rdx)
   1fcd6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1fcdd:	00 
   1fcde:	48 89 c8             	mov    %rcx,%rax
   1fce1:	48 89 42 10          	mov    %rax,0x10(%rdx)
   1fce5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1fcec:	00 
   1fced:	48 89 d8             	mov    %rbx,%rax
   1fcf0:	48 89 42 20          	mov    %rax,0x20(%rdx)
   1fcf4:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1fcfb:	00 
   1fcfc:	ff 32                	pushq  (%rdx)
   1fcfe:	48 8b 15 13 3c 73 00 	mov    0x733c13(%rip),%rdx        # 753918 <tmpquadone>
   1fd05:	48 8b 05 24 df 5d 00 	mov    0x5ddf24(%rip),%rax        # 5fdc30 <tmpquadtwo>
   1fd0c:	48 c7 05 39 3c 73 00 	movq   $0x1,0x733c39(%rip)        # 753950 <cmpPassed>
   1fd13:	01 00 00 00 
   1fd17:	e8 5c 5b fe ff       	callq  5878 <_storeDataFn>
   1fd1c:	48 39 cb             	cmp    %rcx,%rbx
   1fd1f:	0f 84 93 02 00 00    	je     1ffb8 <quote_n_mem+0x3e8>
   1fd25:	50                   	push   %rax
   1fd26:	48 b8 8d a5 cf f9 00 	movabs $0xf9cfa58d,%rax
   1fd2d:	00 00 00 
   1fd30:	48 89 05 09 3c 73 00 	mov    %rax,0x733c09(%rip)        # 753940 <edgeId>
   1fd37:	58                   	pop    %rax
   1fd38:	e8 a3 5a fe ff       	callq  57e0 <_storeEdge>
   1fd3d:	48 89 df             	mov    %rbx,%rdi
   1fd40:	48 89 14 24          	mov    %rdx,(%rsp)
   1fd44:	e8 b7 3b 00 00       	callq  23900 <xrealloc>
   1fd49:	48 8b 14 24          	mov    (%rsp),%rdx
   1fd4d:	48 89 c3             	mov    %rax,%rbx
   1fd50:	48 89 05 09 d3 20 00 	mov    %rax,0x20d309(%rip)        # 22d060 <slotvec>
   1fd57:	50                   	push   %rax
   1fd58:	48 b8 d2 e7 fc f6 00 	movabs $0xf6fce7d2,%rax
   1fd5f:	00 00 00 
   1fd62:	48 89 05 d7 3b 73 00 	mov    %rax,0x733bd7(%rip)        # 753940 <edgeId>
   1fd69:	58                   	pop    %rax
   1fd6a:	e8 71 5a fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   1fd6f:	8b 3d e3 d2 20 00    	mov    0x20d2e3(%rip),%edi        # 22d058 <nslots>
   1fd75:	31 f6                	xor    %esi,%esi
   1fd77:	48 29 fa             	sub    %rdi,%rdx
   1fd7a:	48 c1 e7 04          	shl    $0x4,%rdi
   1fd7e:	48 c1 e2 04          	shl    $0x4,%rdx
   1fd82:	48 01 df             	add    %rbx,%rdi
   1fd85:	e8 66 1c fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   1fd8a:	44 89 3d c7 d2 20 00 	mov    %r15d,0x20d2c7(%rip)        # 22d058 <nslots>
   1fd91:	50                   	push   %rax
   1fd92:	48 b8 8f e8 0d b0 00 	movabs $0xb00de88f,%rax
   1fd99:	00 00 00 
   1fd9c:	48 89 05 9d 3b 73 00 	mov    %rax,0x733b9d(%rip)        # 753940 <edgeId>
   1fda3:	58                   	pop    %rax
   1fda4:	e8 37 5a fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1fda9:	44 8b 0d 74 d2 20 00 	mov    0x20d274(%rip),%r9d        # 22d024 <quote_quoting_options+0x4>
    size_t size = sv[n].size;
   1fdb0:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1fdb4:	4c 8d 3d 6d d2 20 00 	lea    0x20d26d(%rip),%r15        # 22d028 <quote_quoting_options+0x8>
    size_t size = sv[n].size;
   1fdbb:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1fdbe:	48 83 ec 08          	sub    $0x8,%rsp
   1fdc2:	44 8b 05 57 d2 20 00 	mov    0x20d257(%rip),%r8d        # 22d020 <quote_quoting_options>
    size_t size = sv[n].size;
   1fdc9:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   1fdcc:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1fdd0:	4c 89 f1             	mov    %r14,%rcx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1fdd3:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1fdd7:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   1fdda:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   1fddf:	ff 35 6b d2 20 00    	pushq  0x20d26b(%rip)        # 22d050 <quote_quoting_options+0x30>
   1fde5:	ff 35 5d d2 20 00    	pushq  0x20d25d(%rip)        # 22d048 <quote_quoting_options+0x28>
   1fdeb:	41 57                	push   %r15
   1fded:	4c 89 de             	mov    %r11,%rsi
   1fdf0:	48 89 ef             	mov    %rbp,%rdi
   1fdf3:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   1fdf8:	e8 03 30 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   1fdfd:	48 83 c4 20          	add    $0x20,%rsp
   1fe01:	48 8b 34 24          	mov    (%rsp),%rsi
   1fe05:	48 89 15 0c 3b 73 00 	mov    %rdx,0x733b0c(%rip)        # 753918 <tmpquadone>
   1fe0c:	48 89 0d 1d de 5d 00 	mov    %rcx,0x5dde1d(%rip)        # 5fdc30 <tmpquadtwo>
   1fe13:	48 8d 15 d6 dd 5d 00 	lea    0x5dddd6(%rip),%rdx        # 5fdbf0 <funcinptr>
   1fe1a:	48 c7 02 d1 0a 00 00 	movq   $0xad1,(%rdx)
   1fe21:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1fe28:	00 
   1fe29:	48 89 c1             	mov    %rax,%rcx
   1fe2c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1fe30:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1fe37:	00 
   1fe38:	48 89 f1             	mov    %rsi,%rcx
   1fe3b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1fe3f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1fe46:	00 
   1fe47:	ff 32                	pushq  (%rdx)
   1fe49:	48 8b 15 c8 3a 73 00 	mov    0x733ac8(%rip),%rdx        # 753918 <tmpquadone>
   1fe50:	48 8b 0d d9 dd 5d 00 	mov    0x5dddd9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1fe57:	48 c7 05 ee 3a 73 00 	movq   $0x1,0x733aee(%rip)        # 753950 <cmpPassed>
   1fe5e:	01 00 00 00 
   1fe62:	e8 11 5a fe ff       	callq  5878 <_storeDataFn>
   1fe67:	48 39 c6             	cmp    %rax,%rsi
   1fe6a:	0f 87 0f 01 00 00    	ja     1ff7f <quote_n_mem+0x3af>
   1fe70:	50                   	push   %rax
   1fe71:	48 b8 d2 0c 40 8a 00 	movabs $0x8a400cd2,%rax
   1fe78:	00 00 00 
   1fe7b:	48 89 05 be 3a 73 00 	mov    %rax,0x733abe(%rip)        # 753940 <edgeId>
   1fe82:	58                   	pop    %rax
   1fe83:	e8 58 59 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   1fe88:	48 8d 3d b1 db 5d 00 	lea    0x5ddbb1(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   1fe8f:	4c 8d 40 01          	lea    0x1(%rax),%r8
        if (val != slot0)
   1fe93:	48 89 15 7e 3a 73 00 	mov    %rdx,0x733a7e(%rip)        # 753918 <tmpquadone>
   1fe9a:	48 89 0d 8f dd 5d 00 	mov    %rcx,0x5ddd8f(%rip)        # 5fdc30 <tmpquadtwo>
   1fea1:	48 8d 15 48 dd 5d 00 	lea    0x5ddd48(%rip),%rdx        # 5fdbf0 <funcinptr>
   1fea8:	48 c7 02 d2 0a 00 00 	movq   $0xad2,(%rdx)
   1feaf:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   1feb6:	00 
   1feb7:	48 89 f9             	mov    %rdi,%rcx
   1feba:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   1febe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   1fec5:	00 
   1fec6:	48 89 e9             	mov    %rbp,%rcx
   1fec9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   1fecd:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   1fed4:	00 
   1fed5:	ff 32                	pushq  (%rdx)
   1fed7:	48 8b 15 3a 3a 73 00 	mov    0x733a3a(%rip),%rdx        # 753918 <tmpquadone>
   1fede:	48 8b 0d 4b dd 5d 00 	mov    0x5ddd4b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   1fee5:	48 c7 05 60 3a 73 00 	movq   $0x1,0x733a60(%rip)        # 753950 <cmpPassed>
   1feec:	01 00 00 00 
   1fef0:	e8 83 59 fe ff       	callq  5878 <_storeDataFn>
   1fef5:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   1fef8:	4c 89 03             	mov    %r8,(%rbx)
        if (val != slot0)
   1fefb:	74 25                	je     1ff22 <quote_n_mem+0x352>
   1fefd:	50                   	push   %rax
   1fefe:	48 c7 c0 01 48 91 09 	mov    $0x9914801,%rax
   1ff05:	48 89 05 34 3a 73 00 	mov    %rax,0x733a34(%rip)        # 753940 <edgeId>
   1ff0c:	58                   	pop    %rax
   1ff0d:	e8 ce 58 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   1ff12:	48 89 ef             	mov    %rbp,%rdi
   1ff15:	4c 89 04 24          	mov    %r8,(%rsp)
   1ff19:	e8 52 19 fe ff       	callq  1870 <free@plt>
   1ff1e:	4c 8b 04 24          	mov    (%rsp),%r8
   1ff22:	50                   	push   %rax
   1ff23:	48 c7 c0 48 91 09 4d 	mov    $0x4d099148,%rax
   1ff2a:	48 89 05 0f 3a 73 00 	mov    %rax,0x733a0f(%rip)        # 753940 <edgeId>
   1ff31:	58                   	pop    %rax
   1ff32:	e8 a9 58 fe ff       	callq  57e0 <_storeEdge>
   1ff37:	4c 89 c7             	mov    %r8,%rdi
   1ff3a:	4c 89 04 24          	mov    %r8,(%rsp)
   1ff3e:	e8 3d 39 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1ff43:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   1ff47:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   1ff4b:	44 8b 05 ce d0 20 00 	mov    0x20d0ce(%rip),%r8d        # 22d020 <quote_quoting_options>
   1ff52:	ff 35 f8 d0 20 00    	pushq  0x20d0f8(%rip)        # 22d050 <quote_quoting_options+0x30>
   1ff58:	ff 35 ea d0 20 00    	pushq  0x20d0ea(%rip)        # 22d048 <quote_quoting_options+0x28>
   1ff5e:	4c 89 f1             	mov    %r14,%rcx
   1ff61:	41 57                	push   %r15
   1ff63:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   1ff68:	4c 89 ea             	mov    %r13,%rdx
   1ff6b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1ff70:	48 89 c7             	mov    %rax,%rdi
   1ff73:	48 89 c5             	mov    %rax,%rbp
   1ff76:	e8 85 2e ff ff       	callq  12e00 <quotearg_buffer_restyled>
   1ff7b:	48 83 c4 20          	add    $0x20,%rsp
   1ff7f:	50                   	push   %rax
   1ff80:	48 b8 86 d5 ce a7 00 	movabs $0xa7ced586,%rax
   1ff87:	00 00 00 
   1ff8a:	48 89 05 af 39 73 00 	mov    %rax,0x7339af(%rip)        # 753940 <edgeId>
   1ff91:	58                   	pop    %rax
   1ff92:	e8 49 58 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   1ff97:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
}
   1ff9c:	48 89 e8             	mov    %rbp,%rax
    errno = e;
   1ff9f:	45 89 14 24          	mov    %r10d,(%r12)
}
   1ffa3:	48 83 c4 18          	add    $0x18,%rsp
   1ffa7:	5b                   	pop    %rbx
   1ffa8:	5d                   	pop    %rbp
   1ffa9:	41 5c                	pop    %r12
   1ffab:	41 5d                	pop    %r13
   1ffad:	41 5e                	pop    %r14
   1ffaf:	41 5f                	pop    %r15
   1ffb1:	c3                   	retq   
   1ffb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1ffb8:	50                   	push   %rax
   1ffb9:	48 c7 c0 d2 9c 01 74 	mov    $0x74019cd2,%rax
   1ffc0:	48 89 05 79 39 73 00 	mov    %rax,0x733979(%rip)        # 753940 <edgeId>
   1ffc7:	58                   	pop    %rax
   1ffc8:	e8 13 58 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1ffcd:	31 ff                	xor    %edi,%edi
   1ffcf:	48 89 14 24          	mov    %rdx,(%rsp)
   1ffd3:	e8 28 39 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   1ffd8:	66 0f 6f 05 90 d0 20 	movdqa 0x20d090(%rip),%xmm0        # 22d070 <slotvec0>
   1ffdf:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   1ffe0:	48 89 c3             	mov    %rax,%rbx
   1ffe3:	48 89 05 76 d0 20 00 	mov    %rax,0x20d076(%rip)        # 22d060 <slotvec>
   1ffea:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   1ffee:	0f 11 00             	movups %xmm0,(%rax)
   1fff1:	e9 61 fd ff ff       	jmpq   1fd57 <quote_n_mem+0x187>
   1fff6:	50                   	push   %rax
   1fff7:	48 b8 a0 e3 a0 80 00 	movabs $0x80a0e3a0,%rax
   1fffe:	00 00 00 
   20001:	48 89 05 38 39 73 00 	mov    %rax,0x733938(%rip)        # 753940 <edgeId>
   20008:	58                   	pop    %rax
   20009:	e8 d2 57 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   2000e:	e8 6d 18 fe ff       	callq  1880 <abort@plt>
   20013:	0f 1f 00             	nopl   (%rax)
   20016:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2001d:	00 00 00 

0000000000020020 <quote_mem>:

char const *
quote_mem (char const *arg, size_t argsize)
{
   20020:	41 57                	push   %r15
   20022:	41 56                	push   %r14
   20024:	49 89 f6             	mov    %rsi,%r14
   20027:	41 55                	push   %r13
   20029:	41 54                	push   %r12
   2002b:	49 89 fd             	mov    %rdi,%r13
   2002e:	55                   	push   %rbp
   2002f:	53                   	push   %rbx
   20030:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   20034:	e8 57 18 fe ff       	callq  1890 <__errno_location@plt>
  if (nslots <= n0)
   20039:	8b 15 19 d0 20 00    	mov    0x20d019(%rip),%edx        # 22d058 <nslots>
  int e = errno;
   2003f:	49 89 c4             	mov    %rax,%r12
   20042:	8b 00                	mov    (%rax),%eax
  struct slotvec *sv = slotvec;
   20044:	48 8b 1d 15 d0 20 00 	mov    0x20d015(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   2004b:	85 d2                	test   %edx,%edx
  int e = errno;
   2004d:	89 44 24 08          	mov    %eax,0x8(%rsp)
  if (nslots <= n0)
   20051:	0f 85 f8 00 00 00    	jne    2014f <quote_mem+0x12f>
   20057:	50                   	push   %rax
   20058:	48 b8 d8 d6 14 8f 00 	movabs $0x8f14d6d8,%rax
   2005f:	00 00 00 
   20062:	48 89 05 d7 38 73 00 	mov    %rax,0x7338d7(%rip)        # 753940 <edgeId>
   20069:	58                   	pop    %rax
   2006a:	e8 71 57 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   2006f:	48 8d 0d fa cf 20 00 	lea    0x20cffa(%rip),%rcx        # 22d070 <slotvec0>
   20076:	48 89 15 9b 38 73 00 	mov    %rdx,0x73389b(%rip)        # 753918 <tmpquadone>
   2007d:	48 89 05 ac db 5d 00 	mov    %rax,0x5ddbac(%rip)        # 5fdc30 <tmpquadtwo>
   20084:	48 8d 15 65 db 5d 00 	lea    0x5ddb65(%rip),%rdx        # 5fdbf0 <funcinptr>
   2008b:	48 c7 02 d3 0a 00 00 	movq   $0xad3,(%rdx)
   20092:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   20099:	00 
   2009a:	48 89 c8             	mov    %rcx,%rax
   2009d:	48 89 42 10          	mov    %rax,0x10(%rdx)
   200a1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   200a8:	00 
   200a9:	48 89 d8             	mov    %rbx,%rax
   200ac:	48 89 42 20          	mov    %rax,0x20(%rdx)
   200b0:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   200b7:	00 
   200b8:	ff 32                	pushq  (%rdx)
   200ba:	48 8b 15 57 38 73 00 	mov    0x733857(%rip),%rdx        # 753918 <tmpquadone>
   200c1:	48 8b 05 68 db 5d 00 	mov    0x5ddb68(%rip),%rax        # 5fdc30 <tmpquadtwo>
   200c8:	48 c7 05 7d 38 73 00 	movq   $0x1,0x73387d(%rip)        # 753950 <cmpPassed>
   200cf:	01 00 00 00 
   200d3:	e8 a0 57 fe ff       	callq  5878 <_storeDataFn>
   200d8:	48 39 cb             	cmp    %rcx,%rbx
   200db:	0f 84 8f 02 00 00    	je     20370 <quote_mem+0x350>
   200e1:	50                   	push   %rax
   200e2:	48 c7 c0 5b 53 3c 02 	mov    $0x23c535b,%rax
   200e9:	48 89 05 50 38 73 00 	mov    %rax,0x733850(%rip)        # 753940 <edgeId>
   200f0:	58                   	pop    %rax
   200f1:	e8 ea 56 fe ff       	callq  57e0 <_storeEdge>
   200f6:	48 89 df             	mov    %rbx,%rdi
   200f9:	be 10 00 00 00       	mov    $0x10,%esi
   200fe:	e8 fd 37 00 00       	callq  23900 <xrealloc>
   20103:	48 89 c3             	mov    %rax,%rbx
   20106:	48 89 05 53 cf 20 00 	mov    %rax,0x20cf53(%rip)        # 22d060 <slotvec>
   2010d:	50                   	push   %rax
   2010e:	48 b8 53 3c 02 c7 00 	movabs $0xc7023c53,%rax
   20115:	00 00 00 
   20118:	48 89 05 21 38 73 00 	mov    %rax,0x733821(%rip)        # 753940 <edgeId>
   2011f:	58                   	pop    %rax
   20120:	e8 bb 56 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   20125:	8b 3d 2d cf 20 00    	mov    0x20cf2d(%rip),%edi        # 22d058 <nslots>
   2012b:	ba 01 00 00 00       	mov    $0x1,%edx
   20130:	31 f6                	xor    %esi,%esi
   20132:	48 29 fa             	sub    %rdi,%rdx
   20135:	48 c1 e7 04          	shl    $0x4,%rdi
   20139:	48 c1 e2 04          	shl    $0x4,%rdx
   2013d:	48 01 df             	add    %rbx,%rdi
   20140:	e8 ab 18 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   20145:	c7 05 09 cf 20 00 01 	movl   $0x1,0x20cf09(%rip)        # 22d058 <nslots>
   2014c:	00 00 00 
   2014f:	50                   	push   %rax
   20150:	48 c7 c0 f6 30 e7 32 	mov    $0x32e730f6,%rax
   20157:	48 89 05 e2 37 73 00 	mov    %rax,0x7337e2(%rip)        # 753940 <edgeId>
   2015e:	58                   	pop    %rax
   2015f:	e8 7c 56 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   20164:	44 8b 0d b9 ce 20 00 	mov    0x20ceb9(%rip),%r9d        # 22d024 <quote_quoting_options+0x4>
    size_t size = sv[n].size;
   2016b:	4c 8b 1b             	mov    (%rbx),%r11
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   2016e:	4c 8d 3d b3 ce 20 00 	lea    0x20ceb3(%rip),%r15        # 22d028 <quote_quoting_options+0x8>
    char *val = sv[n].val;
   20175:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20179:	48 83 ec 08          	sub    $0x8,%rsp
   2017d:	44 8b 05 9c ce 20 00 	mov    0x20ce9c(%rip),%r8d        # 22d020 <quote_quoting_options>
   20184:	4c 89 f1             	mov    %r14,%rcx
   20187:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   2018a:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   2018e:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   20191:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20196:	ff 35 b4 ce 20 00    	pushq  0x20ceb4(%rip)        # 22d050 <quote_quoting_options+0x30>
   2019c:	48 89 ef             	mov    %rbp,%rdi
   2019f:	ff 35 a3 ce 20 00    	pushq  0x20cea3(%rip)        # 22d048 <quote_quoting_options+0x28>
   201a5:	41 57                	push   %r15
   201a7:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   201ac:	e8 4f 2c ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   201b1:	48 83 c4 20          	add    $0x20,%rsp
   201b5:	48 8b 34 24          	mov    (%rsp),%rsi
   201b9:	48 89 15 58 37 73 00 	mov    %rdx,0x733758(%rip)        # 753918 <tmpquadone>
   201c0:	48 89 0d 69 da 5d 00 	mov    %rcx,0x5dda69(%rip)        # 5fdc30 <tmpquadtwo>
   201c7:	48 8d 15 22 da 5d 00 	lea    0x5dda22(%rip),%rdx        # 5fdbf0 <funcinptr>
   201ce:	48 c7 02 d4 0a 00 00 	movq   $0xad4,(%rdx)
   201d5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   201dc:	00 
   201dd:	48 89 c1             	mov    %rax,%rcx
   201e0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   201e4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   201eb:	00 
   201ec:	48 89 f1             	mov    %rsi,%rcx
   201ef:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   201f3:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   201fa:	00 
   201fb:	ff 32                	pushq  (%rdx)
   201fd:	48 8b 15 14 37 73 00 	mov    0x733714(%rip),%rdx        # 753918 <tmpquadone>
   20204:	48 8b 0d 25 da 5d 00 	mov    0x5dda25(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2020b:	48 c7 05 3a 37 73 00 	movq   $0x1,0x73373a(%rip)        # 753950 <cmpPassed>
   20212:	01 00 00 00 
   20216:	e8 5d 56 fe ff       	callq  5878 <_storeDataFn>
   2021b:	48 39 c6             	cmp    %rax,%rsi
   2021e:	0f 87 12 01 00 00    	ja     20336 <quote_mem+0x316>
   20224:	50                   	push   %rax
   20225:	48 b8 c0 04 bf ca 00 	movabs $0xcabf04c0,%rax
   2022c:	00 00 00 
   2022f:	48 89 05 0a 37 73 00 	mov    %rax,0x73370a(%rip)        # 753940 <edgeId>
   20236:	58                   	pop    %rax
   20237:	e8 a4 55 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   2023c:	48 8d 3d fd d7 5d 00 	lea    0x5dd7fd(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   20243:	4c 8d 40 01          	lea    0x1(%rax),%r8
        if (val != slot0)
   20247:	48 89 15 ca 36 73 00 	mov    %rdx,0x7336ca(%rip)        # 753918 <tmpquadone>
   2024e:	48 89 0d db d9 5d 00 	mov    %rcx,0x5dd9db(%rip)        # 5fdc30 <tmpquadtwo>
   20255:	48 8d 15 94 d9 5d 00 	lea    0x5dd994(%rip),%rdx        # 5fdbf0 <funcinptr>
   2025c:	48 c7 02 d5 0a 00 00 	movq   $0xad5,(%rdx)
   20263:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   2026a:	00 
   2026b:	48 89 f9             	mov    %rdi,%rcx
   2026e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   20272:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20279:	00 
   2027a:	48 89 e9             	mov    %rbp,%rcx
   2027d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   20281:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   20288:	00 
   20289:	ff 32                	pushq  (%rdx)
   2028b:	48 8b 15 86 36 73 00 	mov    0x733686(%rip),%rdx        # 753918 <tmpquadone>
   20292:	48 8b 0d 97 d9 5d 00 	mov    0x5dd997(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   20299:	48 c7 05 ac 36 73 00 	movq   $0x1,0x7336ac(%rip)        # 753950 <cmpPassed>
   202a0:	01 00 00 00 
   202a4:	e8 cf 55 fe ff       	callq  5878 <_storeDataFn>
   202a9:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   202ac:	4c 89 03             	mov    %r8,(%rbx)
        if (val != slot0)
   202af:	74 28                	je     202d9 <quote_mem+0x2b9>
   202b1:	50                   	push   %rax
   202b2:	48 b8 e0 57 b9 ca 00 	movabs $0xcab957e0,%rax
   202b9:	00 00 00 
   202bc:	48 89 05 7d 36 73 00 	mov    %rax,0x73367d(%rip)        # 753940 <edgeId>
   202c3:	58                   	pop    %rax
   202c4:	e8 17 55 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   202c9:	48 89 ef             	mov    %rbp,%rdi
   202cc:	4c 89 04 24          	mov    %r8,(%rsp)
   202d0:	e8 9b 15 fe ff       	callq  1870 <free@plt>
   202d5:	4c 8b 04 24          	mov    (%rsp),%r8
   202d9:	50                   	push   %rax
   202da:	48 c7 c0 57 b9 ca 7e 	mov    $0x7ecab957,%rax
   202e1:	48 89 05 58 36 73 00 	mov    %rax,0x733658(%rip)        # 753940 <edgeId>
   202e8:	58                   	pop    %rax
   202e9:	e8 f2 54 fe ff       	callq  57e0 <_storeEdge>
   202ee:	4c 89 c7             	mov    %r8,%rdi
   202f1:	4c 89 04 24          	mov    %r8,(%rsp)
   202f5:	e8 86 35 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   202fa:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   202fe:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   20302:	44 8b 05 17 cd 20 00 	mov    0x20cd17(%rip),%r8d        # 22d020 <quote_quoting_options>
   20309:	ff 35 41 cd 20 00    	pushq  0x20cd41(%rip)        # 22d050 <quote_quoting_options+0x30>
   2030f:	ff 35 33 cd 20 00    	pushq  0x20cd33(%rip)        # 22d048 <quote_quoting_options+0x28>
   20315:	4c 89 f1             	mov    %r14,%rcx
   20318:	41 57                	push   %r15
   2031a:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   2031f:	4c 89 ea             	mov    %r13,%rdx
   20322:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   20327:	48 89 c7             	mov    %rax,%rdi
   2032a:	48 89 c5             	mov    %rax,%rbp
   2032d:	e8 ce 2a ff ff       	callq  12e00 <quotearg_buffer_restyled>
   20332:	48 83 c4 20          	add    $0x20,%rsp
   20336:	50                   	push   %rax
   20337:	48 b8 89 8b 6b b7 00 	movabs $0xb76b8b89,%rax
   2033e:	00 00 00 
   20341:	48 89 05 f8 35 73 00 	mov    %rax,0x7335f8(%rip)        # 753940 <edgeId>
   20348:	58                   	pop    %rax
   20349:	e8 92 54 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   2034e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
  return quote_n_mem (0, arg, argsize);
}
   20353:	48 89 e8             	mov    %rbp,%rax
    errno = e;
   20356:	45 89 14 24          	mov    %r10d,(%r12)
}
   2035a:	48 83 c4 18          	add    $0x18,%rsp
   2035e:	5b                   	pop    %rbx
   2035f:	5d                   	pop    %rbp
   20360:	41 5c                	pop    %r12
   20362:	41 5d                	pop    %r13
   20364:	41 5e                	pop    %r14
   20366:	41 5f                	pop    %r15
   20368:	c3                   	retq   
   20369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   20370:	50                   	push   %rax
   20371:	48 c7 c0 08 21 07 2c 	mov    $0x2c072108,%rax
   20378:	48 89 05 c1 35 73 00 	mov    %rax,0x7335c1(%rip)        # 753940 <edgeId>
   2037f:	58                   	pop    %rax
   20380:	e8 5b 54 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20385:	be 10 00 00 00       	mov    $0x10,%esi
   2038a:	31 ff                	xor    %edi,%edi
   2038c:	e8 6f 35 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   20391:	66 0f 6f 05 d7 cc 20 	movdqa 0x20ccd7(%rip),%xmm0        # 22d070 <slotvec0>
   20398:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20399:	48 89 c3             	mov    %rax,%rbx
   2039c:	48 89 05 bd cc 20 00 	mov    %rax,0x20ccbd(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   203a3:	0f 11 00             	movups %xmm0,(%rax)
   203a6:	e9 62 fd ff ff       	jmpq   2010d <quote_mem+0xed>
   203ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000203b0 <quote_n>:

char const *
quote_n (int n, char const *arg)
{
   203b0:	41 57                	push   %r15
   203b2:	41 56                	push   %r14
   203b4:	41 55                	push   %r13
   203b6:	41 54                	push   %r12
   203b8:	49 89 f5             	mov    %rsi,%r13
   203bb:	55                   	push   %rbp
   203bc:	53                   	push   %rbx
   203bd:	48 63 ef             	movslq %edi,%rbp
   203c0:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   203c4:	e8 c7 14 fe ff       	callq  1890 <__errno_location@plt>
  if (n < 0)
   203c9:	85 ed                	test   %ebp,%ebp
  int e = errno;
   203cb:	44 8b 30             	mov    (%rax),%r14d
  struct slotvec *sv = slotvec;
   203ce:	48 8b 1d 8b cc 20 00 	mov    0x20cc8b(%rip),%rbx        # 22d060 <slotvec>
  if (n < 0)
   203d5:	0f 88 e6 03 00 00    	js     207c1 <quote_n+0x411>
   203db:	50                   	push   %rax
   203dc:	48 c7 c0 b9 be f3 63 	mov    $0x63f3beb9,%rax
   203e3:	48 89 05 56 35 73 00 	mov    %rax,0x733556(%rip)        # 753940 <edgeId>
   203ea:	58                   	pop    %rax
   203eb:	e8 f0 53 fe ff       	callq  57e0 <_storeEdge>
  if (nslots <= n0)
   203f0:	48 89 15 21 35 73 00 	mov    %rdx,0x733521(%rip)        # 753918 <tmpquadone>
   203f7:	48 89 0d 32 d8 5d 00 	mov    %rcx,0x5dd832(%rip)        # 5fdc30 <tmpquadtwo>
   203fe:	48 8d 15 eb d7 5d 00 	lea    0x5dd7eb(%rip),%rdx        # 5fdbf0 <funcinptr>
   20405:	48 c7 02 d6 0a 00 00 	movq   $0xad6,(%rdx)
   2040c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   20413:	00 
   20414:	48 8b 0d 3d cc 20 00 	mov    0x20cc3d(%rip),%rcx        # 22d058 <nslots>
   2041b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2041f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20426:	00 
   20427:	48 89 e9             	mov    %rbp,%rcx
   2042a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2042e:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   20435:	00 
   20436:	ff 32                	pushq  (%rdx)
   20438:	48 8b 15 d9 34 73 00 	mov    0x7334d9(%rip),%rdx        # 753918 <tmpquadone>
   2043f:	48 8b 0d ea d7 5d 00 	mov    0x5dd7ea(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   20446:	48 c7 05 ff 34 73 00 	movq   $0x1,0x7334ff(%rip)        # 753950 <cmpPassed>
   2044d:	01 00 00 00 
   20451:	e8 22 54 fe ff       	callq  5878 <_storeDataFn>
   20456:	3b 2d fc cb 20 00    	cmp    0x20cbfc(%rip),%ebp        # 22d058 <nslots>
   2045c:	49 89 c4             	mov    %rax,%r12
   2045f:	0f 82 fd 00 00 00    	jb     20562 <quote_n+0x1b2>
   20465:	50                   	push   %rax
   20466:	48 c7 c0 eb 3b 3f 76 	mov    $0x763f3beb,%rax
   2046d:	48 89 05 cc 34 73 00 	mov    %rax,0x7334cc(%rip)        # 753940 <edgeId>
   20474:	58                   	pop    %rax
   20475:	e8 66 53 fe ff       	callq  57e0 <_storeEdge>
      size_t n1 = n0 + 1;
   2047a:	8d 55 01             	lea    0x1(%rbp),%edx
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   2047d:	48 8d 05 ec cb 20 00 	lea    0x20cbec(%rip),%rax        # 22d070 <slotvec0>
   20484:	48 89 d6             	mov    %rdx,%rsi
      size_t n1 = n0 + 1;
   20487:	49 89 d7             	mov    %rdx,%r15
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   2048a:	48 c1 e6 04          	shl    $0x4,%rsi
   2048e:	48 89 15 83 34 73 00 	mov    %rdx,0x733483(%rip)        # 753918 <tmpquadone>
   20495:	48 89 0d 94 d7 5d 00 	mov    %rcx,0x5dd794(%rip)        # 5fdc30 <tmpquadtwo>
   2049c:	48 8d 15 4d d7 5d 00 	lea    0x5dd74d(%rip),%rdx        # 5fdbf0 <funcinptr>
   204a3:	48 c7 02 d7 0a 00 00 	movq   $0xad7,(%rdx)
   204aa:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   204b1:	00 
   204b2:	48 89 c1             	mov    %rax,%rcx
   204b5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   204b9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   204c0:	00 
   204c1:	48 89 d9             	mov    %rbx,%rcx
   204c4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   204c8:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   204cf:	00 
   204d0:	ff 32                	pushq  (%rdx)
   204d2:	48 8b 15 3f 34 73 00 	mov    0x73343f(%rip),%rdx        # 753918 <tmpquadone>
   204d9:	48 8b 0d 50 d7 5d 00 	mov    0x5dd750(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   204e0:	48 c7 05 65 34 73 00 	movq   $0x1,0x733465(%rip)        # 753950 <cmpPassed>
   204e7:	01 00 00 00 
   204eb:	e8 88 53 fe ff       	callq  5878 <_storeDataFn>
   204f0:	48 39 c3             	cmp    %rax,%rbx
   204f3:	0f 84 87 02 00 00    	je     20780 <quote_n+0x3d0>
   204f9:	50                   	push   %rax
   204fa:	48 b8 f9 b1 a3 8a 00 	movabs $0x8aa3b1f9,%rax
   20501:	00 00 00 
   20504:	48 89 05 35 34 73 00 	mov    %rax,0x733435(%rip)        # 753940 <edgeId>
   2050b:	58                   	pop    %rax
   2050c:	e8 cf 52 fe ff       	callq  57e0 <_storeEdge>
   20511:	48 89 df             	mov    %rbx,%rdi
   20514:	48 89 14 24          	mov    %rdx,(%rsp)
   20518:	e8 e3 33 00 00       	callq  23900 <xrealloc>
   2051d:	48 8b 14 24          	mov    (%rsp),%rdx
   20521:	48 89 c3             	mov    %rax,%rbx
   20524:	48 89 05 35 cb 20 00 	mov    %rax,0x20cb35(%rip)        # 22d060 <slotvec>
   2052b:	50                   	push   %rax
   2052c:	48 c7 c0 d8 51 c5 61 	mov    $0x61c551d8,%rax
   20533:	48 89 05 06 34 73 00 	mov    %rax,0x733406(%rip)        # 753940 <edgeId>
   2053a:	58                   	pop    %rax
   2053b:	e8 a0 52 fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   20540:	8b 3d 12 cb 20 00    	mov    0x20cb12(%rip),%edi        # 22d058 <nslots>
   20546:	31 f6                	xor    %esi,%esi
   20548:	48 29 fa             	sub    %rdi,%rdx
   2054b:	48 c1 e7 04          	shl    $0x4,%rdi
   2054f:	48 c1 e2 04          	shl    $0x4,%rdx
   20553:	48 01 df             	add    %rbx,%rdi
   20556:	e8 95 14 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   2055b:	44 89 3d f6 ca 20 00 	mov    %r15d,0x20caf6(%rip)        # 22d058 <nslots>
   20562:	50                   	push   %rax
   20563:	48 c7 c0 73 83 e3 01 	mov    $0x1e38373,%rax
   2056a:	48 89 05 cf 33 73 00 	mov    %rax,0x7333cf(%rip)        # 753940 <edgeId>
   20571:	58                   	pop    %rax
   20572:	e8 69 52 fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   20577:	44 8b 0d a6 ca 20 00 	mov    0x20caa6(%rip),%r9d        # 22d024 <quote_quoting_options+0x4>
    size_t size = sv[n].size;
   2057e:	48 c1 e5 04          	shl    $0x4,%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20582:	4c 8d 3d 9f ca 20 00 	lea    0x20ca9f(%rip),%r15        # 22d028 <quote_quoting_options+0x8>
    size_t size = sv[n].size;
   20589:	48 01 eb             	add    %rbp,%rbx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   2058c:	48 83 ec 08          	sub    $0x8,%rsp
   20590:	44 8b 05 89 ca 20 00 	mov    0x20ca89(%rip),%r8d        # 22d020 <quote_quoting_options>
    size_t size = sv[n].size;
   20597:	4c 8b 1b             	mov    (%rbx),%r11
    char *val = sv[n].val;
   2059a:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   2059e:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   205a5:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   205a9:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   205ac:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   205b1:	ff 35 99 ca 20 00    	pushq  0x20ca99(%rip)        # 22d050 <quote_quoting_options+0x30>
   205b7:	ff 35 8b ca 20 00    	pushq  0x20ca8b(%rip)        # 22d048 <quote_quoting_options+0x28>
   205bd:	41 57                	push   %r15
   205bf:	4c 89 de             	mov    %r11,%rsi
   205c2:	48 89 ef             	mov    %rbp,%rdi
   205c5:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   205ca:	e8 31 28 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   205cf:	48 83 c4 20          	add    $0x20,%rsp
   205d3:	48 8b 0c 24          	mov    (%rsp),%rcx
   205d7:	48 89 15 3a 33 73 00 	mov    %rdx,0x73333a(%rip)        # 753918 <tmpquadone>
   205de:	48 89 1d 4b d6 5d 00 	mov    %rbx,0x5dd64b(%rip)        # 5fdc30 <tmpquadtwo>
   205e5:	48 8d 15 04 d6 5d 00 	lea    0x5dd604(%rip),%rdx        # 5fdbf0 <funcinptr>
   205ec:	48 c7 02 d8 0a 00 00 	movq   $0xad8,(%rdx)
   205f3:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   205fa:	00 
   205fb:	48 89 c3             	mov    %rax,%rbx
   205fe:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   20602:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20609:	00 
   2060a:	48 89 cb             	mov    %rcx,%rbx
   2060d:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   20611:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   20618:	00 
   20619:	ff 32                	pushq  (%rdx)
   2061b:	48 8b 15 f6 32 73 00 	mov    0x7332f6(%rip),%rdx        # 753918 <tmpquadone>
   20622:	48 8b 1d 07 d6 5d 00 	mov    0x5dd607(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   20629:	48 c7 05 1c 33 73 00 	movq   $0x1,0x73331c(%rip)        # 753950 <cmpPassed>
   20630:	01 00 00 00 
   20634:	e8 3f 52 fe ff       	callq  5878 <_storeDataFn>
   20639:	48 39 c1             	cmp    %rax,%rcx
   2063c:	0f 87 10 01 00 00    	ja     20752 <quote_n+0x3a2>
   20642:	50                   	push   %rax
   20643:	48 c7 c0 e8 83 36 12 	mov    $0x123683e8,%rax
   2064a:	48 89 05 ef 32 73 00 	mov    %rax,0x7332ef(%rip)        # 753940 <edgeId>
   20651:	58                   	pop    %rax
   20652:	e8 89 51 fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   20657:	48 8d 3d e2 d3 5d 00 	lea    0x5dd3e2(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   2065e:	48 8d 70 01          	lea    0x1(%rax),%rsi
        if (val != slot0)
   20662:	48 89 15 af 32 73 00 	mov    %rdx,0x7332af(%rip)        # 753918 <tmpquadone>
   20669:	48 89 0d c0 d5 5d 00 	mov    %rcx,0x5dd5c0(%rip)        # 5fdc30 <tmpquadtwo>
   20670:	48 8d 15 79 d5 5d 00 	lea    0x5dd579(%rip),%rdx        # 5fdbf0 <funcinptr>
   20677:	48 c7 02 d9 0a 00 00 	movq   $0xad9,(%rdx)
   2067e:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   20685:	00 
   20686:	48 89 f9             	mov    %rdi,%rcx
   20689:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2068d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20694:	00 
   20695:	48 89 e9             	mov    %rbp,%rcx
   20698:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2069c:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   206a3:	00 
   206a4:	ff 32                	pushq  (%rdx)
   206a6:	48 8b 15 6b 32 73 00 	mov    0x73326b(%rip),%rdx        # 753918 <tmpquadone>
   206ad:	48 8b 0d 7c d5 5d 00 	mov    0x5dd57c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   206b4:	48 c7 05 91 32 73 00 	movq   $0x1,0x733291(%rip)        # 753950 <cmpPassed>
   206bb:	01 00 00 00 
   206bf:	e8 b4 51 fe ff       	callq  5878 <_storeDataFn>
   206c4:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   206c7:	48 89 33             	mov    %rsi,(%rbx)
        if (val != slot0)
   206ca:	74 25                	je     206f1 <quote_n+0x341>
   206cc:	50                   	push   %rax
   206cd:	48 c7 c0 d0 46 42 28 	mov    $0x284246d0,%rax
   206d4:	48 89 05 65 32 73 00 	mov    %rax,0x733265(%rip)        # 753940 <edgeId>
   206db:	58                   	pop    %rax
   206dc:	e8 ff 50 fe ff       	callq  57e0 <_storeEdge>
          free (val);
   206e1:	48 89 ef             	mov    %rbp,%rdi
   206e4:	48 89 34 24          	mov    %rsi,(%rsp)
   206e8:	e8 83 11 fe ff       	callq  1870 <free@plt>
   206ed:	48 8b 34 24          	mov    (%rsp),%rsi
   206f1:	50                   	push   %rax
   206f2:	48 c7 c0 46 42 28 44 	mov    $0x44284246,%rax
   206f9:	48 89 05 40 32 73 00 	mov    %rax,0x733240(%rip)        # 753940 <edgeId>
   20700:	58                   	pop    %rax
   20701:	e8 da 50 fe ff       	callq  57e0 <_storeEdge>
   20706:	48 89 f7             	mov    %rsi,%rdi
   20709:	48 89 34 24          	mov    %rsi,(%rsp)
   2070d:	e8 6e 31 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   20712:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   20716:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   2071a:	44 8b 05 ff c8 20 00 	mov    0x20c8ff(%rip),%r8d        # 22d020 <quote_quoting_options>
   20721:	ff 35 29 c9 20 00    	pushq  0x20c929(%rip)        # 22d050 <quote_quoting_options+0x30>
   20727:	ff 35 1b c9 20 00    	pushq  0x20c91b(%rip)        # 22d048 <quote_quoting_options+0x28>
   2072d:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   20734:	41 57                	push   %r15
   20736:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   2073b:	4c 89 ea             	mov    %r13,%rdx
   2073e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   20743:	48 89 c7             	mov    %rax,%rdi
   20746:	48 89 c5             	mov    %rax,%rbp
   20749:	e8 b2 26 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   2074e:	48 83 c4 20          	add    $0x20,%rsp
   20752:	50                   	push   %rax
   20753:	48 c7 c0 e7 2d be 02 	mov    $0x2be2de7,%rax
   2075a:	48 89 05 df 31 73 00 	mov    %rax,0x7331df(%rip)        # 753940 <edgeId>
   20761:	58                   	pop    %rax
   20762:	e8 79 50 fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   20767:	45 89 34 24          	mov    %r14d,(%r12)
  return quote_n_mem (n, arg, SIZE_MAX);
}
   2076b:	48 83 c4 18          	add    $0x18,%rsp
   2076f:	48 89 e8             	mov    %rbp,%rax
   20772:	5b                   	pop    %rbx
   20773:	5d                   	pop    %rbp
   20774:	41 5c                	pop    %r12
   20776:	41 5d                	pop    %r13
   20778:	41 5e                	pop    %r14
   2077a:	41 5f                	pop    %r15
   2077c:	c3                   	retq   
   2077d:	0f 1f 00             	nopl   (%rax)
   20780:	50                   	push   %rax
   20781:	48 b8 38 2c 60 b8 00 	movabs $0xb8602c38,%rax
   20788:	00 00 00 
   2078b:	48 89 05 ae 31 73 00 	mov    %rax,0x7331ae(%rip)        # 753940 <edgeId>
   20792:	58                   	pop    %rax
   20793:	e8 48 50 fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20798:	31 ff                	xor    %edi,%edi
   2079a:	48 89 14 24          	mov    %rdx,(%rsp)
   2079e:	e8 5d 31 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   207a3:	66 0f 6f 05 c5 c8 20 	movdqa 0x20c8c5(%rip),%xmm0        # 22d070 <slotvec0>
   207aa:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   207ab:	48 89 c3             	mov    %rax,%rbx
   207ae:	48 89 05 ab c8 20 00 	mov    %rax,0x20c8ab(%rip)        # 22d060 <slotvec>
   207b5:	48 8b 14 24          	mov    (%rsp),%rdx
        *sv = slotvec0;
   207b9:	0f 11 00             	movups %xmm0,(%rax)
   207bc:	e9 6a fd ff ff       	jmpq   2052b <quote_n+0x17b>
   207c1:	50                   	push   %rax
   207c2:	48 b8 e1 86 e6 cb 00 	movabs $0xcbe686e1,%rax
   207c9:	00 00 00 
   207cc:	48 89 05 6d 31 73 00 	mov    %rax,0x73316d(%rip)        # 753940 <edgeId>
   207d3:	58                   	pop    %rax
   207d4:	e8 07 50 fe ff       	callq  57e0 <_storeEdge>
    abort ();
   207d9:	e8 a2 10 fe ff       	callq  1880 <abort@plt>
   207de:	66 90                	xchg   %ax,%ax

00000000000207e0 <quote>:

char const *
quote (char const *arg)
{
   207e0:	41 57                	push   %r15
   207e2:	41 56                	push   %r14
   207e4:	41 55                	push   %r13
   207e6:	41 54                	push   %r12
   207e8:	49 89 fd             	mov    %rdi,%r13
   207eb:	55                   	push   %rbp
   207ec:	53                   	push   %rbx
   207ed:	48 83 ec 18          	sub    $0x18,%rsp
  int e = errno;
   207f1:	e8 9a 10 fe ff       	callq  1890 <__errno_location@plt>
   207f6:	49 89 c4             	mov    %rax,%r12
   207f9:	44 8b 38             	mov    (%rax),%r15d
  if (nslots <= n0)
   207fc:	8b 05 56 c8 20 00    	mov    0x20c856(%rip),%eax        # 22d058 <nslots>
  struct slotvec *sv = slotvec;
   20802:	48 8b 1d 57 c8 20 00 	mov    0x20c857(%rip),%rbx        # 22d060 <slotvec>
  if (nslots <= n0)
   20809:	85 c0                	test   %eax,%eax
   2080b:	0f 85 f8 00 00 00    	jne    20909 <quote+0x129>
   20811:	50                   	push   %rax
   20812:	48 b8 ba 75 fb cc 00 	movabs $0xccfb75ba,%rax
   20819:	00 00 00 
   2081c:	48 89 05 1d 31 73 00 	mov    %rax,0x73311d(%rip)        # 753940 <edgeId>
   20823:	58                   	pop    %rax
   20824:	e8 b7 4f fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20829:	48 8d 15 40 c8 20 00 	lea    0x20c840(%rip),%rdx        # 22d070 <slotvec0>
   20830:	48 89 0d e1 30 73 00 	mov    %rcx,0x7330e1(%rip)        # 753918 <tmpquadone>
   20837:	48 89 05 f2 d3 5d 00 	mov    %rax,0x5dd3f2(%rip)        # 5fdc30 <tmpquadtwo>
   2083e:	48 8d 0d ab d3 5d 00 	lea    0x5dd3ab(%rip),%rcx        # 5fdbf0 <funcinptr>
   20845:	48 c7 01 da 0a 00 00 	movq   $0xada,(%rcx)
   2084c:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   20853:	00 
   20854:	48 89 d0             	mov    %rdx,%rax
   20857:	48 89 41 10          	mov    %rax,0x10(%rcx)
   2085b:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   20862:	00 
   20863:	48 89 d8             	mov    %rbx,%rax
   20866:	48 89 41 20          	mov    %rax,0x20(%rcx)
   2086a:	48 c7 41 28 02 00 00 	movq   $0x2,0x28(%rcx)
   20871:	00 
   20872:	ff 31                	pushq  (%rcx)
   20874:	48 8b 0d 9d 30 73 00 	mov    0x73309d(%rip),%rcx        # 753918 <tmpquadone>
   2087b:	48 8b 05 ae d3 5d 00 	mov    0x5dd3ae(%rip),%rax        # 5fdc30 <tmpquadtwo>
   20882:	48 c7 05 c3 30 73 00 	movq   $0x1,0x7330c3(%rip)        # 753950 <cmpPassed>
   20889:	01 00 00 00 
   2088d:	e8 e6 4f fe ff       	callq  5878 <_storeDataFn>
   20892:	48 39 d3             	cmp    %rdx,%rbx
   20895:	0f 84 95 02 00 00    	je     20b30 <quote+0x350>
   2089b:	50                   	push   %rax
   2089c:	48 c7 c0 d6 ed 33 5f 	mov    $0x5f33edd6,%rax
   208a3:	48 89 05 96 30 73 00 	mov    %rax,0x733096(%rip)        # 753940 <edgeId>
   208aa:	58                   	pop    %rax
   208ab:	e8 30 4f fe ff       	callq  57e0 <_storeEdge>
   208b0:	48 89 df             	mov    %rbx,%rdi
   208b3:	be 10 00 00 00       	mov    $0x10,%esi
   208b8:	e8 43 30 00 00       	callq  23900 <xrealloc>
   208bd:	48 89 c3             	mov    %rax,%rbx
   208c0:	48 89 05 99 c7 20 00 	mov    %rax,0x20c799(%rip)        # 22d060 <slotvec>
   208c7:	50                   	push   %rax
   208c8:	48 b8 ed 33 5f 99 00 	movabs $0x995f33ed,%rax
   208cf:	00 00 00 
   208d2:	48 89 05 67 30 73 00 	mov    %rax,0x733067(%rip)        # 753940 <edgeId>
   208d9:	58                   	pop    %rax
   208da:	e8 01 4f fe ff       	callq  57e0 <_storeEdge>
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
   208df:	8b 3d 73 c7 20 00    	mov    0x20c773(%rip),%edi        # 22d058 <nslots>
   208e5:	ba 01 00 00 00       	mov    $0x1,%edx
   208ea:	31 f6                	xor    %esi,%esi
   208ec:	48 29 fa             	sub    %rdi,%rdx
   208ef:	48 c1 e7 04          	shl    $0x4,%rdi
   208f3:	48 c1 e2 04          	shl    $0x4,%rdx
   208f7:	48 01 df             	add    %rbx,%rdi
   208fa:	e8 f1 10 fe ff       	callq  19f0 <memset@plt>
      nslots = n1;
   208ff:	c7 05 4f c7 20 00 01 	movl   $0x1,0x20c74f(%rip)        # 22d058 <nslots>
   20906:	00 00 00 
   20909:	50                   	push   %rax
   2090a:	48 c7 c0 1c 72 67 22 	mov    $0x2267721c,%rax
   20911:	48 89 05 28 30 73 00 	mov    %rax,0x733028(%rip)        # 753940 <edgeId>
   20918:	58                   	pop    %rax
   20919:	e8 c2 4e fe ff       	callq  57e0 <_storeEdge>
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   2091e:	44 8b 0d ff c6 20 00 	mov    0x20c6ff(%rip),%r9d        # 22d024 <quote_quoting_options+0x4>
    size_t size = sv[n].size;
   20925:	4c 8b 1b             	mov    (%rbx),%r11
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20928:	4c 8d 35 f9 c6 20 00 	lea    0x20c6f9(%rip),%r14        # 22d028 <quote_quoting_options+0x8>
    char *val = sv[n].val;
   2092f:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20933:	48 83 ec 08          	sub    $0x8,%rsp
   20937:	44 8b 05 e2 c6 20 00 	mov    0x20c6e2(%rip),%r8d        # 22d020 <quote_quoting_options>
   2093e:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   20945:	4c 89 ea             	mov    %r13,%rdx
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   20948:	41 83 c9 01          	or     $0x1,%r9d
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   2094c:	4c 89 de             	mov    %r11,%rsi
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
   2094f:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
   20954:	ff 35 f6 c6 20 00    	pushq  0x20c6f6(%rip)        # 22d050 <quote_quoting_options+0x30>
   2095a:	48 89 ef             	mov    %rbp,%rdi
   2095d:	ff 35 e5 c6 20 00    	pushq  0x20c6e5(%rip)        # 22d048 <quote_quoting_options+0x28>
   20963:	41 56                	push   %r14
   20965:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
   2096a:	e8 91 24 ff ff       	callq  12e00 <quotearg_buffer_restyled>
    if (size <= qsize)
   2096f:	48 83 c4 20          	add    $0x20,%rsp
   20973:	48 8b 0c 24          	mov    (%rsp),%rcx
   20977:	48 89 15 9a 2f 73 00 	mov    %rdx,0x732f9a(%rip)        # 753918 <tmpquadone>
   2097e:	48 89 1d ab d2 5d 00 	mov    %rbx,0x5dd2ab(%rip)        # 5fdc30 <tmpquadtwo>
   20985:	48 8d 15 64 d2 5d 00 	lea    0x5dd264(%rip),%rdx        # 5fdbf0 <funcinptr>
   2098c:	48 c7 02 db 0a 00 00 	movq   $0xadb,(%rdx)
   20993:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   2099a:	00 
   2099b:	48 89 c3             	mov    %rax,%rbx
   2099e:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   209a2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   209a9:	00 
   209aa:	48 89 cb             	mov    %rcx,%rbx
   209ad:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   209b1:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   209b8:	00 
   209b9:	ff 32                	pushq  (%rdx)
   209bb:	48 8b 15 56 2f 73 00 	mov    0x732f56(%rip),%rdx        # 753918 <tmpquadone>
   209c2:	48 8b 1d 67 d2 5d 00 	mov    0x5dd267(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   209c9:	48 c7 05 7c 2f 73 00 	movq   $0x1,0x732f7c(%rip)        # 753950 <cmpPassed>
   209d0:	01 00 00 00 
   209d4:	e8 9f 4e fe ff       	callq  5878 <_storeDataFn>
   209d9:	48 39 c1             	cmp    %rax,%rcx
   209dc:	0f 87 16 01 00 00    	ja     20af8 <quote+0x318>
   209e2:	50                   	push   %rax
   209e3:	48 b8 e5 6b 50 84 00 	movabs $0x84506be5,%rax
   209ea:	00 00 00 
   209ed:	48 89 05 4c 2f 73 00 	mov    %rax,0x732f4c(%rip)        # 753940 <edgeId>
   209f4:	58                   	pop    %rax
   209f5:	e8 e6 4d fe ff       	callq  57e0 <_storeEdge>
        if (val != slot0)
   209fa:	48 8d 3d 3f d0 5d 00 	lea    0x5dd03f(%rip),%rdi        # 5fda40 <slot0>
        sv[n].size = size = qsize + 1;
   20a01:	48 8d 70 01          	lea    0x1(%rax),%rsi
        if (val != slot0)
   20a05:	48 89 15 0c 2f 73 00 	mov    %rdx,0x732f0c(%rip)        # 753918 <tmpquadone>
   20a0c:	48 89 0d 1d d2 5d 00 	mov    %rcx,0x5dd21d(%rip)        # 5fdc30 <tmpquadtwo>
   20a13:	48 8d 15 d6 d1 5d 00 	lea    0x5dd1d6(%rip),%rdx        # 5fdbf0 <funcinptr>
   20a1a:	48 c7 02 dc 0a 00 00 	movq   $0xadc,(%rdx)
   20a21:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   20a28:	00 
   20a29:	48 89 f9             	mov    %rdi,%rcx
   20a2c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   20a30:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20a37:	00 
   20a38:	48 89 e9             	mov    %rbp,%rcx
   20a3b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   20a3f:	48 c7 42 28 02 00 00 	movq   $0x2,0x28(%rdx)
   20a46:	00 
   20a47:	ff 32                	pushq  (%rdx)
   20a49:	48 8b 15 c8 2e 73 00 	mov    0x732ec8(%rip),%rdx        # 753918 <tmpquadone>
   20a50:	48 8b 0d d9 d1 5d 00 	mov    0x5dd1d9(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   20a57:	48 c7 05 ee 2e 73 00 	movq   $0x1,0x732eee(%rip)        # 753950 <cmpPassed>
   20a5e:	01 00 00 00 
   20a62:	e8 11 4e fe ff       	callq  5878 <_storeDataFn>
   20a67:	48 39 fd             	cmp    %rdi,%rbp
        sv[n].size = size = qsize + 1;
   20a6a:	48 89 33             	mov    %rsi,(%rbx)
        if (val != slot0)
   20a6d:	74 25                	je     20a94 <quote+0x2b4>
   20a6f:	50                   	push   %rax
   20a70:	48 c7 c0 0d 8a b0 46 	mov    $0x46b08a0d,%rax
   20a77:	48 89 05 c2 2e 73 00 	mov    %rax,0x732ec2(%rip)        # 753940 <edgeId>
   20a7e:	58                   	pop    %rax
   20a7f:	e8 5c 4d fe ff       	callq  57e0 <_storeEdge>
          free (val);
   20a84:	48 89 ef             	mov    %rbp,%rdi
   20a87:	48 89 34 24          	mov    %rsi,(%rsp)
   20a8b:	e8 e0 0d fe ff       	callq  1870 <free@plt>
   20a90:	48 8b 34 24          	mov    (%rsp),%rsi
   20a94:	50                   	push   %rax
   20a95:	48 b8 8a b0 46 87 00 	movabs $0x8746b08a,%rax
   20a9c:	00 00 00 
   20a9f:	48 89 05 9a 2e 73 00 	mov    %rax,0x732e9a(%rip)        # 753940 <edgeId>
   20aa6:	58                   	pop    %rax
   20aa7:	e8 34 4d fe ff       	callq  57e0 <_storeEdge>
   20aac:	48 89 f7             	mov    %rsi,%rdi
   20aaf:	48 89 34 24          	mov    %rsi,(%rsp)
   20ab3:	e8 c8 2d 00 00       	callq  23880 <xmalloc>
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   20ab8:	48 83 ec 08          	sub    $0x8,%rsp
        sv[n].val = val = xcharalloc (size);
   20abc:	48 89 43 08          	mov    %rax,0x8(%rbx)
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
   20ac0:	44 8b 05 59 c5 20 00 	mov    0x20c559(%rip),%r8d        # 22d020 <quote_quoting_options>
   20ac7:	ff 35 83 c5 20 00    	pushq  0x20c583(%rip)        # 22d050 <quote_quoting_options+0x30>
   20acd:	ff 35 75 c5 20 00    	pushq  0x20c575(%rip)        # 22d048 <quote_quoting_options+0x28>
   20ad3:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   20ada:	41 56                	push   %r14
   20adc:	44 8b 4c 24 2c       	mov    0x2c(%rsp),%r9d
   20ae1:	4c 89 ea             	mov    %r13,%rdx
   20ae4:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   20ae9:	48 89 c7             	mov    %rax,%rdi
   20aec:	48 89 c5             	mov    %rax,%rbp
   20aef:	e8 0c 23 ff ff       	callq  12e00 <quotearg_buffer_restyled>
   20af4:	48 83 c4 20          	add    $0x20,%rsp
   20af8:	50                   	push   %rax
   20af9:	48 b8 1b 31 a5 b9 00 	movabs $0xb9a5311b,%rax
   20b00:	00 00 00 
   20b03:	48 89 05 36 2e 73 00 	mov    %rax,0x732e36(%rip)        # 753940 <edgeId>
   20b0a:	58                   	pop    %rax
   20b0b:	e8 d0 4c fe ff       	callq  57e0 <_storeEdge>
    errno = e;
   20b10:	45 89 3c 24          	mov    %r15d,(%r12)
  return quote_n (0, arg);
}
   20b14:	48 83 c4 18          	add    $0x18,%rsp
   20b18:	48 89 e8             	mov    %rbp,%rax
   20b1b:	5b                   	pop    %rbx
   20b1c:	5d                   	pop    %rbp
   20b1d:	41 5c                	pop    %r12
   20b1f:	41 5d                	pop    %r13
   20b21:	41 5e                	pop    %r14
   20b23:	41 5f                	pop    %r15
   20b25:	c3                   	retq   
   20b26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   20b2d:	00 00 00 
   20b30:	50                   	push   %rax
   20b31:	48 c7 c0 99 9e 75 4a 	mov    $0x4a759e99,%rax
   20b38:	48 89 05 01 2e 73 00 	mov    %rax,0x732e01(%rip)        # 753940 <edgeId>
   20b3f:	58                   	pop    %rax
   20b40:	e8 9b 4c fe ff       	callq  57e0 <_storeEdge>
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20b45:	be 10 00 00 00       	mov    $0x10,%esi
   20b4a:	31 ff                	xor    %edi,%edi
   20b4c:	e8 af 2d 00 00       	callq  23900 <xrealloc>
        *sv = slotvec0;
   20b51:	66 0f 6f 05 17 c5 20 	movdqa 0x20c517(%rip),%xmm0        # 22d070 <slotvec0>
   20b58:	00 
      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
   20b59:	48 89 c3             	mov    %rax,%rbx
   20b5c:	48 89 05 fd c4 20 00 	mov    %rax,0x20c4fd(%rip)        # 22d060 <slotvec>
        *sv = slotvec0;
   20b63:	0f 11 00             	movups %xmm0,(%rax)
   20b66:	e9 5c fd ff ff       	jmpq   208c7 <quote+0xe7>
   20b6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020b70 <version_etc_arn>:
void
version_etc_arn (FILE *stream,
                 const char *command_name, const char *package,
                 const char *version,
                 const char * const * authors, size_t n_authors)
{
   20b70:	41 57                	push   %r15
   20b72:	41 56                	push   %r14
   20b74:	41 55                	push   %r13
   20b76:	41 54                	push   %r12
   20b78:	4d 89 cc             	mov    %r9,%r12
   20b7b:	55                   	push   %rbp
   20b7c:	53                   	push   %rbx
   20b7d:	48 89 fd             	mov    %rdi,%rbp
   20b80:	4c 89 c3             	mov    %r8,%rbx
   20b83:	48 83 ec 28          	sub    $0x28,%rsp
  if (command_name)
   20b87:	48 85 f6             	test   %rsi,%rsi
   20b8a:	0f 84 38 01 00 00    	je     20cc8 <version_etc_arn+0x158>
   20b90:	50                   	push   %rax
   20b91:	48 c7 c0 69 d9 4c 3f 	mov    $0x3f4cd969,%rax
   20b98:	48 89 05 a1 2d 73 00 	mov    %rax,0x732da1(%rip)        # 753940 <edgeId>
   20b9f:	58                   	pop    %rax
   20ba0:	e8 63 53 fe ff       	callq  5f08 <_storeEdge>
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
   20ba5:	49 89 d0             	mov    %rdx,%r8
   20ba8:	48 8d 15 11 92 00 00 	lea    0x9211(%rip),%rdx        # 29dc0 <quoting_style_vals+0x20>
   20baf:	49 89 c9             	mov    %rcx,%r9
   20bb2:	31 c0                	xor    %eax,%eax
   20bb4:	48 89 f1             	mov    %rsi,%rcx
   20bb7:	be 01 00 00 00       	mov    $0x1,%esi
   20bbc:	e8 5f 10 fe ff       	callq  1c20 <__fprintf_chk@plt>
   20bc1:	50                   	push   %rax
   20bc2:	48 b8 e9 47 7a 9d 00 	movabs $0x9d7a47e9,%rax
   20bc9:	00 00 00 
   20bcc:	48 89 05 6d 2d 73 00 	mov    %rax,0x732d6d(%rip)        # 753940 <edgeId>
   20bd3:	58                   	pop    %rax
   20bd4:	e8 2f 53 fe ff       	callq  5f08 <_storeEdge>
#endif

  /* TRANSLATORS: Translate "(C)" to the copyright symbol
     (C-in-a-circle), if this symbol is available in the user's
     locale.  Otherwise, do not translate "(C)"; leave it as-is.  */
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
   20bd9:	48 8d 35 f3 91 00 00 	lea    0x91f3(%rip),%rsi        # 29dd3 <quoting_style_vals+0x33>
   20be0:	31 ff                	xor    %edi,%edi
   20be2:	ba 05 00 00 00       	mov    $0x5,%edx
   20be7:	e8 34 0d fe ff       	callq  1920 <dcgettext@plt>
   20bec:	48 8d 15 cd 95 00 00 	lea    0x95cd(%rip),%rdx        # 2a1c0 <version_etc_copyright>
   20bf3:	48 89 c1             	mov    %rax,%rcx
   20bf6:	41 b8 df 07 00 00    	mov    $0x7df,%r8d
   20bfc:	be 01 00 00 00       	mov    $0x1,%esi
   20c01:	48 89 ef             	mov    %rbp,%rdi
   20c04:	31 c0                	xor    %eax,%eax
   20c06:	e8 15 10 fe ff       	callq  1c20 <__fprintf_chk@plt>

  fputs (_("\
   20c0b:	48 8d 35 4e 92 00 00 	lea    0x924e(%rip),%rsi        # 29e60 <quoting_style_vals+0xc0>
   20c12:	31 ff                	xor    %edi,%edi
   20c14:	ba 05 00 00 00       	mov    $0x5,%edx
   20c19:	e8 02 0d fe ff       	callq  1920 <dcgettext@plt>
   20c1e:	48 89 ee             	mov    %rbp,%rsi
   20c21:	48 89 c7             	mov    %rax,%rdi
   20c24:	e8 37 0e fe ff       	callq  1a60 <fputs_unlocked@plt>
There is NO WARRANTY, to the extent permitted by law.\n\
\n\
"),
         stream);

  switch (n_authors)
   20c29:	48 89 15 e8 2c 73 00 	mov    %rdx,0x732ce8(%rip)        # 753918 <tmpquadone>
   20c30:	48 89 0d f9 cf 5d 00 	mov    %rcx,0x5dcff9(%rip)        # 5fdc30 <tmpquadtwo>
   20c37:	48 8d 15 b2 cf 5d 00 	lea    0x5dcfb2(%rip),%rdx        # 5fdbf0 <funcinptr>
   20c3e:	48 c7 02 42 0e 00 00 	movq   $0xe42,(%rdx)
   20c45:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   20c4c:	00 
   20c4d:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   20c54:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   20c58:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   20c5f:	00 
   20c60:	4c 89 e1             	mov    %r12,%rcx
   20c63:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   20c67:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   20c6e:	00 
   20c6f:	ff 32                	pushq  (%rdx)
   20c71:	48 8b 15 a0 2c 73 00 	mov    0x732ca0(%rip),%rdx        # 753918 <tmpquadone>
   20c78:	48 8b 0d b1 cf 5d 00 	mov    0x5dcfb1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   20c7f:	48 c7 05 c6 2c 73 00 	movq   $0x1,0x732cc6(%rip)        # 753950 <cmpPassed>
   20c86:	01 00 00 00 
   20c8a:	e8 11 53 fe ff       	callq  5fa0 <_storeDataFn>
   20c8f:	49 83 fc 09          	cmp    $0x9,%r12
   20c93:	0f 87 87 04 00 00    	ja     21120 <version_etc_arn+0x5b0>
   20c99:	50                   	push   %rax
   20c9a:	48 b8 b2 75 ab 85 00 	movabs $0x85ab75b2,%rax
   20ca1:	00 00 00 
   20ca4:	48 89 05 95 2c 73 00 	mov    %rax,0x732c95(%rip)        # 753940 <edgeId>
   20cab:	58                   	pop    %rax
   20cac:	e8 57 52 fe ff       	callq  5f08 <_storeEdge>
   20cb1:	48 8d 15 00 94 00 00 	lea    0x9400(%rip),%rdx        # 2a0b8 <quoting_style_vals+0x318>
   20cb8:	4a 63 04 a2          	movslq (%rdx,%r12,4),%rax
   20cbc:	48 01 d0             	add    %rdx,%rax
   20cbf:	ff e0                	jmpq   *%rax
   20cc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   20cc8:	50                   	push   %rax
   20cc9:	48 c7 c0 0b 09 af 43 	mov    $0x43af090b,%rax
   20cd0:	48 89 05 69 2c 73 00 	mov    %rax,0x732c69(%rip)        # 753940 <edgeId>
   20cd7:	58                   	pop    %rax
   20cd8:	e8 2b 52 fe ff       	callq  5f08 <_storeEdge>
   20cdd:	49 89 c8             	mov    %rcx,%r8
   20ce0:	48 89 d1             	mov    %rdx,%rcx
   20ce3:	48 8d 15 e2 90 00 00 	lea    0x90e2(%rip),%rdx        # 29dcc <quoting_style_vals+0x2c>
   20cea:	be 01 00 00 00       	mov    $0x1,%esi
   20cef:	31 c0                	xor    %eax,%eax
   20cf1:	e8 2a 0f fe ff       	callq  1c20 <__fprintf_chk@plt>
   20cf6:	e9 c6 fe ff ff       	jmpq   20bc1 <version_etc_arn+0x51>
   20cfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   20d00:	50                   	push   %rax
   20d01:	48 b8 eb 50 86 87 00 	movabs $0x878650eb,%rax
   20d08:	00 00 00 
   20d0b:	48 89 05 2e 2c 73 00 	mov    %rax,0x732c2e(%rip)        # 753940 <edgeId>
   20d12:	58                   	pop    %rax
   20d13:	e8 f0 51 fe ff       	callq  5f08 <_storeEdge>
      break;
    case 8:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
   20d18:	4c 8b 4b 38          	mov    0x38(%rbx),%r9
   20d1c:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
   20d20:	48 8d 35 a9 92 00 00 	lea    0x92a9(%rip),%rsi        # 29fd0 <quoting_style_vals+0x230>
   20d27:	4c 8b 43 08          	mov    0x8(%rbx),%r8
   20d2b:	ba 05 00 00 00       	mov    $0x5,%edx
   20d30:	31 ff                	xor    %edi,%edi
   20d32:	4c 8b 6b 30          	mov    0x30(%rbx),%r13
   20d36:	4c 8b 63 28          	mov    0x28(%rbx),%r12
   20d3a:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
   20d3f:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   20d43:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   20d47:	48 89 0c 24          	mov    %rcx,(%rsp)
   20d4b:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   20d50:	48 8b 1b             	mov    (%rbx),%rbx
   20d53:	e8 c8 0b fe ff       	callq  1920 <dcgettext@plt>
   20d58:	48 83 ec 08          	sub    $0x8,%rsp
   20d5c:	50                   	push   %rax
   20d5d:	48 b8 58 2e 8a f4 00 	movabs $0xf48a2e58,%rax
   20d64:	00 00 00 
   20d67:	48 89 05 d2 2b 73 00 	mov    %rax,0x732bd2(%rip)        # 753940 <edgeId>
   20d6e:	58                   	pop    %rax
   20d6f:	e8 94 51 fe ff       	callq  5f08 <_storeEdge>
   20d74:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
   20d79:	48 89 d9             	mov    %rbx,%rcx
   20d7c:	48 89 c2             	mov    %rax,%rdx
   20d7f:	48 89 ef             	mov    %rbp,%rdi
   20d82:	be 01 00 00 00       	mov    $0x1,%esi
   20d87:	31 c0                	xor    %eax,%eax
   20d89:	41 53                	push   %r11
   20d8b:	41 55                	push   %r13
   20d8d:	41 54                	push   %r12
   20d8f:	41 57                	push   %r15
   20d91:	41 56                	push   %r14
   20d93:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
   20d98:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
   20d9d:	e8 7e 0e fe ff       	callq  1c20 <__fprintf_chk@plt>
   20da2:	48 83 c4 30          	add    $0x30,%rsp
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
   20da6:	48 83 c4 28          	add    $0x28,%rsp
   20daa:	5b                   	pop    %rbx
   20dab:	5d                   	pop    %rbp
   20dac:	41 5c                	pop    %r12
   20dae:	41 5d                	pop    %r13
   20db0:	41 5e                	pop    %r14
   20db2:	41 5f                	pop    %r15
   20db4:	c3                   	retq   
   20db5:	0f 1f 00             	nopl   (%rax)
   20db8:	50                   	push   %rax
   20db9:	48 b8 45 5b ad f5 00 	movabs $0xf5ad5b45,%rax
   20dc0:	00 00 00 
   20dc3:	48 89 05 76 2b 73 00 	mov    %rax,0x732b76(%rip)        # 753940 <edgeId>
   20dca:	58                   	pop    %rax
   20dcb:	e8 38 51 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   20dd0:	48 8b 53 38          	mov    0x38(%rbx),%rdx
   20dd4:	4c 8b 5b 40          	mov    0x40(%rbx),%r11
   20dd8:	48 8d 35 21 92 00 00 	lea    0x9221(%rip),%rsi        # 2a000 <quoting_style_vals+0x260>
   20ddf:	48 8b 43 10          	mov    0x10(%rbx),%rax
   20de3:	4c 8b 4b 08          	mov    0x8(%rbx),%r9
   20de7:	4c 8b 6b 30          	mov    0x30(%rbx),%r13
   20deb:	4c 8b 63 28          	mov    0x28(%rbx),%r12
   20def:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   20df3:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   20df7:	48 8b 1b             	mov    (%rbx),%rbx
   20dfa:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
   20dff:	ba 05 00 00 00       	mov    $0x5,%edx
   20e04:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
   20e09:	48 89 04 24          	mov    %rax,(%rsp)
   20e0d:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
   20e12:	50                   	push   %rax
   20e13:	48 b8 5a 9f 52 fe 00 	movabs $0xfe529f5a,%rax
   20e1a:	00 00 00 
   20e1d:	48 89 05 1c 2b 73 00 	mov    %rax,0x732b1c(%rip)        # 753940 <edgeId>
   20e24:	58                   	pop    %rax
   20e25:	e8 de 50 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   20e2a:	31 ff                	xor    %edi,%edi
   20e2c:	e8 ef 0a fe ff       	callq  1920 <dcgettext@plt>
   20e31:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
   20e36:	41 52                	push   %r10
   20e38:	e9 1f ff ff ff       	jmpq   20d5c <version_etc_arn+0x1ec>
   20e3d:	0f 1f 00             	nopl   (%rax)
   20e40:	50                   	push   %rax
   20e41:	48 b8 52 fe 48 a1 00 	movabs $0xa148fe52,%rax
   20e48:	00 00 00 
   20e4b:	48 89 05 ee 2a 73 00 	mov    %rax,0x732aee(%rip)        # 753940 <edgeId>
   20e52:	58                   	pop    %rax
   20e53:	e8 b0 50 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s.\n"), authors[0]);
   20e58:	4c 8b 3b             	mov    (%rbx),%r15
   20e5b:	48 8d 35 75 8f 00 00 	lea    0x8f75(%rip),%rsi        # 29dd7 <quoting_style_vals+0x37>
   20e62:	ba 05 00 00 00       	mov    $0x5,%edx
   20e67:	31 ff                	xor    %edi,%edi
   20e69:	e8 b2 0a fe ff       	callq  1920 <dcgettext@plt>
}
   20e6e:	48 83 c4 28          	add    $0x28,%rsp
   20e72:	4c 89 f9             	mov    %r15,%rcx
   20e75:	48 89 ef             	mov    %rbp,%rdi
   20e78:	5b                   	pop    %rbx
   20e79:	5d                   	pop    %rbp
   20e7a:	41 5c                	pop    %r12
   20e7c:	41 5d                	pop    %r13
   20e7e:	41 5e                	pop    %r14
   20e80:	41 5f                	pop    %r15
   20e82:	48 89 c2             	mov    %rax,%rdx
   20e85:	be 01 00 00 00       	mov    $0x1,%esi
   20e8a:	31 c0                	xor    %eax,%eax
   20e8c:	e9 8f 0d fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   20e91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   20e98:	50                   	push   %rax
   20e99:	48 c7 c0 14 e1 8b 4f 	mov    $0x4f8be114,%rax
   20ea0:	48 89 05 99 2a 73 00 	mov    %rax,0x732a99(%rip)        # 753940 <edgeId>
   20ea7:	58                   	pop    %rax
   20ea8:	e8 5b 50 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
   20ead:	4c 8b 63 08          	mov    0x8(%rbx),%r12
   20eb1:	48 8d 35 2f 8f 00 00 	lea    0x8f2f(%rip),%rsi        # 29de7 <quoting_style_vals+0x47>
   20eb8:	48 8b 1b             	mov    (%rbx),%rbx
   20ebb:	ba 05 00 00 00       	mov    $0x5,%edx
   20ec0:	31 ff                	xor    %edi,%edi
   20ec2:	e8 59 0a fe ff       	callq  1920 <dcgettext@plt>
}
   20ec7:	48 83 c4 28          	add    $0x28,%rsp
   20ecb:	4d 89 e0             	mov    %r12,%r8
   20ece:	48 89 d9             	mov    %rbx,%rcx
   20ed1:	48 89 ef             	mov    %rbp,%rdi
   20ed4:	48 89 c2             	mov    %rax,%rdx
   20ed7:	be 01 00 00 00       	mov    $0x1,%esi
   20edc:	5b                   	pop    %rbx
   20edd:	5d                   	pop    %rbp
   20ede:	41 5c                	pop    %r12
   20ee0:	41 5d                	pop    %r13
   20ee2:	41 5e                	pop    %r14
   20ee4:	41 5f                	pop    %r15
   20ee6:	31 c0                	xor    %eax,%eax
   20ee8:	e9 33 0d fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   20eed:	0f 1f 00             	nopl   (%rax)
   20ef0:	50                   	push   %rax
   20ef1:	48 c7 c0 25 09 03 1e 	mov    $0x1e030925,%rax
   20ef8:	48 89 05 41 2a 73 00 	mov    %rax,0x732a41(%rip)        # 753940 <edgeId>
   20eff:	58                   	pop    %rax
   20f00:	e8 03 50 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
   20f05:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
   20f09:	4c 8b 73 08          	mov    0x8(%rbx),%r14
   20f0d:	48 8d 35 ea 8e 00 00 	lea    0x8eea(%rip),%rsi        # 29dfe <quoting_style_vals+0x5e>
   20f14:	4c 8b 2b             	mov    (%rbx),%r13
   20f17:	ba 05 00 00 00       	mov    $0x5,%edx
   20f1c:	31 ff                	xor    %edi,%edi
   20f1e:	e8 fd 09 fe ff       	callq  1920 <dcgettext@plt>
}
   20f23:	48 83 c4 28          	add    $0x28,%rsp
   20f27:	4d 89 f9             	mov    %r15,%r9
   20f2a:	4d 89 f0             	mov    %r14,%r8
   20f2d:	5b                   	pop    %rbx
   20f2e:	4c 89 e9             	mov    %r13,%rcx
   20f31:	48 89 ef             	mov    %rbp,%rdi
   20f34:	48 89 c2             	mov    %rax,%rdx
   20f37:	5d                   	pop    %rbp
   20f38:	41 5c                	pop    %r12
   20f3a:	41 5d                	pop    %r13
   20f3c:	41 5e                	pop    %r14
   20f3e:	41 5f                	pop    %r15
   20f40:	be 01 00 00 00       	mov    $0x1,%esi
   20f45:	31 c0                	xor    %eax,%eax
   20f47:	e9 d4 0c fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   20f4c:	0f 1f 40 00          	nopl   0x0(%rax)
   20f50:	50                   	push   %rax
   20f51:	48 b8 3b b8 4d d1 00 	movabs $0xd14db83b,%rax
   20f58:	00 00 00 
   20f5b:	48 89 05 de 29 73 00 	mov    %rax,0x7329de(%rip)        # 753940 <edgeId>
   20f62:	58                   	pop    %rax
   20f63:	e8 a0 4f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
   20f68:	48 8d 35 c1 8f 00 00 	lea    0x8fc1(%rip),%rsi        # 29f30 <quoting_style_vals+0x190>
   20f6f:	ba 05 00 00 00       	mov    $0x5,%edx
   20f74:	31 ff                	xor    %edi,%edi
   20f76:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   20f7a:	4c 8b 6b 10          	mov    0x10(%rbx),%r13
   20f7e:	4c 8b 63 08          	mov    0x8(%rbx),%r12
   20f82:	48 8b 1b             	mov    (%rbx),%rbx
   20f85:	e8 96 09 fe ff       	callq  1920 <dcgettext@plt>
   20f8a:	48 83 ec 08          	sub    $0x8,%rsp
   20f8e:	50                   	push   %rax
   20f8f:	48 b8 45 47 1d a7 00 	movabs $0xa71d4745,%rax
   20f96:	00 00 00 
   20f99:	48 89 05 a0 29 73 00 	mov    %rax,0x7329a0(%rip)        # 753940 <edgeId>
   20fa0:	58                   	pop    %rax
   20fa1:	e8 62 4f fe ff       	callq  5f08 <_storeEdge>
   20fa6:	41 56                	push   %r14
   20fa8:	48 89 c2             	mov    %rax,%rdx
   20fab:	4d 89 e9             	mov    %r13,%r9
   20fae:	4d 89 e0             	mov    %r12,%r8
   20fb1:	48 89 d9             	mov    %rbx,%rcx
   20fb4:	48 89 ef             	mov    %rbp,%rdi
   20fb7:	be 01 00 00 00       	mov    $0x1,%esi
   20fbc:	31 c0                	xor    %eax,%eax
   20fbe:	e8 5d 0c fe ff       	callq  1c20 <__fprintf_chk@plt>
   20fc3:	58                   	pop    %rax
   20fc4:	5a                   	pop    %rdx
}
   20fc5:	48 83 c4 28          	add    $0x28,%rsp
   20fc9:	5b                   	pop    %rbx
   20fca:	5d                   	pop    %rbp
   20fcb:	41 5c                	pop    %r12
   20fcd:	41 5d                	pop    %r13
   20fcf:	41 5e                	pop    %r14
   20fd1:	41 5f                	pop    %r15
   20fd3:	c3                   	retq   
   20fd4:	0f 1f 40 00          	nopl   0x0(%rax)
   20fd8:	50                   	push   %rax
   20fd9:	48 b8 ce 1f a2 c3 00 	movabs $0xc3a21fce,%rax
   20fe0:	00 00 00 
   20fe3:	48 89 05 56 29 73 00 	mov    %rax,0x732956(%rip)        # 753940 <edgeId>
   20fea:	58                   	pop    %rax
   20feb:	e8 18 4f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
   20ff0:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   20ff4:	48 8d 35 55 8f 00 00 	lea    0x8f55(%rip),%rsi        # 29f50 <quoting_style_vals+0x1b0>
   20ffb:	ba 05 00 00 00       	mov    $0x5,%edx
   21000:	31 ff                	xor    %edi,%edi
   21002:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   21006:	4c 8b 6b 10          	mov    0x10(%rbx),%r13
   2100a:	4c 8b 63 08          	mov    0x8(%rbx),%r12
   2100e:	48 8b 1b             	mov    (%rbx),%rbx
   21011:	e8 0a 09 fe ff       	callq  1920 <dcgettext@plt>
   21016:	41 57                	push   %r15
   21018:	e9 71 ff ff ff       	jmpq   20f8e <version_etc_arn+0x41e>
   2101d:	0f 1f 00             	nopl   (%rax)
   21020:	50                   	push   %rax
   21021:	48 c7 c0 61 7c dd 45 	mov    $0x45dd7c61,%rax
   21028:	48 89 05 11 29 73 00 	mov    %rax,0x732911(%rip)        # 753940 <edgeId>
   2102f:	58                   	pop    %rax
   21030:	e8 d3 4e fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
   21035:	4c 8b 53 08          	mov    0x8(%rbx),%r10
   21039:	4c 8b 63 28          	mov    0x28(%rbx),%r12
   2103d:	48 8d 35 34 8f 00 00 	lea    0x8f34(%rip),%rsi        # 29f78 <quoting_style_vals+0x1d8>
   21044:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   21048:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   2104c:	ba 05 00 00 00       	mov    $0x5,%edx
   21051:	4c 8b 6b 10          	mov    0x10(%rbx),%r13
   21055:	31 ff                	xor    %edi,%edi
   21057:	48 8b 1b             	mov    (%rbx),%rbx
   2105a:	4c 89 14 24          	mov    %r10,(%rsp)
   2105e:	e8 bd 08 fe ff       	callq  1920 <dcgettext@plt>
   21063:	48 83 ec 08          	sub    $0x8,%rsp
   21067:	4d 89 e9             	mov    %r13,%r9
   2106a:	41 54                	push   %r12
   2106c:	41 57                	push   %r15
   2106e:	41 56                	push   %r14
   21070:	50                   	push   %rax
   21071:	48 b8 22 6a fc a3 00 	movabs $0xa3fc6a22,%rax
   21078:	00 00 00 
   2107b:	48 89 05 be 28 73 00 	mov    %rax,0x7328be(%rip)        # 753940 <edgeId>
   21082:	58                   	pop    %rax
   21083:	e8 80 4e fe ff       	callq  5f08 <_storeEdge>
   21088:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
   2108d:	48 89 d9             	mov    %rbx,%rcx
   21090:	48 89 c2             	mov    %rax,%rdx
   21093:	48 89 ef             	mov    %rbp,%rdi
   21096:	be 01 00 00 00       	mov    $0x1,%esi
   2109b:	31 c0                	xor    %eax,%eax
   2109d:	e8 7e 0b fe ff       	callq  1c20 <__fprintf_chk@plt>
   210a2:	48 83 c4 20          	add    $0x20,%rsp
}
   210a6:	48 83 c4 28          	add    $0x28,%rsp
   210aa:	5b                   	pop    %rbx
   210ab:	5d                   	pop    %rbp
   210ac:	41 5c                	pop    %r12
   210ae:	41 5d                	pop    %r13
   210b0:	41 5e                	pop    %r14
   210b2:	41 5f                	pop    %r15
   210b4:	c3                   	retq   
   210b5:	0f 1f 00             	nopl   (%rax)
   210b8:	50                   	push   %rax
   210b9:	48 b8 d4 8c f0 ff 00 	movabs $0xfff08cd4,%rax
   210c0:	00 00 00 
   210c3:	48 89 05 76 28 73 00 	mov    %rax,0x732876(%rip)        # 753940 <edgeId>
   210ca:	58                   	pop    %rax
   210cb:	e8 38 4e fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
   210d0:	48 8b 73 10          	mov    0x10(%rbx),%rsi
   210d4:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   210d8:	ba 05 00 00 00       	mov    $0x5,%edx
   210dd:	4c 8b 6b 30          	mov    0x30(%rbx),%r13
   210e1:	4c 8b 63 28          	mov    0x28(%rbx),%r12
   210e5:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   210e9:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   210ed:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   210f2:	48 8d 35 a7 8e 00 00 	lea    0x8ea7(%rip),%rsi        # 29fa0 <quoting_style_vals+0x200>
   210f9:	48 89 3c 24          	mov    %rdi,(%rsp)
   210fd:	31 ff                	xor    %edi,%edi
   210ff:	48 8b 1b             	mov    (%rbx),%rbx
   21102:	e8 19 08 fe ff       	callq  1920 <dcgettext@plt>
   21107:	41 55                	push   %r13
   21109:	41 54                	push   %r12
   2110b:	41 57                	push   %r15
   2110d:	41 56                	push   %r14
   2110f:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
   21114:	e9 57 ff ff ff       	jmpq   21070 <version_etc_arn+0x500>
   21119:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   21120:	50                   	push   %rax
   21121:	48 b8 15 a7 b6 db 00 	movabs $0xdbb6a715,%rax
   21128:	00 00 00 
   2112b:	48 89 05 0e 28 73 00 	mov    %rax,0x73280e(%rip)        # 753940 <edgeId>
   21132:	58                   	pop    %rax
   21133:	e8 d0 4d fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   21138:	48 8b 73 10          	mov    0x10(%rbx),%rsi
   2113c:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
   21140:	ba 05 00 00 00       	mov    $0x5,%edx
   21145:	4c 8b 43 38          	mov    0x38(%rbx),%r8
   21149:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   2114d:	4c 8b 6b 30          	mov    0x30(%rbx),%r13
   21151:	4c 8b 63 28          	mov    0x28(%rbx),%r12
   21155:	4c 8b 7b 20          	mov    0x20(%rbx),%r15
   21159:	4c 8b 73 18          	mov    0x18(%rbx),%r14
   2115d:	48 89 34 24          	mov    %rsi,(%rsp)
   21161:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   21166:	48 8d 35 cb 8e 00 00 	lea    0x8ecb(%rip),%rsi        # 2a038 <quoting_style_vals+0x298>
   2116d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
   21172:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   21177:	48 8b 1b             	mov    (%rbx),%rbx
   2117a:	e9 93 fc ff ff       	jmpq   20e12 <version_etc_arn+0x2a2>
   2117f:	50                   	push   %rax
   21180:	48 b8 db 24 a7 9f 00 	movabs $0x9fa724db,%rax
   21187:	00 00 00 
   2118a:	48 89 05 af 27 73 00 	mov    %rax,0x7327af(%rip)        # 753940 <edgeId>
   21191:	58                   	pop    %rax
   21192:	e8 71 4d fe ff       	callq  5f08 <_storeEdge>
      abort ();
   21197:	e8 e4 06 fe ff       	callq  1880 <abort@plt>
   2119c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000211a0 <version_etc_ar>:
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
   211a0:	41 57                	push   %r15
   211a2:	41 56                	push   %r14
   211a4:	41 55                	push   %r13
   211a6:	41 54                	push   %r12
   211a8:	49 89 fc             	mov    %rdi,%r12
   211ab:	55                   	push   %rbp
   211ac:	53                   	push   %rbx
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
   211ad:	31 db                	xor    %ebx,%ebx
{
   211af:	4c 89 c5             	mov    %r8,%rbp
   211b2:	48 83 ec 28          	sub    $0x28,%rsp
  for (n_authors = 0; authors[n_authors]; n_authors++)
   211b6:	48 89 15 5b 27 73 00 	mov    %rdx,0x73275b(%rip)        # 753918 <tmpquadone>
   211bd:	48 89 0d 6c ca 5d 00 	mov    %rcx,0x5dca6c(%rip)        # 5fdc30 <tmpquadtwo>
   211c4:	48 8d 15 25 ca 5d 00 	lea    0x5dca25(%rip),%rdx        # 5fdbf0 <funcinptr>
   211cb:	48 c7 02 43 0e 00 00 	movq   $0xe43,(%rdx)
   211d2:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   211d9:	00 
   211da:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   211e1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   211e5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   211ec:	00 
   211ed:	49 8b 08             	mov    (%r8),%rcx
   211f0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   211f4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   211fb:	00 
   211fc:	ff 32                	pushq  (%rdx)
   211fe:	48 8b 15 13 27 73 00 	mov    0x732713(%rip),%rdx        # 753918 <tmpquadone>
   21205:	48 8b 0d 24 ca 5d 00 	mov    0x5dca24(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2120c:	48 c7 05 39 27 73 00 	movq   $0x1,0x732739(%rip)        # 753950 <cmpPassed>
   21213:	01 00 00 00 
   21217:	e8 84 4d fe ff       	callq  5fa0 <_storeDataFn>
   2121c:	49 83 38 00          	cmpq   $0x0,(%r8)
   21220:	0f 84 bc 00 00 00    	je     212e2 <version_etc_ar+0x142>
   21226:	50                   	push   %rax
   21227:	48 b8 8c c0 b9 d1 00 	movabs $0xd1b9c08c,%rax
   2122e:	00 00 00 
   21231:	48 89 05 08 27 73 00 	mov    %rax,0x732708(%rip)        # 753940 <edgeId>
   21238:	58                   	pop    %rax
   21239:	e8 ca 4c fe ff       	callq  5f08 <_storeEdge>
   2123e:	66 90                	xchg   %ax,%ax
   21240:	50                   	push   %rax
   21241:	48 c7 c0 08 9c 1b 1d 	mov    $0x1d1b9c08,%rax
   21248:	48 89 05 f1 26 73 00 	mov    %rax,0x7326f1(%rip)        # 753940 <edgeId>
   2124f:	58                   	pop    %rax
   21250:	e8 b3 4c fe ff       	callq  5f08 <_storeEdge>
   21255:	48 83 c3 01          	add    $0x1,%rbx
   21259:	48 89 15 b8 26 73 00 	mov    %rdx,0x7326b8(%rip)        # 753918 <tmpquadone>
   21260:	48 89 0d c9 c9 5d 00 	mov    %rcx,0x5dc9c9(%rip)        # 5fdc30 <tmpquadtwo>
   21267:	48 8d 15 82 c9 5d 00 	lea    0x5dc982(%rip),%rdx        # 5fdbf0 <funcinptr>
   2126e:	48 c7 02 44 0e 00 00 	movq   $0xe44,(%rdx)
   21275:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   2127c:	00 
   2127d:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   21284:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21288:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2128f:	00 
   21290:	48 8b 4c dd 00       	mov    0x0(%rbp,%rbx,8),%rcx
   21295:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21299:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   212a0:	00 
   212a1:	ff 32                	pushq  (%rdx)
   212a3:	48 8b 15 6e 26 73 00 	mov    0x73266e(%rip),%rdx        # 753918 <tmpquadone>
   212aa:	48 8b 0d 7f c9 5d 00 	mov    0x5dc97f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   212b1:	48 c7 05 94 26 73 00 	movq   $0x1,0x732694(%rip)        # 753950 <cmpPassed>
   212b8:	01 00 00 00 
   212bc:	e8 df 4c fe ff       	callq  5fa0 <_storeDataFn>
   212c1:	48 83 7c dd 00 00    	cmpq   $0x0,0x0(%rbp,%rbx,8)
   212c7:	0f 85 73 ff ff ff    	jne    21240 <version_etc_ar+0xa0>
   212cd:	50                   	push   %rax
   212ce:	48 c7 c0 e0 dc e8 20 	mov    $0x20e8dce0,%rax
   212d5:	48 89 05 64 26 73 00 	mov    %rax,0x732664(%rip)        # 753940 <edgeId>
   212dc:	58                   	pop    %rax
   212dd:	e8 26 4c fe ff       	callq  5f08 <_storeEdge>
   212e2:	50                   	push   %rax
   212e3:	48 b8 38 37 3a c8 00 	movabs $0xc83a3738,%rax
   212ea:	00 00 00 
   212ed:	48 89 05 4c 26 73 00 	mov    %rax,0x73264c(%rip)        # 753940 <edgeId>
   212f4:	58                   	pop    %rax
   212f5:	e8 0e 4c fe ff       	callq  5f08 <_storeEdge>
  if (command_name)
   212fa:	48 85 f6             	test   %rsi,%rsi
   212fd:	0f 84 3d 01 00 00    	je     21440 <version_etc_ar+0x2a0>
   21303:	50                   	push   %rax
   21304:	48 b8 b9 d1 41 f6 00 	movabs $0xf641d1b9,%rax
   2130b:	00 00 00 
   2130e:	48 89 05 2b 26 73 00 	mov    %rax,0x73262b(%rip)        # 753940 <edgeId>
   21315:	58                   	pop    %rax
   21316:	e8 ed 4b fe ff       	callq  5f08 <_storeEdge>
   2131b:	49 89 d0             	mov    %rdx,%r8
   2131e:	48 8d 15 9b 8a 00 00 	lea    0x8a9b(%rip),%rdx        # 29dc0 <quoting_style_vals+0x20>
   21325:	49 89 c9             	mov    %rcx,%r9
   21328:	4c 89 e7             	mov    %r12,%rdi
   2132b:	48 89 f1             	mov    %rsi,%rcx
   2132e:	31 c0                	xor    %eax,%eax
   21330:	be 01 00 00 00       	mov    $0x1,%esi
   21335:	e8 e6 08 fe ff       	callq  1c20 <__fprintf_chk@plt>
   2133a:	50                   	push   %rax
   2133b:	48 c7 c0 90 bd d2 6c 	mov    $0x6cd2bd90,%rax
   21342:	48 89 05 f7 25 73 00 	mov    %rax,0x7325f7(%rip)        # 753940 <edgeId>
   21349:	58                   	pop    %rax
   2134a:	e8 b9 4b fe ff       	callq  5f08 <_storeEdge>
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
   2134f:	48 8d 35 7d 8a 00 00 	lea    0x8a7d(%rip),%rsi        # 29dd3 <quoting_style_vals+0x33>
   21356:	31 ff                	xor    %edi,%edi
   21358:	ba 05 00 00 00       	mov    $0x5,%edx
   2135d:	e8 be 05 fe ff       	callq  1920 <dcgettext@plt>
   21362:	48 8d 15 57 8e 00 00 	lea    0x8e57(%rip),%rdx        # 2a1c0 <version_etc_copyright>
   21369:	48 89 c1             	mov    %rax,%rcx
   2136c:	41 b8 df 07 00 00    	mov    $0x7df,%r8d
   21372:	be 01 00 00 00       	mov    $0x1,%esi
   21377:	4c 89 e7             	mov    %r12,%rdi
   2137a:	31 c0                	xor    %eax,%eax
   2137c:	e8 9f 08 fe ff       	callq  1c20 <__fprintf_chk@plt>
  fputs (_("\
   21381:	48 8d 35 d8 8a 00 00 	lea    0x8ad8(%rip),%rsi        # 29e60 <quoting_style_vals+0xc0>
   21388:	31 ff                	xor    %edi,%edi
   2138a:	ba 05 00 00 00       	mov    $0x5,%edx
   2138f:	e8 8c 05 fe ff       	callq  1920 <dcgettext@plt>
   21394:	4c 89 e6             	mov    %r12,%rsi
   21397:	48 89 c7             	mov    %rax,%rdi
   2139a:	e8 c1 06 fe ff       	callq  1a60 <fputs_unlocked@plt>
  switch (n_authors)
   2139f:	48 89 15 72 25 73 00 	mov    %rdx,0x732572(%rip)        # 753918 <tmpquadone>
   213a6:	48 89 0d 83 c8 5d 00 	mov    %rcx,0x5dc883(%rip)        # 5fdc30 <tmpquadtwo>
   213ad:	48 8d 15 3c c8 5d 00 	lea    0x5dc83c(%rip),%rdx        # 5fdbf0 <funcinptr>
   213b4:	48 c7 02 45 0e 00 00 	movq   $0xe45,(%rdx)
   213bb:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   213c2:	00 
   213c3:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   213ca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   213ce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   213d5:	00 
   213d6:	48 89 d9             	mov    %rbx,%rcx
   213d9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   213dd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   213e4:	00 
   213e5:	ff 32                	pushq  (%rdx)
   213e7:	48 8b 15 2a 25 73 00 	mov    0x73252a(%rip),%rdx        # 753918 <tmpquadone>
   213ee:	48 8b 0d 3b c8 5d 00 	mov    0x5dc83b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   213f5:	48 c7 05 50 25 73 00 	movq   $0x1,0x732550(%rip)        # 753950 <cmpPassed>
   213fc:	01 00 00 00 
   21400:	e8 9b 4b fe ff       	callq  5fa0 <_storeDataFn>
   21405:	48 83 fb 09          	cmp    $0x9,%rbx
   21409:	0f 87 91 04 00 00    	ja     218a0 <version_etc_ar+0x700>
   2140f:	50                   	push   %rax
   21410:	48 b8 4c d7 30 82 00 	movabs $0x8230d74c,%rax
   21417:	00 00 00 
   2141a:	48 89 05 1f 25 73 00 	mov    %rax,0x73251f(%rip)        # 753940 <edgeId>
   21421:	58                   	pop    %rax
   21422:	e8 e1 4a fe ff       	callq  5f08 <_storeEdge>
   21427:	48 8d 15 ca 8c 00 00 	lea    0x8cca(%rip),%rdx        # 2a0f8 <quoting_style_vals+0x358>
   2142e:	48 63 04 9a          	movslq (%rdx,%rbx,4),%rax
   21432:	48 01 d0             	add    %rdx,%rax
   21435:	ff e0                	jmpq   *%rax
   21437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2143e:	00 00 
   21440:	50                   	push   %rax
   21441:	48 b8 04 5d a4 b7 00 	movabs $0xb7a45d04,%rax
   21448:	00 00 00 
   2144b:	48 89 05 ee 24 73 00 	mov    %rax,0x7324ee(%rip)        # 753940 <edgeId>
   21452:	58                   	pop    %rax
   21453:	e8 b0 4a fe ff       	callq  5f08 <_storeEdge>
   21458:	49 89 c8             	mov    %rcx,%r8
   2145b:	48 89 d1             	mov    %rdx,%rcx
   2145e:	48 8d 15 67 89 00 00 	lea    0x8967(%rip),%rdx        # 29dcc <quoting_style_vals+0x2c>
   21465:	be 01 00 00 00       	mov    $0x1,%esi
   2146a:	4c 89 e7             	mov    %r12,%rdi
   2146d:	31 c0                	xor    %eax,%eax
   2146f:	e8 ac 07 fe ff       	callq  1c20 <__fprintf_chk@plt>
   21474:	e9 c1 fe ff ff       	jmpq   2133a <version_etc_ar+0x19a>
   21479:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   21480:	50                   	push   %rax
   21481:	48 b8 7a 2b 79 ea 00 	movabs $0xea792b7a,%rax
   21488:	00 00 00 
   2148b:	48 89 05 ae 24 73 00 	mov    %rax,0x7324ae(%rip)        # 753940 <edgeId>
   21492:	58                   	pop    %rax
   21493:	e8 70 4a fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   21498:	4c 8b 55 38          	mov    0x38(%rbp),%r10
   2149c:	4c 8b 4d 10          	mov    0x10(%rbp),%r9
   214a0:	48 8d 35 29 8b 00 00 	lea    0x8b29(%rip),%rsi        # 29fd0 <quoting_style_vals+0x230>
   214a7:	4c 8b 45 08          	mov    0x8(%rbp),%r8
   214ab:	ba 05 00 00 00       	mov    $0x5,%edx
   214b0:	31 ff                	xor    %edi,%edi
   214b2:	4c 8b 75 30          	mov    0x30(%rbp),%r14
   214b6:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
   214ba:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
   214bf:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   214c3:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   214c7:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
   214cc:	4c 89 04 24          	mov    %r8,(%rsp)
   214d0:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   214d4:	e8 47 04 fe ff       	callq  1920 <dcgettext@plt>
   214d9:	48 83 ec 08          	sub    $0x8,%rsp
   214dd:	50                   	push   %rax
   214de:	48 c7 c0 1e 62 f9 77 	mov    $0x77f9621e,%rax
   214e5:	48 89 05 54 24 73 00 	mov    %rax,0x732454(%rip)        # 753940 <edgeId>
   214ec:	58                   	pop    %rax
   214ed:	e8 16 4a fe ff       	callq  5f08 <_storeEdge>
   214f2:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
   214f7:	48 89 e9             	mov    %rbp,%rcx
   214fa:	48 89 c2             	mov    %rax,%rdx
   214fd:	4c 89 e7             	mov    %r12,%rdi
   21500:	be 01 00 00 00       	mov    $0x1,%esi
   21505:	31 c0                	xor    %eax,%eax
   21507:	41 53                	push   %r11
   21509:	41 56                	push   %r14
   2150b:	41 55                	push   %r13
   2150d:	53                   	push   %rbx
   2150e:	41 57                	push   %r15
   21510:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
   21515:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
   2151a:	e8 01 07 fe ff       	callq  1c20 <__fprintf_chk@plt>
   2151f:	48 83 c4 30          	add    $0x30,%rsp
    ;
  version_etc_arn (stream, command_name, package, version, authors, n_authors);
}
   21523:	48 83 c4 28          	add    $0x28,%rsp
   21527:	5b                   	pop    %rbx
   21528:	5d                   	pop    %rbp
   21529:	41 5c                	pop    %r12
   2152b:	41 5d                	pop    %r13
   2152d:	41 5e                	pop    %r14
   2152f:	41 5f                	pop    %r15
   21531:	c3                   	retq   
   21532:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   21538:	50                   	push   %rax
   21539:	48 b8 2c 66 79 f4 00 	movabs $0xf479662c,%rax
   21540:	00 00 00 
   21543:	48 89 05 f6 23 73 00 	mov    %rax,0x7323f6(%rip)        # 753940 <edgeId>
   2154a:	58                   	pop    %rax
   2154b:	e8 b8 49 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   21550:	48 8b 55 38          	mov    0x38(%rbp),%rdx
   21554:	4c 8b 5d 40          	mov    0x40(%rbp),%r11
   21558:	48 8d 35 a1 8a 00 00 	lea    0x8aa1(%rip),%rsi        # 2a000 <quoting_style_vals+0x260>
   2155f:	48 8b 45 10          	mov    0x10(%rbp),%rax
   21563:	4c 8b 55 08          	mov    0x8(%rbp),%r10
   21567:	4c 8b 75 30          	mov    0x30(%rbp),%r14
   2156b:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
   2156f:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   21573:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   21577:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   2157b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
   21580:	ba 05 00 00 00       	mov    $0x5,%edx
   21585:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
   2158a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   2158f:	4c 89 14 24          	mov    %r10,(%rsp)
   21593:	50                   	push   %rax
   21594:	48 b8 d1 db e2 89 00 	movabs $0x89e2dbd1,%rax
   2159b:	00 00 00 
   2159e:	48 89 05 9b 23 73 00 	mov    %rax,0x73239b(%rip)        # 753940 <edgeId>
   215a5:	58                   	pop    %rax
   215a6:	e8 5d 49 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   215ab:	31 ff                	xor    %edi,%edi
   215ad:	e8 6e 03 fe ff       	callq  1920 <dcgettext@plt>
   215b2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   215b7:	57                   	push   %rdi
   215b8:	e9 20 ff ff ff       	jmpq   214dd <version_etc_ar+0x33d>
   215bd:	0f 1f 00             	nopl   (%rax)
   215c0:	50                   	push   %rax
   215c1:	48 c7 c0 e2 89 17 43 	mov    $0x431789e2,%rax
   215c8:	48 89 05 71 23 73 00 	mov    %rax,0x732371(%rip)        # 753940 <edgeId>
   215cf:	58                   	pop    %rax
   215d0:	e8 33 49 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s.\n"), authors[0]);
   215d5:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
   215d9:	48 8d 35 f7 87 00 00 	lea    0x87f7(%rip),%rsi        # 29dd7 <quoting_style_vals+0x37>
   215e0:	ba 05 00 00 00       	mov    $0x5,%edx
   215e5:	31 ff                	xor    %edi,%edi
   215e7:	e8 34 03 fe ff       	callq  1920 <dcgettext@plt>
}
   215ec:	48 83 c4 28          	add    $0x28,%rsp
   215f0:	4c 89 f9             	mov    %r15,%rcx
   215f3:	4c 89 e7             	mov    %r12,%rdi
   215f6:	5b                   	pop    %rbx
   215f7:	5d                   	pop    %rbp
   215f8:	41 5c                	pop    %r12
   215fa:	41 5d                	pop    %r13
   215fc:	41 5e                	pop    %r14
   215fe:	41 5f                	pop    %r15
   21600:	48 89 c2             	mov    %rax,%rdx
   21603:	be 01 00 00 00       	mov    $0x1,%esi
   21608:	31 c0                	xor    %eax,%eax
   2160a:	e9 11 06 fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   2160f:	90                   	nop
   21610:	50                   	push   %rax
   21611:	48 b8 35 e8 2b 95 00 	movabs $0x952be835,%rax
   21618:	00 00 00 
   2161b:	48 89 05 1e 23 73 00 	mov    %rax,0x73231e(%rip)        # 753940 <edgeId>
   21622:	58                   	pop    %rax
   21623:	e8 e0 48 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
   21628:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
   2162c:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
   21630:	48 8d 35 b0 87 00 00 	lea    0x87b0(%rip),%rsi        # 29de7 <quoting_style_vals+0x47>
   21637:	ba 05 00 00 00       	mov    $0x5,%edx
   2163c:	31 ff                	xor    %edi,%edi
   2163e:	e8 dd 02 fe ff       	callq  1920 <dcgettext@plt>
}
   21643:	48 83 c4 28          	add    $0x28,%rsp
   21647:	4d 89 e8             	mov    %r13,%r8
   2164a:	48 89 d9             	mov    %rbx,%rcx
   2164d:	4c 89 e7             	mov    %r12,%rdi
   21650:	48 89 c2             	mov    %rax,%rdx
   21653:	be 01 00 00 00       	mov    $0x1,%esi
   21658:	5b                   	pop    %rbx
   21659:	5d                   	pop    %rbp
   2165a:	41 5c                	pop    %r12
   2165c:	41 5d                	pop    %r13
   2165e:	41 5e                	pop    %r14
   21660:	41 5f                	pop    %r15
   21662:	31 c0                	xor    %eax,%eax
   21664:	e9 b7 05 fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   21669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   21670:	50                   	push   %rax
   21671:	48 c7 c0 4d 5f d4 5c 	mov    $0x5cd45f4d,%rax
   21678:	48 89 05 c1 22 73 00 	mov    %rax,0x7322c1(%rip)        # 753940 <edgeId>
   2167f:	58                   	pop    %rax
   21680:	e8 83 48 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
   21685:	4c 8b 7d 10          	mov    0x10(%rbp),%r15
   21689:	4c 8b 75 08          	mov    0x8(%rbp),%r14
   2168d:	48 8d 35 6a 87 00 00 	lea    0x876a(%rip),%rsi        # 29dfe <quoting_style_vals+0x5e>
   21694:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   21698:	ba 05 00 00 00       	mov    $0x5,%edx
   2169d:	31 ff                	xor    %edi,%edi
   2169f:	e8 7c 02 fe ff       	callq  1920 <dcgettext@plt>
}
   216a4:	48 83 c4 28          	add    $0x28,%rsp
   216a8:	4d 89 f9             	mov    %r15,%r9
   216ab:	4d 89 f0             	mov    %r14,%r8
   216ae:	5b                   	pop    %rbx
   216af:	48 89 e9             	mov    %rbp,%rcx
   216b2:	4c 89 e7             	mov    %r12,%rdi
   216b5:	48 89 c2             	mov    %rax,%rdx
   216b8:	5d                   	pop    %rbp
   216b9:	41 5c                	pop    %r12
   216bb:	41 5d                	pop    %r13
   216bd:	41 5e                	pop    %r14
   216bf:	41 5f                	pop    %r15
   216c1:	be 01 00 00 00       	mov    $0x1,%esi
   216c6:	31 c0                	xor    %eax,%eax
   216c8:	e9 53 05 fe ff       	jmpq   1c20 <__fprintf_chk@plt>
   216cd:	0f 1f 00             	nopl   (%rax)
   216d0:	50                   	push   %rax
   216d1:	48 c7 c0 4e c2 5f 38 	mov    $0x385fc24e,%rax
   216d8:	48 89 05 61 22 73 00 	mov    %rax,0x732261(%rip)        # 753940 <edgeId>
   216df:	58                   	pop    %rax
   216e0:	e8 23 48 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
   216e5:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   216e9:	48 8d 35 40 88 00 00 	lea    0x8840(%rip),%rsi        # 29f30 <quoting_style_vals+0x190>
   216f0:	4c 8b 75 10          	mov    0x10(%rbp),%r14
   216f4:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
   216f8:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
   216fc:	ba 05 00 00 00       	mov    $0x5,%edx
   21701:	31 ff                	xor    %edi,%edi
   21703:	e8 18 02 fe ff       	callq  1920 <dcgettext@plt>
   21708:	48 83 ec 08          	sub    $0x8,%rsp
   2170c:	4d 89 f1             	mov    %r14,%r9
   2170f:	4d 89 e8             	mov    %r13,%r8
   21712:	41 57                	push   %r15
   21714:	48 89 d9             	mov    %rbx,%rcx
   21717:	50                   	push   %rax
   21718:	48 c7 c0 4e 3d 64 0d 	mov    $0xd643d4e,%rax
   2171f:	48 89 05 1a 22 73 00 	mov    %rax,0x73221a(%rip)        # 753940 <edgeId>
   21726:	58                   	pop    %rax
   21727:	e8 dc 47 fe ff       	callq  5f08 <_storeEdge>
   2172c:	48 89 c2             	mov    %rax,%rdx
   2172f:	4c 89 e7             	mov    %r12,%rdi
   21732:	be 01 00 00 00       	mov    $0x1,%esi
   21737:	31 c0                	xor    %eax,%eax
   21739:	e8 e2 04 fe ff       	callq  1c20 <__fprintf_chk@plt>
   2173e:	58                   	pop    %rax
   2173f:	5a                   	pop    %rdx
}
   21740:	48 83 c4 28          	add    $0x28,%rsp
   21744:	5b                   	pop    %rbx
   21745:	5d                   	pop    %rbp
   21746:	41 5c                	pop    %r12
   21748:	41 5d                	pop    %r13
   2174a:	41 5e                	pop    %r14
   2174c:	41 5f                	pop    %r15
   2174e:	c3                   	retq   
   2174f:	90                   	nop
   21750:	50                   	push   %rax
   21751:	48 b8 ec f4 e8 bb 00 	movabs $0xbbe8f4ec,%rax
   21758:	00 00 00 
   2175b:	48 89 05 de 21 73 00 	mov    %rax,0x7321de(%rip)        # 753940 <edgeId>
   21762:	58                   	pop    %rax
   21763:	e8 a0 47 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
   21768:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   2176c:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   21770:	48 8d 35 d9 87 00 00 	lea    0x87d9(%rip),%rsi        # 29f50 <quoting_style_vals+0x1b0>
   21777:	4c 8b 75 10          	mov    0x10(%rbp),%r14
   2177b:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
   2177f:	ba 05 00 00 00       	mov    $0x5,%edx
   21784:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   21788:	31 ff                	xor    %edi,%edi
   2178a:	e8 91 01 fe ff       	callq  1920 <dcgettext@plt>
   2178f:	53                   	push   %rbx
   21790:	4d 89 f1             	mov    %r14,%r9
   21793:	41 57                	push   %r15
   21795:	4d 89 e8             	mov    %r13,%r8
   21798:	48 89 e9             	mov    %rbp,%rcx
   2179b:	e9 77 ff ff ff       	jmpq   21717 <version_etc_ar+0x577>
   217a0:	50                   	push   %rax
   217a1:	48 c7 c0 83 20 4e 7d 	mov    $0x7d4e2083,%rax
   217a8:	48 89 05 91 21 73 00 	mov    %rax,0x732191(%rip)        # 753940 <edgeId>
   217af:	58                   	pop    %rax
   217b0:	e8 53 47 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
   217b5:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
   217b9:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
   217bd:	48 8d 35 b4 87 00 00 	lea    0x87b4(%rip),%rsi        # 29f78 <quoting_style_vals+0x1d8>
   217c4:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   217c8:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   217cc:	ba 05 00 00 00       	mov    $0x5,%edx
   217d1:	4c 8b 75 10          	mov    0x10(%rbp),%r14
   217d5:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   217d9:	48 89 3c 24          	mov    %rdi,(%rsp)
   217dd:	31 ff                	xor    %edi,%edi
   217df:	e8 3c 01 fe ff       	callq  1920 <dcgettext@plt>
   217e4:	48 83 ec 08          	sub    $0x8,%rsp
   217e8:	4d 89 f1             	mov    %r14,%r9
   217eb:	41 55                	push   %r13
   217ed:	53                   	push   %rbx
   217ee:	41 57                	push   %r15
   217f0:	50                   	push   %rax
   217f1:	48 b8 71 98 58 a2 00 	movabs $0xa2589871,%rax
   217f8:	00 00 00 
   217fb:	48 89 05 3e 21 73 00 	mov    %rax,0x73213e(%rip)        # 753940 <edgeId>
   21802:	58                   	pop    %rax
   21803:	e8 00 47 fe ff       	callq  5f08 <_storeEdge>
   21808:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
   2180d:	48 89 e9             	mov    %rbp,%rcx
   21810:	48 89 c2             	mov    %rax,%rdx
   21813:	4c 89 e7             	mov    %r12,%rdi
   21816:	be 01 00 00 00       	mov    $0x1,%esi
   2181b:	31 c0                	xor    %eax,%eax
   2181d:	e8 fe 03 fe ff       	callq  1c20 <__fprintf_chk@plt>
   21822:	48 83 c4 20          	add    $0x20,%rsp
}
   21826:	48 83 c4 28          	add    $0x28,%rsp
   2182a:	5b                   	pop    %rbx
   2182b:	5d                   	pop    %rbp
   2182c:	41 5c                	pop    %r12
   2182e:	41 5d                	pop    %r13
   21830:	41 5e                	pop    %r14
   21832:	41 5f                	pop    %r15
   21834:	c3                   	retq   
   21835:	0f 1f 00             	nopl   (%rax)
   21838:	50                   	push   %rax
   21839:	48 b8 72 e7 59 c2 00 	movabs $0xc259e772,%rax
   21840:	00 00 00 
   21843:	48 89 05 f6 20 73 00 	mov    %rax,0x7320f6(%rip)        # 753940 <edgeId>
   2184a:	58                   	pop    %rax
   2184b:	e8 b8 46 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
   21850:	48 8b 75 08          	mov    0x8(%rbp),%rsi
   21854:	4c 8b 75 30          	mov    0x30(%rbp),%r14
   21858:	ba 05 00 00 00       	mov    $0x5,%edx
   2185d:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
   21861:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   21865:	31 ff                	xor    %edi,%edi
   21867:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   2186b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   2186f:	48 89 34 24          	mov    %rsi,(%rsp)
   21873:	48 8d 35 26 87 00 00 	lea    0x8726(%rip),%rsi        # 29fa0 <quoting_style_vals+0x200>
   2187a:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   2187e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   21883:	e8 98 00 fe ff       	callq  1920 <dcgettext@plt>
   21888:	41 56                	push   %r14
   2188a:	41 55                	push   %r13
   2188c:	53                   	push   %rbx
   2188d:	41 57                	push   %r15
   2188f:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
   21894:	e9 57 ff ff ff       	jmpq   217f0 <version_etc_ar+0x650>
   21899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   218a0:	50                   	push   %rax
   218a1:	48 b8 8b 26 d0 fa 00 	movabs $0xfad0268b,%rax
   218a8:	00 00 00 
   218ab:	48 89 05 8e 20 73 00 	mov    %rax,0x73208e(%rip)        # 753940 <edgeId>
   218b2:	58                   	pop    %rax
   218b3:	e8 50 46 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   218b8:	48 8b 75 08          	mov    0x8(%rbp),%rsi
   218bc:	4c 8b 4d 40          	mov    0x40(%rbp),%r9
   218c0:	ba 05 00 00 00       	mov    $0x5,%edx
   218c5:	4c 8b 45 38          	mov    0x38(%rbp),%r8
   218c9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   218cd:	4c 8b 75 30          	mov    0x30(%rbp),%r14
   218d1:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
   218d5:	48 8b 5d 20          	mov    0x20(%rbp),%rbx
   218d9:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
   218dd:	48 89 34 24          	mov    %rsi,(%rsp)
   218e1:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
   218e6:	48 8d 35 4b 87 00 00 	lea    0x874b(%rip),%rsi        # 2a038 <quoting_style_vals+0x298>
   218ed:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
   218f2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   218f7:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
   218fb:	e9 93 fc ff ff       	jmpq   21593 <version_etc_ar+0x3f3>
   21900:	50                   	push   %rax
   21901:	48 c7 c0 fa 16 a5 71 	mov    $0x71a516fa,%rax
   21908:	48 89 05 31 20 73 00 	mov    %rax,0x732031(%rip)        # 753940 <edgeId>
   2190f:	58                   	pop    %rax
   21910:	e8 f3 45 fe ff       	callq  5f08 <_storeEdge>
      abort ();
   21915:	e8 66 ff fd ff       	callq  1880 <abort@plt>
   2191a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000021920 <version_etc_va>:
   Author names are given in the NULL-terminated va_list AUTHORS. */
void
version_etc_va (FILE *stream,
                const char *command_name, const char *package,
                const char *version, va_list authors)
{
   21920:	41 57                	push   %r15
   21922:	41 56                	push   %r14
   21924:	41 55                	push   %r13
   21926:	41 54                	push   %r12
   21928:	55                   	push   %rbp
   21929:	53                   	push   %rbx
   2192a:	48 89 fb             	mov    %rdi,%rbx
   2192d:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
   21934:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2193b:	00 00 
   2193d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
   21942:	31 c0                	xor    %eax,%eax
   21944:	41 8b 00             	mov    (%r8),%eax
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   21947:	48 89 15 ca 1f 73 00 	mov    %rdx,0x731fca(%rip)        # 753918 <tmpquadone>
   2194e:	48 89 0d db c2 5d 00 	mov    %rcx,0x5dc2db(%rip)        # 5fdc30 <tmpquadtwo>
   21955:	48 8d 15 94 c2 5d 00 	lea    0x5dc294(%rip),%rdx        # 5fdbf0 <funcinptr>
   2195c:	48 c7 02 46 0e 00 00 	movq   $0xe46,(%rdx)
   21963:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2196a:	00 
   2196b:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   21972:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21976:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2197d:	00 
   2197e:	48 89 c1             	mov    %rax,%rcx
   21981:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21985:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2198c:	00 
   2198d:	ff 32                	pushq  (%rdx)
   2198f:	48 8b 15 82 1f 73 00 	mov    0x731f82(%rip),%rdx        # 753918 <tmpquadone>
   21996:	48 8b 0d 93 c2 5d 00 	mov    0x5dc293(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2199d:	48 c7 05 a8 1f 73 00 	movq   $0x1,0x731fa8(%rip)        # 753950 <cmpPassed>
   219a4:	01 00 00 00 
   219a8:	e8 f3 45 fe ff       	callq  5fa0 <_storeDataFn>
   219ad:	83 f8 2f             	cmp    $0x2f,%eax
   219b0:	0f 86 c6 01 00 00    	jbe    21b7c <version_etc_va+0x25c>
   219b6:	50                   	push   %rax
   219b7:	48 c7 c0 45 7f 25 34 	mov    $0x34257f45,%rax
   219be:	48 89 05 7b 1f 73 00 	mov    %rax,0x731f7b(%rip)        # 753940 <edgeId>
   219c5:	58                   	pop    %rax
   219c6:	e8 3d 45 fe ff       	callq  5f08 <_storeEdge>
   219cb:	4d 8b 48 08          	mov    0x8(%r8),%r9
   219cf:	4d 8d 79 08          	lea    0x8(%r9),%r15
   219d3:	4d 89 78 08          	mov    %r15,0x8(%r8)
   219d7:	4d 8b 11             	mov    (%r9),%r10
   219da:	4d 85 d2             	test   %r10,%r10
   219dd:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
   219e2:	0f 85 67 02 00 00    	jne    21c4f <version_etc_va+0x32f>
   219e8:	50                   	push   %rax
   219e9:	48 c7 c0 fe 4a 68 62 	mov    $0x62684afe,%rax
   219f0:	48 89 05 49 1f 73 00 	mov    %rax,0x731f49(%rip)        # 753940 <edgeId>
   219f7:	58                   	pop    %rax
   219f8:	e8 0b 45 fe ff       	callq  5f08 <_storeEdge>
   219fd:	0f 1f 00             	nopl   (%rax)
   21a00:	50                   	push   %rax
   21a01:	48 c7 c0 af 84 26 66 	mov    $0x662684af,%rax
   21a08:	48 89 05 31 1f 73 00 	mov    %rax,0x731f31(%rip)        # 753940 <edgeId>
   21a0f:	58                   	pop    %rax
   21a10:	e8 f3 44 fe ff       	callq  5f08 <_storeEdge>
  for (n_authors = 0;
   21a15:	45 31 e4             	xor    %r12d,%r12d
   21a18:	50                   	push   %rax
   21a19:	48 c7 c0 4a 68 62 36 	mov    $0x3662684a,%rax
   21a20:	48 89 05 19 1f 73 00 	mov    %rax,0x731f19(%rip)        # 753940 <edgeId>
   21a27:	58                   	pop    %rax
   21a28:	e8 db 44 fe ff       	callq  5f08 <_storeEdge>
  if (command_name)
   21a2d:	48 85 f6             	test   %rsi,%rsi
   21a30:	0f 84 f9 08 00 00    	je     2232f <version_etc_va+0xa0f>
   21a36:	50                   	push   %rax
   21a37:	48 c7 c0 42 13 b3 21 	mov    $0x21b31342,%rax
   21a3e:	48 89 05 fb 1e 73 00 	mov    %rax,0x731efb(%rip)        # 753940 <edgeId>
   21a45:	58                   	pop    %rax
   21a46:	e8 bd 44 fe ff       	callq  5f08 <_storeEdge>
   21a4b:	50                   	push   %rax
   21a4c:	48 c7 c0 a1 89 d9 10 	mov    $0x10d989a1,%rax
   21a53:	48 89 05 e6 1e 73 00 	mov    %rax,0x731ee6(%rip)        # 753940 <edgeId>
   21a5a:	58                   	pop    %rax
   21a5b:	e8 a8 44 fe ff       	callq  5f08 <_storeEdge>
   21a60:	49 89 d0             	mov    %rdx,%r8
   21a63:	48 8d 15 56 83 00 00 	lea    0x8356(%rip),%rdx        # 29dc0 <quoting_style_vals+0x20>
   21a6a:	49 89 c9             	mov    %rcx,%r9
   21a6d:	48 89 df             	mov    %rbx,%rdi
   21a70:	48 89 f1             	mov    %rsi,%rcx
   21a73:	31 c0                	xor    %eax,%eax
   21a75:	be 01 00 00 00       	mov    $0x1,%esi
   21a7a:	e8 a1 01 fe ff       	callq  1c20 <__fprintf_chk@plt>
   21a7f:	50                   	push   %rax
   21a80:	48 b8 36 44 d0 c3 00 	movabs $0xc3d04436,%rax
   21a87:	00 00 00 
   21a8a:	48 89 05 af 1e 73 00 	mov    %rax,0x731eaf(%rip)        # 753940 <edgeId>
   21a91:	58                   	pop    %rax
   21a92:	e8 71 44 fe ff       	callq  5f08 <_storeEdge>
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
   21a97:	48 8d 35 35 83 00 00 	lea    0x8335(%rip),%rsi        # 29dd3 <quoting_style_vals+0x33>
   21a9e:	31 ff                	xor    %edi,%edi
   21aa0:	ba 05 00 00 00       	mov    $0x5,%edx
   21aa5:	e8 76 fe fd ff       	callq  1920 <dcgettext@plt>
   21aaa:	48 8d 15 0f 87 00 00 	lea    0x870f(%rip),%rdx        # 2a1c0 <version_etc_copyright>
   21ab1:	48 89 c1             	mov    %rax,%rcx
   21ab4:	41 b8 df 07 00 00    	mov    $0x7df,%r8d
   21aba:	be 01 00 00 00       	mov    $0x1,%esi
   21abf:	48 89 df             	mov    %rbx,%rdi
   21ac2:	31 c0                	xor    %eax,%eax
   21ac4:	e8 57 01 fe ff       	callq  1c20 <__fprintf_chk@plt>
  fputs (_("\
   21ac9:	48 8d 35 90 83 00 00 	lea    0x8390(%rip),%rsi        # 29e60 <quoting_style_vals+0xc0>
   21ad0:	31 ff                	xor    %edi,%edi
   21ad2:	ba 05 00 00 00       	mov    $0x5,%edx
   21ad7:	e8 44 fe fd ff       	callq  1920 <dcgettext@plt>
   21adc:	48 89 de             	mov    %rbx,%rsi
   21adf:	48 89 c7             	mov    %rax,%rdi
   21ae2:	e8 79 ff fd ff       	callq  1a60 <fputs_unlocked@plt>
  switch (n_authors)
   21ae7:	48 89 15 2a 1e 73 00 	mov    %rdx,0x731e2a(%rip)        # 753918 <tmpquadone>
   21aee:	48 89 0d 3b c1 5d 00 	mov    %rcx,0x5dc13b(%rip)        # 5fdc30 <tmpquadtwo>
   21af5:	48 8d 15 f4 c0 5d 00 	lea    0x5dc0f4(%rip),%rdx        # 5fdbf0 <funcinptr>
   21afc:	48 c7 02 47 0e 00 00 	movq   $0xe47,(%rdx)
   21b03:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   21b0a:	00 
   21b0b:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   21b12:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21b16:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   21b1d:	00 
   21b1e:	4c 89 e1             	mov    %r12,%rcx
   21b21:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21b25:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   21b2c:	00 
   21b2d:	ff 32                	pushq  (%rdx)
   21b2f:	48 8b 15 e2 1d 73 00 	mov    0x731de2(%rip),%rdx        # 753918 <tmpquadone>
   21b36:	48 8b 0d f3 c0 5d 00 	mov    0x5dc0f3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   21b3d:	48 c7 05 08 1e 73 00 	movq   $0x1,0x731e08(%rip)        # 753950 <cmpPassed>
   21b44:	01 00 00 00 
   21b48:	e8 53 44 fe ff       	callq  5fa0 <_storeDataFn>
   21b4d:	49 83 fc 09          	cmp    $0x9,%r12
   21b51:	0f 87 29 0d 00 00    	ja     22880 <version_etc_va+0xf60>
   21b57:	50                   	push   %rax
   21b58:	48 c7 c0 73 32 91 3b 	mov    $0x3b913273,%rax
   21b5f:	48 89 05 da 1d 73 00 	mov    %rax,0x731dda(%rip)        # 753940 <edgeId>
   21b66:	58                   	pop    %rax
   21b67:	e8 9c 43 fe ff       	callq  5f08 <_storeEdge>
   21b6c:	48 8d 15 c5 85 00 00 	lea    0x85c5(%rip),%rdx        # 2a138 <quoting_style_vals+0x398>
   21b73:	4a 63 0c a2          	movslq (%rdx,%r12,4),%rcx
   21b77:	48 01 d1             	add    %rdx,%rcx
   21b7a:	ff e1                	jmpq   *%rcx
   21b7c:	50                   	push   %rax
   21b7d:	48 c7 c0 dc e9 f0 66 	mov    $0x66f0e9dc,%rax
   21b84:	48 89 05 b5 1d 73 00 	mov    %rax,0x731db5(%rip)        # 753940 <edgeId>
   21b8b:	58                   	pop    %rax
   21b8c:	e8 77 43 fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   21b91:	49 8b 78 10          	mov    0x10(%r8),%rdi
   21b95:	44 8d 50 08          	lea    0x8(%rax),%r10d
   21b99:	41 89 c1             	mov    %eax,%r9d
   21b9c:	45 89 10             	mov    %r10d,(%r8)
   21b9f:	4a 8b 2c 0f          	mov    (%rdi,%r9,1),%rbp
   21ba3:	48 85 ed             	test   %rbp,%rbp
   21ba6:	48 89 6c 24 20       	mov    %rbp,0x20(%rsp)
   21bab:	0f 84 4f fe ff ff    	je     21a00 <version_etc_va+0xe0>
   21bb1:	50                   	push   %rax
   21bb2:	48 c7 c0 1d de 8c 32 	mov    $0x328cde1d,%rax
   21bb9:	48 89 05 80 1d 73 00 	mov    %rax,0x731d80(%rip)        # 753940 <edgeId>
   21bc0:	58                   	pop    %rax
   21bc1:	e8 42 43 fe ff       	callq  5f08 <_storeEdge>
   21bc6:	48 89 15 4b 1d 73 00 	mov    %rdx,0x731d4b(%rip)        # 753918 <tmpquadone>
   21bcd:	48 89 0d 5c c0 5d 00 	mov    %rcx,0x5dc05c(%rip)        # 5fdc30 <tmpquadtwo>
   21bd4:	48 8d 15 15 c0 5d 00 	lea    0x5dc015(%rip),%rdx        # 5fdbf0 <funcinptr>
   21bdb:	48 c7 02 48 0e 00 00 	movq   $0xe48,(%rdx)
   21be2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   21be9:	00 
   21bea:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   21bf1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21bf5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   21bfc:	00 
   21bfd:	4c 89 d1             	mov    %r10,%rcx
   21c00:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21c04:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   21c0b:	00 
   21c0c:	ff 32                	pushq  (%rdx)
   21c0e:	48 8b 15 03 1d 73 00 	mov    0x731d03(%rip),%rdx        # 753918 <tmpquadone>
   21c15:	48 8b 0d 14 c0 5d 00 	mov    0x5dc014(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   21c1c:	48 c7 05 29 1d 73 00 	movq   $0x1,0x731d29(%rip)        # 753950 <cmpPassed>
   21c23:	01 00 00 00 
   21c27:	e8 74 43 fe ff       	callq  5fa0 <_storeDataFn>
   21c2c:	41 83 fa 2f          	cmp    $0x2f,%r10d
   21c30:	0f 86 8a 00 00 00    	jbe    21cc0 <version_etc_va+0x3a0>
   21c36:	50                   	push   %rax
   21c37:	48 c7 c0 c3 9b 51 46 	mov    $0x46519bc3,%rax
   21c3e:	48 89 05 fb 1c 73 00 	mov    %rax,0x731cfb(%rip)        # 753940 <edgeId>
   21c45:	58                   	pop    %rax
   21c46:	e8 bd 42 fe ff       	callq  5f08 <_storeEdge>
   21c4b:	4d 8b 78 08          	mov    0x8(%r8),%r15
   21c4f:	50                   	push   %rax
   21c50:	48 b8 78 33 ca a8 00 	movabs $0xa8ca3378,%rax
   21c57:	00 00 00 
   21c5a:	48 89 05 df 1c 73 00 	mov    %rax,0x731cdf(%rip)        # 753940 <edgeId>
   21c61:	58                   	pop    %rax
   21c62:	e8 a1 42 fe ff       	callq  5f08 <_storeEdge>
   21c67:	4d 8d 77 08          	lea    0x8(%r15),%r14
   21c6b:	4d 89 70 08          	mov    %r14,0x8(%r8)
   21c6f:	49 8b 2f             	mov    (%r15),%rbp
   21c72:	48 85 ed             	test   %rbp,%rbp
   21c75:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
   21c7a:	0f 85 08 01 00 00    	jne    21d88 <version_etc_va+0x468>
   21c80:	50                   	push   %rax
   21c81:	48 c7 c0 cd 28 a3 76 	mov    $0x76a328cd,%rax
   21c88:	48 89 05 b1 1c 73 00 	mov    %rax,0x731cb1(%rip)        # 753940 <edgeId>
   21c8f:	58                   	pop    %rax
   21c90:	e8 73 42 fe ff       	callq  5f08 <_storeEdge>
   21c95:	0f 1f 00             	nopl   (%rax)
   21c98:	50                   	push   %rax
   21c99:	48 c7 c0 19 65 d4 2e 	mov    $0x2ed46519,%rax
   21ca0:	48 89 05 99 1c 73 00 	mov    %rax,0x731c99(%rip)        # 753940 <edgeId>
   21ca7:	58                   	pop    %rax
   21ca8:	e8 5b 42 fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   21cad:	41 bc 01 00 00 00    	mov    $0x1,%r12d
   21cb3:	e9 60 fd ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   21cb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21cbf:	00 
   21cc0:	50                   	push   %rax
   21cc1:	48 c7 c0 94 51 bb 38 	mov    $0x38bb5194,%rax
   21cc8:	48 89 05 71 1c 73 00 	mov    %rax,0x731c71(%rip)        # 753940 <edgeId>
   21ccf:	58                   	pop    %rax
   21cd0:	e8 33 42 fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   21cd5:	44 8d 58 10          	lea    0x10(%rax),%r11d
   21cd9:	45 89 18             	mov    %r11d,(%r8)
   21cdc:	4e 8b 24 17          	mov    (%rdi,%r10,1),%r12
   21ce0:	4d 85 e4             	test   %r12,%r12
   21ce3:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
   21ce8:	74 ae                	je     21c98 <version_etc_va+0x378>
   21cea:	50                   	push   %rax
   21ceb:	48 c7 c0 a3 76 71 5c 	mov    $0x5c7176a3,%rax
   21cf2:	48 89 05 47 1c 73 00 	mov    %rax,0x731c47(%rip)        # 753940 <edgeId>
   21cf9:	58                   	pop    %rax
   21cfa:	e8 09 42 fe ff       	callq  5f08 <_storeEdge>
   21cff:	48 89 15 12 1c 73 00 	mov    %rdx,0x731c12(%rip)        # 753918 <tmpquadone>
   21d06:	48 89 0d 23 bf 5d 00 	mov    %rcx,0x5dbf23(%rip)        # 5fdc30 <tmpquadtwo>
   21d0d:	48 8d 15 dc be 5d 00 	lea    0x5dbedc(%rip),%rdx        # 5fdbf0 <funcinptr>
   21d14:	48 c7 02 49 0e 00 00 	movq   $0xe49,(%rdx)
   21d1b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   21d22:	00 
   21d23:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   21d2a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21d2e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   21d35:	00 
   21d36:	4c 89 d9             	mov    %r11,%rcx
   21d39:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21d3d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   21d44:	00 
   21d45:	ff 32                	pushq  (%rdx)
   21d47:	48 8b 15 ca 1b 73 00 	mov    0x731bca(%rip),%rdx        # 753918 <tmpquadone>
   21d4e:	48 8b 0d db be 5d 00 	mov    0x5dbedb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   21d55:	48 c7 05 f0 1b 73 00 	movq   $0x1,0x731bf0(%rip)        # 753950 <cmpPassed>
   21d5c:	01 00 00 00 
   21d60:	e8 3b 42 fe ff       	callq  5fa0 <_storeDataFn>
   21d65:	41 83 fb 2f          	cmp    $0x2f,%r11d
   21d69:	0f 86 89 00 00 00    	jbe    21df8 <version_etc_va+0x4d8>
   21d6f:	50                   	push   %rax
   21d70:	48 c7 c0 d4 2e 8e 4b 	mov    $0x4b8e2ed4,%rax
   21d77:	48 89 05 c2 1b 73 00 	mov    %rax,0x731bc2(%rip)        # 753940 <edgeId>
   21d7e:	58                   	pop    %rax
   21d7f:	e8 84 41 fe ff       	callq  5f08 <_storeEdge>
   21d84:	4d 8b 70 08          	mov    0x8(%r8),%r14
   21d88:	50                   	push   %rax
   21d89:	48 b8 da c5 71 e9 00 	movabs $0xe971c5da,%rax
   21d90:	00 00 00 
   21d93:	48 89 05 a6 1b 73 00 	mov    %rax,0x731ba6(%rip)        # 753940 <edgeId>
   21d9a:	58                   	pop    %rax
   21d9b:	e8 68 41 fe ff       	callq  5f08 <_storeEdge>
   21da0:	4d 8d 6e 08          	lea    0x8(%r14),%r13
   21da4:	4d 89 68 08          	mov    %r13,0x8(%r8)
   21da8:	49 8b 06             	mov    (%r14),%rax
   21dab:	48 85 c0             	test   %rax,%rax
   21dae:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   21db3:	0f 85 0a 01 00 00    	jne    21ec3 <version_etc_va+0x5a3>
   21db9:	50                   	push   %rax
   21dba:	48 c7 c0 17 c7 a5 07 	mov    $0x7a5c717,%rax
   21dc1:	48 89 05 78 1b 73 00 	mov    %rax,0x731b78(%rip)        # 753940 <edgeId>
   21dc8:	58                   	pop    %rax
   21dc9:	e8 3a 41 fe ff       	callq  5f08 <_storeEdge>
   21dce:	66 90                	xchg   %ax,%ax
   21dd0:	50                   	push   %rax
   21dd1:	48 b8 e2 b8 f4 c0 00 	movabs $0xc0f4b8e2,%rax
   21dd8:	00 00 00 
   21ddb:	48 89 05 5e 1b 73 00 	mov    %rax,0x731b5e(%rip)        # 753940 <edgeId>
   21de2:	58                   	pop    %rax
   21de3:	e8 20 41 fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   21de8:	41 bc 02 00 00 00    	mov    $0x2,%r12d
   21dee:	e9 25 fc ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   21df3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   21df8:	50                   	push   %rax
   21df9:	48 c7 c0 e3 d2 03 2b 	mov    $0x2b03d2e3,%rax
   21e00:	48 89 05 39 1b 73 00 	mov    %rax,0x731b39(%rip)        # 753940 <edgeId>
   21e07:	58                   	pop    %rax
   21e08:	e8 fb 40 fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   21e0d:	44 8d 68 18          	lea    0x18(%rax),%r13d
   21e11:	45 89 28             	mov    %r13d,(%r8)
   21e14:	4e 8b 34 1f          	mov    (%rdi,%r11,1),%r14
   21e18:	4d 85 f6             	test   %r14,%r14
   21e1b:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
   21e20:	74 ae                	je     21dd0 <version_etc_va+0x4b0>
   21e22:	50                   	push   %rax
   21e23:	48 b8 a5 07 56 c4 00 	movabs $0xc45607a5,%rax
   21e2a:	00 00 00 
   21e2d:	48 89 05 0c 1b 73 00 	mov    %rax,0x731b0c(%rip)        # 753940 <edgeId>
   21e34:	58                   	pop    %rax
   21e35:	e8 ce 40 fe ff       	callq  5f08 <_storeEdge>
   21e3a:	48 89 15 d7 1a 73 00 	mov    %rdx,0x731ad7(%rip)        # 753918 <tmpquadone>
   21e41:	48 89 0d e8 bd 5d 00 	mov    %rcx,0x5dbde8(%rip)        # 5fdc30 <tmpquadtwo>
   21e48:	48 8d 15 a1 bd 5d 00 	lea    0x5dbda1(%rip),%rdx        # 5fdbf0 <funcinptr>
   21e4f:	48 c7 02 4a 0e 00 00 	movq   $0xe4a,(%rdx)
   21e56:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   21e5d:	00 
   21e5e:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   21e65:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21e69:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   21e70:	00 
   21e71:	4c 89 e9             	mov    %r13,%rcx
   21e74:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21e78:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   21e7f:	00 
   21e80:	ff 32                	pushq  (%rdx)
   21e82:	48 8b 15 8f 1a 73 00 	mov    0x731a8f(%rip),%rdx        # 753918 <tmpquadone>
   21e89:	48 8b 0d a0 bd 5d 00 	mov    0x5dbda0(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   21e90:	48 c7 05 b5 1a 73 00 	movq   $0x1,0x731ab5(%rip)        # 753950 <cmpPassed>
   21e97:	01 00 00 00 
   21e9b:	e8 00 41 fe ff       	callq  5fa0 <_storeDataFn>
   21ea0:	41 83 fd 2f          	cmp    $0x2f,%r13d
   21ea4:	0f 86 86 00 00 00    	jbe    21f30 <version_etc_va+0x610>
   21eaa:	50                   	push   %rax
   21eab:	48 c7 c0 f4 c0 8a 78 	mov    $0x788ac0f4,%rax
   21eb2:	48 89 05 87 1a 73 00 	mov    %rax,0x731a87(%rip)        # 753940 <edgeId>
   21eb9:	58                   	pop    %rax
   21eba:	e8 49 40 fe ff       	callq  5f08 <_storeEdge>
   21ebf:	4d 8b 68 08          	mov    0x8(%r8),%r13
   21ec3:	50                   	push   %rax
   21ec4:	48 b8 1e 58 11 ef 00 	movabs $0xef11581e,%rax
   21ecb:	00 00 00 
   21ece:	48 89 05 6b 1a 73 00 	mov    %rax,0x731a6b(%rip)        # 753940 <edgeId>
   21ed5:	58                   	pop    %rax
   21ed6:	e8 2d 40 fe ff       	callq  5f08 <_storeEdge>
   21edb:	49 8d 7d 08          	lea    0x8(%r13),%rdi
   21edf:	49 89 78 08          	mov    %rdi,0x8(%r8)
   21ee3:	4d 8b 5d 00          	mov    0x0(%r13),%r11
   21ee7:	4d 85 db             	test   %r11,%r11
   21eea:	4c 89 5c 24 38       	mov    %r11,0x38(%rsp)
   21eef:	0f 85 06 01 00 00    	jne    21ffb <version_etc_va+0x6db>
   21ef5:	50                   	push   %rax
   21ef6:	48 c7 c0 60 45 bc 2f 	mov    $0x2fbc4560,%rax
   21efd:	48 89 05 3c 1a 73 00 	mov    %rax,0x731a3c(%rip)        # 753940 <edgeId>
   21f04:	58                   	pop    %rax
   21f05:	e8 fe 3f fe ff       	callq  5f08 <_storeEdge>
   21f0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   21f10:	50                   	push   %rax
   21f11:	48 c7 c0 ac 88 f7 45 	mov    $0x45f788ac,%rax
   21f18:	48 89 05 21 1a 73 00 	mov    %rax,0x731a21(%rip)        # 753940 <edgeId>
   21f1f:	58                   	pop    %rax
   21f20:	e8 e3 3f fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   21f25:	41 bc 03 00 00 00    	mov    $0x3,%r12d
   21f2b:	e9 e8 fa ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   21f30:	50                   	push   %rax
   21f31:	48 b8 22 de 17 a5 00 	movabs $0xa517de22,%rax
   21f38:	00 00 00 
   21f3b:	48 89 05 fe 19 73 00 	mov    %rax,0x7319fe(%rip)        # 753940 <edgeId>
   21f42:	58                   	pop    %rax
   21f43:	e8 c0 3f fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   21f48:	44 8d 78 20          	lea    0x20(%rax),%r15d
   21f4c:	45 89 38             	mov    %r15d,(%r8)
   21f4f:	4e 8b 0c 2f          	mov    (%rdi,%r13,1),%r9
   21f53:	4d 85 c9             	test   %r9,%r9
   21f56:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
   21f5b:	74 b3                	je     21f10 <version_etc_va+0x5f0>
   21f5d:	50                   	push   %rax
   21f5e:	48 c7 c0 bc 2f 4a 71 	mov    $0x714a2fbc,%rax
   21f65:	48 89 05 d4 19 73 00 	mov    %rax,0x7319d4(%rip)        # 753940 <edgeId>
   21f6c:	58                   	pop    %rax
   21f6d:	e8 96 3f fe ff       	callq  5f08 <_storeEdge>
   21f72:	48 89 15 9f 19 73 00 	mov    %rdx,0x73199f(%rip)        # 753918 <tmpquadone>
   21f79:	48 89 0d b0 bc 5d 00 	mov    %rcx,0x5dbcb0(%rip)        # 5fdc30 <tmpquadtwo>
   21f80:	48 8d 15 69 bc 5d 00 	lea    0x5dbc69(%rip),%rdx        # 5fdbf0 <funcinptr>
   21f87:	48 c7 02 4b 0e 00 00 	movq   $0xe4b,(%rdx)
   21f8e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   21f95:	00 
   21f96:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   21f9d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   21fa1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   21fa8:	00 
   21fa9:	4c 89 f9             	mov    %r15,%rcx
   21fac:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   21fb0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   21fb7:	00 
   21fb8:	ff 32                	pushq  (%rdx)
   21fba:	48 8b 15 57 19 73 00 	mov    0x731957(%rip),%rdx        # 753918 <tmpquadone>
   21fc1:	48 8b 0d 68 bc 5d 00 	mov    0x5dbc68(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   21fc8:	48 c7 05 7d 19 73 00 	movq   $0x1,0x73197d(%rip)        # 753950 <cmpPassed>
   21fcf:	01 00 00 00 
   21fd3:	e8 c8 3f fe ff       	callq  5fa0 <_storeDataFn>
   21fd8:	41 83 ff 2f          	cmp    $0x2f,%r15d
   21fdc:	0f 86 8e 00 00 00    	jbe    22070 <version_etc_va+0x750>
   21fe2:	50                   	push   %rax
   21fe3:	48 c7 c0 f7 45 29 2e 	mov    $0x2e2945f7,%rax
   21fea:	48 89 05 4f 19 73 00 	mov    %rax,0x73194f(%rip)        # 753940 <edgeId>
   21ff1:	58                   	pop    %rax
   21ff2:	e8 11 3f fe ff       	callq  5f08 <_storeEdge>
   21ff7:	49 8b 78 08          	mov    0x8(%r8),%rdi
   21ffb:	50                   	push   %rax
   21ffc:	48 b8 be 28 c5 e5 00 	movabs $0xe5c528be,%rax
   22003:	00 00 00 
   22006:	48 89 05 33 19 73 00 	mov    %rax,0x731933(%rip)        # 753940 <edgeId>
   2200d:	58                   	pop    %rax
   2200e:	e8 f5 3e fe ff       	callq  5f08 <_storeEdge>
   22013:	4c 8d 67 08          	lea    0x8(%rdi),%r12
   22017:	4d 89 60 08          	mov    %r12,0x8(%r8)
   2201b:	48 8b 3f             	mov    (%rdi),%rdi
   2201e:	48 85 ff             	test   %rdi,%rdi
   22021:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
   22026:	0f 85 12 01 00 00    	jne    2213e <version_etc_va+0x81e>
   2202c:	50                   	push   %rax
   2202d:	48 c7 c0 a2 14 97 17 	mov    $0x179714a2,%rax
   22034:	48 89 05 05 19 73 00 	mov    %rax,0x731905(%rip)        # 753940 <edgeId>
   2203b:	58                   	pop    %rax
   2203c:	e8 c7 3e fe ff       	callq  5f08 <_storeEdge>
   22041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   22048:	50                   	push   %rax
   22049:	48 c7 c0 94 e2 f2 22 	mov    $0x22f2e294,%rax
   22050:	48 89 05 e9 18 73 00 	mov    %rax,0x7318e9(%rip)        # 753940 <edgeId>
   22057:	58                   	pop    %rax
   22058:	e8 ab 3e fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   2205d:	41 bc 04 00 00 00    	mov    $0x4,%r12d
   22063:	e9 b0 f9 ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   22068:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2206f:	00 
   22070:	50                   	push   %rax
   22071:	48 b8 8a cb 8b e4 00 	movabs $0xe48bcb8a,%rax
   22078:	00 00 00 
   2207b:	48 89 05 be 18 73 00 	mov    %rax,0x7318be(%rip)        # 753940 <edgeId>
   22082:	58                   	pop    %rax
   22083:	e8 80 3e fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22088:	44 8d 50 28          	lea    0x28(%rax),%r10d
   2208c:	45 89 10             	mov    %r10d,(%r8)
   2208f:	4a 8b 2c 3f          	mov    (%rdi,%r15,1),%rbp
   22093:	48 85 ed             	test   %rbp,%rbp
   22096:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
   2209b:	74 ab                	je     22048 <version_etc_va+0x728>
   2209d:	50                   	push   %rax
   2209e:	48 c7 c0 97 17 c9 4f 	mov    $0x4fc91797,%rax
   220a5:	48 89 05 94 18 73 00 	mov    %rax,0x731894(%rip)        # 753940 <edgeId>
   220ac:	58                   	pop    %rax
   220ad:	e8 56 3e fe ff       	callq  5f08 <_storeEdge>
   220b2:	48 89 15 5f 18 73 00 	mov    %rdx,0x73185f(%rip)        # 753918 <tmpquadone>
   220b9:	48 89 0d 70 bb 5d 00 	mov    %rcx,0x5dbb70(%rip)        # 5fdc30 <tmpquadtwo>
   220c0:	48 8d 15 29 bb 5d 00 	lea    0x5dbb29(%rip),%rdx        # 5fdbf0 <funcinptr>
   220c7:	48 c7 02 4c 0e 00 00 	movq   $0xe4c,(%rdx)
   220ce:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   220d5:	00 
   220d6:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   220dd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   220e1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   220e8:	00 
   220e9:	4c 89 d1             	mov    %r10,%rcx
   220ec:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   220f0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   220f7:	00 
   220f8:	ff 32                	pushq  (%rdx)
   220fa:	48 8b 15 17 18 73 00 	mov    0x731817(%rip),%rdx        # 753918 <tmpquadone>
   22101:	48 8b 0d 28 bb 5d 00 	mov    0x5dbb28(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   22108:	48 c7 05 3d 18 73 00 	movq   $0x1,0x73183d(%rip)        # 753950 <cmpPassed>
   2210f:	01 00 00 00 
   22113:	e8 88 3e fe ff       	callq  5fa0 <_storeDataFn>
   22118:	41 83 fa 2f          	cmp    $0x2f,%r10d
   2211c:	0f 86 7e 00 00 00    	jbe    221a0 <version_etc_va+0x880>
   22122:	50                   	push   %rax
   22123:	48 b8 f2 22 f9 e9 00 	movabs $0xe9f922f2,%rax
   2212a:	00 00 00 
   2212d:	48 89 05 0c 18 73 00 	mov    %rax,0x73180c(%rip)        # 753940 <edgeId>
   22134:	58                   	pop    %rax
   22135:	e8 ce 3d fe ff       	callq  5f08 <_storeEdge>
   2213a:	4d 8b 60 08          	mov    0x8(%r8),%r12
   2213e:	50                   	push   %rax
   2213f:	48 c7 c0 5e 24 3f 7d 	mov    $0x7d3f245e,%rax
   22146:	48 89 05 f3 17 73 00 	mov    %rax,0x7317f3(%rip)        # 753940 <edgeId>
   2214d:	58                   	pop    %rax
   2214e:	e8 b5 3d fe ff       	callq  5f08 <_storeEdge>
   22153:	4d 8d 5c 24 08       	lea    0x8(%r12),%r11
   22158:	4d 89 58 08          	mov    %r11,0x8(%r8)
   2215c:	4d 8b 24 24          	mov    (%r12),%r12
   22160:	4d 85 e4             	test   %r12,%r12
   22163:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
   22168:	75 7b                	jne    221e5 <version_etc_va+0x8c5>
   2216a:	50                   	push   %rax
   2216b:	48 c7 c0 91 fc f4 1d 	mov    $0x1df4fc91,%rax
   22172:	48 89 05 c7 17 73 00 	mov    %rax,0x7317c7(%rip)        # 753940 <edgeId>
   22179:	58                   	pop    %rax
   2217a:	e8 89 3d fe ff       	callq  5f08 <_storeEdge>
   2217f:	90                   	nop
   22180:	50                   	push   %rax
   22181:	48 c7 c0 92 9f be 23 	mov    $0x23be9f92,%rax
   22188:	48 89 05 b1 17 73 00 	mov    %rax,0x7317b1(%rip)        # 753940 <edgeId>
   2218f:	58                   	pop    %rax
   22190:	e8 73 3d fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   22195:	41 bc 05 00 00 00    	mov    $0x5,%r12d
   2219b:	e9 78 f8 ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   221a0:	50                   	push   %rax
   221a1:	48 c7 c0 7e fa 8e 50 	mov    $0x508efa7e,%rax
   221a8:	48 89 05 91 17 73 00 	mov    %rax,0x731791(%rip)        # 753940 <edgeId>
   221af:	58                   	pop    %rax
   221b0:	e8 53 3d fe ff       	callq  5f08 <_storeEdge>
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   221b5:	83 c0 30             	add    $0x30,%eax
   221b8:	41 89 00             	mov    %eax,(%r8)
   221bb:	4a 8b 04 17          	mov    (%rdi,%r10,1),%rax
   221bf:	48 85 c0             	test   %rax,%rax
   221c2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   221c7:	74 b7                	je     22180 <version_etc_va+0x860>
   221c9:	50                   	push   %rax
   221ca:	48 b8 f4 1d a1 92 00 	movabs $0x92a11df4,%rax
   221d1:	00 00 00 
   221d4:	48 89 05 65 17 73 00 	mov    %rax,0x731765(%rip)        # 753940 <edgeId>
   221db:	58                   	pop    %rax
   221dc:	e8 27 3d fe ff       	callq  5f08 <_storeEdge>
   221e1:	4d 8b 58 08          	mov    0x8(%r8),%r11
   221e5:	50                   	push   %rax
   221e6:	48 b8 7d 47 a8 e4 00 	movabs $0xe4a8477d,%rax
   221ed:	00 00 00 
   221f0:	48 89 05 49 17 73 00 	mov    %rax,0x731749(%rip)        # 753940 <edgeId>
   221f7:	58                   	pop    %rax
   221f8:	e8 0b 3d fe ff       	callq  5f08 <_storeEdge>
   221fd:	4d 8d 6b 08          	lea    0x8(%r11),%r13
   22201:	4d 89 68 08          	mov    %r13,0x8(%r8)
   22205:	4d 8b 33             	mov    (%r11),%r14
   22208:	4d 85 f6             	test   %r14,%r14
   2220b:	4c 89 74 24 50       	mov    %r14,0x50(%rsp)
   22210:	0f 84 ed 06 00 00    	je     22903 <version_etc_va+0xfe3>
   22216:	50                   	push   %rax
   22217:	48 c7 c0 8e 50 c9 2d 	mov    $0x2dc9508e,%rax
   2221e:	48 89 05 1b 17 73 00 	mov    %rax,0x73171b(%rip)        # 753940 <edgeId>
   22225:	58                   	pop    %rax
   22226:	e8 dd 3c fe ff       	callq  5f08 <_storeEdge>
   2222b:	4d 8d 7b 10          	lea    0x10(%r11),%r15
   2222f:	4d 89 78 08          	mov    %r15,0x8(%r8)
   22233:	4d 8b 4b 08          	mov    0x8(%r11),%r9
   22237:	4d 85 c9             	test   %r9,%r9
   2223a:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
   2223f:	0f 84 1e 07 00 00    	je     22963 <version_etc_va+0x1043>
   22245:	50                   	push   %rax
   22246:	48 b8 a1 92 5b 80 00 	movabs $0x805b92a1,%rax
   2224d:	00 00 00 
   22250:	48 89 05 e9 16 73 00 	mov    %rax,0x7316e9(%rip)        # 753940 <edgeId>
   22257:	58                   	pop    %rax
   22258:	e8 ab 3c fe ff       	callq  5f08 <_storeEdge>
   2225d:	4d 8d 53 18          	lea    0x18(%r11),%r10
   22261:	4d 89 50 08          	mov    %r10,0x8(%r8)
   22265:	49 8b 6b 10          	mov    0x10(%r11),%rbp
   22269:	48 85 ed             	test   %rbp,%rbp
   2226c:	48 89 6c 24 60       	mov    %rbp,0x60(%rsp)
   22271:	0f 84 c9 06 00 00    	je     22940 <version_etc_va+0x1020>
   22277:	50                   	push   %rax
   22278:	48 b8 25 b7 00 e9 00 	movabs $0xe900b725,%rax
   2227f:	00 00 00 
   22282:	48 89 05 b7 16 73 00 	mov    %rax,0x7316b7(%rip)        # 753940 <edgeId>
   22289:	58                   	pop    %rax
   2228a:	e8 79 3c fe ff       	callq  5f08 <_storeEdge>
   2228f:	49 8d 43 20          	lea    0x20(%r11),%rax
       n_authors++)
   22293:	45 31 e4             	xor    %r12d,%r12d
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22296:	49 89 40 08          	mov    %rax,0x8(%r8)
       n_authors++)
   2229a:	48 89 15 77 16 73 00 	mov    %rdx,0x731677(%rip)        # 753918 <tmpquadone>
   222a1:	48 89 0d 88 b9 5d 00 	mov    %rcx,0x5db988(%rip)        # 5fdc30 <tmpquadtwo>
   222a8:	48 8d 15 41 b9 5d 00 	lea    0x5db941(%rip),%rdx        # 5fdbf0 <funcinptr>
   222af:	48 c7 02 4d 0e 00 00 	movq   $0xe4d,(%rdx)
   222b6:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   222bd:	00 
   222be:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   222c5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   222c9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   222d0:	00 
   222d1:	49 8b 4b 18          	mov    0x18(%r11),%rcx
   222d5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   222d9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   222e0:	00 
   222e1:	ff 32                	pushq  (%rdx)
   222e3:	48 8b 15 2e 16 73 00 	mov    0x73162e(%rip),%rdx        # 753918 <tmpquadone>
   222ea:	48 8b 0d 3f b9 5d 00 	mov    0x5db93f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   222f1:	48 c7 05 54 16 73 00 	movq   $0x1,0x731654(%rip)        # 753950 <cmpPassed>
   222f8:	01 00 00 00 
   222fc:	e8 9f 3c fe ff       	callq  5fa0 <_storeDataFn>
   22301:	49 83 7b 18 00       	cmpq   $0x0,0x18(%r11)
   22306:	41 0f 95 c4          	setne  %r12b
   2230a:	49 83 c4 09          	add    $0x9,%r12
  if (command_name)
   2230e:	48 85 f6             	test   %rsi,%rsi
   22311:	0f 85 34 f7 ff ff    	jne    21a4b <version_etc_va+0x12b>
   22317:	50                   	push   %rax
   22318:	48 b8 00 e9 2a e5 00 	movabs $0xe52ae900,%rax
   2231f:	00 00 00 
   22322:	48 89 05 17 16 73 00 	mov    %rax,0x731617(%rip)        # 753940 <edgeId>
   22329:	58                   	pop    %rax
   2232a:	e8 d9 3b fe ff       	callq  5f08 <_storeEdge>
   2232f:	50                   	push   %rax
   22330:	48 b8 40 ba 4a b9 00 	movabs $0xb94aba40,%rax
   22337:	00 00 00 
   2233a:	48 89 05 ff 15 73 00 	mov    %rax,0x7315ff(%rip)        # 753940 <edgeId>
   22341:	58                   	pop    %rax
   22342:	e8 c1 3b fe ff       	callq  5f08 <_storeEdge>
   22347:	49 89 c8             	mov    %rcx,%r8
   2234a:	48 89 d1             	mov    %rdx,%rcx
   2234d:	48 8d 15 78 7a 00 00 	lea    0x7a78(%rip),%rdx        # 29dcc <quoting_style_vals+0x2c>
   22354:	be 01 00 00 00       	mov    $0x1,%esi
   22359:	48 89 df             	mov    %rbx,%rdi
   2235c:	31 c0                	xor    %eax,%eax
   2235e:	e8 bd f8 fd ff       	callq  1c20 <__fprintf_chk@plt>
   22363:	e9 17 f7 ff ff       	jmpq   21a7f <version_etc_va+0x15f>
   22368:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2236f:	00 
   22370:	50                   	push   %rax
   22371:	48 c7 c0 94 bb 96 34 	mov    $0x3496bb94,%rax
   22378:	48 89 05 c1 15 73 00 	mov    %rax,0x7315c1(%rip)        # 753940 <edgeId>
   2237f:	58                   	pop    %rax
   22380:	e8 83 3b fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22385:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   2238a:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   2238f:	ba 05 00 00 00       	mov    $0x5,%edx
   22394:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
   22399:	31 ff                	xor    %edi,%edi
   2239b:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
   223a0:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   223a5:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   223aa:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
   223af:	48 8d 35 1a 7c 00 00 	lea    0x7c1a(%rip),%rsi        # 29fd0 <quoting_style_vals+0x230>
   223b6:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   223bb:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   223c0:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   223c5:	4c 89 1c 24          	mov    %r11,(%rsp)
   223c9:	e8 52 f5 fd ff       	callq  1920 <dcgettext@plt>
   223ce:	48 83 ec 08          	sub    $0x8,%rsp
   223d2:	50                   	push   %rax
   223d3:	48 b8 e6 42 71 f3 00 	movabs $0xf37142e6,%rax
   223da:	00 00 00 
   223dd:	48 89 05 5c 15 73 00 	mov    %rax,0x73155c(%rip)        # 753940 <edgeId>
   223e4:	58                   	pop    %rax
   223e5:	e8 1e 3b fe ff       	callq  5f08 <_storeEdge>
   223ea:	41 55                	push   %r13
   223ec:	41 54                	push   %r12
   223ee:	48 89 c2             	mov    %rax,%rdx
   223f1:	55                   	push   %rbp
   223f2:	41 57                	push   %r15
   223f4:	be 01 00 00 00       	mov    $0x1,%esi
   223f9:	41 56                	push   %r14
   223fb:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   22400:	48 89 df             	mov    %rbx,%rdi
   22403:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
   22408:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
   2240d:	31 c0                	xor    %eax,%eax
   2240f:	e8 0c f8 fd ff       	callq  1c20 <__fprintf_chk@plt>
   22414:	48 83 c4 30          	add    $0x30,%rsp
   22418:	50                   	push   %rax
   22419:	48 b8 1e d8 6e f7 00 	movabs $0xf76ed81e,%rax
   22420:	00 00 00 
   22423:	48 89 05 16 15 73 00 	mov    %rax,0x731516(%rip)        # 753940 <edgeId>
   2242a:	58                   	pop    %rax
   2242b:	e8 d8 3a fe ff       	callq  5f08 <_storeEdge>
    ;
  version_etc_arn (stream, command_name, package, version,
                   authtab, n_authors);
}
   22430:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   22435:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   2243c:	00 00 
   2243e:	0f 85 df 04 00 00    	jne    22923 <version_etc_va+0x1003>
   22444:	50                   	push   %rax
   22445:	48 c7 c0 d8 6e f7 6b 	mov    $0x6bf76ed8,%rax
   2244c:	48 89 05 ed 14 73 00 	mov    %rax,0x7314ed(%rip)        # 753940 <edgeId>
   22453:	58                   	pop    %rax
   22454:	e8 af 3a fe ff       	callq  5f08 <_storeEdge>
   22459:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   22460:	5b                   	pop    %rbx
   22461:	5d                   	pop    %rbp
   22462:	41 5c                	pop    %r12
   22464:	41 5d                	pop    %r13
   22466:	41 5e                	pop    %r14
   22468:	41 5f                	pop    %r15
   2246a:	c3                   	retq   
   2246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   22470:	50                   	push   %rax
   22471:	48 b8 5f bb 52 ef 00 	movabs $0xef52bb5f,%rax
   22478:	00 00 00 
   2247b:	48 89 05 be 14 73 00 	mov    %rax,0x7314be(%rip)        # 753940 <edgeId>
   22482:	58                   	pop    %rax
   22483:	e8 80 3a fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
   22488:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   2248d:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   22492:	48 8d 35 07 7b 00 00 	lea    0x7b07(%rip),%rsi        # 29fa0 <quoting_style_vals+0x200>
   22499:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   2249e:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   224a3:	ba 05 00 00 00       	mov    $0x5,%edx
   224a8:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   224ad:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   224b2:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
   224b7:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   224bc:	31 ff                	xor    %edi,%edi
   224be:	4c 89 0c 24          	mov    %r9,(%rsp)
   224c2:	e8 59 f4 fd ff       	callq  1920 <dcgettext@plt>
   224c7:	41 54                	push   %r12
   224c9:	55                   	push   %rbp
   224ca:	4d 89 e9             	mov    %r13,%r9
   224cd:	41 57                	push   %r15
   224cf:	41 56                	push   %r14
   224d1:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   224d6:	50                   	push   %rax
   224d7:	48 c7 c0 d3 10 1d 3a 	mov    $0x3a1d10d3,%rax
   224de:	48 89 05 5b 14 73 00 	mov    %rax,0x73145b(%rip)        # 753940 <edgeId>
   224e5:	58                   	pop    %rax
   224e6:	e8 1d 3a fe ff       	callq  5f08 <_storeEdge>
   224eb:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   224f0:	48 89 c2             	mov    %rax,%rdx
   224f3:	be 01 00 00 00       	mov    $0x1,%esi
   224f8:	48 89 df             	mov    %rbx,%rdi
   224fb:	31 c0                	xor    %eax,%eax
   224fd:	e8 1e f7 fd ff       	callq  1c20 <__fprintf_chk@plt>
   22502:	48 83 c4 20          	add    $0x20,%rsp
   22506:	e9 0d ff ff ff       	jmpq   22418 <version_etc_va+0xaf8>
   2250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   22510:	50                   	push   %rax
   22511:	48 c7 c0 74 e8 9c 2f 	mov    $0x2f9ce874,%rax
   22518:	48 89 05 21 14 73 00 	mov    %rax,0x731421(%rip)        # 753940 <edgeId>
   2251f:	58                   	pop    %rax
   22520:	e8 e3 39 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
   22525:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
   2252a:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
   2252f:	48 8d 35 42 7a 00 00 	lea    0x7a42(%rip),%rsi        # 29f78 <quoting_style_vals+0x1d8>
   22536:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
   2253b:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   22540:	ba 05 00 00 00       	mov    $0x5,%edx
   22545:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   2254a:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   2254f:	31 ff                	xor    %edi,%edi
   22551:	4c 89 14 24          	mov    %r10,(%rsp)
   22555:	e8 c6 f3 fd ff       	callq  1920 <dcgettext@plt>
   2255a:	48 83 ec 08          	sub    $0x8,%rsp
   2255e:	4d 89 e9             	mov    %r13,%r9
   22561:	4d 89 e0             	mov    %r12,%r8
   22564:	55                   	push   %rbp
   22565:	41 57                	push   %r15
   22567:	41 56                	push   %r14
   22569:	e9 68 ff ff ff       	jmpq   224d6 <version_etc_va+0xbb6>
   2256e:	66 90                	xchg   %ax,%ax
   22570:	50                   	push   %rax
   22571:	48 c7 c0 a9 0c 84 00 	mov    $0x840ca9,%rax
   22578:	48 89 05 c1 13 73 00 	mov    %rax,0x7313c1(%rip)        # 753940 <edgeId>
   2257f:	58                   	pop    %rax
   22580:	e8 83 39 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
   22585:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   2258a:	48 8d 35 bf 79 00 00 	lea    0x79bf(%rip),%rsi        # 29f50 <quoting_style_vals+0x1b0>
   22591:	ba 05 00 00 00       	mov    $0x5,%edx
   22596:	31 ff                	xor    %edi,%edi
   22598:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   2259d:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
   225a2:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
   225a7:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   225ac:	e8 6f f3 fd ff       	callq  1920 <dcgettext@plt>
   225b1:	41 57                	push   %r15
   225b3:	50                   	push   %rax
   225b4:	48 b8 02 a4 1a 81 00 	movabs $0x811aa402,%rax
   225bb:	00 00 00 
   225be:	48 89 05 7b 13 73 00 	mov    %rax,0x73137b(%rip)        # 753940 <edgeId>
   225c5:	58                   	pop    %rax
   225c6:	e8 3d 39 fe ff       	callq  5f08 <_storeEdge>
   225cb:	41 56                	push   %r14
   225cd:	48 89 c2             	mov    %rax,%rdx
   225d0:	4d 89 e9             	mov    %r13,%r9
   225d3:	4d 89 e0             	mov    %r12,%r8
   225d6:	48 89 e9             	mov    %rbp,%rcx
   225d9:	be 01 00 00 00       	mov    $0x1,%esi
   225de:	48 89 df             	mov    %rbx,%rdi
   225e1:	31 c0                	xor    %eax,%eax
   225e3:	e8 38 f6 fd ff       	callq  1c20 <__fprintf_chk@plt>
   225e8:	58                   	pop    %rax
   225e9:	5a                   	pop    %rdx
   225ea:	e9 29 fe ff ff       	jmpq   22418 <version_etc_va+0xaf8>
   225ef:	90                   	nop
   225f0:	50                   	push   %rax
   225f1:	48 b8 11 78 86 ea 00 	movabs $0xea867811,%rax
   225f8:	00 00 00 
   225fb:	48 89 05 3e 13 73 00 	mov    %rax,0x73133e(%rip)        # 753940 <edgeId>
   22602:	58                   	pop    %rax
   22603:	e8 00 39 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
   22608:	48 8d 35 21 79 00 00 	lea    0x7921(%rip),%rsi        # 29f30 <quoting_style_vals+0x190>
   2260f:	ba 05 00 00 00       	mov    $0x5,%edx
   22614:	31 ff                	xor    %edi,%edi
   22616:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   2261b:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
   22620:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
   22625:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   2262a:	e8 f1 f2 fd ff       	callq  1920 <dcgettext@plt>
   2262f:	48 83 ec 08          	sub    $0x8,%rsp
   22633:	e9 7b ff ff ff       	jmpq   225b3 <version_etc_va+0xc93>
   22638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2263f:	00 
   22640:	50                   	push   %rax
   22641:	48 b8 ea 94 2e c7 00 	movabs $0xc72e94ea,%rax
   22648:	00 00 00 
   2264b:	48 89 05 ee 12 73 00 	mov    %rax,0x7312ee(%rip)        # 753940 <edgeId>
   22652:	58                   	pop    %rax
   22653:	e8 b0 38 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
   22658:	48 8d 35 9f 77 00 00 	lea    0x779f(%rip),%rsi        # 29dfe <quoting_style_vals+0x5e>
   2265f:	31 ff                	xor    %edi,%edi
   22661:	ba 05 00 00 00       	mov    $0x5,%edx
   22666:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
   2266b:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
   22670:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
   22675:	e8 a6 f2 fd ff       	callq  1920 <dcgettext@plt>
   2267a:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
   2267f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   22686:	00 00 
   22688:	0f 85 95 02 00 00    	jne    22923 <version_etc_va+0x1003>
   2268e:	50                   	push   %rax
   2268f:	48 b8 cb 31 5b e5 00 	movabs $0xe55b31cb,%rax
   22696:	00 00 00 
   22699:	48 89 05 a0 12 73 00 	mov    %rax,0x7312a0(%rip)        # 753940 <edgeId>
   226a0:	58                   	pop    %rax
   226a1:	e8 62 38 fe ff       	callq  5f08 <_storeEdge>
}
   226a6:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   226ad:	4d 89 f9             	mov    %r15,%r9
   226b0:	4d 89 f0             	mov    %r14,%r8
   226b3:	4c 89 e9             	mov    %r13,%rcx
   226b6:	48 89 df             	mov    %rbx,%rdi
   226b9:	48 89 c2             	mov    %rax,%rdx
   226bc:	5b                   	pop    %rbx
   226bd:	5d                   	pop    %rbp
   226be:	41 5c                	pop    %r12
   226c0:	41 5d                	pop    %r13
   226c2:	41 5e                	pop    %r14
   226c4:	41 5f                	pop    %r15
   226c6:	be 01 00 00 00       	mov    $0x1,%esi
   226cb:	31 c0                	xor    %eax,%eax
   226cd:	e9 4e f5 fd ff       	jmpq   1c20 <__fprintf_chk@plt>
   226d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   226d8:	50                   	push   %rax
   226d9:	48 b8 ad 2f 5e e9 00 	movabs $0xe95e2fad,%rax
   226e0:	00 00 00 
   226e3:	48 89 05 56 12 73 00 	mov    %rax,0x731256(%rip)        # 753940 <edgeId>
   226ea:	58                   	pop    %rax
   226eb:	e8 18 38 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
   226f0:	48 8d 35 f0 76 00 00 	lea    0x76f0(%rip),%rsi        # 29de7 <quoting_style_vals+0x47>
   226f7:	31 ff                	xor    %edi,%edi
   226f9:	ba 05 00 00 00       	mov    $0x5,%edx
   226fe:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
   22703:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
   22708:	e8 13 f2 fd ff       	callq  1920 <dcgettext@plt>
   2270d:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
   22712:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   22719:	00 00 
   2271b:	0f 85 02 02 00 00    	jne    22923 <version_etc_va+0x1003>
   22721:	50                   	push   %rax
   22722:	48 b8 57 fa 12 bb 00 	movabs $0xbb12fa57,%rax
   22729:	00 00 00 
   2272c:	48 89 05 0d 12 73 00 	mov    %rax,0x73120d(%rip)        # 753940 <edgeId>
   22733:	58                   	pop    %rax
   22734:	e8 cf 37 fe ff       	callq  5f08 <_storeEdge>
}
   22739:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   22740:	4d 89 e0             	mov    %r12,%r8
   22743:	48 89 e9             	mov    %rbp,%rcx
   22746:	48 89 df             	mov    %rbx,%rdi
   22749:	48 89 c2             	mov    %rax,%rdx
   2274c:	be 01 00 00 00       	mov    $0x1,%esi
   22751:	5b                   	pop    %rbx
   22752:	5d                   	pop    %rbp
   22753:	41 5c                	pop    %r12
   22755:	41 5d                	pop    %r13
   22757:	41 5e                	pop    %r14
   22759:	41 5f                	pop    %r15
   2275b:	31 c0                	xor    %eax,%eax
   2275d:	e9 be f4 fd ff       	jmpq   1c20 <__fprintf_chk@plt>
   22762:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   22768:	50                   	push   %rax
   22769:	48 b8 23 fb a1 ef 00 	movabs $0xefa1fb23,%rax
   22770:	00 00 00 
   22773:	48 89 05 c6 11 73 00 	mov    %rax,0x7311c6(%rip)        # 753940 <edgeId>
   2277a:	58                   	pop    %rax
   2277b:	e8 88 37 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s.\n"), authors[0]);
   22780:	48 8d 35 50 76 00 00 	lea    0x7650(%rip),%rsi        # 29dd7 <quoting_style_vals+0x37>
   22787:	31 ff                	xor    %edi,%edi
   22789:	ba 05 00 00 00       	mov    $0x5,%edx
   2278e:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
   22793:	e8 88 f1 fd ff       	callq  1920 <dcgettext@plt>
   22798:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
   2279d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   227a4:	00 00 
   227a6:	0f 85 77 01 00 00    	jne    22923 <version_etc_va+0x1003>
   227ac:	50                   	push   %rax
   227ad:	48 c7 c0 a1 ef de 02 	mov    $0x2deefa1,%rax
   227b4:	48 89 05 85 11 73 00 	mov    %rax,0x731185(%rip)        # 753940 <edgeId>
   227bb:	58                   	pop    %rax
   227bc:	e8 47 37 fe ff       	callq  5f08 <_storeEdge>
}
   227c1:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   227c8:	4c 89 f9             	mov    %r15,%rcx
   227cb:	48 89 df             	mov    %rbx,%rdi
   227ce:	5b                   	pop    %rbx
   227cf:	5d                   	pop    %rbp
   227d0:	41 5c                	pop    %r12
   227d2:	41 5d                	pop    %r13
   227d4:	41 5e                	pop    %r14
   227d6:	41 5f                	pop    %r15
   227d8:	48 89 c2             	mov    %rax,%rdx
   227db:	be 01 00 00 00       	mov    $0x1,%esi
   227e0:	31 c0                	xor    %eax,%eax
   227e2:	e9 39 f4 fd ff       	jmpq   1c20 <__fprintf_chk@plt>
   227e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   227ee:	00 00 
   227f0:	50                   	push   %rax
   227f1:	48 b8 8a f2 e6 b7 00 	movabs $0xb7e6f28a,%rax
   227f8:	00 00 00 
   227fb:	48 89 05 3e 11 73 00 	mov    %rax,0x73113e(%rip)        # 753940 <edgeId>
   22802:	58                   	pop    %rax
   22803:	e8 00 37 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22808:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   2280d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
   22812:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
   22817:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
   2281c:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
   22821:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   22826:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   2282b:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   22830:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   22835:	48 89 34 24          	mov    %rsi,(%rsp)
   22839:	48 8d 35 c0 77 00 00 	lea    0x77c0(%rip),%rsi        # 2a000 <quoting_style_vals+0x260>
   22840:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
   22845:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   2284a:	ba 05 00 00 00       	mov    $0x5,%edx
   2284f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   22854:	50                   	push   %rax
   22855:	48 c7 c0 bf ad a2 19 	mov    $0x19a2adbf,%rax
   2285c:	48 89 05 dd 10 73 00 	mov    %rax,0x7310dd(%rip)        # 753940 <edgeId>
   22863:	58                   	pop    %rax
   22864:	e8 9f 36 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22869:	31 ff                	xor    %edi,%edi
   2286b:	e8 b0 f0 fd ff       	callq  1920 <dcgettext@plt>
   22870:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
   22875:	41 52                	push   %r10
   22877:	e9 56 fb ff ff       	jmpq   223d2 <version_etc_va+0xab2>
   2287c:	0f 1f 40 00          	nopl   0x0(%rax)
   22880:	50                   	push   %rax
   22881:	48 c7 c0 a2 19 51 3c 	mov    $0x3c5119a2,%rax
   22888:	48 89 05 b1 10 73 00 	mov    %rax,0x7310b1(%rip)        # 753940 <edgeId>
   2288f:	58                   	pop    %rax
   22890:	e8 73 36 fe ff       	callq  5f08 <_storeEdge>
   22895:	4c 8b 44 24 60       	mov    0x60(%rsp),%r8
   2289a:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
   2289f:	ba 05 00 00 00       	mov    $0x5,%edx
   228a4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   228a9:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   228ae:	48 8d 35 83 77 00 00 	lea    0x7783(%rip),%rsi        # 2a038 <quoting_style_vals+0x298>
   228b5:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
   228ba:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
   228bf:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
   228c4:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   228c9:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   228ce:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
   228d3:	4c 89 5c 24 10       	mov    %r11,0x10(%rsp)
   228d8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   228dd:	4c 89 0c 24          	mov    %r9,(%rsp)
   228e1:	e9 6e ff ff ff       	jmpq   22854 <version_etc_va+0xf34>
   228e6:	50                   	push   %rax
   228e7:	48 b8 78 24 74 cd 00 	movabs $0xcd742478,%rax
   228ee:	00 00 00 
   228f1:	48 89 05 48 10 73 00 	mov    %rax,0x731048(%rip)        # 753940 <edgeId>
   228f8:	58                   	pop    %rax
   228f9:	e8 0a 36 fe ff       	callq  5f08 <_storeEdge>
      abort ();
   228fe:	e8 7d ef fd ff       	callq  1880 <abort@plt>
   22903:	50                   	push   %rax
   22904:	48 c7 c0 47 42 d7 6c 	mov    $0x6cd74247,%rax
   2290b:	48 89 05 2e 10 73 00 	mov    %rax,0x73102e(%rip)        # 753940 <edgeId>
   22912:	58                   	pop    %rax
   22913:	e8 f0 35 fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   22918:	41 bc 06 00 00 00    	mov    $0x6,%r12d
   2291e:	e9 f5 f0 ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   22923:	50                   	push   %rax
   22924:	48 b8 84 ae d9 c4 00 	movabs $0xc4d9ae84,%rax
   2292b:	00 00 00 
   2292e:	48 89 05 0b 10 73 00 	mov    %rax,0x73100b(%rip)        # 753940 <edgeId>
   22935:	58                   	pop    %rax
   22936:	e8 cd 35 fe ff       	callq  5f08 <_storeEdge>
}
   2293b:	e8 10 f0 fd ff       	callq  1950 <__stack_chk_fail@plt>
   22940:	50                   	push   %rax
   22941:	48 b8 e8 9a 4d cc 00 	movabs $0xcc4d9ae8,%rax
   22948:	00 00 00 
   2294b:	48 89 05 ee 0f 73 00 	mov    %rax,0x730fee(%rip)        # 753940 <edgeId>
   22952:	58                   	pop    %rax
   22953:	e8 b0 35 fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   22958:	41 bc 08 00 00 00    	mov    $0x8,%r12d
   2295e:	e9 b5 f0 ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   22963:	50                   	push   %rax
   22964:	48 c7 c0 d7 6c 62 7e 	mov    $0x7e626cd7,%rax
   2296b:	48 89 05 ce 0f 73 00 	mov    %rax,0x730fce(%rip)        # 753940 <edgeId>
   22972:	58                   	pop    %rax
   22973:	e8 90 35 fe ff       	callq  5f08 <_storeEdge>
   22978:	41 bc 07 00 00 00    	mov    $0x7,%r12d
   2297e:	e9 95 f0 ff ff       	jmpq   21a18 <version_etc_va+0xf8>
   22983:	0f 1f 00             	nopl   (%rax)
   22986:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2298d:	00 00 00 

0000000000022990 <version_etc>:
   NULL argument at the end.  */
void
version_etc (FILE *stream,
             const char *command_name, const char *package,
             const char *version, /* const char *author1, ...*/ ...)
{
   22990:	41 57                	push   %r15
   22992:	41 56                	push   %r14
   22994:	41 55                	push   %r13
   22996:	41 54                	push   %r12
   22998:	55                   	push   %rbp
   22999:	53                   	push   %rbx
   2299a:	48 89 fb             	mov    %rdi,%rbx
   2299d:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  va_list authors;

  va_start (authors, version);
   229a4:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
   229ab:	00 
{
   229ac:	4c 89 84 24 c0 00 00 	mov    %r8,0xc0(%rsp)
   229b3:	00 
   229b4:	4c 89 8c 24 c8 00 00 	mov    %r9,0xc8(%rsp)
   229bb:	00 
   229bc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   229c3:	00 00 
   229c5:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   229cc:	00 
   229cd:	31 c0                	xor    %eax,%eax
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   229cf:	4c 8b 45 20          	mov    0x20(%rbp),%r8
  va_start (authors, version);
   229d3:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
   229da:	00 
   229db:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   229e0:	c7 44 24 28 28 00 00 	movl   $0x28,0x28(%rsp)
   229e7:	00 
  va_start (authors, version);
   229e8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   229ed:	4d 85 c0             	test   %r8,%r8
   229f0:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
   229f5:	0f 84 dd 08 00 00    	je     232d8 <version_etc+0x948>
   229fb:	50                   	push   %rax
   229fc:	48 b8 55 4d 8a d4 00 	movabs $0xd48a4d55,%rax
   22a03:	00 00 00 
   22a06:	48 89 05 33 0f 73 00 	mov    %rax,0x730f33(%rip)        # 753940 <edgeId>
   22a0d:	58                   	pop    %rax
   22a0e:	e8 f5 34 fe ff       	callq  5f08 <_storeEdge>
   22a13:	4c 8b 4d 28          	mov    0x28(%rbp),%r9
   22a17:	c7 44 24 28 30 00 00 	movl   $0x30,0x28(%rsp)
   22a1e:	00 
   22a1f:	4d 85 c9             	test   %r9,%r9
   22a22:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
   22a27:	0f 84 d3 08 00 00    	je     23300 <version_etc+0x970>
   22a2d:	50                   	push   %rax
   22a2e:	48 c7 c0 35 29 52 0f 	mov    $0xf522935,%rax
   22a35:	48 89 05 04 0f 73 00 	mov    %rax,0x730f04(%rip)        # 753940 <edgeId>
   22a3c:	58                   	pop    %rax
   22a3d:	e8 c6 34 fe ff       	callq  5f08 <_storeEdge>
   22a42:	4c 8b 9c 24 10 01 00 	mov    0x110(%rsp),%r11
   22a49:	00 
   22a4a:	4c 8d 94 24 18 01 00 	lea    0x118(%rsp),%r10
   22a51:	00 
       n_authors++)
   22a52:	bd 02 00 00 00       	mov    $0x2,%ebp
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22a57:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
   22a5c:	4d 85 db             	test   %r11,%r11
   22a5f:	4c 89 5c 24 50       	mov    %r11,0x50(%rsp)
   22a64:	0f 84 eb 01 00 00    	je     22c55 <version_etc+0x2c5>
   22a6a:	50                   	push   %rax
   22a6b:	48 b8 8a d4 43 e8 00 	movabs $0xe843d48a,%rax
   22a72:	00 00 00 
   22a75:	48 89 05 c4 0e 73 00 	mov    %rax,0x730ec4(%rip)        # 753940 <edgeId>
   22a7c:	58                   	pop    %rax
   22a7d:	e8 86 34 fe ff       	callq  5f08 <_storeEdge>
   22a82:	4d 8b 2a             	mov    (%r10),%r13
   22a85:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
   22a8c:	00 
       n_authors++)
   22a8d:	bd 03 00 00 00       	mov    $0x3,%ebp
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22a92:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
   22a97:	4d 85 ed             	test   %r13,%r13
   22a9a:	4c 89 6c 24 58       	mov    %r13,0x58(%rsp)
   22a9f:	0f 84 b0 01 00 00    	je     22c55 <version_etc+0x2c5>
   22aa5:	50                   	push   %rax
   22aa6:	48 c7 c0 f5 10 fa 33 	mov    $0x33fa10f5,%rax
   22aad:	48 89 05 8c 0e 73 00 	mov    %rax,0x730e8c(%rip)        # 753940 <edgeId>
   22ab4:	58                   	pop    %rax
   22ab5:	e8 4e 34 fe ff       	callq  5f08 <_storeEdge>
   22aba:	4d 8b 3c 24          	mov    (%r12),%r15
   22abe:	4c 8d b4 24 28 01 00 	lea    0x128(%rsp),%r14
   22ac5:	00 
       n_authors++)
   22ac6:	bd 04 00 00 00       	mov    $0x4,%ebp
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22acb:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
   22ad0:	4d 85 ff             	test   %r15,%r15
   22ad3:	4c 89 7c 24 60       	mov    %r15,0x60(%rsp)
   22ad8:	0f 84 77 01 00 00    	je     22c55 <version_etc+0x2c5>
   22ade:	50                   	push   %rax
   22adf:	48 b8 84 fe 0c 90 00 	movabs $0x900cfe84,%rax
   22ae6:	00 00 00 
   22ae9:	48 89 05 50 0e 73 00 	mov    %rax,0x730e50(%rip)        # 753940 <edgeId>
   22af0:	58                   	pop    %rax
   22af1:	e8 12 34 fe ff       	callq  5f08 <_storeEdge>
   22af6:	49 8b 06             	mov    (%r14),%rax
   22af9:	48 8d bc 24 30 01 00 	lea    0x130(%rsp),%rdi
   22b00:	00 
       n_authors++)
   22b01:	bd 05 00 00 00       	mov    $0x5,%ebp
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22b06:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
   22b0b:	48 85 c0             	test   %rax,%rax
   22b0e:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   22b13:	0f 84 3c 01 00 00    	je     22c55 <version_etc+0x2c5>
   22b19:	50                   	push   %rax
   22b1a:	48 b8 cf 00 69 cb 00 	movabs $0xcb6900cf,%rax
   22b21:	00 00 00 
   22b24:	48 89 05 15 0e 73 00 	mov    %rax,0x730e15(%rip)        # 753940 <edgeId>
   22b2b:	58                   	pop    %rax
   22b2c:	e8 d7 33 fe ff       	callq  5f08 <_storeEdge>
   22b31:	4c 8b 07             	mov    (%rdi),%r8
   22b34:	48 8d ac 24 38 01 00 	lea    0x138(%rsp),%rbp
   22b3b:	00 
   22b3c:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
   22b41:	4d 85 c0             	test   %r8,%r8
   22b44:	4c 89 44 24 70       	mov    %r8,0x70(%rsp)
   22b49:	0f 84 0d 08 00 00    	je     2335c <version_etc+0x9cc>
   22b4f:	50                   	push   %rax
   22b50:	48 c7 c0 01 d2 96 4b 	mov    $0x4b96d201,%rax
   22b57:	48 89 05 e2 0d 73 00 	mov    %rax,0x730de2(%rip)        # 753940 <edgeId>
   22b5e:	58                   	pop    %rax
   22b5f:	e8 a4 33 fe ff       	callq  5f08 <_storeEdge>
   22b64:	4c 8b 57 08          	mov    0x8(%rdi),%r10
   22b68:	4c 8d 8c 24 40 01 00 	lea    0x140(%rsp),%r9
   22b6f:	00 
   22b70:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
   22b75:	4d 85 d2             	test   %r10,%r10
   22b78:	4c 89 54 24 78       	mov    %r10,0x78(%rsp)
   22b7d:	0f 84 1a 08 00 00    	je     2339d <version_etc+0xa0d>
   22b83:	50                   	push   %rax
   22b84:	48 c7 c0 a4 2d 97 1a 	mov    $0x1a972da4,%rax
   22b8b:	48 89 05 ae 0d 73 00 	mov    %rax,0x730dae(%rip)        # 753940 <edgeId>
   22b92:	58                   	pop    %rax
   22b93:	e8 70 33 fe ff       	callq  5f08 <_storeEdge>
   22b98:	4c 8b 67 10          	mov    0x10(%rdi),%r12
   22b9c:	4c 8d 9c 24 48 01 00 	lea    0x148(%rsp),%r11
   22ba3:	00 
   22ba4:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
   22ba9:	4d 85 e4             	test   %r12,%r12
   22bac:	4c 89 a4 24 80 00 00 	mov    %r12,0x80(%rsp)
   22bb3:	00 
   22bb4:	0f 84 c1 07 00 00    	je     2337b <version_etc+0x9eb>
   22bba:	50                   	push   %rax
   22bbb:	48 b8 5b 2e 35 d6 00 	movabs $0xd6352e5b,%rax
   22bc2:	00 00 00 
   22bc5:	48 89 05 74 0d 73 00 	mov    %rax,0x730d74(%rip)        # 753940 <edgeId>
   22bcc:	58                   	pop    %rax
   22bcd:	e8 36 33 fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   22bd2:	31 ed                	xor    %ebp,%ebp
   22bd4:	48 89 15 3d 0d 73 00 	mov    %rdx,0x730d3d(%rip)        # 753918 <tmpquadone>
   22bdb:	48 89 0d 4e b0 5d 00 	mov    %rcx,0x5db04e(%rip)        # 5fdc30 <tmpquadtwo>
   22be2:	48 8d 15 07 b0 5d 00 	lea    0x5db007(%rip),%rdx        # 5fdbf0 <funcinptr>
   22be9:	48 c7 02 4e 0e 00 00 	movq   $0xe4e,(%rdx)
   22bf0:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   22bf7:	00 
   22bf8:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   22bff:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   22c03:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   22c0a:	00 
   22c0b:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   22c0f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   22c13:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   22c1a:	00 
   22c1b:	ff 32                	pushq  (%rdx)
   22c1d:	48 8b 15 f4 0c 73 00 	mov    0x730cf4(%rip),%rdx        # 753918 <tmpquadone>
   22c24:	48 8b 0d 05 b0 5d 00 	mov    0x5db005(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   22c2b:	48 c7 05 1a 0d 73 00 	movq   $0x1,0x730d1a(%rip)        # 753950 <cmpPassed>
   22c32:	01 00 00 00 
   22c36:	e8 65 33 fe ff       	callq  5fa0 <_storeDataFn>
   22c3b:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
   22c40:	4c 8d ac 24 50 01 00 	lea    0x150(%rsp),%r13
   22c47:	00 
   22c48:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
       n_authors++)
   22c4d:	40 0f 95 c5          	setne  %bpl
   22c51:	48 83 c5 09          	add    $0x9,%rbp
   22c55:	50                   	push   %rax
   22c56:	48 c7 c0 52 63 fd 3d 	mov    $0x3dfd6352,%rax
   22c5d:	48 89 05 dc 0c 73 00 	mov    %rax,0x730cdc(%rip)        # 753940 <edgeId>
   22c64:	58                   	pop    %rax
   22c65:	e8 9e 32 fe ff       	callq  5f08 <_storeEdge>
  if (command_name)
   22c6a:	48 85 f6             	test   %rsi,%rsi
   22c6d:	0f 84 3d 01 00 00    	je     22db0 <version_etc+0x420>
   22c73:	50                   	push   %rax
   22c74:	48 c7 c0 1a eb ef 69 	mov    $0x69efeb1a,%rax
   22c7b:	48 89 05 be 0c 73 00 	mov    %rax,0x730cbe(%rip)        # 753940 <edgeId>
   22c82:	58                   	pop    %rax
   22c83:	e8 80 32 fe ff       	callq  5f08 <_storeEdge>
   22c88:	49 89 d0             	mov    %rdx,%r8
   22c8b:	48 8d 15 2e 71 00 00 	lea    0x712e(%rip),%rdx        # 29dc0 <quoting_style_vals+0x20>
   22c92:	49 89 c9             	mov    %rcx,%r9
   22c95:	48 89 df             	mov    %rbx,%rdi
   22c98:	48 89 f1             	mov    %rsi,%rcx
   22c9b:	31 c0                	xor    %eax,%eax
   22c9d:	be 01 00 00 00       	mov    $0x1,%esi
   22ca2:	e8 79 ef fd ff       	callq  1c20 <__fprintf_chk@plt>
   22ca7:	50                   	push   %rax
   22ca8:	48 b8 f7 b4 a9 f6 00 	movabs $0xf6a9b4f7,%rax
   22caf:	00 00 00 
   22cb2:	48 89 05 87 0c 73 00 	mov    %rax,0x730c87(%rip)        # 753940 <edgeId>
   22cb9:	58                   	pop    %rax
   22cba:	e8 49 32 fe ff       	callq  5f08 <_storeEdge>
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
   22cbf:	48 8d 35 0d 71 00 00 	lea    0x710d(%rip),%rsi        # 29dd3 <quoting_style_vals+0x33>
   22cc6:	31 ff                	xor    %edi,%edi
   22cc8:	ba 05 00 00 00       	mov    $0x5,%edx
   22ccd:	e8 4e ec fd ff       	callq  1920 <dcgettext@plt>
   22cd2:	48 8d 15 e7 74 00 00 	lea    0x74e7(%rip),%rdx        # 2a1c0 <version_etc_copyright>
   22cd9:	48 89 c1             	mov    %rax,%rcx
   22cdc:	41 b8 df 07 00 00    	mov    $0x7df,%r8d
   22ce2:	be 01 00 00 00       	mov    $0x1,%esi
   22ce7:	48 89 df             	mov    %rbx,%rdi
   22cea:	31 c0                	xor    %eax,%eax
   22cec:	e8 2f ef fd ff       	callq  1c20 <__fprintf_chk@plt>
  fputs (_("\
   22cf1:	48 8d 35 68 71 00 00 	lea    0x7168(%rip),%rsi        # 29e60 <quoting_style_vals+0xc0>
   22cf8:	31 ff                	xor    %edi,%edi
   22cfa:	ba 05 00 00 00       	mov    $0x5,%edx
   22cff:	e8 1c ec fd ff       	callq  1920 <dcgettext@plt>
   22d04:	48 89 de             	mov    %rbx,%rsi
   22d07:	48 89 c7             	mov    %rax,%rdi
   22d0a:	e8 51 ed fd ff       	callq  1a60 <fputs_unlocked@plt>
  switch (n_authors)
   22d0f:	48 89 15 02 0c 73 00 	mov    %rdx,0x730c02(%rip)        # 753918 <tmpquadone>
   22d16:	48 89 0d 13 af 5d 00 	mov    %rcx,0x5daf13(%rip)        # 5fdc30 <tmpquadtwo>
   22d1d:	48 8d 15 cc ae 5d 00 	lea    0x5daecc(%rip),%rdx        # 5fdbf0 <funcinptr>
   22d24:	48 c7 02 4f 0e 00 00 	movq   $0xe4f,(%rdx)
   22d2b:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   22d32:	00 
   22d33:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   22d3a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   22d3e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   22d45:	00 
   22d46:	48 89 e9             	mov    %rbp,%rcx
   22d49:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   22d4d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   22d54:	00 
   22d55:	ff 32                	pushq  (%rdx)
   22d57:	48 8b 15 ba 0b 73 00 	mov    0x730bba(%rip),%rdx        # 753918 <tmpquadone>
   22d5e:	48 8b 0d cb ae 5d 00 	mov    0x5daecb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   22d65:	48 c7 05 e0 0b 73 00 	movq   $0x1,0x730be0(%rip)        # 753950 <cmpPassed>
   22d6c:	01 00 00 00 
   22d70:	e8 2b 32 fe ff       	callq  5fa0 <_storeDataFn>
   22d75:	48 83 fd 09          	cmp    $0x9,%rbp
   22d79:	0f 87 e9 04 00 00    	ja     23268 <version_etc+0x8d8>
   22d7f:	50                   	push   %rax
   22d80:	48 b8 9c 82 8d bd 00 	movabs $0xbd8d829c,%rax
   22d87:	00 00 00 
   22d8a:	48 89 05 af 0b 73 00 	mov    %rax,0x730baf(%rip)        # 753940 <edgeId>
   22d91:	58                   	pop    %rax
   22d92:	e8 71 31 fe ff       	callq  5f08 <_storeEdge>
   22d97:	48 8d 15 da 73 00 00 	lea    0x73da(%rip),%rdx        # 2a178 <quoting_style_vals+0x3d8>
   22d9e:	48 63 0c aa          	movslq (%rdx,%rbp,4),%rcx
   22da2:	48 01 d1             	add    %rdx,%rcx
   22da5:	ff e1                	jmpq   *%rcx
   22da7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   22dae:	00 00 
   22db0:	50                   	push   %rax
   22db1:	48 c7 c0 7b 51 c9 2a 	mov    $0x2ac9517b,%rax
   22db8:	48 89 05 81 0b 73 00 	mov    %rax,0x730b81(%rip)        # 753940 <edgeId>
   22dbf:	58                   	pop    %rax
   22dc0:	e8 43 31 fe ff       	callq  5f08 <_storeEdge>
   22dc5:	49 89 c8             	mov    %rcx,%r8
   22dc8:	48 89 d1             	mov    %rdx,%rcx
   22dcb:	48 8d 15 fa 6f 00 00 	lea    0x6ffa(%rip),%rdx        # 29dcc <quoting_style_vals+0x2c>
   22dd2:	be 01 00 00 00       	mov    $0x1,%esi
   22dd7:	48 89 df             	mov    %rbx,%rdi
   22dda:	31 c0                	xor    %eax,%eax
   22ddc:	e8 3f ee fd ff       	callq  1c20 <__fprintf_chk@plt>
   22de1:	e9 c1 fe ff ff       	jmpq   22ca7 <version_etc+0x317>
   22de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   22ded:	00 00 00 
   22df0:	50                   	push   %rax
   22df1:	48 b8 59 a5 7c cd 00 	movabs $0xcd7ca559,%rax
   22df8:	00 00 00 
   22dfb:	48 89 05 3e 0b 73 00 	mov    %rax,0x730b3e(%rip)        # 753940 <edgeId>
   22e02:	58                   	pop    %rax
   22e03:	e8 00 31 fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22e08:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   22e0d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
   22e12:	ba 05 00 00 00       	mov    $0x5,%edx
   22e17:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
   22e1c:	4c 8b 6c 24 78       	mov    0x78(%rsp),%r13
   22e21:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
   22e26:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
   22e2b:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
   22e30:	48 8d 35 99 71 00 00 	lea    0x7199(%rip),%rsi        # 29fd0 <quoting_style_vals+0x230>
   22e37:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
   22e3c:	31 ff                	xor    %edi,%edi
   22e3e:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   22e43:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   22e48:	48 89 04 24          	mov    %rax,(%rsp)
   22e4c:	e8 cf ea fd ff       	callq  1920 <dcgettext@plt>
   22e51:	48 83 ec 08          	sub    $0x8,%rsp
   22e55:	50                   	push   %rax
   22e56:	48 b8 79 96 21 8f 00 	movabs $0x8f219679,%rax
   22e5d:	00 00 00 
   22e60:	48 89 05 d9 0a 73 00 	mov    %rax,0x730ad9(%rip)        # 753940 <edgeId>
   22e67:	58                   	pop    %rax
   22e68:	e8 9b 30 fe ff       	callq  5f08 <_storeEdge>
   22e6d:	41 55                	push   %r13
   22e6f:	41 54                	push   %r12
   22e71:	48 89 c2             	mov    %rax,%rdx
   22e74:	55                   	push   %rbp
   22e75:	41 57                	push   %r15
   22e77:	be 01 00 00 00       	mov    $0x1,%esi
   22e7c:	41 56                	push   %r14
   22e7e:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   22e83:	48 89 df             	mov    %rbx,%rdi
   22e86:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
   22e8b:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
   22e90:	31 c0                	xor    %eax,%eax
   22e92:	e8 89 ed fd ff       	callq  1c20 <__fprintf_chk@plt>
   22e97:	48 83 c4 30          	add    $0x30,%rsp
   22e9b:	50                   	push   %rax
   22e9c:	48 b8 71 d1 20 90 00 	movabs $0x9020d171,%rax
   22ea3:	00 00 00 
   22ea6:	48 89 05 93 0a 73 00 	mov    %rax,0x730a93(%rip)        # 753940 <edgeId>
   22ead:	58                   	pop    %rax
   22eae:	e8 55 30 fe ff       	callq  5f08 <_storeEdge>
  version_etc_va (stream, command_name, package, version, authors);
  va_end (authors);
}
   22eb3:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
   22eba:	00 
   22ebb:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   22ec2:	00 00 
   22ec4:	0f 85 75 04 00 00    	jne    2333f <version_etc+0x9af>
   22eca:	50                   	push   %rax
   22ecb:	48 b8 34 08 a4 9d 00 	movabs $0x9da40834,%rax
   22ed2:	00 00 00 
   22ed5:	48 89 05 64 0a 73 00 	mov    %rax,0x730a64(%rip)        # 753940 <edgeId>
   22edc:	58                   	pop    %rax
   22edd:	e8 26 30 fe ff       	callq  5f08 <_storeEdge>
   22ee2:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
   22ee9:	5b                   	pop    %rbx
   22eea:	5d                   	pop    %rbp
   22eeb:	41 5c                	pop    %r12
   22eed:	41 5d                	pop    %r13
   22eef:	41 5e                	pop    %r14
   22ef1:	41 5f                	pop    %r15
   22ef3:	c3                   	retq   
   22ef4:	0f 1f 40 00          	nopl   0x0(%rax)
   22ef8:	50                   	push   %rax
   22ef9:	48 c7 c0 ed ec c5 27 	mov    $0x27c5eced,%rax
   22f00:	48 89 05 39 0a 73 00 	mov    %rax,0x730a39(%rip)        # 753940 <edgeId>
   22f07:	58                   	pop    %rax
   22f08:	e8 fb 2f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22f0d:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   22f12:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
   22f17:	4c 8b 9c 24 80 00 00 	mov    0x80(%rsp),%r11
   22f1e:	00 
   22f1f:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
   22f24:	4c 8b 6c 24 78       	mov    0x78(%rsp),%r13
   22f29:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
   22f2e:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
   22f33:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   22f38:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   22f3d:	48 89 34 24          	mov    %rsi,(%rsp)
   22f41:	48 8d 35 b8 70 00 00 	lea    0x70b8(%rip),%rsi        # 2a000 <quoting_style_vals+0x260>
   22f48:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
   22f4d:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
   22f52:	ba 05 00 00 00       	mov    $0x5,%edx
   22f57:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   22f5c:	50                   	push   %rax
   22f5d:	48 c7 c0 4f a8 1f 48 	mov    $0x481fa84f,%rax
   22f64:	48 89 05 d5 09 73 00 	mov    %rax,0x7309d5(%rip)        # 753940 <edgeId>
   22f6b:	58                   	pop    %rax
   22f6c:	e8 97 2f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   22f71:	31 ff                	xor    %edi,%edi
   22f73:	e8 a8 e9 fd ff       	callq  1920 <dcgettext@plt>
   22f78:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
   22f7d:	41 52                	push   %r10
   22f7f:	e9 d1 fe ff ff       	jmpq   22e55 <version_etc+0x4c5>
   22f84:	0f 1f 40 00          	nopl   0x0(%rax)
   22f88:	50                   	push   %rax
   22f89:	48 b8 1f 48 88 f2 00 	movabs $0xf288481f,%rax
   22f90:	00 00 00 
   22f93:	48 89 05 a6 09 73 00 	mov    %rax,0x7309a6(%rip)        # 753940 <edgeId>
   22f9a:	58                   	pop    %rax
   22f9b:	e8 68 2f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s.\n"), authors[0]);
   22fa0:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   22fa5:	48 8d 35 2b 6e 00 00 	lea    0x6e2b(%rip),%rsi        # 29dd7 <quoting_style_vals+0x37>
   22fac:	31 ff                	xor    %edi,%edi
   22fae:	ba 05 00 00 00       	mov    $0x5,%edx
   22fb3:	e8 68 e9 fd ff       	callq  1920 <dcgettext@plt>
   22fb8:	4c 89 f9             	mov    %r15,%rcx
   22fbb:	48 89 c2             	mov    %rax,%rdx
   22fbe:	be 01 00 00 00       	mov    $0x1,%esi
   22fc3:	48 89 df             	mov    %rbx,%rdi
   22fc6:	31 c0                	xor    %eax,%eax
   22fc8:	e8 53 ec fd ff       	callq  1c20 <__fprintf_chk@plt>
   22fcd:	e9 c9 fe ff ff       	jmpq   22e9b <version_etc+0x50b>
   22fd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   22fd8:	50                   	push   %rax
   22fd9:	48 b8 bc b8 01 83 00 	movabs $0x8301b8bc,%rax
   22fe0:	00 00 00 
   22fe3:	48 89 05 56 09 73 00 	mov    %rax,0x730956(%rip)        # 753940 <edgeId>
   22fea:	58                   	pop    %rax
   22feb:	e8 18 2f fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
   22ff0:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
   22ff5:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
   22ffa:	48 8d 35 e6 6d 00 00 	lea    0x6de6(%rip),%rsi        # 29de7 <quoting_style_vals+0x47>
   23001:	31 ff                	xor    %edi,%edi
   23003:	ba 05 00 00 00       	mov    $0x5,%edx
   23008:	e8 13 e9 fd ff       	callq  1920 <dcgettext@plt>
   2300d:	4d 89 e0             	mov    %r12,%r8
   23010:	48 89 c2             	mov    %rax,%rdx
   23013:	48 89 e9             	mov    %rbp,%rcx
   23016:	be 01 00 00 00       	mov    $0x1,%esi
   2301b:	48 89 df             	mov    %rbx,%rdi
   2301e:	31 c0                	xor    %eax,%eax
   23020:	e8 fb eb fd ff       	callq  1c20 <__fprintf_chk@plt>
   23025:	e9 71 fe ff ff       	jmpq   22e9b <version_etc+0x50b>
   2302a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   23030:	50                   	push   %rax
   23031:	48 b8 b8 5a 6f af 00 	movabs $0xaf6f5ab8,%rax
   23038:	00 00 00 
   2303b:	48 89 05 fe 08 73 00 	mov    %rax,0x7308fe(%rip)        # 753940 <edgeId>
   23042:	58                   	pop    %rax
   23043:	e8 c0 2e fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
   23048:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
   2304d:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
   23052:	48 8d 35 a5 6d 00 00 	lea    0x6da5(%rip),%rsi        # 29dfe <quoting_style_vals+0x5e>
   23059:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
   2305e:	31 ff                	xor    %edi,%edi
   23060:	ba 05 00 00 00       	mov    $0x5,%edx
   23065:	e8 b6 e8 fd ff       	callq  1920 <dcgettext@plt>
   2306a:	4d 89 f9             	mov    %r15,%r9
   2306d:	48 89 c2             	mov    %rax,%rdx
   23070:	4d 89 f0             	mov    %r14,%r8
   23073:	4c 89 e9             	mov    %r13,%rcx
   23076:	be 01 00 00 00       	mov    $0x1,%esi
   2307b:	48 89 df             	mov    %rbx,%rdi
   2307e:	31 c0                	xor    %eax,%eax
   23080:	e8 9b eb fd ff       	callq  1c20 <__fprintf_chk@plt>
   23085:	e9 11 fe ff ff       	jmpq   22e9b <version_etc+0x50b>
   2308a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   23090:	50                   	push   %rax
   23091:	48 c7 c0 5d 9d 3c 09 	mov    $0x93c9d5d,%rax
   23098:	48 89 05 a1 08 73 00 	mov    %rax,0x7308a1(%rip)        # 753940 <edgeId>
   2309f:	58                   	pop    %rax
   230a0:	e8 63 2e fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
   230a5:	48 8d 35 84 6e 00 00 	lea    0x6e84(%rip),%rsi        # 29f30 <quoting_style_vals+0x190>
   230ac:	ba 05 00 00 00       	mov    $0x5,%edx
   230b1:	31 ff                	xor    %edi,%edi
   230b3:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   230b8:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   230bd:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
   230c2:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
   230c7:	e8 54 e8 fd ff       	callq  1920 <dcgettext@plt>
   230cc:	48 83 ec 08          	sub    $0x8,%rsp
   230d0:	50                   	push   %rax
   230d1:	48 b8 93 a0 a7 d0 00 	movabs $0xd0a7a093,%rax
   230d8:	00 00 00 
   230db:	48 89 05 5e 08 73 00 	mov    %rax,0x73085e(%rip)        # 753940 <edgeId>
   230e2:	58                   	pop    %rax
   230e3:	e8 20 2e fe ff       	callq  5f08 <_storeEdge>
   230e8:	41 56                	push   %r14
   230ea:	48 89 c2             	mov    %rax,%rdx
   230ed:	4d 89 e9             	mov    %r13,%r9
   230f0:	4d 89 e0             	mov    %r12,%r8
   230f3:	48 89 e9             	mov    %rbp,%rcx
   230f6:	be 01 00 00 00       	mov    $0x1,%esi
   230fb:	48 89 df             	mov    %rbx,%rdi
   230fe:	31 c0                	xor    %eax,%eax
   23100:	e8 1b eb fd ff       	callq  1c20 <__fprintf_chk@plt>
   23105:	58                   	pop    %rax
   23106:	5a                   	pop    %rdx
   23107:	e9 8f fd ff ff       	jmpq   22e9b <version_etc+0x50b>
   2310c:	0f 1f 40 00          	nopl   0x0(%rax)
   23110:	50                   	push   %rax
   23111:	48 b8 d0 71 92 b2 00 	movabs $0xb29271d0,%rax
   23118:	00 00 00 
   2311b:	48 89 05 1e 08 73 00 	mov    %rax,0x73081e(%rip)        # 753940 <edgeId>
   23122:	58                   	pop    %rax
   23123:	e8 e0 2d fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
   23128:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   2312d:	48 8d 35 1c 6e 00 00 	lea    0x6e1c(%rip),%rsi        # 29f50 <quoting_style_vals+0x1b0>
   23134:	ba 05 00 00 00       	mov    $0x5,%edx
   23139:	31 ff                	xor    %edi,%edi
   2313b:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   23140:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   23145:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
   2314a:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
   2314f:	e8 cc e7 fd ff       	callq  1920 <dcgettext@plt>
   23154:	41 57                	push   %r15
   23156:	e9 75 ff ff ff       	jmpq   230d0 <version_etc+0x740>
   2315b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   23160:	50                   	push   %rax
   23161:	48 b8 59 ae 43 e3 00 	movabs $0xe343ae59,%rax
   23168:	00 00 00 
   2316b:	48 89 05 ce 07 73 00 	mov    %rax,0x7307ce(%rip)        # 753940 <edgeId>
   23172:	58                   	pop    %rax
   23173:	e8 90 2d fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
   23178:	4c 8b 54 24 40       	mov    0x40(%rsp),%r10
   2317d:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
   23182:	48 8d 35 ef 6d 00 00 	lea    0x6def(%rip),%rsi        # 29f78 <quoting_style_vals+0x1d8>
   23189:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   2318e:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   23193:	ba 05 00 00 00       	mov    $0x5,%edx
   23198:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   2319d:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
   231a2:	31 ff                	xor    %edi,%edi
   231a4:	4c 89 14 24          	mov    %r10,(%rsp)
   231a8:	e8 73 e7 fd ff       	callq  1920 <dcgettext@plt>
   231ad:	48 83 ec 08          	sub    $0x8,%rsp
   231b1:	4d 89 e9             	mov    %r13,%r9
   231b4:	4d 89 e0             	mov    %r12,%r8
   231b7:	55                   	push   %rbp
   231b8:	41 57                	push   %r15
   231ba:	41 56                	push   %r14
   231bc:	50                   	push   %rax
   231bd:	48 c7 c0 b0 c5 1f 25 	mov    $0x251fc5b0,%rax
   231c4:	48 89 05 75 07 73 00 	mov    %rax,0x730775(%rip)        # 753940 <edgeId>
   231cb:	58                   	pop    %rax
   231cc:	e8 37 2d fe ff       	callq  5f08 <_storeEdge>
   231d1:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   231d6:	48 89 c2             	mov    %rax,%rdx
   231d9:	be 01 00 00 00       	mov    $0x1,%esi
   231de:	48 89 df             	mov    %rbx,%rdi
   231e1:	31 c0                	xor    %eax,%eax
   231e3:	e8 38 ea fd ff       	callq  1c20 <__fprintf_chk@plt>
   231e8:	48 83 c4 20          	add    $0x20,%rsp
   231ec:	e9 aa fc ff ff       	jmpq   22e9b <version_etc+0x50b>
   231f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   231f8:	50                   	push   %rax
   231f9:	48 b8 47 89 67 80 00 	movabs $0x80678947,%rax
   23200:	00 00 00 
   23203:	48 89 05 36 07 73 00 	mov    %rax,0x730736(%rip)        # 753940 <edgeId>
   2320a:	58                   	pop    %rax
   2320b:	e8 f8 2c fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
   23210:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
   23215:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   2321a:	48 8d 35 7f 6d 00 00 	lea    0x6d7f(%rip),%rsi        # 29fa0 <quoting_style_vals+0x200>
   23221:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   23226:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
   2322b:	ba 05 00 00 00       	mov    $0x5,%edx
   23230:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
   23235:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   2323a:	31 ff                	xor    %edi,%edi
   2323c:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   23241:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   23246:	4c 89 0c 24          	mov    %r9,(%rsp)
   2324a:	e8 d1 e6 fd ff       	callq  1920 <dcgettext@plt>
   2324f:	41 54                	push   %r12
   23251:	4d 89 e9             	mov    %r13,%r9
   23254:	55                   	push   %rbp
   23255:	41 57                	push   %r15
   23257:	41 56                	push   %r14
   23259:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   2325e:	e9 59 ff ff ff       	jmpq   231bc <version_etc+0x82c>
   23263:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   23268:	50                   	push   %rax
   23269:	48 b8 33 f0 98 ff 00 	movabs $0xff98f033,%rax
   23270:	00 00 00 
   23273:	48 89 05 c6 06 73 00 	mov    %rax,0x7306c6(%rip)        # 753940 <edgeId>
   2327a:	58                   	pop    %rax
   2327b:	e8 88 2c fe ff       	callq  5f08 <_storeEdge>
      fprintf (stream, _("\
   23280:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
   23287:	00 
   23288:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   2328d:	ba 05 00 00 00       	mov    $0x5,%edx
   23292:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
   23297:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   2329c:	48 8d 35 95 6d 00 00 	lea    0x6d95(%rip),%rsi        # 2a038 <quoting_style_vals+0x298>
   232a3:	4c 8b 6c 24 78       	mov    0x78(%rsp),%r13
   232a8:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
   232ad:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
   232b2:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
   232b7:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   232bc:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
   232c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   232c6:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   232cb:	4c 89 0c 24          	mov    %r9,(%rsp)
   232cf:	e9 88 fc ff ff       	jmpq   22f5c <version_etc+0x5cc>
   232d4:	0f 1f 40 00          	nopl   0x0(%rax)
   232d8:	50                   	push   %rax
   232d9:	48 b8 7f 5b 84 da 00 	movabs $0xda845b7f,%rax
   232e0:	00 00 00 
   232e3:	48 89 05 56 06 73 00 	mov    %rax,0x730656(%rip)        # 753940 <edgeId>
   232ea:	58                   	pop    %rax
   232eb:	e8 18 2c fe ff       	callq  5f08 <_storeEdge>
  for (n_authors = 0;
   232f0:	31 ed                	xor    %ebp,%ebp
   232f2:	e9 5e f9 ff ff       	jmpq   22c55 <version_etc+0x2c5>
   232f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   232fe:	00 00 
   23300:	50                   	push   %rax
   23301:	48 b8 2d 42 6d cd 00 	movabs $0xcd6d422d,%rax
   23308:	00 00 00 
   2330b:	48 89 05 2e 06 73 00 	mov    %rax,0x73062e(%rip)        # 753940 <edgeId>
   23312:	58                   	pop    %rax
   23313:	e8 f0 2b fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   23318:	bd 01 00 00 00       	mov    $0x1,%ebp
   2331d:	e9 33 f9 ff ff       	jmpq   22c55 <version_etc+0x2c5>
   23322:	50                   	push   %rax
   23323:	48 b8 11 6a 6b 9e 00 	movabs $0x9e6b6a11,%rax
   2332a:	00 00 00 
   2332d:	48 89 05 0c 06 73 00 	mov    %rax,0x73060c(%rip)        # 753940 <edgeId>
   23334:	58                   	pop    %rax
   23335:	e8 ce 2b fe ff       	callq  5f08 <_storeEdge>
      abort ();
   2333a:	e8 41 e5 fd ff       	callq  1880 <abort@plt>
   2333f:	50                   	push   %rax
   23340:	48 b8 a8 ad 79 ee 00 	movabs $0xee79ada8,%rax
   23347:	00 00 00 
   2334a:	48 89 05 ef 05 73 00 	mov    %rax,0x7305ef(%rip)        # 753940 <edgeId>
   23351:	58                   	pop    %rax
   23352:	e8 b1 2b fe ff       	callq  5f08 <_storeEdge>
}
   23357:	e8 f4 e5 fd ff       	callq  1950 <__stack_chk_fail@plt>
   2335c:	50                   	push   %rax
   2335d:	48 c7 c0 ad 79 ee 1a 	mov    $0x1aee79ad,%rax
   23364:	48 89 05 d5 05 73 00 	mov    %rax,0x7305d5(%rip)        # 753940 <edgeId>
   2336b:	58                   	pop    %rax
   2336c:	e8 97 2b fe ff       	callq  5f08 <_storeEdge>
       n_authors++)
   23371:	bd 06 00 00 00       	mov    $0x6,%ebp
   23376:	e9 da f8 ff ff       	jmpq   22c55 <version_etc+0x2c5>
   2337b:	50                   	push   %rax
   2337c:	48 b8 f3 dc 35 88 00 	movabs $0x8835dcf3,%rax
   23383:	00 00 00 
   23386:	48 89 05 b3 05 73 00 	mov    %rax,0x7305b3(%rip)        # 753940 <edgeId>
   2338d:	58                   	pop    %rax
   2338e:	e8 75 2b fe ff       	callq  5f08 <_storeEdge>
   23393:	bd 08 00 00 00       	mov    $0x8,%ebp
   23398:	e9 b8 f8 ff ff       	jmpq   22c55 <version_etc+0x2c5>
   2339d:	50                   	push   %rax
   2339e:	48 b8 cf 5d 83 e8 00 	movabs $0xe8835dcf,%rax
   233a5:	00 00 00 
   233a8:	48 89 05 91 05 73 00 	mov    %rax,0x730591(%rip)        # 753940 <edgeId>
   233af:	58                   	pop    %rax
   233b0:	e8 53 2b fe ff       	callq  5f08 <_storeEdge>
   233b5:	bd 07 00 00 00       	mov    $0x7,%ebp
   233ba:	e9 96 f8 ff ff       	jmpq   22c55 <version_etc+0x2c5>
   233bf:	90                   	nop

00000000000233c0 <emit_bug_reporting_address>:

void
emit_bug_reporting_address (void)
{
   233c0:	53                   	push   %rbx
  /* TRANSLATORS: The placeholder indicates the bug-reporting address
     for this package.  Please add _another line_ saying
     "Report translation bugs to <...>\n" with the address for translation
     bugs (typically your translation team's web or email address).  */
  printf (_("\nReport bugs to: %s\n"), PACKAGE_BUGREPORT);
   233c1:	48 8d 35 52 6a 00 00 	lea    0x6a52(%rip),%rsi        # 29e1a <quoting_style_vals+0x7a>
   233c8:	ba 05 00 00 00       	mov    $0x5,%edx
   233cd:	31 ff                	xor    %edi,%edi
   233cf:	e8 4c e5 fd ff       	callq  1920 <dcgettext@plt>
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
   233d4:	48 8d 15 54 6a 00 00 	lea    0x6a54(%rip),%rdx        # 29e2f <quoting_style_vals+0x8f>
   233db:	48 89 c6             	mov    %rax,%rsi
   233de:	bf 01 00 00 00       	mov    $0x1,%edi
   233e3:	31 c0                	xor    %eax,%eax
   233e5:	e8 66 e7 fd ff       	callq  1b50 <__printf_chk@plt>
#ifdef PACKAGE_PACKAGER_BUG_REPORTS
  printf (_("Report %s bugs to: %s\n"), PACKAGE_PACKAGER,
          PACKAGE_PACKAGER_BUG_REPORTS);
#endif
#ifdef PACKAGE_URL
  printf (_("%s home page: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
   233ea:	48 8d 35 54 6a 00 00 	lea    0x6a54(%rip),%rsi        # 29e45 <quoting_style_vals+0xa5>
   233f1:	ba 05 00 00 00       	mov    $0x5,%edx
   233f6:	31 ff                	xor    %edi,%edi
   233f8:	e8 23 e5 fd ff       	callq  1920 <dcgettext@plt>
   233fd:	48 8d 0d 8c 64 00 00 	lea    0x648c(%rip),%rcx        # 29890 <_IO_stdin_used+0x510>
   23404:	48 8d 15 1b 60 00 00 	lea    0x601b(%rip),%rdx        # 29426 <_IO_stdin_used+0xa6>
   2340b:	48 89 c6             	mov    %rax,%rsi
   2340e:	bf 01 00 00 00       	mov    $0x1,%edi
   23413:	31 c0                	xor    %eax,%eax
   23415:	e8 36 e7 fd ff       	callq  1b50 <__printf_chk@plt>
#else
  printf (_("%s home page: <http://www.gnu.org/software/%s/>\n"),
          PACKAGE_NAME, PACKAGE);
#endif
  fputs (_("General help using GNU software: <http://www.gnu.org/gethelp/>\n"),
   2341a:	48 8b 1d 67 9c 20 00 	mov    0x209c67(%rip),%rbx        # 22d088 <stdout@@GLIBC_2.2.5>
   23421:	48 8d 35 50 6c 00 00 	lea    0x6c50(%rip),%rsi        # 2a078 <quoting_style_vals+0x2d8>
   23428:	31 ff                	xor    %edi,%edi
   2342a:	ba 05 00 00 00       	mov    $0x5,%edx
   2342f:	e8 ec e4 fd ff       	callq  1920 <dcgettext@plt>
   23434:	48 89 de             	mov    %rbx,%rsi
   23437:	48 89 c7             	mov    %rax,%rdi
         stdout);
}
   2343a:	5b                   	pop    %rbx
  fputs (_("General help using GNU software: <http://www.gnu.org/gethelp/>\n"),
   2343b:	e9 20 e6 fd ff       	jmpq   1a60 <fputs_unlocked@plt>

0000000000023440 <xnmalloc>:
  if (xalloc_oversized (n, s))
   23440:	48 89 f8             	mov    %rdi,%rax
{
   23443:	53                   	push   %rbx
  if (xalloc_oversized (n, s))
   23444:	48 f7 e6             	mul    %rsi
   23447:	70 74                	jo     234bd <xnmalloc+0x7d>
   23449:	50                   	push   %rax
   2344a:	48 c7 c0 00 88 31 33 	mov    $0x33318800,%rax
   23451:	48 89 05 e8 04 73 00 	mov    %rax,0x7304e8(%rip)        # 753940 <edgeId>
   23458:	58                   	pop    %rax
   23459:	e8 fa 38 fe ff       	callq  6d58 <_storeEdge>
/* Allocate N bytes of memory dynamically, with error checking.  */

void *
xmalloc (size_t n)
{
  void *p = malloc (n);
   2345e:	48 89 c7             	mov    %rax,%rdi
   23461:	48 89 c3             	mov    %rax,%rbx
   23464:	e8 47 e6 fd ff       	callq  1ab0 <malloc@plt>
  if (!p && n != 0)
   23469:	48 85 c0             	test   %rax,%rax
   2346c:	75 35                	jne    234a3 <xnmalloc+0x63>
   2346e:	50                   	push   %rax
   2346f:	48 b8 8c 99 09 cc 00 	movabs $0xcc09998c,%rax
   23476:	00 00 00 
   23479:	48 89 05 c0 04 73 00 	mov    %rax,0x7304c0(%rip)        # 753940 <edgeId>
   23480:	58                   	pop    %rax
   23481:	e8 d2 38 fe ff       	callq  6d58 <_storeEdge>
   23486:	48 85 db             	test   %rbx,%rbx
   23489:	75 32                	jne    234bd <xnmalloc+0x7d>
   2348b:	50                   	push   %rax
   2348c:	48 b8 63 66 02 b3 00 	movabs $0xb3026663,%rax
   23493:	00 00 00 
   23496:	48 89 05 a3 04 73 00 	mov    %rax,0x7304a3(%rip)        # 753940 <edgeId>
   2349d:	58                   	pop    %rax
   2349e:	e8 b5 38 fe ff       	callq  6d58 <_storeEdge>
   234a3:	50                   	push   %rax
   234a4:	48 b8 31 33 81 d9 00 	movabs $0xd9813331,%rax
   234ab:	00 00 00 
   234ae:	48 89 05 8b 04 73 00 	mov    %rax,0x73048b(%rip)        # 753940 <edgeId>
   234b5:	58                   	pop    %rax
   234b6:	e8 9d 38 fe ff       	callq  6d58 <_storeEdge>
}
   234bb:	5b                   	pop    %rbx
   234bc:	c3                   	retq   
   234bd:	50                   	push   %rax
   234be:	48 c7 c0 4c 60 76 54 	mov    $0x5476604c,%rax
   234c5:	48 89 05 74 04 73 00 	mov    %rax,0x730474(%rip)        # 753940 <edgeId>
   234cc:	58                   	pop    %rax
   234cd:	e8 86 38 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   234d2:	e8 39 08 00 00       	callq  23d10 <xalloc_die>
   234d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   234de:	00 00 

00000000000234e0 <xnrealloc>:
  if (xalloc_oversized (n, s))
   234e0:	48 89 f0             	mov    %rsi,%rax
{
   234e3:	53                   	push   %rbx
  if (xalloc_oversized (n, s))
   234e4:	48 f7 e2             	mul    %rdx
   234e7:	0f 80 e9 00 00 00    	jo     235d6 <xnrealloc+0xf6>
   234ed:	50                   	push   %rax
   234ee:	48 b8 2a d2 b2 99 00 	movabs $0x99b2d22a,%rax
   234f5:	00 00 00 
   234f8:	48 89 05 41 04 73 00 	mov    %rax,0x730441(%rip)        # 753940 <edgeId>
   234ff:	58                   	pop    %rax
   23500:	e8 53 38 fe ff       	callq  6d58 <_storeEdge>
   with error checking.  */

void *
xrealloc (void *p, size_t n)
{
  if (!n && p)
   23505:	48 85 c0             	test   %rax,%rax
   23508:	48 89 c3             	mov    %rax,%rbx
   2350b:	75 36                	jne    23543 <xnrealloc+0x63>
   2350d:	50                   	push   %rax
   2350e:	48 b8 a4 65 33 fd 00 	movabs $0xfd3365a4,%rax
   23515:	00 00 00 
   23518:	48 89 05 21 04 73 00 	mov    %rax,0x730421(%rip)        # 753940 <edgeId>
   2351f:	58                   	pop    %rax
   23520:	e8 33 38 fe ff       	callq  6d58 <_storeEdge>
   23525:	48 85 ff             	test   %rdi,%rdi
   23528:	0f 85 8a 00 00 00    	jne    235b8 <xnrealloc+0xd8>
   2352e:	50                   	push   %rax
   2352f:	48 c7 c0 69 d9 4c 3f 	mov    $0x3f4cd969,%rax
   23536:	48 89 05 03 04 73 00 	mov    %rax,0x730403(%rip)        # 753940 <edgeId>
   2353d:	58                   	pop    %rax
   2353e:	e8 15 38 fe ff       	callq  6d58 <_storeEdge>
   23543:	50                   	push   %rax
   23544:	48 c7 c0 b4 6c a6 1f 	mov    $0x1fa66cb4,%rax
   2354b:	48 89 05 ee 03 73 00 	mov    %rax,0x7303ee(%rip)        # 753940 <edgeId>
   23552:	58                   	pop    %rax
   23553:	e8 00 38 fe ff       	callq  6d58 <_storeEdge>
         GNU, even if the underlying realloc is C99.  */
      free (p);
      return NULL;
    }

  p = realloc (p, n);
   23558:	48 89 de             	mov    %rbx,%rsi
   2355b:	e8 c0 e5 fd ff       	callq  1b20 <realloc@plt>
  if (!p && n)
   23560:	48 85 c0             	test   %rax,%rax
   23563:	75 32                	jne    23597 <xnrealloc+0xb7>
   23565:	50                   	push   %rax
   23566:	48 b8 6c a6 1f e9 00 	movabs $0xe91fa66c,%rax
   2356d:	00 00 00 
   23570:	48 89 05 c9 03 73 00 	mov    %rax,0x7303c9(%rip)        # 753940 <edgeId>
   23577:	58                   	pop    %rax
   23578:	e8 db 37 fe ff       	callq  6d58 <_storeEdge>
   2357d:	48 85 db             	test   %rbx,%rbx
   23580:	75 54                	jne    235d6 <xnrealloc+0xf6>
   23582:	50                   	push   %rax
   23583:	48 c7 c0 9b e9 47 7a 	mov    $0x7a47e99b,%rax
   2358a:	48 89 05 af 03 73 00 	mov    %rax,0x7303af(%rip)        # 753940 <edgeId>
   23591:	58                   	pop    %rax
   23592:	e8 c1 37 fe ff       	callq  6d58 <_storeEdge>
   23597:	50                   	push   %rax
   23598:	48 b8 cd f4 23 bd 00 	movabs $0xbd23f4cd,%rax
   2359f:	00 00 00 
   235a2:	48 89 05 97 03 73 00 	mov    %rax,0x730397(%rip)        # 753940 <edgeId>
   235a9:	58                   	pop    %rax
   235aa:	e8 a9 37 fe ff       	callq  6d58 <_storeEdge>
}
   235af:	5b                   	pop    %rbx
   235b0:	c3                   	retq   
   235b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   235b8:	50                   	push   %rax
   235b9:	48 c7 c0 3f d2 eb 4c 	mov    $0x4cebd23f,%rax
   235c0:	48 89 05 79 03 73 00 	mov    %rax,0x730379(%rip)        # 753940 <edgeId>
   235c7:	58                   	pop    %rax
   235c8:	e8 8b 37 fe ff       	callq  6d58 <_storeEdge>
      free (p);
   235cd:	e8 9e e2 fd ff       	callq  1870 <free@plt>
      return NULL;
   235d2:	31 c0                	xor    %eax,%eax
   235d4:	5b                   	pop    %rbx
   235d5:	c3                   	retq   
   235d6:	50                   	push   %rax
   235d7:	48 c7 c0 3a 93 ad 5b 	mov    $0x5bad933a,%rax
   235de:	48 89 05 5b 03 73 00 	mov    %rax,0x73035b(%rip)        # 753940 <edgeId>
   235e5:	58                   	pop    %rax
   235e6:	e8 6d 37 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   235eb:	e8 20 07 00 00       	callq  23d10 <xalloc_die>

00000000000235f0 <x2nrealloc>:
  if (! p)
   235f0:	48 85 ff             	test   %rdi,%rdi
{
   235f3:	53                   	push   %rbx
   235f4:	48 89 d1             	mov    %rdx,%rcx
  size_t n = *pn;
   235f7:	48 8b 1e             	mov    (%rsi),%rbx
  if (! p)
   235fa:	0f 84 50 01 00 00    	je     23750 <x2nrealloc+0x160>
   23600:	50                   	push   %rax
   23601:	48 b8 d5 42 c2 eb 00 	movabs $0xebc242d5,%rax
   23608:	00 00 00 
   2360b:	48 89 05 2e 03 73 00 	mov    %rax,0x73032e(%rip)        # 753940 <edgeId>
   23612:	58                   	pop    %rax
   23613:	e8 40 37 fe ff       	callq  6d58 <_storeEdge>
      if ((size_t) -1 / 3 * 2 / s <= n)
   23618:	31 d2                	xor    %edx,%edx
   2361a:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaaa,%rax
   23621:	aa aa aa 
   23624:	48 f7 f1             	div    %rcx
   23627:	48 89 15 ea 02 73 00 	mov    %rdx,0x7302ea(%rip)        # 753918 <tmpquadone>
   2362e:	48 89 0d fb a5 5d 00 	mov    %rcx,0x5da5fb(%rip)        # 5fdc30 <tmpquadtwo>
   23635:	48 8d 15 b4 a5 5d 00 	lea    0x5da5b4(%rip),%rdx        # 5fdbf0 <funcinptr>
   2363c:	48 c7 02 51 0e 00 00 	movq   $0xe51,(%rdx)
   23643:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   2364a:	00 
   2364b:	48 89 d9             	mov    %rbx,%rcx
   2364e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   23652:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   23659:	00 
   2365a:	48 89 c1             	mov    %rax,%rcx
   2365d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   23661:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   23668:	00 
   23669:	ff 32                	pushq  (%rdx)
   2366b:	48 8b 15 a6 02 73 00 	mov    0x7302a6(%rip),%rdx        # 753918 <tmpquadone>
   23672:	48 8b 0d b7 a5 5d 00 	mov    0x5da5b7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   23679:	48 c7 05 cc 02 73 00 	movq   $0x1,0x7302cc(%rip)        # 753950 <cmpPassed>
   23680:	01 00 00 00 
   23684:	e8 67 37 fe ff       	callq  6df0 <_storeDataFn>
   23689:	48 39 d8             	cmp    %rbx,%rax
   2368c:	0f 86 4f 01 00 00    	jbe    237e1 <x2nrealloc+0x1f1>
   23692:	50                   	push   %rax
   23693:	48 b8 85 84 d7 a1 00 	movabs $0xa1d78485,%rax
   2369a:	00 00 00 
   2369d:	48 89 05 9c 02 73 00 	mov    %rax,0x73029c(%rip)        # 753940 <edgeId>
   236a4:	58                   	pop    %rax
   236a5:	e8 ae 36 fe ff       	callq  6d58 <_storeEdge>
      n += n / 2 + 1;
   236aa:	49 89 d8             	mov    %rbx,%r8
   236ad:	49 d1 e8             	shr    %r8
   236b0:	49 8d 5c 18 01       	lea    0x1(%r8,%rbx,1),%rbx
  *pn = n;
   236b5:	48 89 1e             	mov    %rbx,(%rsi)
  return xrealloc (p, n * s);
   236b8:	48 0f af d9          	imul   %rcx,%rbx
  if (!n && p)
   236bc:	48 85 db             	test   %rbx,%rbx
   236bf:	0f 84 fb 00 00 00    	je     237c0 <x2nrealloc+0x1d0>
   236c5:	50                   	push   %rax
   236c6:	48 c7 c0 af 43 19 1e 	mov    $0x1e1943af,%rax
   236cd:	48 89 05 6c 02 73 00 	mov    %rax,0x73026c(%rip)        # 753940 <edgeId>
   236d4:	58                   	pop    %rax
   236d5:	e8 7e 36 fe ff       	callq  6d58 <_storeEdge>
   236da:	50                   	push   %rax
   236db:	48 b8 eb 50 86 87 00 	movabs $0x878650eb,%rax
   236e2:	00 00 00 
   236e5:	48 89 05 54 02 73 00 	mov    %rax,0x730254(%rip)        # 753940 <edgeId>
   236ec:	58                   	pop    %rax
   236ed:	e8 66 36 fe ff       	callq  6d58 <_storeEdge>
  p = realloc (p, n);
   236f2:	48 89 de             	mov    %rbx,%rsi
   236f5:	e8 26 e4 fd ff       	callq  1b20 <realloc@plt>
  if (!p && n)
   236fa:	48 85 c0             	test   %rax,%rax
   236fd:	75 39                	jne    23738 <x2nrealloc+0x148>
   236ff:	50                   	push   %rax
   23700:	48 b8 50 86 87 e5 00 	movabs $0xe5878650,%rax
   23707:	00 00 00 
   2370a:	48 89 05 2f 02 73 00 	mov    %rax,0x73022f(%rip)        # 753940 <edgeId>
   23711:	58                   	pop    %rax
   23712:	e8 41 36 fe ff       	callq  6d58 <_storeEdge>
   23717:	48 85 db             	test   %rbx,%rbx
   2371a:	0f 85 c1 00 00 00    	jne    237e1 <x2nrealloc+0x1f1>
   23720:	50                   	push   %rax
   23721:	48 b8 94 e1 61 b9 00 	movabs $0xb961e194,%rax
   23728:	00 00 00 
   2372b:	48 89 05 0e 02 73 00 	mov    %rax,0x73020e(%rip)        # 753940 <edgeId>
   23732:	58                   	pop    %rax
   23733:	e8 20 36 fe ff       	callq  6d58 <_storeEdge>
   23738:	50                   	push   %rax
   23739:	48 c7 c0 ca f0 b0 5c 	mov    $0x5cb0f0ca,%rax
   23740:	48 89 05 f9 01 73 00 	mov    %rax,0x7301f9(%rip)        # 753940 <edgeId>
   23747:	58                   	pop    %rax
   23748:	e8 0b 36 fe ff       	callq  6d58 <_storeEdge>
}
   2374d:	5b                   	pop    %rbx
   2374e:	c3                   	retq   
   2374f:	90                   	nop
   23750:	50                   	push   %rax
   23751:	48 b8 0f cb 45 91 00 	movabs $0x9145cb0f,%rax
   23758:	00 00 00 
   2375b:	48 89 05 de 01 73 00 	mov    %rax,0x7301de(%rip)        # 753940 <edgeId>
   23762:	58                   	pop    %rax
   23763:	e8 f0 35 fe ff       	callq  6d58 <_storeEdge>
      if (! n)
   23768:	48 85 db             	test   %rbx,%rbx
   2376b:	75 2d                	jne    2379a <x2nrealloc+0x1aa>
   2376d:	50                   	push   %rax
   2376e:	48 b8 b0 5c 14 e9 00 	movabs $0xe9145cb0,%rax
   23775:	00 00 00 
   23778:	48 89 05 c1 01 73 00 	mov    %rax,0x7301c1(%rip)        # 753940 <edgeId>
   2377f:	58                   	pop    %rax
   23780:	e8 d3 35 fe ff       	callq  6d58 <_storeEdge>
          n = DEFAULT_MXFAST / s;
   23785:	31 d2                	xor    %edx,%edx
   23787:	b8 80 00 00 00       	mov    $0x80,%eax
          n += !n;
   2378c:	31 db                	xor    %ebx,%ebx
          n = DEFAULT_MXFAST / s;
   2378e:	48 f7 f1             	div    %rcx
          n += !n;
   23791:	48 85 c0             	test   %rax,%rax
   23794:	0f 94 c3             	sete   %bl
   23797:	48 01 c3             	add    %rax,%rbx
   2379a:	50                   	push   %rax
   2379b:	48 b8 8a f4 6f c8 00 	movabs $0xc86ff48a,%rax
   237a2:	00 00 00 
   237a5:	48 89 05 94 01 73 00 	mov    %rax,0x730194(%rip)        # 753940 <edgeId>
   237ac:	58                   	pop    %rax
   237ad:	e8 a6 35 fe ff       	callq  6d58 <_storeEdge>
  *pn = n;
   237b2:	48 89 1e             	mov    %rbx,(%rsi)
  return xrealloc (p, n * s);
   237b5:	48 0f af d9          	imul   %rcx,%rbx
   237b9:	e9 1c ff ff ff       	jmpq   236da <x2nrealloc+0xea>
   237be:	66 90                	xchg   %ax,%ax
   237c0:	50                   	push   %rax
   237c1:	48 b8 fe 0d 99 a2 00 	movabs $0xa2990dfe,%rax
   237c8:	00 00 00 
   237cb:	48 89 05 6e 01 73 00 	mov    %rax,0x73016e(%rip)        # 753940 <edgeId>
   237d2:	58                   	pop    %rax
   237d3:	e8 80 35 fe ff       	callq  6d58 <_storeEdge>
      free (p);
   237d8:	e8 93 e0 fd ff       	callq  1870 <free@plt>
      return NULL;
   237dd:	31 c0                	xor    %eax,%eax
}
   237df:	5b                   	pop    %rbx
   237e0:	c3                   	retq   
   237e1:	50                   	push   %rax
   237e2:	48 c7 c0 4c d1 56 6b 	mov    $0x6b56d14c,%rax
   237e9:	48 89 05 50 01 73 00 	mov    %rax,0x730150(%rip)        # 753940 <edgeId>
   237f0:	58                   	pop    %rax
   237f1:	e8 62 35 fe ff       	callq  6d58 <_storeEdge>
        xalloc_die ();
   237f6:	e8 15 05 00 00       	callq  23d10 <xalloc_die>
   237fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023800 <xcharalloc>:
{
   23800:	53                   	push   %rbx
   23801:	48 89 fb             	mov    %rdi,%rbx
  void *p = malloc (n);
   23804:	e8 a7 e2 fd ff       	callq  1ab0 <malloc@plt>
  if (!p && n != 0)
   23809:	48 85 c0             	test   %rax,%rax
   2380c:	75 2f                	jne    2383d <xcharalloc+0x3d>
   2380e:	50                   	push   %rax
   2380f:	48 c7 c0 eb 53 ca 1f 	mov    $0x1fca53eb,%rax
   23816:	48 89 05 23 01 73 00 	mov    %rax,0x730123(%rip)        # 753940 <edgeId>
   2381d:	58                   	pop    %rax
   2381e:	e8 35 35 fe ff       	callq  6d58 <_storeEdge>
   23823:	48 85 db             	test   %rbx,%rbx
   23826:	75 2c                	jne    23854 <xcharalloc+0x54>
   23828:	50                   	push   %rax
   23829:	48 c7 c0 fa 94 f2 47 	mov    $0x47f294fa,%rax
   23830:	48 89 05 09 01 73 00 	mov    %rax,0x730109(%rip)        # 753940 <edgeId>
   23837:	58                   	pop    %rax
   23838:	e8 1b 35 fe ff       	callq  6d58 <_storeEdge>
   2383d:	50                   	push   %rax
   2383e:	48 c7 c0 7d 4a f9 23 	mov    $0x23f94a7d,%rax
   23845:	48 89 05 f4 00 73 00 	mov    %rax,0x7300f4(%rip)        # 753940 <edgeId>
   2384c:	58                   	pop    %rax
   2384d:	e8 06 35 fe ff       	callq  6d58 <_storeEdge>
}
   23852:	5b                   	pop    %rbx
   23853:	c3                   	retq   
   23854:	50                   	push   %rax
   23855:	48 b8 52 fe 48 a1 00 	movabs $0xa148fe52,%rax
   2385c:	00 00 00 
   2385f:	48 89 05 da 00 73 00 	mov    %rax,0x7300da(%rip)        # 753940 <edgeId>
   23866:	58                   	pop    %rax
   23867:	e8 ec 34 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   2386c:	e8 9f 04 00 00       	callq  23d10 <xalloc_die>
   23871:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   23876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2387d:	00 00 00 

0000000000023880 <xmalloc>:
{
   23880:	53                   	push   %rbx
   23881:	48 89 fb             	mov    %rdi,%rbx
  void *p = malloc (n);
   23884:	e8 27 e2 fd ff       	callq  1ab0 <malloc@plt>
  if (!p && n != 0)
   23889:	48 85 c0             	test   %rax,%rax
   2388c:	75 32                	jne    238c0 <xmalloc+0x40>
   2388e:	50                   	push   %rax
   2388f:	48 c7 c0 7e 65 a3 08 	mov    $0x8a3657e,%rax
   23896:	48 89 05 a3 00 73 00 	mov    %rax,0x7300a3(%rip)        # 753940 <edgeId>
   2389d:	58                   	pop    %rax
   2389e:	e8 b5 34 fe ff       	callq  6d58 <_storeEdge>
   238a3:	48 85 db             	test   %rbx,%rbx
   238a6:	75 32                	jne    238da <xmalloc+0x5a>
   238a8:	50                   	push   %rax
   238a9:	48 b8 5f d9 28 c2 00 	movabs $0xc228d95f,%rax
   238b0:	00 00 00 
   238b3:	48 89 05 86 00 73 00 	mov    %rax,0x730086(%rip)        # 753940 <edgeId>
   238ba:	58                   	pop    %rax
   238bb:	e8 98 34 fe ff       	callq  6d58 <_storeEdge>
   238c0:	50                   	push   %rax
   238c1:	48 b8 af 6c 14 e1 00 	movabs $0xe1146caf,%rax
   238c8:	00 00 00 
   238cb:	48 89 05 6e 00 73 00 	mov    %rax,0x73006e(%rip)        # 753940 <edgeId>
   238d2:	58                   	pop    %rax
   238d3:	e8 80 34 fe ff       	callq  6d58 <_storeEdge>
}
   238d8:	5b                   	pop    %rbx
   238d9:	c3                   	retq   
   238da:	50                   	push   %rax
   238db:	48 b8 6c 14 e1 8b 00 	movabs $0x8be1146c,%rax
   238e2:	00 00 00 
   238e5:	48 89 05 54 00 73 00 	mov    %rax,0x730054(%rip)        # 753940 <edgeId>
   238ec:	58                   	pop    %rax
   238ed:	e8 66 34 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   238f2:	e8 19 04 00 00       	callq  23d10 <xalloc_die>
   238f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   238fe:	00 00 

0000000000023900 <xrealloc>:
  if (!n && p)
   23900:	48 85 f6             	test   %rsi,%rsi
{
   23903:	53                   	push   %rbx
   23904:	48 89 f3             	mov    %rsi,%rbx
  if (!n && p)
   23907:	75 33                	jne    2393c <xrealloc+0x3c>
   23909:	50                   	push   %rax
   2390a:	48 c7 c0 c5 27 2a 46 	mov    $0x462a27c5,%rax
   23911:	48 89 05 28 00 73 00 	mov    %rax,0x730028(%rip)        # 753940 <edgeId>
   23918:	58                   	pop    %rax
   23919:	e8 3a 34 fe ff       	callq  6d58 <_storeEdge>
   2391e:	48 85 ff             	test   %rdi,%rdi
   23921:	0f 85 89 00 00 00    	jne    239b0 <xrealloc+0xb0>
   23927:	50                   	push   %rax
   23928:	48 c7 c0 f1 89 8a 51 	mov    $0x518a89f1,%rax
   2392f:	48 89 05 0a 00 73 00 	mov    %rax,0x73000a(%rip)        # 753940 <edgeId>
   23936:	58                   	pop    %rax
   23937:	e8 1c 34 fe ff       	callq  6d58 <_storeEdge>
   2393c:	50                   	push   %rax
   2393d:	48 b8 f8 44 c5 a8 00 	movabs $0xa8c544f8,%rax
   23944:	00 00 00 
   23947:	48 89 05 f2 ff 72 00 	mov    %rax,0x72fff2(%rip)        # 753940 <edgeId>
   2394e:	58                   	pop    %rax
   2394f:	e8 04 34 fe ff       	callq  6d58 <_storeEdge>
  p = realloc (p, n);
   23954:	48 89 de             	mov    %rbx,%rsi
   23957:	e8 c4 e1 fd ff       	callq  1b20 <realloc@plt>
  if (!p && n)
   2395c:	48 85 c0             	test   %rax,%rax
   2395f:	75 32                	jne    23993 <xrealloc+0x93>
   23961:	50                   	push   %rax
   23962:	48 b8 44 c5 a8 92 00 	movabs $0x92a8c544,%rax
   23969:	00 00 00 
   2396c:	48 89 05 cd ff 72 00 	mov    %rax,0x72ffcd(%rip)        # 753940 <edgeId>
   23973:	58                   	pop    %rax
   23974:	e8 df 33 fe ff       	callq  6d58 <_storeEdge>
   23979:	48 85 db             	test   %rbx,%rbx
   2397c:	75 50                	jne    239ce <xrealloc+0xce>
   2397e:	50                   	push   %rax
   2397f:	48 c7 c0 51 31 aa 24 	mov    $0x24aa3151,%rax
   23986:	48 89 05 b3 ff 72 00 	mov    %rax,0x72ffb3(%rip)        # 753940 <edgeId>
   2398d:	58                   	pop    %rax
   2398e:	e8 c5 33 fe ff       	callq  6d58 <_storeEdge>
   23993:	50                   	push   %rax
   23994:	48 b8 a8 18 55 92 00 	movabs $0x925518a8,%rax
   2399b:	00 00 00 
   2399e:	48 89 05 9b ff 72 00 	mov    %rax,0x72ff9b(%rip)        # 753940 <edgeId>
   239a5:	58                   	pop    %rax
   239a6:	e8 ad 33 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
  return p;
}
   239ab:	5b                   	pop    %rbx
   239ac:	c3                   	retq   
   239ad:	0f 1f 00             	nopl   (%rax)
   239b0:	50                   	push   %rax
   239b1:	48 c7 c0 46 95 24 0c 	mov    $0xc249546,%rax
   239b8:	48 89 05 81 ff 72 00 	mov    %rax,0x72ff81(%rip)        # 753940 <edgeId>
   239bf:	58                   	pop    %rax
   239c0:	e8 93 33 fe ff       	callq  6d58 <_storeEdge>
      free (p);
   239c5:	e8 a6 de fd ff       	callq  1870 <free@plt>
      return NULL;
   239ca:	31 c0                	xor    %eax,%eax
}
   239cc:	5b                   	pop    %rbx
   239cd:	c3                   	retq   
   239ce:	50                   	push   %rax
   239cf:	48 b8 92 30 e0 b1 00 	movabs $0xb1e03092,%rax
   239d6:	00 00 00 
   239d9:	48 89 05 60 ff 72 00 	mov    %rax,0x72ff60(%rip)        # 753940 <edgeId>
   239e0:	58                   	pop    %rax
   239e1:	e8 72 33 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   239e6:	e8 25 03 00 00       	callq  23d10 <xalloc_die>
   239eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000239f0 <x2realloc>:
   return the pointer to the new block.  *PN is never set to zero, and
   the returned pointer is never null.  */

void *
x2realloc (void *p, size_t *pn)
{
   239f0:	48 83 ec 08          	sub    $0x8,%rsp
  if (! p)
   239f4:	48 85 ff             	test   %rdi,%rdi
  size_t n = *pn;
   239f7:	48 8b 06             	mov    (%rsi),%rax
  if (! p)
   239fa:	0f 84 f0 00 00 00    	je     23af0 <x2realloc+0x100>
   23a00:	50                   	push   %rax
   23a01:	48 c7 c0 ec 29 a0 7c 	mov    $0x7ca029ec,%rax
   23a08:	48 89 05 31 ff 72 00 	mov    %rax,0x72ff31(%rip)        # 753940 <edgeId>
   23a0f:	58                   	pop    %rax
   23a10:	e8 43 33 fe ff       	callq  6d58 <_storeEdge>
      if ((size_t) -1 / 3 * 2 / s <= n)
   23a15:	48 ba a9 aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa9,%rdx
   23a1c:	aa aa aa 
   23a1f:	48 89 0d f2 fe 72 00 	mov    %rcx,0x72fef2(%rip)        # 753918 <tmpquadone>
   23a26:	48 89 1d 03 a2 5d 00 	mov    %rbx,0x5da203(%rip)        # 5fdc30 <tmpquadtwo>
   23a2d:	48 8d 0d bc a1 5d 00 	lea    0x5da1bc(%rip),%rcx        # 5fdbf0 <funcinptr>
   23a34:	48 c7 01 52 0e 00 00 	movq   $0xe52,(%rcx)
   23a3b:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   23a42:	00 
   23a43:	48 89 d3             	mov    %rdx,%rbx
   23a46:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   23a4a:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   23a51:	00 
   23a52:	48 89 c3             	mov    %rax,%rbx
   23a55:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   23a59:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   23a60:	00 
   23a61:	ff 31                	pushq  (%rcx)
   23a63:	48 8b 0d ae fe 72 00 	mov    0x72feae(%rip),%rcx        # 753918 <tmpquadone>
   23a6a:	48 8b 1d bf a1 5d 00 	mov    0x5da1bf(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   23a71:	48 c7 05 d4 fe 72 00 	movq   $0x1,0x72fed4(%rip)        # 753950 <cmpPassed>
   23a78:	01 00 00 00 
   23a7c:	e8 6f 33 fe ff       	callq  6df0 <_storeDataFn>
   23a81:	48 39 d0             	cmp    %rdx,%rax
   23a84:	0f 87 8a 00 00 00    	ja     23b14 <x2realloc+0x124>
   23a8a:	50                   	push   %rax
   23a8b:	48 c7 c0 9e 02 ca 77 	mov    $0x77ca029e,%rax
   23a92:	48 89 05 a7 fe 72 00 	mov    %rax,0x72fea7(%rip)        # 753940 <edgeId>
   23a99:	58                   	pop    %rax
   23a9a:	e8 b9 32 fe ff       	callq  6d58 <_storeEdge>
      n += n / 2 + 1;
   23a9f:	48 89 c1             	mov    %rax,%rcx
   23aa2:	48 d1 e9             	shr    %rcx
   23aa5:	48 8d 44 08 01       	lea    0x1(%rax,%rcx,1),%rax
   23aaa:	50                   	push   %rax
   23aab:	48 b8 14 50 be 83 00 	movabs $0x83be5014,%rax
   23ab2:	00 00 00 
   23ab5:	48 89 05 84 fe 72 00 	mov    %rax,0x72fe84(%rip)        # 753940 <edgeId>
   23abc:	58                   	pop    %rax
   23abd:	e8 96 32 fe ff       	callq  6d58 <_storeEdge>
  *pn = n;
   23ac2:	48 89 06             	mov    %rax,(%rsi)
  p = realloc (p, n);
   23ac5:	48 89 c6             	mov    %rax,%rsi
   23ac8:	e8 53 e0 fd ff       	callq  1b20 <realloc@plt>
  if (!p && n)
   23acd:	48 85 c0             	test   %rax,%rax
   23ad0:	74 42                	je     23b14 <x2realloc+0x124>
   23ad2:	50                   	push   %rax
   23ad3:	48 b8 f2 1d dc a6 00 	movabs $0xa6dc1df2,%rax
   23ada:	00 00 00 
   23add:	48 89 05 5c fe 72 00 	mov    %rax,0x72fe5c(%rip)        # 753940 <edgeId>
   23ae4:	58                   	pop    %rax
   23ae5:	e8 6e 32 fe ff       	callq  6d58 <_storeEdge>
  return x2nrealloc (p, pn, 1);
}
   23aea:	48 83 c4 08          	add    $0x8,%rsp
   23aee:	c3                   	retq   
   23aef:	90                   	nop
   23af0:	50                   	push   %rax
   23af1:	48 c7 c0 e0 36 45 47 	mov    $0x474536e0,%rax
   23af8:	48 89 05 41 fe 72 00 	mov    %rax,0x72fe41(%rip)        # 753940 <edgeId>
   23aff:	58                   	pop    %rax
   23b00:	e8 53 32 fe ff       	callq  6d58 <_storeEdge>
          n += !n;
   23b05:	48 85 c0             	test   %rax,%rax
   23b08:	41 b8 80 00 00 00    	mov    $0x80,%r8d
   23b0e:	49 0f 44 c0          	cmove  %r8,%rax
   23b12:	eb 96                	jmp    23aaa <x2realloc+0xba>
   23b14:	50                   	push   %rax
   23b15:	48 b8 a6 e8 a8 e3 00 	movabs $0xe3a8e8a6,%rax
   23b1c:	00 00 00 
   23b1f:	48 89 05 1a fe 72 00 	mov    %rax,0x72fe1a(%rip)        # 753940 <edgeId>
   23b26:	58                   	pop    %rax
   23b27:	e8 2c 32 fe ff       	callq  6d58 <_storeEdge>
        xalloc_die ();
   23b2c:	e8 df 01 00 00       	callq  23d10 <xalloc_die>
   23b31:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   23b36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   23b3d:	00 00 00 

0000000000023b40 <xzalloc>:
   There's no need for xnzalloc (N, S), since it would be equivalent
   to xcalloc (N, S).  */

void *
xzalloc (size_t s)
{
   23b40:	53                   	push   %rbx
  void *p = malloc (n);
   23b41:	be 01 00 00 00       	mov    $0x1,%esi
{
   23b46:	48 89 fb             	mov    %rdi,%rbx
  void *p = malloc (n);
   23b49:	e8 22 df fd ff       	callq  1a70 <calloc@plt>
  if (!p && n != 0)
   23b4e:	48 85 c0             	test   %rax,%rax
   23b51:	75 2f                	jne    23b82 <xzalloc+0x42>
   23b53:	50                   	push   %rax
   23b54:	48 c7 c0 3e 73 fe 10 	mov    $0x10fe733e,%rax
   23b5b:	48 89 05 de fd 72 00 	mov    %rax,0x72fdde(%rip)        # 753940 <edgeId>
   23b62:	58                   	pop    %rax
   23b63:	e8 f0 31 fe ff       	callq  6d58 <_storeEdge>
   23b68:	48 85 db             	test   %rbx,%rbx
   23b6b:	75 2f                	jne    23b9c <xzalloc+0x5c>
   23b6d:	50                   	push   %rax
   23b6e:	48 c7 c0 cf 9c 3f 44 	mov    $0x443f9ccf,%rax
   23b75:	48 89 05 c4 fd 72 00 	mov    %rax,0x72fdc4(%rip)        # 753940 <edgeId>
   23b7c:	58                   	pop    %rax
   23b7d:	e8 d6 31 fe ff       	callq  6d58 <_storeEdge>
   23b82:	50                   	push   %rax
   23b83:	48 b8 67 ce 1f a2 00 	movabs $0xa21fce67,%rax
   23b8a:	00 00 00 
   23b8d:	48 89 05 ac fd 72 00 	mov    %rax,0x72fdac(%rip)        # 753940 <edgeId>
   23b94:	58                   	pop    %rax
   23b95:	e8 be 31 fe ff       	callq  6d58 <_storeEdge>
  return memset (xmalloc (s), 0, s);
}
   23b9a:	5b                   	pop    %rbx
   23b9b:	c3                   	retq   
   23b9c:	50                   	push   %rax
   23b9d:	48 c7 c0 f3 87 e8 30 	mov    $0x30e887f3,%rax
   23ba4:	48 89 05 95 fd 72 00 	mov    %rax,0x72fd95(%rip)        # 753940 <edgeId>
   23bab:	58                   	pop    %rax
   23bac:	e8 a7 31 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   23bb1:	e8 5a 01 00 00       	callq  23d10 <xalloc_die>
   23bb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   23bbd:	00 00 00 

0000000000023bc0 <xcalloc>:
/* Allocate zeroed memory for N elements of S bytes, with error
   checking.  S must be nonzero.  */

void *
xcalloc (size_t n, size_t s)
{
   23bc0:	48 83 ec 08          	sub    $0x8,%rsp
  void *p;
  /* Test for overflow, since some calloc implementations don't have
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
   23bc4:	e8 a7 de fd ff       	callq  1a70 <calloc@plt>
   23bc9:	48 85 c0             	test   %rax,%rax
   23bcc:	74 1a                	je     23be8 <xcalloc+0x28>
   23bce:	50                   	push   %rax
   23bcf:	48 c7 c0 8c af bb 48 	mov    $0x48bbaf8c,%rax
   23bd6:	48 89 05 63 fd 72 00 	mov    %rax,0x72fd63(%rip)        # 753940 <edgeId>
   23bdd:	58                   	pop    %rax
   23bde:	e8 75 31 fe ff       	callq  6d58 <_storeEdge>
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
  return p;
}
   23be3:	48 83 c4 08          	add    $0x8,%rsp
   23be7:	c3                   	retq   
   23be8:	50                   	push   %rax
   23be9:	48 c7 c0 be ee 22 11 	mov    $0x1122eebe,%rax
   23bf0:	48 89 05 49 fd 72 00 	mov    %rax,0x72fd49(%rip)        # 753940 <edgeId>
   23bf7:	58                   	pop    %rax
   23bf8:	e8 5b 31 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   23bfd:	e8 0e 01 00 00       	callq  23d10 <xalloc_die>
   23c02:	0f 1f 40 00          	nopl   0x0(%rax)
   23c06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   23c0d:	00 00 00 

0000000000023c10 <xmemdup>:
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */

void *
xmemdup (void const *p, size_t s)
{
   23c10:	55                   	push   %rbp
   23c11:	53                   	push   %rbx
   23c12:	48 89 fd             	mov    %rdi,%rbp
  void *p = malloc (n);
   23c15:	48 89 f7             	mov    %rsi,%rdi
{
   23c18:	48 89 f3             	mov    %rsi,%rbx
   23c1b:	48 83 ec 08          	sub    $0x8,%rsp
  void *p = malloc (n);
   23c1f:	e8 8c de fd ff       	callq  1ab0 <malloc@plt>
  if (!p && n != 0)
   23c24:	48 85 c0             	test   %rax,%rax
   23c27:	75 32                	jne    23c5b <xmemdup+0x4b>
   23c29:	50                   	push   %rax
   23c2a:	48 b8 ff 68 42 cd 00 	movabs $0xcd4268ff,%rax
   23c31:	00 00 00 
   23c34:	48 89 05 05 fd 72 00 	mov    %rax,0x72fd05(%rip)        # 753940 <edgeId>
   23c3b:	58                   	pop    %rax
   23c3c:	e8 17 31 fe ff       	callq  6d58 <_storeEdge>
   23c41:	48 85 db             	test   %rbx,%rbx
   23c44:	75 3e                	jne    23c84 <xmemdup+0x74>
   23c46:	50                   	push   %rax
   23c47:	48 c7 c0 3f 9a 50 33 	mov    $0x33509a3f,%rax
   23c4e:	48 89 05 eb fc 72 00 	mov    %rax,0x72fceb(%rip)        # 753940 <edgeId>
   23c55:	58                   	pop    %rax
   23c56:	e8 fd 30 fe ff       	callq  6d58 <_storeEdge>
   23c5b:	50                   	push   %rax
   23c5c:	48 c7 c0 1f 4d a8 19 	mov    $0x19a84d1f,%rax
   23c63:	48 89 05 d6 fc 72 00 	mov    %rax,0x72fcd6(%rip)        # 753940 <edgeId>
   23c6a:	58                   	pop    %rax
   23c6b:	e8 e8 30 fe ff       	callq  6d58 <_storeEdge>
  return memcpy (xmalloc (s), p, s);
}
   23c70:	48 83 c4 08          	add    $0x8,%rsp
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
   23c74:	48 89 da             	mov    %rbx,%rdx
   23c77:	48 89 ee             	mov    %rbp,%rsi
   23c7a:	5b                   	pop    %rbx
   23c7b:	5d                   	pop    %rbp
   23c7c:	48 89 c7             	mov    %rax,%rdi
   23c7f:	e9 0c de fd ff       	jmpq   1a90 <memcpy@plt>
   23c84:	50                   	push   %rax
   23c85:	48 c7 c0 08 ff 3f 15 	mov    $0x153fff08,%rax
   23c8c:	48 89 05 ad fc 72 00 	mov    %rax,0x72fcad(%rip)        # 753940 <edgeId>
   23c93:	58                   	pop    %rax
   23c94:	e8 bf 30 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   23c99:	e8 72 00 00 00       	callq  23d10 <xalloc_die>
   23c9e:	66 90                	xchg   %ax,%ax

0000000000023ca0 <xstrdup>:

/* Clone STRING.  */

char *
xstrdup (char const *string)
{
   23ca0:	55                   	push   %rbp
   23ca1:	53                   	push   %rbx
   23ca2:	48 89 fd             	mov    %rdi,%rbp
   23ca5:	48 83 ec 08          	sub    $0x8,%rsp
  return xmemdup (string, strlen (string) + 1);
   23ca9:	e8 92 dc fd ff       	callq  1940 <strlen@plt>
   23cae:	48 8d 58 01          	lea    0x1(%rax),%rbx
  void *p = malloc (n);
   23cb2:	48 89 df             	mov    %rbx,%rdi
   23cb5:	e8 f6 dd fd ff       	callq  1ab0 <malloc@plt>
  if (!p && n != 0)
   23cba:	48 85 c0             	test   %rax,%rax
   23cbd:	74 2c                	je     23ceb <xstrdup+0x4b>
   23cbf:	50                   	push   %rax
   23cc0:	48 b8 dd 26 39 fd 00 	movabs $0xfd3926dd,%rax
   23cc7:	00 00 00 
   23cca:	48 89 05 6f fc 72 00 	mov    %rax,0x72fc6f(%rip)        # 753940 <edgeId>
   23cd1:	58                   	pop    %rax
   23cd2:	e8 81 30 fe ff       	callq  6d58 <_storeEdge>
}
   23cd7:	48 83 c4 08          	add    $0x8,%rsp
   23cdb:	48 89 da             	mov    %rbx,%rdx
   23cde:	48 89 ee             	mov    %rbp,%rsi
   23ce1:	5b                   	pop    %rbx
   23ce2:	5d                   	pop    %rbp
   23ce3:	48 89 c7             	mov    %rax,%rdi
   23ce6:	e9 a5 dd fd ff       	jmpq   1a90 <memcpy@plt>
   23ceb:	50                   	push   %rax
   23cec:	48 c7 c0 9c 94 11 38 	mov    $0x3811949c,%rax
   23cf3:	48 89 05 46 fc 72 00 	mov    %rax,0x72fc46(%rip)        # 753940 <edgeId>
   23cfa:	58                   	pop    %rax
   23cfb:	e8 58 30 fe ff       	callq  6d58 <_storeEdge>
    xalloc_die ();
   23d00:	e8 0b 00 00 00       	callq  23d10 <xalloc_die>
   23d05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   23d0c:	00 00 00 
   23d0f:	90                   	nop

0000000000023d10 <xalloc_die>:
#define _(msgid) gettext (msgid)

void
xalloc_die (void)
{
  error (exit_failure, 0, "%s", _("memory exhausted"));
   23d10:	48 8d 35 d8 64 00 00 	lea    0x64d8(%rip),%rsi        # 2a1ef <version_etc_copyright+0x2f>
{
   23d17:	48 83 ec 08          	sub    $0x8,%rsp
  error (exit_failure, 0, "%s", _("memory exhausted"));
   23d1b:	ba 05 00 00 00       	mov    $0x5,%edx
   23d20:	31 ff                	xor    %edi,%edi
   23d22:	e8 f9 db fd ff       	callq  1920 <dcgettext@plt>
   23d27:	8b 3d eb 92 20 00    	mov    0x2092eb(%rip),%edi        # 22d018 <exit_failure>
   23d2d:	48 8d 15 2f 57 00 00 	lea    0x572f(%rip),%rdx        # 29463 <_IO_stdin_used+0xe3>
   23d34:	48 89 c1             	mov    %rax,%rcx
   23d37:	31 f6                	xor    %esi,%esi
   23d39:	31 c0                	xor    %eax,%eax
   23d3b:	e8 30 de fd ff       	callq  1b70 <error@plt>

  /* _Noreturn cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
   23d40:	e8 3b db fd ff       	callq  1880 <abort@plt>
   23d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   23d4c:	00 00 00 
   23d4f:	90                   	nop

0000000000023d50 <xstrtoumax>:
/* FIXME: comment.  */

strtol_error
__xstrtol (const char *s, char **ptr, int strtol_base,
           __strtol_t *val, const char *valid_suffixes)
{
   23d50:	41 57                	push   %r15
   23d52:	41 56                	push   %r14
   23d54:	41 55                	push   %r13
   23d56:	41 54                	push   %r12
   23d58:	55                   	push   %rbp
   23d59:	53                   	push   %rbx
   23d5a:	48 83 ec 28          	sub    $0x28,%rsp
   23d5e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   23d65:	00 00 
   23d67:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   23d6c:	31 c0                	xor    %eax,%eax
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
   23d6e:	48 89 0d a3 fb 72 00 	mov    %rcx,0x72fba3(%rip)        # 753918 <tmpquadone>
   23d75:	48 89 1d b4 9e 5d 00 	mov    %rbx,0x5d9eb4(%rip)        # 5fdc30 <tmpquadtwo>
   23d7c:	48 8d 0d 6d 9e 5d 00 	lea    0x5d9e6d(%rip),%rcx        # 5fdbf0 <funcinptr>
   23d83:	48 c7 01 37 0f 00 00 	movq   $0xf37,(%rcx)
   23d8a:	48 c7 41 08 6c 00 00 	movq   $0x6c,0x8(%rcx)
   23d91:	00 
   23d92:	48 c7 c3 24 00 00 00 	mov    $0x24,%rbx
   23d99:	48 89 59 10          	mov    %rbx,0x10(%rcx)
   23d9d:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   23da4:	00 
   23da5:	48 89 d3             	mov    %rdx,%rbx
   23da8:	48 89 59 20          	mov    %rbx,0x20(%rcx)
   23dac:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   23db3:	00 
   23db4:	ff 31                	pushq  (%rcx)
   23db6:	48 8b 0d 5b fb 72 00 	mov    0x72fb5b(%rip),%rcx        # 753918 <tmpquadone>
   23dbd:	48 8b 1d 6c 9e 5d 00 	mov    0x5d9e6c(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   23dc4:	48 c7 05 81 fb 72 00 	movq   $0x1,0x72fb81(%rip)        # 753950 <cmpPassed>
   23dcb:	01 00 00 00 
   23dcf:	e8 6c 3e fe ff       	callq  7c40 <_storeDataFn>
   23dd4:	83 fa 24             	cmp    $0x24,%edx
   23dd7:	0f 87 47 0d 00 00    	ja     24b24 <xstrtoumax+0xdd4>
   23ddd:	50                   	push   %rax
   23dde:	48 c7 c0 26 30 3b 2a 	mov    $0x2a3b3026,%rax
   23de5:	48 89 05 54 fb 72 00 	mov    %rax,0x72fb54(%rip)        # 753940 <edgeId>
   23dec:	58                   	pop    %rax
   23ded:	e8 b6 3d fe ff       	callq  7ba8 <_storeEdge>

  p = (ptr ? ptr : &t_ptr);
   23df2:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
   23df7:	48 85 f6             	test   %rsi,%rsi
   23dfa:	48 89 fb             	mov    %rdi,%rbx
   23dfd:	89 54 24 08          	mov    %edx,0x8(%rsp)
   23e01:	49 89 ce             	mov    %rcx,%r14
   23e04:	4d 89 c5             	mov    %r8,%r13
   23e07:	48 0f 45 ee          	cmovne %rsi,%rbp

  errno = 0;
   23e0b:	e8 80 da fd ff       	callq  1890 <__errno_location@plt>
   23e10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   23e16:	49 89 c4             	mov    %rax,%r12

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
   23e19:	44 0f b6 3b          	movzbl (%rbx),%r15d
      while (isspace (ch))
   23e1d:	e8 3e de fd ff       	callq  1c60 <__ctype_b_loc@plt>
   23e22:	49 89 d9             	mov    %rbx,%r9
   23e25:	48 8b 30             	mov    (%rax),%rsi
   23e28:	8b 54 24 08          	mov    0x8(%rsp),%edx
   23e2c:	eb 22                	jmp    23e50 <xstrtoumax+0x100>
   23e2e:	66 90                	xchg   %ax,%ax
   23e30:	50                   	push   %rax
   23e31:	48 b8 48 cb 66 fa 00 	movabs $0xfa66cb48,%rax
   23e38:	00 00 00 
   23e3b:	48 89 05 fe fa 72 00 	mov    %rax,0x72fafe(%rip)        # 753940 <edgeId>
   23e42:	58                   	pop    %rax
   23e43:	e8 60 3d fe ff       	callq  7ba8 <_storeEdge>
        ch = *++q;
   23e48:	49 83 c1 01          	add    $0x1,%r9
   23e4c:	45 0f b6 39          	movzbl (%r9),%r15d
   23e50:	50                   	push   %rax
   23e51:	48 c7 c0 2d 9b e9 47 	mov    $0x47e99b2d,%rax
   23e58:	48 89 05 e1 fa 72 00 	mov    %rax,0x72fae1(%rip)        # 753940 <edgeId>
   23e5f:	58                   	pop    %rax
   23e60:	e8 43 3d fe ff       	callq  7ba8 <_storeEdge>
      while (isspace (ch))
   23e65:	41 0f b6 cf          	movzbl %r15b,%ecx
   23e69:	f6 44 4e 01 20       	testb  $0x20,0x1(%rsi,%rcx,2)
   23e6e:	75 c0                	jne    23e30 <xstrtoumax+0xe0>
   23e70:	50                   	push   %rax
   23e71:	48 b8 b2 99 7e a4 00 	movabs $0xa47e99b2,%rax
   23e78:	00 00 00 
   23e7b:	48 89 05 be fa 72 00 	mov    %rax,0x72fabe(%rip)        # 753940 <edgeId>
   23e82:	58                   	pop    %rax
   23e83:	e8 20 3d fe ff       	callq  7ba8 <_storeEdge>
      if (ch == '-')
   23e88:	48 89 15 89 fa 72 00 	mov    %rdx,0x72fa89(%rip)        # 753918 <tmpquadone>
   23e8f:	48 89 0d 9a 9d 5d 00 	mov    %rcx,0x5d9d9a(%rip)        # 5fdc30 <tmpquadtwo>
   23e96:	48 8d 15 53 9d 5d 00 	lea    0x5d9d53(%rip),%rdx        # 5fdbf0 <funcinptr>
   23e9d:	48 c7 02 38 0f 00 00 	movq   $0xf38,(%rdx)
   23ea4:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   23eab:	00 
   23eac:	48 c7 c1 2d 00 00 00 	mov    $0x2d,%rcx
   23eb3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   23eb7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   23ebe:	00 
   23ebf:	4c 89 f9             	mov    %r15,%rcx
   23ec2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   23ec6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   23ecd:	00 
   23ece:	ff 32                	pushq  (%rdx)
   23ed0:	48 8b 15 41 fa 72 00 	mov    0x72fa41(%rip),%rdx        # 753918 <tmpquadone>
   23ed7:	48 8b 0d 52 9d 5d 00 	mov    0x5d9d52(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   23ede:	48 c7 05 67 fa 72 00 	movq   $0x1,0x72fa67(%rip)        # 753950 <cmpPassed>
   23ee5:	01 00 00 00 
   23ee9:	e8 52 3d fe ff       	callq  7c40 <_storeDataFn>
   23eee:	41 80 ff 2d          	cmp    $0x2d,%r15b
   23ef2:	0f 84 10 02 00 00    	je     24108 <xstrtoumax+0x3b8>
   23ef8:	50                   	push   %rax
   23ef9:	48 b8 36 d3 8f f4 00 	movabs $0xf48fd336,%rax
   23f00:	00 00 00 
   23f03:	48 89 05 36 fa 72 00 	mov    %rax,0x72fa36(%rip)        # 753940 <edgeId>
   23f0a:	58                   	pop    %rax
   23f0b:	e8 98 3c fe ff       	callq  7ba8 <_storeEdge>
/* Like `strtoul' but convert to `uintmax_t'.  */
__extern_inline uintmax_t
__NTH (strtoumax (const char *__restrict nptr, char **__restrict endptr,
		  int base))
{
  return __strtoul_internal (nptr, endptr, base, 0);
   23f10:	31 c9                	xor    %ecx,%ecx
   23f12:	48 89 ee             	mov    %rbp,%rsi
   23f15:	48 89 df             	mov    %rbx,%rdi
   23f18:	e8 c3 da fd ff       	callq  19e0 <__strtoul_internal@plt>
        return LONGINT_INVALID;
    }

  tmp = __strtol (s, p, strtol_base);

  if (*p == s)
   23f1d:	48 8b 55 00          	mov    0x0(%rbp),%rdx
   23f21:	49 89 c7             	mov    %rax,%r15
   23f24:	48 89 0d ed f9 72 00 	mov    %rcx,0x72f9ed(%rip)        # 753918 <tmpquadone>
   23f2b:	48 89 05 fe 9c 5d 00 	mov    %rax,0x5d9cfe(%rip)        # 5fdc30 <tmpquadtwo>
   23f32:	48 8d 0d b7 9c 5d 00 	lea    0x5d9cb7(%rip),%rcx        # 5fdbf0 <funcinptr>
   23f39:	48 c7 01 39 0f 00 00 	movq   $0xf39,(%rcx)
   23f40:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   23f47:	00 
   23f48:	48 89 d8             	mov    %rbx,%rax
   23f4b:	48 89 41 10          	mov    %rax,0x10(%rcx)
   23f4f:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   23f56:	00 
   23f57:	48 89 d0             	mov    %rdx,%rax
   23f5a:	48 89 41 20          	mov    %rax,0x20(%rcx)
   23f5e:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   23f65:	00 
   23f66:	ff 31                	pushq  (%rcx)
   23f68:	48 8b 0d a9 f9 72 00 	mov    0x72f9a9(%rip),%rcx        # 753918 <tmpquadone>
   23f6f:	48 8b 05 ba 9c 5d 00 	mov    0x5d9cba(%rip),%rax        # 5fdc30 <tmpquadtwo>
   23f76:	48 c7 05 cf f9 72 00 	movq   $0x1,0x72f9cf(%rip)        # 753950 <cmpPassed>
   23f7d:	01 00 00 00 
   23f81:	e8 ba 3c fe ff       	callq  7c40 <_storeDataFn>
   23f86:	48 39 da             	cmp    %rbx,%rdx
   23f89:	0f 84 39 01 00 00    	je     240c8 <xstrtoumax+0x378>
   23f8f:	50                   	push   %rax
   23f90:	48 b8 7a 9d c9 d6 00 	movabs $0xd6c99d7a,%rax
   23f97:	00 00 00 
   23f9a:	48 89 05 9f f9 72 00 	mov    %rax,0x72f99f(%rip)        # 753940 <edgeId>
   23fa1:	58                   	pop    %rax
   23fa2:	e8 01 3c fe ff       	callq  7ba8 <_storeEdge>
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
        tmp = 1;
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
   23fa7:	41 8b 04 24          	mov    (%r12),%eax
   23fab:	85 c0                	test   %eax,%eax
   23fad:	0f 84 cd 01 00 00    	je     24180 <xstrtoumax+0x430>
   23fb3:	50                   	push   %rax
   23fb4:	48 c7 c0 eb 4c b6 6e 	mov    $0x6eb64ceb,%rax
   23fbb:	48 89 05 7e f9 72 00 	mov    %rax,0x72f97e(%rip)        # 753940 <edgeId>
   23fc2:	58                   	pop    %rax
   23fc3:	e8 e0 3b fe ff       	callq  7ba8 <_storeEdge>
    {
      if (errno != ERANGE)
   23fc8:	48 89 15 49 f9 72 00 	mov    %rdx,0x72f949(%rip)        # 753918 <tmpquadone>
   23fcf:	48 89 0d 5a 9c 5d 00 	mov    %rcx,0x5d9c5a(%rip)        # 5fdc30 <tmpquadtwo>
   23fd6:	48 8d 15 13 9c 5d 00 	lea    0x5d9c13(%rip),%rdx        # 5fdbf0 <funcinptr>
   23fdd:	48 c7 02 3a 0f 00 00 	movq   $0xf3a,(%rdx)
   23fe4:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   23feb:	00 
   23fec:	48 c7 c1 22 00 00 00 	mov    $0x22,%rcx
   23ff3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   23ff7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   23ffe:	00 
   23fff:	48 89 c1             	mov    %rax,%rcx
   24002:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24006:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2400d:	00 
   2400e:	ff 32                	pushq  (%rdx)
   24010:	48 8b 15 01 f9 72 00 	mov    0x72f901(%rip),%rdx        # 753918 <tmpquadone>
   24017:	48 8b 0d 12 9c 5d 00 	mov    0x5d9c12(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2401e:	48 c7 05 27 f9 72 00 	movq   $0x1,0x72f927(%rip)        # 753950 <cmpPassed>
   24025:	01 00 00 00 
   24029:	e8 12 3c fe ff       	callq  7c40 <_storeDataFn>
   2402e:	83 f8 22             	cmp    $0x22,%eax
        return LONGINT_INVALID;
      err = LONGINT_OVERFLOW;
   24031:	bb 01 00 00 00       	mov    $0x1,%ebx
      if (errno != ERANGE)
   24036:	0f 85 cc 00 00 00    	jne    24108 <xstrtoumax+0x3b8>
   2403c:	50                   	push   %rax
   2403d:	48 c7 c0 99 6c dd 6a 	mov    $0x6add6c99,%rax
   24044:	48 89 05 f5 f8 72 00 	mov    %rax,0x72f8f5(%rip)        # 753940 <edgeId>
   2404b:	58                   	pop    %rax
   2404c:	e8 57 3b fe ff       	callq  7ba8 <_storeEdge>
   24051:	50                   	push   %rax
   24052:	48 b8 4c b6 6e b5 00 	movabs $0xb56eb64c,%rax
   24059:	00 00 00 
   2405c:	48 89 05 dd f8 72 00 	mov    %rax,0x72f8dd(%rip)        # 753940 <edgeId>
   24063:	58                   	pop    %rax
   24064:	e8 3f 3b fe ff       	callq  7ba8 <_storeEdge>
    }

  /* Let valid_suffixes == NULL mean "allow any suffix".  */
  /* FIXME: update all callers except the ones that allow suffixes
     after the number, changing last parameter NULL to "".  */
  if (!valid_suffixes)
   24069:	4d 85 ed             	test   %r13,%r13
   2406c:	74 3a                	je     240a8 <xstrtoumax+0x358>
   2406e:	50                   	push   %rax
   2406f:	48 c7 c0 64 eb 56 0b 	mov    $0xb56eb64,%rax
   24076:	48 89 05 c3 f8 72 00 	mov    %rax,0x72f8c3(%rip)        # 753940 <edgeId>
   2407d:	58                   	pop    %rax
   2407e:	e8 25 3b fe ff       	callq  7ba8 <_storeEdge>
    {
      *val = tmp;
      return err;
    }

  if (**p != '\0')
   24083:	44 0f b6 22          	movzbl (%rdx),%r12d
   24087:	45 84 e4             	test   %r12b,%r12b
   2408a:	0f 85 81 01 00 00    	jne    24211 <xstrtoumax+0x4c1>
   24090:	50                   	push   %rax
   24091:	48 b8 b6 6e b5 90 00 	movabs $0x90b56eb6,%rax
   24098:	00 00 00 
   2409b:	48 89 05 9e f8 72 00 	mov    %rax,0x72f89e(%rip)        # 753940 <edgeId>
   240a2:	58                   	pop    %rax
   240a3:	e8 00 3b fe ff       	callq  7ba8 <_storeEdge>
   240a8:	50                   	push   %rax
   240a9:	48 c7 c0 5b b7 5a 48 	mov    $0x485ab75b,%rax
   240b0:	48 89 05 89 f8 72 00 	mov    %rax,0x72f889(%rip)        # 753940 <edgeId>
   240b7:	58                   	pop    %rax
   240b8:	e8 eb 3a fe ff       	callq  7ba8 <_storeEdge>
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
   240bd:	4d 89 3e             	mov    %r15,(%r14)
  return err;
   240c0:	eb 63                	jmp    24125 <xstrtoumax+0x3d5>
   240c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   240c8:	50                   	push   %rax
   240c9:	48 b8 5b 2d 24 bc 00 	movabs $0xbc242d5b,%rax
   240d0:	00 00 00 
   240d3:	48 89 05 66 f8 72 00 	mov    %rax,0x72f866(%rip)        # 753940 <edgeId>
   240da:	58                   	pop    %rax
   240db:	e8 c8 3a fe ff       	callq  7ba8 <_storeEdge>
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
   240e0:	4d 85 ed             	test   %r13,%r13
   240e3:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   240e8:	0f 85 b2 00 00 00    	jne    241a0 <xstrtoumax+0x450>
   240ee:	50                   	push   %rax
   240ef:	48 c7 c0 6a 21 e1 75 	mov    $0x75e1216a,%rax
   240f6:	48 89 05 43 f8 72 00 	mov    %rax,0x72f843(%rip)        # 753940 <edgeId>
   240fd:	58                   	pop    %rax
   240fe:	e8 a5 3a fe ff       	callq  7ba8 <_storeEdge>
   24103:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   24108:	50                   	push   %rax
   24109:	48 b8 16 12 5e 87 00 	movabs $0x875e1216,%rax
   24110:	00 00 00 
   24113:	48 89 05 26 f8 72 00 	mov    %rax,0x72f826(%rip)        # 753940 <edgeId>
   2411a:	58                   	pop    %rax
   2411b:	e8 88 3a fe ff       	callq  7ba8 <_storeEdge>
        return LONGINT_INVALID;
   24120:	bb 04 00 00 00       	mov    $0x4,%ebx
   24125:	50                   	push   %rax
   24126:	48 b8 90 f0 3a 94 00 	movabs $0x943af090,%rax
   2412d:	00 00 00 
   24130:	48 89 05 09 f8 72 00 	mov    %rax,0x72f809(%rip)        # 753940 <edgeId>
   24137:	58                   	pop    %rax
   24138:	e8 6b 3a fe ff       	callq  7ba8 <_storeEdge>
}
   2413d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   24142:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
   24149:	00 00 
   2414b:	89 d8                	mov    %ebx,%eax
   2414d:	0f 85 08 0a 00 00    	jne    24b5b <xstrtoumax+0xe0b>
   24153:	50                   	push   %rax
   24154:	48 b8 c2 eb 50 86 00 	movabs $0x8650ebc2,%rax
   2415b:	00 00 00 
   2415e:	48 89 05 db f7 72 00 	mov    %rax,0x72f7db(%rip)        # 753940 <edgeId>
   24165:	58                   	pop    %rax
   24166:	e8 3d 3a fe ff       	callq  7ba8 <_storeEdge>
   2416b:	48 83 c4 28          	add    $0x28,%rsp
   2416f:	5b                   	pop    %rbx
   24170:	5d                   	pop    %rbp
   24171:	41 5c                	pop    %r12
   24173:	41 5d                	pop    %r13
   24175:	41 5e                	pop    %r14
   24177:	41 5f                	pop    %r15
   24179:	c3                   	retq   
   2417a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   24180:	50                   	push   %rax
   24181:	48 c7 c0 32 3c 2c 17 	mov    $0x172c3c32,%rax
   24188:	48 89 05 b1 f7 72 00 	mov    %rax,0x72f7b1(%rip)        # 753940 <edgeId>
   2418f:	58                   	pop    %rax
   24190:	e8 13 3a fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   24195:	31 db                	xor    %ebx,%ebx
   24197:	e9 b5 fe ff ff       	jmpq   24051 <xstrtoumax+0x301>
   2419c:	0f 1f 40 00          	nopl   0x0(%rax)
   241a0:	50                   	push   %rax
   241a1:	48 c7 c0 1e 96 8b 22 	mov    $0x228b961e,%rax
   241a8:	48 89 05 91 f7 72 00 	mov    %rax,0x72f791(%rip)        # 753940 <edgeId>
   241af:	58                   	pop    %rax
   241b0:	e8 f3 39 fe ff       	callq  7ba8 <_storeEdge>
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
   241b5:	44 0f b6 23          	movzbl (%rbx),%r12d
   241b9:	45 84 e4             	test   %r12b,%r12b
   241bc:	0f 84 46 ff ff ff    	je     24108 <xstrtoumax+0x3b8>
   241c2:	50                   	push   %rax
   241c3:	48 b8 61 b9 28 d2 00 	movabs $0xd228b961,%rax
   241ca:	00 00 00 
   241cd:	48 89 05 6c f7 72 00 	mov    %rax,0x72f76c(%rip)        # 753940 <edgeId>
   241d4:	58                   	pop    %rax
   241d5:	e8 ce 39 fe ff       	callq  7ba8 <_storeEdge>
   241da:	41 0f be f4          	movsbl %r12b,%esi
   241de:	4c 89 ef             	mov    %r13,%rdi
  strtol_error err = LONGINT_OK;
   241e1:	31 db                	xor    %ebx,%ebx
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
   241e3:	e8 98 d7 fd ff       	callq  1980 <strchr@plt>
   241e8:	48 85 c0             	test   %rax,%rax
        tmp = 1;
   241eb:	41 bf 01 00 00 00    	mov    $0x1,%r15d
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
   241f1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   241f6:	0f 84 0c ff ff ff    	je     24108 <xstrtoumax+0x3b8>
   241fc:	50                   	push   %rax
   241fd:	48 c7 c0 28 d2 bf 21 	mov    $0x21bfd228,%rax
   24204:	48 89 05 35 f7 72 00 	mov    %rax,0x72f735(%rip)        # 753940 <edgeId>
   2420b:	58                   	pop    %rax
   2420c:	e8 97 39 fe ff       	callq  7ba8 <_storeEdge>
   24211:	50                   	push   %rax
   24212:	48 b8 8a f4 6f c8 00 	movabs $0xc86ff48a,%rax
   24219:	00 00 00 
   2421c:	48 89 05 1d f7 72 00 	mov    %rax,0x72f71d(%rip)        # 753940 <edgeId>
   24223:	58                   	pop    %rax
   24224:	e8 7f 39 fe ff       	callq  7ba8 <_storeEdge>
      if (!strchr (valid_suffixes, **p))
   24229:	41 0f be f4          	movsbl %r12b,%esi
   2422d:	4c 89 ef             	mov    %r13,%rdi
   24230:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   24235:	e8 46 d7 fd ff       	callq  1980 <strchr@plt>
   2423a:	48 85 c0             	test   %rax,%rax
   2423d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   24242:	0f 84 14 05 00 00    	je     2475c <xstrtoumax+0xa0c>
   24248:	50                   	push   %rax
   24249:	48 b8 fe 0d 99 a2 00 	movabs $0xa2990dfe,%rax
   24250:	00 00 00 
   24253:	48 89 05 e6 f6 72 00 	mov    %rax,0x72f6e6(%rip)        # 753940 <edgeId>
   2425a:	58                   	pop    %rax
   2425b:	e8 48 39 fe ff       	callq  7ba8 <_storeEdge>
   24260:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
      if (strchr (valid_suffixes, '0'))
   24265:	4c 89 ef             	mov    %r13,%rdi
   24268:	be 30 00 00 00       	mov    $0x30,%esi
   2426d:	e8 0e d7 fd ff       	callq  1980 <strchr@plt>
   24272:	48 85 c0             	test   %rax,%rax
   24275:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   2427a:	0f 84 d8 01 00 00    	je     24458 <xstrtoumax+0x708>
   24280:	50                   	push   %rax
   24281:	48 c7 c0 86 4c d1 56 	mov    $0x56d14c86,%rax
   24288:	48 89 05 b1 f6 72 00 	mov    %rax,0x72f6b1(%rip)        # 753940 <edgeId>
   2428f:	58                   	pop    %rax
   24290:	e8 13 39 fe ff       	callq  7ba8 <_storeEdge>
          switch (p[0][1])
   24295:	41 0f b6 79 01       	movzbl 0x1(%r9),%edi
   2429a:	48 89 15 77 f6 72 00 	mov    %rdx,0x72f677(%rip)        # 753918 <tmpquadone>
   242a1:	48 89 0d 88 99 5d 00 	mov    %rcx,0x5d9988(%rip)        # 5fdc30 <tmpquadtwo>
   242a8:	48 8d 15 41 99 5d 00 	lea    0x5d9941(%rip),%rdx        # 5fdbf0 <funcinptr>
   242af:	48 c7 02 3b 0f 00 00 	movq   $0xf3b,(%rdx)
   242b6:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   242bd:	00 
   242be:	48 c7 c1 44 00 00 00 	mov    $0x44,%rcx
   242c5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   242c9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   242d0:	00 
   242d1:	48 89 f9             	mov    %rdi,%rcx
   242d4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   242d8:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   242df:	00 
   242e0:	ff 32                	pushq  (%rdx)
   242e2:	48 8b 15 2f f6 72 00 	mov    0x72f62f(%rip),%rdx        # 753918 <tmpquadone>
   242e9:	48 8b 0d 40 99 5d 00 	mov    0x5d9940(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   242f0:	48 c7 05 55 f6 72 00 	movq   $0x1,0x72f655(%rip)        # 753950 <cmpPassed>
   242f7:	01 00 00 00 
   242fb:	e8 40 39 fe ff       	callq  7c40 <_storeDataFn>
   24300:	40 80 ff 44          	cmp    $0x44,%dil
   24304:	0f 84 21 01 00 00    	je     2442b <xstrtoumax+0x6db>
   2430a:	50                   	push   %rax
   2430b:	48 b8 c8 14 6d b5 00 	movabs $0xb56d14c8,%rax
   24312:	00 00 00 
   24315:	48 89 05 24 f6 72 00 	mov    %rax,0x72f624(%rip)        # 753940 <edgeId>
   2431c:	58                   	pop    %rax
   2431d:	e8 86 38 fe ff       	callq  7ba8 <_storeEdge>
   24322:	48 89 15 ef f5 72 00 	mov    %rdx,0x72f5ef(%rip)        # 753918 <tmpquadone>
   24329:	48 89 0d 00 99 5d 00 	mov    %rcx,0x5d9900(%rip)        # 5fdc30 <tmpquadtwo>
   24330:	48 8d 15 b9 98 5d 00 	lea    0x5d98b9(%rip),%rdx        # 5fdbf0 <funcinptr>
   24337:	48 c7 02 3c 0f 00 00 	movq   $0xf3c,(%rdx)
   2433e:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   24345:	00 
   24346:	48 c7 c1 69 00 00 00 	mov    $0x69,%rcx
   2434d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24351:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24358:	00 
   24359:	48 89 f9             	mov    %rdi,%rcx
   2435c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24360:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24367:	00 
   24368:	ff 32                	pushq  (%rdx)
   2436a:	48 8b 15 a7 f5 72 00 	mov    0x72f5a7(%rip),%rdx        # 753918 <tmpquadone>
   24371:	48 8b 0d b8 98 5d 00 	mov    0x5d98b8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24378:	48 c7 05 cd f5 72 00 	movq   $0x1,0x72f5cd(%rip)        # 753950 <cmpPassed>
   2437f:	01 00 00 00 
   24383:	e8 b8 38 fe ff       	callq  7c40 <_storeDataFn>
   24388:	40 80 ff 69          	cmp    $0x69,%dil
   2438c:	0f 84 ea 03 00 00    	je     2477c <xstrtoumax+0xa2c>
   24392:	50                   	push   %rax
   24393:	48 b8 32 45 5b ad 00 	movabs $0xad5b4532,%rax
   2439a:	00 00 00 
   2439d:	48 89 05 9c f5 72 00 	mov    %rax,0x72f59c(%rip)        # 753940 <edgeId>
   243a4:	58                   	pop    %rax
   243a5:	e8 fe 37 fe ff       	callq  7ba8 <_storeEdge>
   243aa:	48 89 15 67 f5 72 00 	mov    %rdx,0x72f567(%rip)        # 753918 <tmpquadone>
   243b1:	48 89 0d 78 98 5d 00 	mov    %rcx,0x5d9878(%rip)        # 5fdc30 <tmpquadtwo>
   243b8:	48 8d 15 31 98 5d 00 	lea    0x5d9831(%rip),%rdx        # 5fdbf0 <funcinptr>
   243bf:	48 c7 02 3d 0f 00 00 	movq   $0xf3d,(%rdx)
   243c6:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   243cd:	00 
   243ce:	48 c7 c1 42 00 00 00 	mov    $0x42,%rcx
   243d5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   243d9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   243e0:	00 
   243e1:	48 89 f9             	mov    %rdi,%rcx
   243e4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   243e8:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   243ef:	00 
   243f0:	ff 32                	pushq  (%rdx)
   243f2:	48 8b 15 1f f5 72 00 	mov    0x72f51f(%rip),%rdx        # 753918 <tmpquadone>
   243f9:	48 8b 0d 30 98 5d 00 	mov    0x5d9830(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24400:	48 c7 05 45 f5 72 00 	movq   $0x1,0x72f545(%rip)        # 753950 <cmpPassed>
   24407:	01 00 00 00 
   2440b:	e8 30 38 fe ff       	callq  7c40 <_storeDataFn>
   24410:	40 80 ff 42          	cmp    $0x42,%dil
   24414:	75 42                	jne    24458 <xstrtoumax+0x708>
   24416:	50                   	push   %rax
   24417:	48 c7 c0 4c d1 56 6b 	mov    $0x6b56d14c,%rax
   2441e:	48 89 05 1b f5 72 00 	mov    %rax,0x72f51b(%rip)        # 753940 <edgeId>
   24425:	58                   	pop    %rax
   24426:	e8 7d 37 fe ff       	callq  7ba8 <_storeEdge>
   2442b:	50                   	push   %rax
   2442c:	48 b8 a6 68 ab b5 00 	movabs $0xb5ab68a6,%rax
   24433:	00 00 00 
   24436:	48 89 05 03 f5 72 00 	mov    %rax,0x72f503(%rip)        # 753940 <edgeId>
   2443d:	58                   	pop    %rax
   2443e:	e8 65 37 fe ff       	callq  7ba8 <_storeEdge>
   24443:	41 ba e8 03 00 00    	mov    $0x3e8,%r10d
   24449:	41 bb 02 00 00 00    	mov    $0x2,%r11d
   2444f:	eb 2b                	jmp    2447c <xstrtoumax+0x72c>
   24451:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   24458:	50                   	push   %rax
   24459:	48 b8 a2 ad d6 fa 00 	movabs $0xfad6ada2,%rax
   24460:	00 00 00 
   24463:	48 89 05 d6 f4 72 00 	mov    %rax,0x72f4d6(%rip)        # 753940 <edgeId>
   2446a:	58                   	pop    %rax
   2446b:	e8 38 37 fe ff       	callq  7ba8 <_storeEdge>
   24470:	41 ba 00 04 00 00    	mov    $0x400,%r10d
   24476:	41 bb 01 00 00 00    	mov    $0x1,%r11d
   2447c:	50                   	push   %rax
   2447d:	48 b8 b4 d5 5a 9f 00 	movabs $0x9f5ad5b4,%rax
   24484:	00 00 00 
   24487:	48 89 05 b2 f4 72 00 	mov    %rax,0x72f4b2(%rip)        # 753940 <edgeId>
   2448e:	58                   	pop    %rax
   2448f:	e8 14 37 fe ff       	callq  7ba8 <_storeEdge>
      switch (**p)
   24494:	41 83 ec 42          	sub    $0x42,%r12d
   24498:	48 89 15 79 f4 72 00 	mov    %rdx,0x72f479(%rip)        # 753918 <tmpquadone>
   2449f:	48 89 0d 8a 97 5d 00 	mov    %rcx,0x5d978a(%rip)        # 5fdc30 <tmpquadtwo>
   244a6:	48 8d 15 43 97 5d 00 	lea    0x5d9743(%rip),%rdx        # 5fdbf0 <funcinptr>
   244ad:	48 c7 02 3e 0f 00 00 	movq   $0xf3e,(%rdx)
   244b4:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   244bb:	00 
   244bc:	48 c7 c1 35 00 00 00 	mov    $0x35,%rcx
   244c3:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   244c7:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   244ce:	00 
   244cf:	4c 89 e1             	mov    %r12,%rcx
   244d2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   244d6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   244dd:	00 
   244de:	ff 32                	pushq  (%rdx)
   244e0:	48 8b 15 31 f4 72 00 	mov    0x72f431(%rip),%rdx        # 753918 <tmpquadone>
   244e7:	48 8b 0d 42 97 5d 00 	mov    0x5d9742(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   244ee:	48 c7 05 57 f4 72 00 	movq   $0x1,0x72f457(%rip)        # 753950 <cmpPassed>
   244f5:	01 00 00 00 
   244f9:	e8 42 37 fe ff       	callq  7c40 <_storeDataFn>
   244fe:	41 80 fc 35          	cmp    $0x35,%r12b
   24502:	0f 87 54 02 00 00    	ja     2475c <xstrtoumax+0xa0c>
   24508:	50                   	push   %rax
   24509:	48 b8 ad d6 fa 94 00 	movabs $0x94fad6ad,%rax
   24510:	00 00 00 
   24513:	48 89 05 26 f4 72 00 	mov    %rax,0x72f426(%rip)        # 753940 <edgeId>
   2451a:	58                   	pop    %rax
   2451b:	e8 88 36 fe ff       	callq  7ba8 <_storeEdge>
   24520:	48 8d 0d 19 5d 00 00 	lea    0x5d19(%rip),%rcx        # 2a240 <version_etc_copyright+0x80>
   24527:	45 0f b6 ec          	movzbl %r12b,%r13d
   2452b:	4a 63 14 a9          	movslq (%rcx,%r13,4),%rdx
   2452f:	48 01 ca             	add    %rcx,%rdx
   24532:	ff e2                	jmpq   *%rdx
   24534:	50                   	push   %rax
   24535:	48 c7 c0 b2 51 84 2f 	mov    $0x2f8451b2,%rax
   2453c:	48 89 05 fd f3 72 00 	mov    %rax,0x72f3fd(%rip)        # 753940 <edgeId>
   24543:	58                   	pop    %rax
   24544:	e8 5f 36 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24549:	4c 89 f8             	mov    %r15,%rax
   2454c:	49 f7 e2             	mul    %r10
   2454f:	0f 80 b8 03 00 00    	jo     2490d <xstrtoumax+0xbbd>
   24555:	50                   	push   %rax
   24556:	48 b8 28 c2 17 9f 00 	movabs $0x9f17c228,%rax
   2455d:	00 00 00 
   24560:	48 89 05 d9 f3 72 00 	mov    %rax,0x72f3d9(%rip)        # 753940 <edgeId>
   24567:	58                   	pop    %rax
   24568:	e8 3b 36 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   2456d:	45 31 e4             	xor    %r12d,%r12d
   24570:	50                   	push   %rax
   24571:	48 c7 c0 84 2f 3e 51 	mov    $0x513e2f84,%rax
   24578:	48 89 05 c1 f3 72 00 	mov    %rax,0x72f3c1(%rip)        # 753940 <edgeId>
   2457f:	58                   	pop    %rax
   24580:	e8 23 36 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24585:	49 f7 e2             	mul    %r10
   24588:	0f 80 38 06 00 00    	jo     24bc6 <xstrtoumax+0xe76>
   2458e:	50                   	push   %rax
   2458f:	48 b8 be f8 44 c5 00 	movabs $0xc544f8be,%rax
   24596:	00 00 00 
   24599:	48 89 05 a0 f3 72 00 	mov    %rax,0x72f3a0(%rip)        # 753940 <edgeId>
   245a0:	58                   	pop    %rax
   245a1:	e8 02 36 fe ff       	callq  7ba8 <_storeEdge>
   245a6:	50                   	push   %rax
   245a7:	48 c7 c0 2f 3e 51 31 	mov    $0x31513e2f,%rax
   245ae:	48 89 05 8b f3 72 00 	mov    %rax,0x72f38b(%rip)        # 753940 <edgeId>
   245b5:	58                   	pop    %rax
   245b6:	e8 ed 35 fe ff       	callq  7ba8 <_storeEdge>
   245bb:	49 f7 e2             	mul    %r10
   245be:	0f 80 26 06 00 00    	jo     24bea <xstrtoumax+0xe9a>
   245c4:	50                   	push   %rax
   245c5:	48 c7 c0 c5 27 2a 46 	mov    $0x462a27c5,%rax
   245cc:	48 89 05 6d f3 72 00 	mov    %rax,0x72f36d(%rip)        # 753940 <edgeId>
   245d3:	58                   	pop    %rax
   245d4:	e8 cf 35 fe ff       	callq  7ba8 <_storeEdge>
   245d9:	50                   	push   %rax
   245da:	48 c7 c0 f1 89 8a 51 	mov    $0x518a89f1,%rax
   245e1:	48 89 05 58 f3 72 00 	mov    %rax,0x72f358(%rip)        # 753940 <edgeId>
   245e8:	58                   	pop    %rax
   245e9:	e8 ba 35 fe ff       	callq  7ba8 <_storeEdge>
   245ee:	49 f7 e2             	mul    %r10
   245f1:	0f 80 a8 05 00 00    	jo     24b9f <xstrtoumax+0xe4f>
   245f7:	50                   	push   %rax
   245f8:	48 b8 3e 51 31 aa 00 	movabs $0xaa31513e,%rax
   245ff:	00 00 00 
   24602:	48 89 05 37 f3 72 00 	mov    %rax,0x72f337(%rip)        # 753940 <edgeId>
   24609:	58                   	pop    %rax
   2460a:	e8 99 35 fe ff       	callq  7ba8 <_storeEdge>
   2460f:	50                   	push   %rax
   24610:	48 c7 c0 4f 54 8c 2a 	mov    $0x2a8c544f,%rax
   24617:	48 89 05 22 f3 72 00 	mov    %rax,0x72f322(%rip)        # 753940 <edgeId>
   2461e:	58                   	pop    %rax
   2461f:	e8 84 35 fe ff       	callq  7ba8 <_storeEdge>
   24624:	49 f7 e2             	mul    %r10
   24627:	0f 80 53 06 00 00    	jo     24c80 <xstrtoumax+0xf30>
   2462d:	50                   	push   %rax
   2462e:	48 c7 c0 89 8a 51 25 	mov    $0x25518a89,%rax
   24635:	48 89 05 04 f3 72 00 	mov    %rax,0x72f304(%rip)        # 753940 <edgeId>
   2463c:	58                   	pop    %rax
   2463d:	e8 66 35 fe ff       	callq  7ba8 <_storeEdge>
   24642:	50                   	push   %rax
   24643:	48 c7 c0 a2 62 54 49 	mov    $0x495462a2,%rax
   2464a:	48 89 05 ef f2 72 00 	mov    %rax,0x72f2ef(%rip)        # 753940 <edgeId>
   24651:	58                   	pop    %rax
   24652:	e8 51 35 fe ff       	callq  7ba8 <_storeEdge>
   24657:	49 f7 e2             	mul    %r10
   2465a:	0f 80 f9 05 00 00    	jo     24c59 <xstrtoumax+0xf09>
   24660:	50                   	push   %rax
   24661:	48 c7 c0 54 8c 2a 49 	mov    $0x492a8c54,%rax
   24668:	48 89 05 d1 f2 72 00 	mov    %rax,0x72f2d1(%rip)        # 753940 <edgeId>
   2466f:	58                   	pop    %rax
   24670:	e8 33 35 fe ff       	callq  7ba8 <_storeEdge>
   24675:	50                   	push   %rax
   24676:	48 c7 c0 15 a3 4a 12 	mov    $0x124aa315,%rax
   2467d:	48 89 05 bc f2 72 00 	mov    %rax,0x72f2bc(%rip)        # 753940 <edgeId>
   24684:	58                   	pop    %rax
   24685:	e8 1e 35 fe ff       	callq  7ba8 <_storeEdge>
   2468a:	49 f7 e2             	mul    %r10
   2468d:	0f 80 7e 05 00 00    	jo     24c11 <xstrtoumax+0xec1>
   24693:	50                   	push   %rax
   24694:	48 b8 62 54 49 c2 00 	movabs $0xc2495462,%rax
   2469b:	00 00 00 
   2469e:	48 89 05 9b f2 72 00 	mov    %rax,0x72f29b(%rip)        # 753940 <edgeId>
   246a5:	58                   	pop    %rax
   246a6:	e8 fd 34 fe ff       	callq  7ba8 <_storeEdge>
  *x *= scale_factor;
   246ab:	49 89 c7             	mov    %rax,%r15
   246ae:	50                   	push   %rax
   246af:	48 c7 c0 46 95 24 0c 	mov    $0xc249546,%rax
   246b6:	48 89 05 83 f2 72 00 	mov    %rax,0x72f283(%rip)        # 753940 <edgeId>
   246bd:	58                   	pop    %rax
   246be:	e8 e5 34 fe ff       	callq  7ba8 <_storeEdge>
   246c3:	44 09 e3             	or     %r12d,%ebx
   246c6:	50                   	push   %rax
   246c7:	48 c7 c0 a8 92 84 01 	mov    $0x18492a8,%rax
   246ce:	48 89 05 6b f2 72 00 	mov    %rax,0x72f26b(%rip)        # 753940 <edgeId>
   246d5:	58                   	pop    %rax
   246d6:	e8 cd 34 fe ff       	callq  7ba8 <_storeEdge>
      *p += suffixes;
   246db:	4d 01 d9             	add    %r11,%r9
   246de:	4c 89 4d 00          	mov    %r9,0x0(%rbp)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
   246e2:	89 dd                	mov    %ebx,%ebp
   246e4:	83 cd 02             	or     $0x2,%ebp
   246e7:	48 89 15 2a f2 72 00 	mov    %rdx,0x72f22a(%rip)        # 753918 <tmpquadone>
   246ee:	48 89 0d 3b 95 5d 00 	mov    %rcx,0x5d953b(%rip)        # 5fdc30 <tmpquadtwo>
   246f5:	48 8d 15 f4 94 5d 00 	lea    0x5d94f4(%rip),%rdx        # 5fdbf0 <funcinptr>
   246fc:	48 c7 02 3f 0f 00 00 	movq   $0xf3f,(%rdx)
   24703:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   2470a:	00 
   2470b:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   24712:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24716:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2471d:	00 
   2471e:	49 8b 09             	mov    (%r9),%rcx
   24721:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24725:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2472c:	00 
   2472d:	ff 32                	pushq  (%rdx)
   2472f:	48 8b 15 e2 f1 72 00 	mov    0x72f1e2(%rip),%rdx        # 753918 <tmpquadone>
   24736:	48 8b 0d f3 94 5d 00 	mov    0x5d94f3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2473d:	48 c7 05 08 f2 72 00 	movq   $0x1,0x72f208(%rip)        # 753950 <cmpPassed>
   24744:	01 00 00 00 
   24748:	e8 f3 34 fe ff       	callq  7c40 <_storeDataFn>
   2474d:	41 80 39 00          	cmpb   $0x0,(%r9)
  *val = tmp;
   24751:	4d 89 3e             	mov    %r15,(%r14)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
   24754:	0f 45 dd             	cmovne %ebp,%ebx
   24757:	e9 c9 f9 ff ff       	jmpq   24125 <xstrtoumax+0x3d5>
   2475c:	50                   	push   %rax
   2475d:	48 c7 c0 0c 78 ec 29 	mov    $0x29ec780c,%rax
   24764:	48 89 05 d5 f1 72 00 	mov    %rax,0x72f1d5(%rip)        # 753940 <edgeId>
   2476b:	58                   	pop    %rax
   2476c:	e8 37 34 fe ff       	callq  7ba8 <_storeEdge>
          *val = tmp;
   24771:	4d 89 3e             	mov    %r15,(%r14)
          return err | LONGINT_INVALID_SUFFIX_CHAR;
   24774:	83 cb 02             	or     $0x2,%ebx
   24777:	e9 a9 f9 ff ff       	jmpq   24125 <xstrtoumax+0x3d5>
   2477c:	50                   	push   %rax
   2477d:	48 b8 78 ec 29 a0 00 	movabs $0xa029ec78,%rax
   24784:	00 00 00 
   24787:	48 89 05 b2 f1 72 00 	mov    %rax,0x72f1b2(%rip)        # 753940 <edgeId>
   2478e:	58                   	pop    %rax
   2478f:	e8 14 34 fe ff       	callq  7ba8 <_storeEdge>
              if (p[0][2] == 'B')
   24794:	45 31 c0             	xor    %r8d,%r8d
   24797:	48 89 15 7a f1 72 00 	mov    %rdx,0x72f17a(%rip)        # 753918 <tmpquadone>
   2479e:	48 89 0d 8b 94 5d 00 	mov    %rcx,0x5d948b(%rip)        # 5fdc30 <tmpquadtwo>
   247a5:	48 8d 15 44 94 5d 00 	lea    0x5d9444(%rip),%rdx        # 5fdbf0 <funcinptr>
   247ac:	48 c7 02 40 0f 00 00 	movq   $0xf40,(%rdx)
   247b3:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   247ba:	00 
   247bb:	48 c7 c1 42 00 00 00 	mov    $0x42,%rcx
   247c2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   247c6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   247cd:	00 
   247ce:	49 8b 49 02          	mov    0x2(%r9),%rcx
   247d2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   247d6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   247dd:	00 
   247de:	ff 32                	pushq  (%rdx)
   247e0:	48 8b 15 31 f1 72 00 	mov    0x72f131(%rip),%rdx        # 753918 <tmpquadone>
   247e7:	48 8b 0d 42 94 5d 00 	mov    0x5d9442(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   247ee:	48 c7 05 57 f1 72 00 	movq   $0x1,0x72f157(%rip)        # 753950 <cmpPassed>
   247f5:	01 00 00 00 
   247f9:	e8 42 34 fe ff       	callq  7c40 <_storeDataFn>
   247fe:	41 80 79 02 42       	cmpb   $0x42,0x2(%r9)
   24803:	41 ba 00 04 00 00    	mov    $0x400,%r10d
   24809:	41 0f 94 c0          	sete   %r8b
   2480d:	4f 8d 5c 00 01       	lea    0x1(%r8,%r8,1),%r11
   24812:	e9 65 fc ff ff       	jmpq   2447c <xstrtoumax+0x72c>
   24817:	50                   	push   %rax
   24818:	48 b8 f6 14 50 be 00 	movabs $0xbe5014f6,%rax
   2481f:	00 00 00 
   24822:	48 89 05 17 f1 72 00 	mov    %rax,0x72f117(%rip)        # 753940 <edgeId>
   24829:	58                   	pop    %rax
   2482a:	e8 79 33 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   2482f:	b8 02 00 00 00       	mov    $0x2,%eax
   24834:	49 f7 e7             	mul    %r15
   24837:	0f 80 bf 01 00 00    	jo     249fc <xstrtoumax+0xcac>
   2483d:	50                   	push   %rax
   2483e:	48 c7 c0 53 40 f9 0e 	mov    $0xef94053,%rax
   24845:	48 89 05 f4 f0 72 00 	mov    %rax,0x72f0f4(%rip)        # 753940 <edgeId>
   2484c:	58                   	pop    %rax
   2484d:	e8 56 33 fe ff       	callq  7ba8 <_storeEdge>
  *x *= scale_factor;
   24852:	4d 01 ff             	add    %r15,%r15
   24855:	e9 6c fe ff ff       	jmpq   246c6 <xstrtoumax+0x976>
   2485a:	50                   	push   %rax
   2485b:	48 b8 01 e5 3b b8 00 	movabs $0xb83be501,%rax
   24862:	00 00 00 
   24865:	48 89 05 d4 f0 72 00 	mov    %rax,0x72f0d4(%rip)        # 753940 <edgeId>
   2486c:	58                   	pop    %rax
   2486d:	e8 36 33 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24872:	b8 00 02 00 00       	mov    $0x200,%eax
   24877:	49 f7 e7             	mul    %r15
   2487a:	0f 80 7c 01 00 00    	jo     249fc <xstrtoumax+0xcac>
   24880:	50                   	push   %rax
   24881:	48 c7 c0 e5 3b b8 4d 	mov    $0x4db83be5,%rax
   24888:	48 89 05 b1 f0 72 00 	mov    %rax,0x72f0b1(%rip)        # 753940 <edgeId>
   2488f:	58                   	pop    %rax
   24890:	e8 13 33 fe ff       	callq  7ba8 <_storeEdge>
  *x *= scale_factor;
   24895:	49 c1 e7 09          	shl    $0x9,%r15
   24899:	e9 28 fe ff ff       	jmpq   246c6 <xstrtoumax+0x976>
   2489e:	50                   	push   %rax
   2489f:	48 c7 c0 ef e0 36 45 	mov    $0x4536e0ef,%rax
   248a6:	48 89 05 93 f0 72 00 	mov    %rax,0x72f093(%rip)        # 753940 <edgeId>
   248ad:	58                   	pop    %rax
   248ae:	e8 f5 32 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   248b3:	4c 89 f8             	mov    %r15,%rax
   248b6:	49 f7 e2             	mul    %r10
   248b9:	0f 80 b9 02 00 00    	jo     24b78 <xstrtoumax+0xe28>
   248bf:	50                   	push   %rax
   248c0:	48 c7 c0 b8 4d d1 51 	mov    $0x51d14db8,%rax
   248c7:	48 89 05 72 f0 72 00 	mov    %rax,0x72f072(%rip)        # 753940 <edgeId>
   248ce:	58                   	pop    %rax
   248cf:	e8 d4 32 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   248d4:	45 31 e4             	xor    %r12d,%r12d
   248d7:	50                   	push   %rax
   248d8:	48 b8 9b a2 a3 8e 00 	movabs $0x8ea3a29b,%rax
   248df:	00 00 00 
   248e2:	48 89 05 57 f0 72 00 	mov    %rax,0x72f057(%rip)        # 753940 <edgeId>
   248e9:	58                   	pop    %rax
   248ea:	e8 b9 32 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   248ef:	49 f7 e2             	mul    %r10
   248f2:	0f 81 78 fc ff ff    	jno    24570 <xstrtoumax+0x820>
   248f8:	50                   	push   %rax
   248f9:	48 c7 c0 8a 8e 3a 4e 	mov    $0x4e3a8e8a,%rax
   24900:	48 89 05 39 f0 72 00 	mov    %rax,0x72f039(%rip)        # 753940 <edgeId>
   24907:	58                   	pop    %rax
   24908:	e8 9b 32 fe ff       	callq  7ba8 <_storeEdge>
   2490d:	50                   	push   %rax
   2490e:	48 c7 c0 a2 a3 8e 53 	mov    $0x538ea3a2,%rax
   24915:	48 89 05 24 f0 72 00 	mov    %rax,0x72f024(%rip)        # 753940 <edgeId>
   2491c:	58                   	pop    %rax
   2491d:	e8 86 32 fe ff       	callq  7ba8 <_storeEdge>
   24922:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24928:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   2492c:	e9 3f fc ff ff       	jmpq   24570 <xstrtoumax+0x820>
   24931:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   24938:	50                   	push   %rax
   24939:	48 c7 c0 8e 53 9f 39 	mov    $0x399f538e,%rax
   24940:	48 89 05 f9 ef 72 00 	mov    %rax,0x72eff9(%rip)        # 753940 <edgeId>
   24947:	58                   	pop    %rax
   24948:	e8 5b 32 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   2494d:	4c 89 f8             	mov    %r15,%rax
   24950:	49 f7 e2             	mul    %r10
   24953:	0f 80 91 02 00 00    	jo     24bea <xstrtoumax+0xe9a>
   24959:	50                   	push   %rax
   2495a:	48 b8 f5 99 f3 87 00 	movabs $0x87f399f5,%rax
   24961:	00 00 00 
   24964:	48 89 05 d5 ef 72 00 	mov    %rax,0x72efd5(%rip)        # 753940 <edgeId>
   2496b:	58                   	pop    %rax
   2496c:	e8 37 32 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   24971:	45 31 e4             	xor    %r12d,%r12d
   24974:	e9 60 fc ff ff       	jmpq   245d9 <xstrtoumax+0x889>
   24979:	50                   	push   %rax
   2497a:	48 b8 99 f3 87 e8 00 	movabs $0xe887f399,%rax
   24981:	00 00 00 
   24984:	48 89 05 b5 ef 72 00 	mov    %rax,0x72efb5(%rip)        # 753940 <edgeId>
   2498b:	58                   	pop    %rax
   2498c:	e8 17 32 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24991:	4c 89 f8             	mov    %r15,%rax
   24994:	49 f7 e2             	mul    %r10
   24997:	0f 80 98 02 00 00    	jo     24c35 <xstrtoumax+0xee5>
   2499d:	50                   	push   %rax
   2499e:	48 b8 fc 21 3a 8c 00 	movabs $0x8c3a21fc,%rax
   249a5:	00 00 00 
   249a8:	48 89 05 91 ef 72 00 	mov    %rax,0x72ef91(%rip)        # 753940 <edgeId>
   249af:	58                   	pop    %rax
   249b0:	e8 f3 31 fe ff       	callq  7ba8 <_storeEdge>
  return LONGINT_OK;
   249b5:	45 31 e4             	xor    %r12d,%r12d
   249b8:	e9 b8 fc ff ff       	jmpq   24675 <xstrtoumax+0x925>
   249bd:	50                   	push   %rax
   249be:	48 b8 87 e8 30 be 00 	movabs $0xbe30e887,%rax
   249c5:	00 00 00 
   249c8:	48 89 05 71 ef 72 00 	mov    %rax,0x72ef71(%rip)        # 753940 <edgeId>
   249cf:	58                   	pop    %rax
   249d0:	e8 d3 31 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   249d5:	4c 89 f8             	mov    %r15,%rax
   249d8:	49 f7 e2             	mul    %r10
   249db:	49 89 c7             	mov    %rax,%r15
   249de:	0f 81 e2 fc ff ff    	jno    246c6 <xstrtoumax+0x976>
   249e4:	50                   	push   %rax
   249e5:	48 b8 c3 f8 ba 8b 00 	movabs $0x8bbaf8c3,%rax
   249ec:	00 00 00 
   249ef:	48 89 05 4a ef 72 00 	mov    %rax,0x72ef4a(%rip)        # 753940 <edgeId>
   249f6:	58                   	pop    %rax
   249f7:	e8 ac 31 fe ff       	callq  7ba8 <_storeEdge>
   249fc:	50                   	push   %rax
   249fd:	48 c7 c0 30 be ee 22 	mov    $0x22eebe30,%rax
   24a04:	48 89 05 35 ef 72 00 	mov    %rax,0x72ef35(%rip)        # 753940 <edgeId>
   24a0b:	58                   	pop    %rax
   24a0c:	e8 97 31 fe ff       	callq  7ba8 <_storeEdge>
   24a11:	bb 01 00 00 00       	mov    $0x1,%ebx
      *x = STRTOL_T_MAXIMUM;
   24a16:	49 83 cf ff          	or     $0xffffffffffffffff,%r15
   24a1a:	e9 a7 fc ff ff       	jmpq   246c6 <xstrtoumax+0x976>
   24a1f:	90                   	nop
   24a20:	50                   	push   %rax
   24a21:	48 c7 c0 dd 45 22 6a 	mov    $0x6a2245dd,%rax
   24a28:	48 89 05 11 ef 72 00 	mov    %rax,0x72ef11(%rip)        # 753940 <edgeId>
   24a2f:	58                   	pop    %rax
   24a30:	e8 73 31 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24a35:	4c 89 f8             	mov    %r15,%rax
   24a38:	49 f7 e2             	mul    %r10
   24a3b:	0f 80 5e 01 00 00    	jo     24b9f <xstrtoumax+0xe4f>
   24a41:	50                   	push   %rax
   24a42:	48 b8 91 88 1a ff 00 	movabs $0xff1a8891,%rax
   24a49:	00 00 00 
   24a4c:	48 89 05 ed ee 72 00 	mov    %rax,0x72eeed(%rip)        # 753940 <edgeId>
   24a53:	58                   	pop    %rax
   24a54:	e8 4f 31 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   24a59:	45 31 e4             	xor    %r12d,%r12d
   24a5c:	e9 ae fb ff ff       	jmpq   2460f <xstrtoumax+0x8bf>
   24a61:	50                   	push   %rax
   24a62:	48 c7 c0 88 1a ff 68 	mov    $0x68ff1a88,%rax
   24a69:	48 89 05 d0 ee 72 00 	mov    %rax,0x72eed0(%rip)        # 753940 <edgeId>
   24a70:	58                   	pop    %rax
   24a71:	e8 32 31 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24a76:	4c 89 f8             	mov    %r15,%rax
   24a79:	49 f7 e2             	mul    %r10
   24a7c:	0f 80 44 01 00 00    	jo     24bc6 <xstrtoumax+0xe76>
   24a82:	50                   	push   %rax
   24a83:	48 c7 c0 c6 3f 9a 50 	mov    $0x509a3fc6,%rax
   24a8a:	48 89 05 af ee 72 00 	mov    %rax,0x72eeaf(%rip)        # 753940 <edgeId>
   24a91:	58                   	pop    %rax
   24a92:	e8 11 31 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   24a97:	45 31 e4             	xor    %r12d,%r12d
   24a9a:	e9 07 fb ff ff       	jmpq   245a6 <xstrtoumax+0x856>
   24a9f:	50                   	push   %rax
   24aa0:	48 c7 c0 3f 9a 50 33 	mov    $0x33509a3f,%rax
   24aa7:	48 89 05 92 ee 72 00 	mov    %rax,0x72ee92(%rip)        # 753940 <edgeId>
   24aae:	58                   	pop    %rax
   24aaf:	e8 f4 30 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24ab4:	b8 00 04 00 00       	mov    $0x400,%eax
   24ab9:	49 f7 e7             	mul    %r15
   24abc:	0f 80 3a ff ff ff    	jo     249fc <xstrtoumax+0xcac>
   24ac2:	50                   	push   %rax
   24ac3:	48 b8 9a 50 33 c2 00 	movabs $0xc233509a,%rax
   24aca:	00 00 00 
   24acd:	48 89 05 6c ee 72 00 	mov    %rax,0x72ee6c(%rip)        # 753940 <edgeId>
   24ad4:	58                   	pop    %rax
   24ad5:	e8 ce 30 fe ff       	callq  7ba8 <_storeEdge>
  *x *= scale_factor;
   24ada:	49 c1 e7 0a          	shl    $0xa,%r15
   24ade:	e9 e3 fb ff ff       	jmpq   246c6 <xstrtoumax+0x976>
   24ae3:	50                   	push   %rax
   24ae4:	48 b8 42 cd 08 ff 00 	movabs $0xff08cd42,%rax
   24aeb:	00 00 00 
   24aee:	48 89 05 4b ee 72 00 	mov    %rax,0x72ee4b(%rip)        # 753940 <edgeId>
   24af5:	58                   	pop    %rax
   24af6:	e8 ad 30 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24afb:	4c 89 f8             	mov    %r15,%rax
   24afe:	49 f7 e2             	mul    %r10
   24b01:	0f 80 79 01 00 00    	jo     24c80 <xstrtoumax+0xf30>
   24b07:	50                   	push   %rax
   24b08:	48 c7 c0 33 c2 ff 4f 	mov    $0x4fffc233,%rax
   24b0f:	48 89 05 2a ee 72 00 	mov    %rax,0x72ee2a(%rip)        # 753940 <edgeId>
   24b16:	58                   	pop    %rax
   24b17:	e8 8c 30 fe ff       	callq  7ba8 <_storeEdge>
  strtol_error err = LONGINT_OK;
   24b1c:	45 31 e4             	xor    %r12d,%r12d
   24b1f:	e9 1e fb ff ff       	jmpq   24642 <xstrtoumax+0x8f2>
   24b24:	50                   	push   %rax
   24b25:	48 b8 c2 ff 4f c5 00 	movabs $0xc54fffc2,%rax
   24b2c:	00 00 00 
   24b2f:	48 89 05 0a ee 72 00 	mov    %rax,0x72ee0a(%rip)        # 753940 <edgeId>
   24b36:	58                   	pop    %rax
   24b37:	e8 6c 30 fe ff       	callq  7ba8 <_storeEdge>
  assure (0 <= strtol_base && strtol_base <= 36);
   24b3c:	48 8d 0d ed 57 00 00 	lea    0x57ed(%rip),%rcx        # 2a330 <__PRETTY_FUNCTION__.4157>
   24b43:	48 8d 35 b6 56 00 00 	lea    0x56b6(%rip),%rsi        # 2a200 <version_etc_copyright+0x40>
   24b4a:	48 8d 3d c7 56 00 00 	lea    0x56c7(%rip),%rdi        # 2a218 <version_etc_copyright+0x58>
   24b51:	ba 60 00 00 00       	mov    $0x60,%edx
   24b56:	e8 75 ce fd ff       	callq  19d0 <__assert_fail@plt>
   24b5b:	50                   	push   %rax
   24b5c:	48 b8 9f 8a 53 db 00 	movabs $0xdb538a9f,%rax
   24b63:	00 00 00 
   24b66:	48 89 05 d3 ed 72 00 	mov    %rax,0x72edd3(%rip)        # 753940 <edgeId>
   24b6d:	58                   	pop    %rax
   24b6e:	e8 35 30 fe ff       	callq  7ba8 <_storeEdge>
}
   24b73:	e8 d8 cd fd ff       	callq  1950 <__stack_chk_fail@plt>
   24b78:	50                   	push   %rax
   24b79:	48 b8 a9 38 b5 dd 00 	movabs $0xddb538a9,%rax
   24b80:	00 00 00 
   24b83:	48 89 05 b6 ed 72 00 	mov    %rax,0x72edb6(%rip)        # 753940 <edgeId>
   24b8a:	58                   	pop    %rax
   24b8b:	e8 18 30 fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24b90:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24b96:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24b9a:	e9 38 fd ff ff       	jmpq   248d7 <xstrtoumax+0xb87>
   24b9f:	50                   	push   %rax
   24ba0:	48 b8 53 db 6d 92 00 	movabs $0x926ddb53,%rax
   24ba7:	00 00 00 
   24baa:	48 89 05 8f ed 72 00 	mov    %rax,0x72ed8f(%rip)        # 753940 <edgeId>
   24bb1:	58                   	pop    %rax
   24bb2:	e8 f1 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24bb7:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24bbd:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24bc1:	e9 49 fa ff ff       	jmpq   2460f <xstrtoumax+0x8bf>
   24bc6:	50                   	push   %rax
   24bc7:	48 c7 c0 b7 49 4e 3f 	mov    $0x3f4e49b7,%rax
   24bce:	48 89 05 6b ed 72 00 	mov    %rax,0x72ed6b(%rip)        # 753940 <edgeId>
   24bd5:	58                   	pop    %rax
   24bd6:	e8 cd 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24bdb:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24be1:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24be5:	e9 bc f9 ff ff       	jmpq   245a6 <xstrtoumax+0x856>
   24bea:	50                   	push   %rax
   24beb:	48 b8 26 39 fd 9c 00 	movabs $0x9cfd3926,%rax
   24bf2:	00 00 00 
   24bf5:	48 89 05 44 ed 72 00 	mov    %rax,0x72ed44(%rip)        # 753940 <edgeId>
   24bfc:	58                   	pop    %rax
   24bfd:	e8 a6 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24c02:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24c08:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24c0c:	e9 c8 f9 ff ff       	jmpq   245d9 <xstrtoumax+0x889>
   24c11:	50                   	push   %rax
   24c12:	48 c7 c0 72 fa 39 29 	mov    $0x2939fa72,%rax
   24c19:	48 89 05 20 ed 72 00 	mov    %rax,0x72ed20(%rip)        # 753940 <edgeId>
   24c20:	58                   	pop    %rax
   24c21:	e8 82 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24c26:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24c2c:	49 83 cf ff          	or     $0xffffffffffffffff,%r15
   24c30:	e9 79 fa ff ff       	jmpq   246ae <xstrtoumax+0x95e>
   24c35:	50                   	push   %rax
   24c36:	48 c7 c0 fa 39 29 23 	mov    $0x232939fa,%rax
   24c3d:	48 89 05 fc ec 72 00 	mov    %rax,0x72ecfc(%rip)        # 753940 <edgeId>
   24c44:	58                   	pop    %rax
   24c45:	e8 5e 2f fe ff       	callq  7ba8 <_storeEdge>
   24c4a:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
      return LONGINT_OVERFLOW;
   24c4e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
   24c54:	e9 1c fa ff ff       	jmpq   24675 <xstrtoumax+0x925>
   24c59:	50                   	push   %rax
   24c5a:	48 b8 52 46 e0 dc 00 	movabs $0xdce04652,%rax
   24c61:	00 00 00 
   24c64:	48 89 05 d5 ec 72 00 	mov    %rax,0x72ecd5(%rip)        # 753940 <edgeId>
   24c6b:	58                   	pop    %rax
   24c6c:	e8 37 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24c71:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24c77:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24c7b:	e9 f5 f9 ff ff       	jmpq   24675 <xstrtoumax+0x925>
   24c80:	50                   	push   %rax
   24c81:	48 c7 c0 e0 dc e8 20 	mov    $0x20e8dce0,%rax
   24c88:	48 89 05 b1 ec 72 00 	mov    %rax,0x72ecb1(%rip)        # 753940 <edgeId>
   24c8f:	58                   	pop    %rax
   24c90:	e8 13 2f fe ff       	callq  7ba8 <_storeEdge>
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
   24c95:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      *x = STRTOL_T_MAXIMUM;
   24c9b:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
   24c9f:	e9 9e f9 ff ff       	jmpq   24642 <xstrtoumax+0x8f2>
   24ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   24cab:	00 00 00 
   24cae:	66 90                	xchg   %ax,%ax

0000000000024cb0 <rpl_fclose>:

/* Override fclose() to call the overridden fflush() or close().  */

int
rpl_fclose (FILE *fp)
{
   24cb0:	41 55                	push   %r13
   24cb2:	41 54                	push   %r12
   24cb4:	49 89 fc             	mov    %rdi,%r12
   24cb7:	55                   	push   %rbp
   24cb8:	53                   	push   %rbx
  int saved_errno = 0;
  int fd;
  int result = 0;

  /* Don't change behavior on memstreams.  */
  fd = fileno (fp+(lava_get(554))*(0x6c617437==(lava_get(554))||0x3774616c==(lava_get(554)))+(lava_get(556))*(0x6c617435==(lava_get(556))||0x3574616c==(lava_get(556)))+(lava_get(558))*(0x6c617433==(lava_get(558))||0x3374616c==(lava_get(558)))+(lava_get(560))*(0x6c617431==(lava_get(560))||0x3174616c==(lava_get(560)))+(lava_get(562))*(0x6c61742f==(lava_get(562))||0x2f74616c==(lava_get(562)))+(lava_get(566))*(0x6c61742b==(lava_get(566))||0x2b74616c==(lava_get(566)))+(lava_get(572))*(0x6c617425==(lava_get(572))||0x2574616c==(lava_get(572)))+(lava_get(573))*(0x6c617424==(lava_get(573))||0x2474616c==(lava_get(573)))+(lava_get(576))*(0x6c617421==(lava_get(576))||0x2174616c==(lava_get(576)))+(lava_get(582))*(0x6c61741b==(lava_get(582))||0x1b74616c==(lava_get(582)))+(lava_get(583))*(0x6c61741a==(lava_get(583))||0x1a74616c==(lava_get(583)))+(lava_get(584))*(0x6c617419==(lava_get(584))||0x1974616c==(lava_get(584))));
   24cb9:	bf 2a 02 00 00       	mov    $0x22a,%edi
{
   24cbe:	48 83 ec 08          	sub    $0x8,%rsp
  fd = fileno (fp+(lava_get(554))*(0x6c617437==(lava_get(554))||0x3774616c==(lava_get(554)))+(lava_get(556))*(0x6c617435==(lava_get(556))||0x3574616c==(lava_get(556)))+(lava_get(558))*(0x6c617433==(lava_get(558))||0x3374616c==(lava_get(558)))+(lava_get(560))*(0x6c617431==(lava_get(560))||0x3174616c==(lava_get(560)))+(lava_get(562))*(0x6c61742f==(lava_get(562))||0x2f74616c==(lava_get(562)))+(lava_get(566))*(0x6c61742b==(lava_get(566))||0x2b74616c==(lava_get(566)))+(lava_get(572))*(0x6c617425==(lava_get(572))||0x2574616c==(lava_get(572)))+(lava_get(573))*(0x6c617424==(lava_get(573))||0x2474616c==(lava_get(573)))+(lava_get(576))*(0x6c617421==(lava_get(576))||0x2174616c==(lava_get(576)))+(lava_get(582))*(0x6c61741b==(lava_get(582))||0x1b74616c==(lava_get(582)))+(lava_get(583))*(0x6c61741a==(lava_get(583))||0x1a74616c==(lava_get(583)))+(lava_get(584))*(0x6c617419==(lava_get(584))||0x1974616c==(lava_get(584))));
   24cc2:	e8 c9 81 fe ff       	callq  ce90 <lava_get>
   24cc7:	bf 2a 02 00 00       	mov    $0x22a,%edi
   24ccc:	89 c5                	mov    %eax,%ebp
   24cce:	e8 bd 81 fe ff       	callq  ce90 <lava_get>
   24cd3:	48 89 15 3e ec 72 00 	mov    %rdx,0x72ec3e(%rip)        # 753918 <tmpquadone>
   24cda:	48 89 0d 4f 8f 5d 00 	mov    %rcx,0x5d8f4f(%rip)        # 5fdc30 <tmpquadtwo>
   24ce1:	48 8d 15 08 8f 5d 00 	lea    0x5d8f08(%rip),%rdx        # 5fdbf0 <funcinptr>
   24ce8:	48 c7 02 53 0f 00 00 	movq   $0xf53,(%rdx)
   24cef:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24cf6:	00 
   24cf7:	48 c7 c1 37 74 61 6c 	mov    $0x6c617437,%rcx
   24cfe:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24d02:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24d09:	00 
   24d0a:	48 89 c1             	mov    %rax,%rcx
   24d0d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24d11:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24d18:	00 
   24d19:	ff 32                	pushq  (%rdx)
   24d1b:	48 8b 15 f6 eb 72 00 	mov    0x72ebf6(%rip),%rdx        # 753918 <tmpquadone>
   24d22:	48 8b 0d 07 8f 5d 00 	mov    0x5d8f07(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24d29:	48 c7 05 1c ec 72 00 	movq   $0x1,0x72ec1c(%rip)        # 753950 <cmpPassed>
   24d30:	01 00 00 00 
   24d34:	e8 2f 36 fe ff       	callq  8368 <_storeDataFn>
   24d39:	3d 37 74 61 6c       	cmp    $0x6c617437,%eax
   24d3e:	0f 84 93 00 00 00    	je     24dd7 <rpl_fclose+0x127>
   24d44:	50                   	push   %rax
   24d45:	48 c7 c0 66 26 30 3b 	mov    $0x3b302666,%rax
   24d4c:	48 89 05 ed eb 72 00 	mov    %rax,0x72ebed(%rip)        # 753940 <edgeId>
   24d53:	58                   	pop    %rax
   24d54:	e8 77 35 fe ff       	callq  82d0 <_storeEdge>
   24d59:	bf 2a 02 00 00       	mov    $0x22a,%edi
   24d5e:	e8 2d 81 fe ff       	callq  ce90 <lava_get>
   24d63:	48 89 15 ae eb 72 00 	mov    %rdx,0x72ebae(%rip)        # 753918 <tmpquadone>
   24d6a:	48 89 0d bf 8e 5d 00 	mov    %rcx,0x5d8ebf(%rip)        # 5fdc30 <tmpquadtwo>
   24d71:	48 8d 15 78 8e 5d 00 	lea    0x5d8e78(%rip),%rdx        # 5fdbf0 <funcinptr>
   24d78:	48 c7 02 54 0f 00 00 	movq   $0xf54,(%rdx)
   24d7f:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24d86:	00 
   24d87:	48 c7 c1 6c 61 74 37 	mov    $0x3774616c,%rcx
   24d8e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24d92:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24d99:	00 
   24d9a:	48 89 c1             	mov    %rax,%rcx
   24d9d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24da1:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24da8:	00 
   24da9:	ff 32                	pushq  (%rdx)
   24dab:	48 8b 15 66 eb 72 00 	mov    0x72eb66(%rip),%rdx        # 753918 <tmpquadone>
   24db2:	48 8b 0d 77 8e 5d 00 	mov    0x5d8e77(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24db9:	48 c7 05 8c eb 72 00 	movq   $0x1,0x72eb8c(%rip)        # 753950 <cmpPassed>
   24dc0:	01 00 00 00 
   24dc4:	e8 9f 35 fe ff       	callq  8368 <_storeDataFn>
   24dc9:	3d 6c 61 74 37       	cmp    $0x3774616c,%eax
   24dce:	0f 94 c0             	sete   %al
   24dd1:	0f b6 d0             	movzbl %al,%edx
   24dd4:	0f af ea             	imul   %edx,%ebp
   24dd7:	50                   	push   %rax
   24dd8:	48 c7 c0 13 98 1d 15 	mov    $0x151d9813,%rax
   24ddf:	48 89 05 5a eb 72 00 	mov    %rax,0x72eb5a(%rip)        # 753940 <edgeId>
   24de6:	58                   	pop    %rax
   24de7:	e8 e4 34 fe ff       	callq  82d0 <_storeEdge>
   24dec:	bf 2c 02 00 00       	mov    $0x22c,%edi
   24df1:	e8 9a 80 fe ff       	callq  ce90 <lava_get>
   24df6:	bf 2c 02 00 00       	mov    $0x22c,%edi
   24dfb:	89 c3                	mov    %eax,%ebx
   24dfd:	e8 8e 80 fe ff       	callq  ce90 <lava_get>
   24e02:	48 89 15 0f eb 72 00 	mov    %rdx,0x72eb0f(%rip)        # 753918 <tmpquadone>
   24e09:	48 89 0d 20 8e 5d 00 	mov    %rcx,0x5d8e20(%rip)        # 5fdc30 <tmpquadtwo>
   24e10:	48 8d 15 d9 8d 5d 00 	lea    0x5d8dd9(%rip),%rdx        # 5fdbf0 <funcinptr>
   24e17:	48 c7 02 55 0f 00 00 	movq   $0xf55,(%rdx)
   24e1e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24e25:	00 
   24e26:	48 c7 c1 35 74 61 6c 	mov    $0x6c617435,%rcx
   24e2d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24e31:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24e38:	00 
   24e39:	48 89 c1             	mov    %rax,%rcx
   24e3c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24e40:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24e47:	00 
   24e48:	ff 32                	pushq  (%rdx)
   24e4a:	48 8b 15 c7 ea 72 00 	mov    0x72eac7(%rip),%rdx        # 753918 <tmpquadone>
   24e51:	48 8b 0d d8 8d 5d 00 	mov    0x5d8dd8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24e58:	48 c7 05 ed ea 72 00 	movq   $0x1,0x72eaed(%rip)        # 753950 <cmpPassed>
   24e5f:	01 00 00 00 
   24e63:	e8 00 35 fe ff       	callq  8368 <_storeDataFn>
   24e68:	3d 35 74 61 6c       	cmp    $0x6c617435,%eax
   24e6d:	0f 84 93 00 00 00    	je     24f06 <rpl_fclose+0x256>
   24e73:	50                   	push   %rax
   24e74:	48 c7 c0 66 47 45 5a 	mov    $0x5a454766,%rax
   24e7b:	48 89 05 be ea 72 00 	mov    %rax,0x72eabe(%rip)        # 753940 <edgeId>
   24e82:	58                   	pop    %rax
   24e83:	e8 48 34 fe ff       	callq  82d0 <_storeEdge>
   24e88:	bf 2c 02 00 00       	mov    $0x22c,%edi
   24e8d:	e8 fe 7f fe ff       	callq  ce90 <lava_get>
   24e92:	48 89 15 7f ea 72 00 	mov    %rdx,0x72ea7f(%rip)        # 753918 <tmpquadone>
   24e99:	48 89 0d 90 8d 5d 00 	mov    %rcx,0x5d8d90(%rip)        # 5fdc30 <tmpquadtwo>
   24ea0:	48 8d 15 49 8d 5d 00 	lea    0x5d8d49(%rip),%rdx        # 5fdbf0 <funcinptr>
   24ea7:	48 c7 02 56 0f 00 00 	movq   $0xf56,(%rdx)
   24eae:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24eb5:	00 
   24eb6:	48 c7 c1 6c 61 74 35 	mov    $0x3574616c,%rcx
   24ebd:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24ec1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24ec8:	00 
   24ec9:	48 89 c1             	mov    %rax,%rcx
   24ecc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24ed0:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24ed7:	00 
   24ed8:	ff 32                	pushq  (%rdx)
   24eda:	48 8b 15 37 ea 72 00 	mov    0x72ea37(%rip),%rdx        # 753918 <tmpquadone>
   24ee1:	48 8b 0d 48 8d 5d 00 	mov    0x5d8d48(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24ee8:	48 c7 05 5d ea 72 00 	movq   $0x1,0x72ea5d(%rip)        # 753950 <cmpPassed>
   24eef:	01 00 00 00 
   24ef3:	e8 70 34 fe ff       	callq  8368 <_storeDataFn>
   24ef8:	3d 6c 61 74 35       	cmp    $0x3574616c,%eax
   24efd:	0f 94 c1             	sete   %cl
   24f00:	0f b6 f1             	movzbl %cl,%esi
   24f03:	0f af de             	imul   %esi,%ebx
   24f06:	50                   	push   %rax
   24f07:	48 b8 a3 22 2d 9b 00 	movabs $0x9b2d22a3,%rax
   24f0e:	00 00 00 
   24f11:	48 89 05 28 ea 72 00 	mov    %rax,0x72ea28(%rip)        # 753940 <edgeId>
   24f18:	58                   	pop    %rax
   24f19:	e8 b2 33 fe ff       	callq  82d0 <_storeEdge>
   24f1e:	bf 2e 02 00 00       	mov    $0x22e,%edi
   24f23:	48 01 dd             	add    %rbx,%rbp
   24f26:	e8 65 7f fe ff       	callq  ce90 <lava_get>
   24f2b:	bf 2e 02 00 00       	mov    $0x22e,%edi
   24f30:	41 89 c5             	mov    %eax,%r13d
   24f33:	e8 58 7f fe ff       	callq  ce90 <lava_get>
   24f38:	48 89 15 d9 e9 72 00 	mov    %rdx,0x72e9d9(%rip)        # 753918 <tmpquadone>
   24f3f:	48 89 0d ea 8c 5d 00 	mov    %rcx,0x5d8cea(%rip)        # 5fdc30 <tmpquadtwo>
   24f46:	48 8d 15 a3 8c 5d 00 	lea    0x5d8ca3(%rip),%rdx        # 5fdbf0 <funcinptr>
   24f4d:	48 c7 02 57 0f 00 00 	movq   $0xf57,(%rdx)
   24f54:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24f5b:	00 
   24f5c:	48 c7 c1 33 74 61 6c 	mov    $0x6c617433,%rcx
   24f63:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24f67:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   24f6e:	00 
   24f6f:	48 89 c1             	mov    %rax,%rcx
   24f72:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   24f76:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   24f7d:	00 
   24f7e:	ff 32                	pushq  (%rdx)
   24f80:	48 8b 15 91 e9 72 00 	mov    0x72e991(%rip),%rdx        # 753918 <tmpquadone>
   24f87:	48 8b 0d a2 8c 5d 00 	mov    0x5d8ca2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   24f8e:	48 c7 05 b7 e9 72 00 	movq   $0x1,0x72e9b7(%rip)        # 753950 <cmpPassed>
   24f95:	01 00 00 00 
   24f99:	e8 ca 33 fe ff       	callq  8368 <_storeDataFn>
   24f9e:	3d 33 74 61 6c       	cmp    $0x6c617433,%eax
   24fa3:	0f 84 99 00 00 00    	je     25042 <rpl_fclose+0x392>
   24fa9:	50                   	push   %rax
   24faa:	48 b8 a4 65 33 fd 00 	movabs $0xfd3365a4,%rax
   24fb1:	00 00 00 
   24fb4:	48 89 05 85 e9 72 00 	mov    %rax,0x72e985(%rip)        # 753940 <edgeId>
   24fbb:	58                   	pop    %rax
   24fbc:	e8 0f 33 fe ff       	callq  82d0 <_storeEdge>
   24fc1:	bf 2e 02 00 00       	mov    $0x22e,%edi
   24fc6:	e8 c5 7e fe ff       	callq  ce90 <lava_get>
   24fcb:	48 89 15 46 e9 72 00 	mov    %rdx,0x72e946(%rip)        # 753918 <tmpquadone>
   24fd2:	48 89 0d 57 8c 5d 00 	mov    %rcx,0x5d8c57(%rip)        # 5fdc30 <tmpquadtwo>
   24fd9:	48 8d 15 10 8c 5d 00 	lea    0x5d8c10(%rip),%rdx        # 5fdbf0 <funcinptr>
   24fe0:	48 c7 02 58 0f 00 00 	movq   $0xf58,(%rdx)
   24fe7:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   24fee:	00 
   24fef:	48 c7 c1 6c 61 74 33 	mov    $0x3374616c,%rcx
   24ff6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   24ffa:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25001:	00 
   25002:	48 89 c1             	mov    %rax,%rcx
   25005:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25009:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25010:	00 
   25011:	ff 32                	pushq  (%rdx)
   25013:	48 8b 15 fe e8 72 00 	mov    0x72e8fe(%rip),%rdx        # 753918 <tmpquadone>
   2501a:	48 8b 0d 0f 8c 5d 00 	mov    0x5d8c0f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25021:	48 c7 05 24 e9 72 00 	movq   $0x1,0x72e924(%rip)        # 753950 <cmpPassed>
   25028:	01 00 00 00 
   2502c:	e8 37 33 fe ff       	callq  8368 <_storeDataFn>
   25031:	3d 6c 61 74 33       	cmp    $0x3374616c,%eax
   25036:	40 0f 94 c7          	sete   %dil
   2503a:	44 0f b6 c7          	movzbl %dil,%r8d
   2503e:	45 0f af e8          	imul   %r8d,%r13d
   25042:	50                   	push   %rax
   25043:	48 b8 b2 99 7e a4 00 	movabs $0xa47e99b2,%rax
   2504a:	00 00 00 
   2504d:	48 89 05 ec e8 72 00 	mov    %rax,0x72e8ec(%rip)        # 753940 <edgeId>
   25054:	58                   	pop    %rax
   25055:	e8 76 32 fe ff       	callq  82d0 <_storeEdge>
   2505a:	bf 30 02 00 00       	mov    $0x230,%edi
   2505f:	49 8d 5c 2d 00       	lea    0x0(%r13,%rbp,1),%rbx
   25064:	e8 27 7e fe ff       	callq  ce90 <lava_get>
   25069:	bf 30 02 00 00       	mov    $0x230,%edi
   2506e:	89 c5                	mov    %eax,%ebp
   25070:	e8 1b 7e fe ff       	callq  ce90 <lava_get>
   25075:	48 89 15 9c e8 72 00 	mov    %rdx,0x72e89c(%rip)        # 753918 <tmpquadone>
   2507c:	48 89 0d ad 8b 5d 00 	mov    %rcx,0x5d8bad(%rip)        # 5fdc30 <tmpquadtwo>
   25083:	48 8d 15 66 8b 5d 00 	lea    0x5d8b66(%rip),%rdx        # 5fdbf0 <funcinptr>
   2508a:	48 c7 02 59 0f 00 00 	movq   $0xf59,(%rdx)
   25091:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25098:	00 
   25099:	48 c7 c1 31 74 61 6c 	mov    $0x6c617431,%rcx
   250a0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   250a4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   250ab:	00 
   250ac:	48 89 c1             	mov    %rax,%rcx
   250af:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   250b3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   250ba:	00 
   250bb:	ff 32                	pushq  (%rdx)
   250bd:	48 8b 15 54 e8 72 00 	mov    0x72e854(%rip),%rdx        # 753918 <tmpquadone>
   250c4:	48 8b 0d 65 8b 5d 00 	mov    0x5d8b65(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   250cb:	48 c7 05 7a e8 72 00 	movq   $0x1,0x72e87a(%rip)        # 753950 <cmpPassed>
   250d2:	01 00 00 00 
   250d6:	e8 8d 32 fe ff       	callq  8368 <_storeDataFn>
   250db:	3d 31 74 61 6c       	cmp    $0x6c617431,%eax
   250e0:	0f 84 96 00 00 00    	je     2517c <rpl_fclose+0x4cc>
   250e6:	50                   	push   %rax
   250e7:	48 c7 c0 d3 8f f4 3a 	mov    $0x3af48fd3,%rax
   250ee:	48 89 05 4b e8 72 00 	mov    %rax,0x72e84b(%rip)        # 753940 <edgeId>
   250f5:	58                   	pop    %rax
   250f6:	e8 d5 31 fe ff       	callq  82d0 <_storeEdge>
   250fb:	bf 30 02 00 00       	mov    $0x230,%edi
   25100:	e8 8b 7d fe ff       	callq  ce90 <lava_get>
   25105:	48 89 15 0c e8 72 00 	mov    %rdx,0x72e80c(%rip)        # 753918 <tmpquadone>
   2510c:	48 89 0d 1d 8b 5d 00 	mov    %rcx,0x5d8b1d(%rip)        # 5fdc30 <tmpquadtwo>
   25113:	48 8d 15 d6 8a 5d 00 	lea    0x5d8ad6(%rip),%rdx        # 5fdbf0 <funcinptr>
   2511a:	48 c7 02 5a 0f 00 00 	movq   $0xf5a,(%rdx)
   25121:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25128:	00 
   25129:	48 c7 c1 6c 61 74 31 	mov    $0x3174616c,%rcx
   25130:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25134:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2513b:	00 
   2513c:	48 89 c1             	mov    %rax,%rcx
   2513f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25143:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2514a:	00 
   2514b:	ff 32                	pushq  (%rdx)
   2514d:	48 8b 15 c4 e7 72 00 	mov    0x72e7c4(%rip),%rdx        # 753918 <tmpquadone>
   25154:	48 8b 0d d5 8a 5d 00 	mov    0x5d8ad5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2515b:	48 c7 05 ea e7 72 00 	movq   $0x1,0x72e7ea(%rip)        # 753950 <cmpPassed>
   25162:	01 00 00 00 
   25166:	e8 fd 31 fe ff       	callq  8368 <_storeDataFn>
   2516b:	3d 6c 61 74 31       	cmp    $0x3174616c,%eax
   25170:	41 0f 94 c1          	sete   %r9b
   25174:	45 0f b6 d1          	movzbl %r9b,%r10d
   25178:	41 0f af ea          	imul   %r10d,%ebp
   2517c:	50                   	push   %rax
   2517d:	48 b8 47 7a 9d c9 00 	movabs $0xc99d7a47,%rax
   25184:	00 00 00 
   25187:	48 89 05 b2 e7 72 00 	mov    %rax,0x72e7b2(%rip)        # 753940 <edgeId>
   2518e:	58                   	pop    %rax
   2518f:	e8 3c 31 fe ff       	callq  82d0 <_storeEdge>
   25194:	bf 32 02 00 00       	mov    $0x232,%edi
   25199:	48 01 dd             	add    %rbx,%rbp
   2519c:	e8 ef 7c fe ff       	callq  ce90 <lava_get>
   251a1:	bf 32 02 00 00       	mov    $0x232,%edi
   251a6:	41 89 c5             	mov    %eax,%r13d
   251a9:	e8 e2 7c fe ff       	callq  ce90 <lava_get>
   251ae:	48 89 15 63 e7 72 00 	mov    %rdx,0x72e763(%rip)        # 753918 <tmpquadone>
   251b5:	48 89 0d 74 8a 5d 00 	mov    %rcx,0x5d8a74(%rip)        # 5fdc30 <tmpquadtwo>
   251bc:	48 8d 15 2d 8a 5d 00 	lea    0x5d8a2d(%rip),%rdx        # 5fdbf0 <funcinptr>
   251c3:	48 c7 02 5b 0f 00 00 	movq   $0xf5b,(%rdx)
   251ca:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   251d1:	00 
   251d2:	48 c7 c1 2f 74 61 6c 	mov    $0x6c61742f,%rcx
   251d9:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   251dd:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   251e4:	00 
   251e5:	48 89 c1             	mov    %rax,%rcx
   251e8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   251ec:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   251f3:	00 
   251f4:	ff 32                	pushq  (%rdx)
   251f6:	48 8b 15 1b e7 72 00 	mov    0x72e71b(%rip),%rdx        # 753918 <tmpquadone>
   251fd:	48 8b 0d 2c 8a 5d 00 	mov    0x5d8a2c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25204:	48 c7 05 41 e7 72 00 	movq   $0x1,0x72e741(%rip)        # 753950 <cmpPassed>
   2520b:	01 00 00 00 
   2520f:	e8 54 31 fe ff       	callq  8368 <_storeDataFn>
   25214:	3d 2f 74 61 6c       	cmp    $0x6c61742f,%eax
   25219:	0f 84 99 00 00 00    	je     252b8 <rpl_fclose+0x608>
   2521f:	50                   	push   %rax
   25220:	48 b8 af 33 d9 ba 00 	movabs $0xbad933af,%rax
   25227:	00 00 00 
   2522a:	48 89 05 0f e7 72 00 	mov    %rax,0x72e70f(%rip)        # 753940 <edgeId>
   25231:	58                   	pop    %rax
   25232:	e8 99 30 fe ff       	callq  82d0 <_storeEdge>
   25237:	bf 32 02 00 00       	mov    $0x232,%edi
   2523c:	e8 4f 7c fe ff       	callq  ce90 <lava_get>
   25241:	48 89 15 d0 e6 72 00 	mov    %rdx,0x72e6d0(%rip)        # 753918 <tmpquadone>
   25248:	48 89 0d e1 89 5d 00 	mov    %rcx,0x5d89e1(%rip)        # 5fdc30 <tmpquadtwo>
   2524f:	48 8d 15 9a 89 5d 00 	lea    0x5d899a(%rip),%rdx        # 5fdbf0 <funcinptr>
   25256:	48 c7 02 5c 0f 00 00 	movq   $0xf5c,(%rdx)
   2525d:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25264:	00 
   25265:	48 c7 c1 6c 61 74 2f 	mov    $0x2f74616c,%rcx
   2526c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25270:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25277:	00 
   25278:	48 89 c1             	mov    %rax,%rcx
   2527b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2527f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25286:	00 
   25287:	ff 32                	pushq  (%rdx)
   25289:	48 8b 15 88 e6 72 00 	mov    0x72e688(%rip),%rdx        # 753918 <tmpquadone>
   25290:	48 8b 0d 99 89 5d 00 	mov    0x5d8999(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25297:	48 c7 05 ae e6 72 00 	movq   $0x1,0x72e6ae(%rip)        # 753950 <cmpPassed>
   2529e:	01 00 00 00 
   252a2:	e8 c1 30 fe ff       	callq  8368 <_storeDataFn>
   252a7:	3d 6c 61 74 2f       	cmp    $0x2f74616c,%eax
   252ac:	41 0f 94 c3          	sete   %r11b
   252b0:	41 0f b6 c3          	movzbl %r11b,%eax
   252b4:	44 0f af e8          	imul   %eax,%r13d
   252b8:	50                   	push   %rax
   252b9:	48 c7 c0 99 6c dd 6a 	mov    $0x6add6c99,%rax
   252c0:	48 89 05 79 e6 72 00 	mov    %rax,0x72e679(%rip)        # 753940 <edgeId>
   252c7:	58                   	pop    %rax
   252c8:	e8 03 30 fe ff       	callq  82d0 <_storeEdge>
   252cd:	bf 36 02 00 00       	mov    $0x236,%edi
   252d2:	4c 01 ed             	add    %r13,%rbp
   252d5:	e8 b6 7b fe ff       	callq  ce90 <lava_get>
   252da:	bf 36 02 00 00       	mov    $0x236,%edi
   252df:	89 c3                	mov    %eax,%ebx
   252e1:	e8 aa 7b fe ff       	callq  ce90 <lava_get>
   252e6:	48 89 15 2b e6 72 00 	mov    %rdx,0x72e62b(%rip)        # 753918 <tmpquadone>
   252ed:	48 89 0d 3c 89 5d 00 	mov    %rcx,0x5d893c(%rip)        # 5fdc30 <tmpquadtwo>
   252f4:	48 8d 15 f5 88 5d 00 	lea    0x5d88f5(%rip),%rdx        # 5fdbf0 <funcinptr>
   252fb:	48 c7 02 5d 0f 00 00 	movq   $0xf5d,(%rdx)
   25302:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25309:	00 
   2530a:	48 c7 c1 2b 74 61 6c 	mov    $0x6c61742b,%rcx
   25311:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25315:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2531c:	00 
   2531d:	48 89 c1             	mov    %rax,%rcx
   25320:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25324:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2532b:	00 
   2532c:	ff 32                	pushq  (%rdx)
   2532e:	48 8b 15 e3 e5 72 00 	mov    0x72e5e3(%rip),%rdx        # 753918 <tmpquadone>
   25335:	48 8b 0d f4 88 5d 00 	mov    0x5d88f4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2533c:	48 c7 05 09 e6 72 00 	movq   $0x1,0x72e609(%rip)        # 753950 <cmpPassed>
   25343:	01 00 00 00 
   25347:	e8 1c 30 fe ff       	callq  8368 <_storeDataFn>
   2534c:	3d 2b 74 61 6c       	cmp    $0x6c61742b,%eax
   25351:	0f 84 93 00 00 00    	je     253ea <rpl_fclose+0x73a>
   25357:	50                   	push   %rax
   25358:	48 c7 c0 ad 5b 2d 24 	mov    $0x242d5bad,%rax
   2535f:	48 89 05 da e5 72 00 	mov    %rax,0x72e5da(%rip)        # 753940 <edgeId>
   25366:	58                   	pop    %rax
   25367:	e8 64 2f fe ff       	callq  82d0 <_storeEdge>
   2536c:	bf 36 02 00 00       	mov    $0x236,%edi
   25371:	e8 1a 7b fe ff       	callq  ce90 <lava_get>
   25376:	48 89 15 9b e5 72 00 	mov    %rdx,0x72e59b(%rip)        # 753918 <tmpquadone>
   2537d:	48 89 0d ac 88 5d 00 	mov    %rcx,0x5d88ac(%rip)        # 5fdc30 <tmpquadtwo>
   25384:	48 8d 15 65 88 5d 00 	lea    0x5d8865(%rip),%rdx        # 5fdbf0 <funcinptr>
   2538b:	48 c7 02 5e 0f 00 00 	movq   $0xf5e,(%rdx)
   25392:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25399:	00 
   2539a:	48 c7 c1 6c 61 74 2b 	mov    $0x2b74616c,%rcx
   253a1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   253a5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   253ac:	00 
   253ad:	48 89 c1             	mov    %rax,%rcx
   253b0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   253b4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   253bb:	00 
   253bc:	ff 32                	pushq  (%rdx)
   253be:	48 8b 15 53 e5 72 00 	mov    0x72e553(%rip),%rdx        # 753918 <tmpquadone>
   253c5:	48 8b 0d 64 88 5d 00 	mov    0x5d8864(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   253cc:	48 c7 05 79 e5 72 00 	movq   $0x1,0x72e579(%rip)        # 753950 <cmpPassed>
   253d3:	01 00 00 00 
   253d7:	e8 8c 2f fe ff       	callq  8368 <_storeDataFn>
   253dc:	3d 6c 61 74 2b       	cmp    $0x2b74616c,%eax
   253e1:	0f 94 c2             	sete   %dl
   253e4:	0f b6 ca             	movzbl %dl,%ecx
   253e7:	0f af d9             	imul   %ecx,%ebx
   253ea:	50                   	push   %rax
   253eb:	48 c7 c0 ad 16 12 5e 	mov    $0x5e1216ad,%rax
   253f2:	48 89 05 47 e5 72 00 	mov    %rax,0x72e547(%rip)        # 753940 <edgeId>
   253f9:	58                   	pop    %rax
   253fa:	e8 d1 2e fe ff       	callq  82d0 <_storeEdge>
   253ff:	bf 3c 02 00 00       	mov    $0x23c,%edi
   25404:	4c 8d 2c 2b          	lea    (%rbx,%rbp,1),%r13
   25408:	e8 83 7a fe ff       	callq  ce90 <lava_get>
   2540d:	bf 3c 02 00 00       	mov    $0x23c,%edi
   25412:	89 c5                	mov    %eax,%ebp
   25414:	e8 77 7a fe ff       	callq  ce90 <lava_get>
   25419:	48 89 15 f8 e4 72 00 	mov    %rdx,0x72e4f8(%rip)        # 753918 <tmpquadone>
   25420:	48 89 0d 09 88 5d 00 	mov    %rcx,0x5d8809(%rip)        # 5fdc30 <tmpquadtwo>
   25427:	48 8d 15 c2 87 5d 00 	lea    0x5d87c2(%rip),%rdx        # 5fdbf0 <funcinptr>
   2542e:	48 c7 02 5f 0f 00 00 	movq   $0xf5f,(%rdx)
   25435:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2543c:	00 
   2543d:	48 c7 c1 25 74 61 6c 	mov    $0x6c617425,%rcx
   25444:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25448:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2544f:	00 
   25450:	48 89 c1             	mov    %rax,%rcx
   25453:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25457:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2545e:	00 
   2545f:	ff 32                	pushq  (%rdx)
   25461:	48 8b 15 b0 e4 72 00 	mov    0x72e4b0(%rip),%rdx        # 753918 <tmpquadone>
   25468:	48 8b 0d c1 87 5d 00 	mov    0x5d87c1(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2546f:	48 c7 05 d6 e4 72 00 	movq   $0x1,0x72e4d6(%rip)        # 753950 <cmpPassed>
   25476:	01 00 00 00 
   2547a:	e8 e9 2e fe ff       	callq  8368 <_storeDataFn>
   2547f:	3d 25 74 61 6c       	cmp    $0x6c617425,%eax
   25484:	0f 84 95 00 00 00    	je     2551f <rpl_fclose+0x86f>
   2548a:	50                   	push   %rax
   2548b:	48 c7 c0 42 c2 eb 50 	mov    $0x50ebc242,%rax
   25492:	48 89 05 a7 e4 72 00 	mov    %rax,0x72e4a7(%rip)        # 753940 <edgeId>
   25499:	58                   	pop    %rax
   2549a:	e8 31 2e fe ff       	callq  82d0 <_storeEdge>
   2549f:	bf 3c 02 00 00       	mov    $0x23c,%edi
   254a4:	e8 e7 79 fe ff       	callq  ce90 <lava_get>
   254a9:	48 89 15 68 e4 72 00 	mov    %rdx,0x72e468(%rip)        # 753918 <tmpquadone>
   254b0:	48 89 0d 79 87 5d 00 	mov    %rcx,0x5d8779(%rip)        # 5fdc30 <tmpquadtwo>
   254b7:	48 8d 15 32 87 5d 00 	lea    0x5d8732(%rip),%rdx        # 5fdbf0 <funcinptr>
   254be:	48 c7 02 60 0f 00 00 	movq   $0xf60,(%rdx)
   254c5:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   254cc:	00 
   254cd:	48 c7 c1 6c 61 74 25 	mov    $0x2574616c,%rcx
   254d4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   254d8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   254df:	00 
   254e0:	48 89 c1             	mov    %rax,%rcx
   254e3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   254e7:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   254ee:	00 
   254ef:	ff 32                	pushq  (%rdx)
   254f1:	48 8b 15 20 e4 72 00 	mov    0x72e420(%rip),%rdx        # 753918 <tmpquadone>
   254f8:	48 8b 0d 31 87 5d 00 	mov    0x5d8731(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   254ff:	48 c7 05 46 e4 72 00 	movq   $0x1,0x72e446(%rip)        # 753950 <cmpPassed>
   25506:	01 00 00 00 
   2550a:	e8 59 2e fe ff       	callq  8368 <_storeDataFn>
   2550f:	3d 6c 61 74 25       	cmp    $0x2574616c,%eax
   25514:	40 0f 94 c6          	sete   %sil
   25518:	40 0f b6 fe          	movzbl %sil,%edi
   2551c:	0f af ef             	imul   %edi,%ebp
   2551f:	50                   	push   %rax
   25520:	48 b8 e1 75 28 c3 00 	movabs $0xc32875e1,%rax
   25527:	00 00 00 
   2552a:	48 89 05 0f e4 72 00 	mov    %rax,0x72e40f(%rip)        # 753940 <edgeId>
   25531:	58                   	pop    %rax
   25532:	e8 99 2d fe ff       	callq  82d0 <_storeEdge>
   25537:	bf 3d 02 00 00       	mov    $0x23d,%edi
   2553c:	4c 01 ed             	add    %r13,%rbp
   2553f:	e8 4c 79 fe ff       	callq  ce90 <lava_get>
   25544:	bf 3d 02 00 00       	mov    $0x23d,%edi
   25549:	89 c3                	mov    %eax,%ebx
   2554b:	e8 40 79 fe ff       	callq  ce90 <lava_get>
   25550:	48 89 15 c1 e3 72 00 	mov    %rdx,0x72e3c1(%rip)        # 753918 <tmpquadone>
   25557:	48 89 0d d2 86 5d 00 	mov    %rcx,0x5d86d2(%rip)        # 5fdc30 <tmpquadtwo>
   2555e:	48 8d 15 8b 86 5d 00 	lea    0x5d868b(%rip),%rdx        # 5fdbf0 <funcinptr>
   25565:	48 c7 02 61 0f 00 00 	movq   $0xf61,(%rdx)
   2556c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25573:	00 
   25574:	48 c7 c1 24 74 61 6c 	mov    $0x6c617424,%rcx
   2557b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2557f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25586:	00 
   25587:	48 89 c1             	mov    %rax,%rcx
   2558a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2558e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25595:	00 
   25596:	ff 32                	pushq  (%rdx)
   25598:	48 8b 15 79 e3 72 00 	mov    0x72e379(%rip),%rdx        # 753918 <tmpquadone>
   2559f:	48 8b 0d 8a 86 5d 00 	mov    0x5d868a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   255a6:	48 c7 05 9f e3 72 00 	movq   $0x1,0x72e39f(%rip)        # 753950 <cmpPassed>
   255ad:	01 00 00 00 
   255b1:	e8 b2 2d fe ff       	callq  8368 <_storeDataFn>
   255b6:	3d 24 74 61 6c       	cmp    $0x6c617424,%eax
   255bb:	0f 84 96 00 00 00    	je     25657 <rpl_fclose+0x9a7>
   255c1:	50                   	push   %rax
   255c2:	48 c7 c0 0e 65 78 58 	mov    $0x5878650e,%rax
   255c9:	48 89 05 70 e3 72 00 	mov    %rax,0x72e370(%rip)        # 753940 <edgeId>
   255d0:	58                   	pop    %rax
   255d1:	e8 fa 2c fe ff       	callq  82d0 <_storeEdge>
   255d6:	bf 3d 02 00 00       	mov    $0x23d,%edi
   255db:	e8 b0 78 fe ff       	callq  ce90 <lava_get>
   255e0:	48 89 15 31 e3 72 00 	mov    %rdx,0x72e331(%rip)        # 753918 <tmpquadone>
   255e7:	48 89 0d 42 86 5d 00 	mov    %rcx,0x5d8642(%rip)        # 5fdc30 <tmpquadtwo>
   255ee:	48 8d 15 fb 85 5d 00 	lea    0x5d85fb(%rip),%rdx        # 5fdbf0 <funcinptr>
   255f5:	48 c7 02 62 0f 00 00 	movq   $0xf62,(%rdx)
   255fc:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25603:	00 
   25604:	48 c7 c1 6c 61 74 24 	mov    $0x2474616c,%rcx
   2560b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2560f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25616:	00 
   25617:	48 89 c1             	mov    %rax,%rcx
   2561a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2561e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25625:	00 
   25626:	ff 32                	pushq  (%rdx)
   25628:	48 8b 15 e9 e2 72 00 	mov    0x72e2e9(%rip),%rdx        # 753918 <tmpquadone>
   2562f:	48 8b 0d fa 85 5d 00 	mov    0x5d85fa(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25636:	48 c7 05 0f e3 72 00 	movq   $0x1,0x72e30f(%rip)        # 753950 <cmpPassed>
   2563d:	01 00 00 00 
   25641:	e8 22 2d fe ff       	callq  8368 <_storeDataFn>
   25646:	3d 6c 61 74 24       	cmp    $0x2474616c,%eax
   2564b:	41 0f 94 c0          	sete   %r8b
   2564f:	45 0f b6 c8          	movzbl %r8b,%r9d
   25653:	41 0f af d9          	imul   %r9d,%ebx
   25657:	50                   	push   %rax
   25658:	48 c7 c0 32 3c 2c 17 	mov    $0x172c3c32,%rax
   2565f:	48 89 05 da e2 72 00 	mov    %rax,0x72e2da(%rip)        # 753940 <edgeId>
   25666:	58                   	pop    %rax
   25667:	e8 64 2c fe ff       	callq  82d0 <_storeEdge>
   2566c:	bf 40 02 00 00       	mov    $0x240,%edi
   25671:	48 01 dd             	add    %rbx,%rbp
   25674:	e8 17 78 fe ff       	callq  ce90 <lava_get>
   25679:	bf 40 02 00 00       	mov    $0x240,%edi
   2567e:	41 89 c5             	mov    %eax,%r13d
   25681:	e8 0a 78 fe ff       	callq  ce90 <lava_get>
   25686:	48 89 15 8b e2 72 00 	mov    %rdx,0x72e28b(%rip)        # 753918 <tmpquadone>
   2568d:	48 89 0d 9c 85 5d 00 	mov    %rcx,0x5d859c(%rip)        # 5fdc30 <tmpquadtwo>
   25694:	48 8d 15 55 85 5d 00 	lea    0x5d8555(%rip),%rdx        # 5fdbf0 <funcinptr>
   2569b:	48 c7 02 63 0f 00 00 	movq   $0xf63,(%rdx)
   256a2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   256a9:	00 
   256aa:	48 c7 c1 21 74 61 6c 	mov    $0x6c617421,%rcx
   256b1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   256b5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   256bc:	00 
   256bd:	48 89 c1             	mov    %rax,%rcx
   256c0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   256c4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   256cb:	00 
   256cc:	ff 32                	pushq  (%rdx)
   256ce:	48 8b 15 43 e2 72 00 	mov    0x72e243(%rip),%rdx        # 753918 <tmpquadone>
   256d5:	48 8b 0d 54 85 5d 00 	mov    0x5d8554(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   256dc:	48 c7 05 69 e2 72 00 	movq   $0x1,0x72e269(%rip)        # 753950 <cmpPassed>
   256e3:	01 00 00 00 
   256e7:	e8 7c 2c fe ff       	callq  8368 <_storeDataFn>
   256ec:	3d 21 74 61 6c       	cmp    $0x6c617421,%eax
   256f1:	0f 84 96 00 00 00    	je     2578d <rpl_fclose+0xadd>
   256f7:	50                   	push   %rax
   256f8:	48 c7 c0 87 e5 a2 48 	mov    $0x48a2e587,%rax
   256ff:	48 89 05 3a e2 72 00 	mov    %rax,0x72e23a(%rip)        # 753940 <edgeId>
   25706:	58                   	pop    %rax
   25707:	e8 c4 2b fe ff       	callq  82d0 <_storeEdge>
   2570c:	bf 40 02 00 00       	mov    $0x240,%edi
   25711:	e8 7a 77 fe ff       	callq  ce90 <lava_get>
   25716:	48 89 15 fb e1 72 00 	mov    %rdx,0x72e1fb(%rip)        # 753918 <tmpquadone>
   2571d:	48 89 0d 0c 85 5d 00 	mov    %rcx,0x5d850c(%rip)        # 5fdc30 <tmpquadtwo>
   25724:	48 8d 15 c5 84 5d 00 	lea    0x5d84c5(%rip),%rdx        # 5fdbf0 <funcinptr>
   2572b:	48 c7 02 64 0f 00 00 	movq   $0xf64,(%rdx)
   25732:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25739:	00 
   2573a:	48 c7 c1 6c 61 74 21 	mov    $0x2174616c,%rcx
   25741:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25745:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2574c:	00 
   2574d:	48 89 c1             	mov    %rax,%rcx
   25750:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25754:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2575b:	00 
   2575c:	ff 32                	pushq  (%rdx)
   2575e:	48 8b 15 b3 e1 72 00 	mov    0x72e1b3(%rip),%rdx        # 753918 <tmpquadone>
   25765:	48 8b 0d c4 84 5d 00 	mov    0x5d84c4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2576c:	48 c7 05 d9 e1 72 00 	movq   $0x1,0x72e1d9(%rip)        # 753950 <cmpPassed>
   25773:	01 00 00 00 
   25777:	e8 ec 2b fe ff       	callq  8368 <_storeDataFn>
   2577c:	3d 6c 61 74 21       	cmp    $0x2174616c,%eax
   25781:	41 0f 94 c2          	sete   %r10b
   25785:	45 0f b6 da          	movzbl %r10b,%r11d
   25789:	45 0f af eb          	imul   %r11d,%r13d
   2578d:	50                   	push   %rax
   2578e:	48 c7 c0 72 51 a4 7f 	mov    $0x7fa45172,%rax
   25795:	48 89 05 a4 e1 72 00 	mov    %rax,0x72e1a4(%rip)        # 753940 <edgeId>
   2579c:	58                   	pop    %rax
   2579d:	e8 2e 2b fe ff       	callq  82d0 <_storeEdge>
   257a2:	bf 46 02 00 00       	mov    $0x246,%edi
   257a7:	49 8d 5c 2d 00       	lea    0x0(%r13,%rbp,1),%rbx
   257ac:	e8 df 76 fe ff       	callq  ce90 <lava_get>
   257b1:	bf 46 02 00 00       	mov    $0x246,%edi
   257b6:	89 c5                	mov    %eax,%ebp
   257b8:	e8 d3 76 fe ff       	callq  ce90 <lava_get>
   257bd:	48 89 15 54 e1 72 00 	mov    %rdx,0x72e154(%rip)        # 753918 <tmpquadone>
   257c4:	48 89 0d 65 84 5d 00 	mov    %rcx,0x5d8465(%rip)        # 5fdc30 <tmpquadtwo>
   257cb:	48 8d 15 1e 84 5d 00 	lea    0x5d841e(%rip),%rdx        # 5fdbf0 <funcinptr>
   257d2:	48 c7 02 65 0f 00 00 	movq   $0xf65,(%rdx)
   257d9:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   257e0:	00 
   257e1:	48 c7 c1 1b 74 61 6c 	mov    $0x6c61741b,%rcx
   257e8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   257ec:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   257f3:	00 
   257f4:	48 89 c1             	mov    %rax,%rcx
   257f7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   257fb:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25802:	00 
   25803:	ff 32                	pushq  (%rdx)
   25805:	48 8b 15 0c e1 72 00 	mov    0x72e10c(%rip),%rdx        # 753918 <tmpquadone>
   2580c:	48 8b 0d 1d 84 5d 00 	mov    0x5d841d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25813:	48 c7 05 32 e1 72 00 	movq   $0x1,0x72e132(%rip)        # 753950 <cmpPassed>
   2581a:	01 00 00 00 
   2581e:	e8 45 2b fe ff       	callq  8368 <_storeDataFn>
   25823:	3d 1b 74 61 6c       	cmp    $0x6c61741b,%eax
   25828:	0f 84 96 00 00 00    	je     258c4 <rpl_fclose+0xc14>
   2582e:	50                   	push   %rax
   2582f:	48 b8 8a f4 6f c8 00 	movabs $0xc86ff48a,%rax
   25836:	00 00 00 
   25839:	48 89 05 00 e1 72 00 	mov    %rax,0x72e100(%rip)        # 753940 <edgeId>
   25840:	58                   	pop    %rax
   25841:	e8 8a 2a fe ff       	callq  82d0 <_storeEdge>
   25846:	bf 46 02 00 00       	mov    $0x246,%edi
   2584b:	e8 40 76 fe ff       	callq  ce90 <lava_get>
   25850:	48 89 15 c1 e0 72 00 	mov    %rdx,0x72e0c1(%rip)        # 753918 <tmpquadone>
   25857:	48 89 0d d2 83 5d 00 	mov    %rcx,0x5d83d2(%rip)        # 5fdc30 <tmpquadtwo>
   2585e:	48 8d 15 8b 83 5d 00 	lea    0x5d838b(%rip),%rdx        # 5fdbf0 <funcinptr>
   25865:	48 c7 02 66 0f 00 00 	movq   $0xf66,(%rdx)
   2586c:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25873:	00 
   25874:	48 c7 c1 6c 61 74 1b 	mov    $0x1b74616c,%rcx
   2587b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2587f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25886:	00 
   25887:	48 89 c1             	mov    %rax,%rcx
   2588a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2588e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25895:	00 
   25896:	ff 32                	pushq  (%rdx)
   25898:	48 8b 15 79 e0 72 00 	mov    0x72e079(%rip),%rdx        # 753918 <tmpquadone>
   2589f:	48 8b 0d 8a 83 5d 00 	mov    0x5d838a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   258a6:	48 c7 05 9f e0 72 00 	movq   $0x1,0x72e09f(%rip)        # 753950 <cmpPassed>
   258ad:	01 00 00 00 
   258b1:	e8 b2 2a fe ff       	callq  8368 <_storeDataFn>
   258b6:	3d 6c 61 74 1b       	cmp    $0x1b74616c,%eax
   258bb:	0f 94 c0             	sete   %al
   258be:	0f b6 d0             	movzbl %al,%edx
   258c1:	0f af ea             	imul   %edx,%ebp
   258c4:	50                   	push   %rax
   258c5:	48 b8 fa 37 64 8a 00 	movabs $0x8a6437fa,%rax
   258cc:	00 00 00 
   258cf:	48 89 05 6a e0 72 00 	mov    %rax,0x72e06a(%rip)        # 753940 <edgeId>
   258d6:	58                   	pop    %rax
   258d7:	e8 f4 29 fe ff       	callq  82d0 <_storeEdge>
   258dc:	bf 47 02 00 00       	mov    $0x247,%edi
   258e1:	48 01 dd             	add    %rbx,%rbp
   258e4:	e8 a7 75 fe ff       	callq  ce90 <lava_get>
   258e9:	bf 47 02 00 00       	mov    $0x247,%edi
   258ee:	41 89 c5             	mov    %eax,%r13d
   258f1:	e8 9a 75 fe ff       	callq  ce90 <lava_get>
   258f6:	48 89 15 1b e0 72 00 	mov    %rdx,0x72e01b(%rip)        # 753918 <tmpquadone>
   258fd:	48 89 0d 2c 83 5d 00 	mov    %rcx,0x5d832c(%rip)        # 5fdc30 <tmpquadtwo>
   25904:	48 8d 15 e5 82 5d 00 	lea    0x5d82e5(%rip),%rdx        # 5fdbf0 <funcinptr>
   2590b:	48 c7 02 67 0f 00 00 	movq   $0xf67,(%rdx)
   25912:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25919:	00 
   2591a:	48 c7 c1 1a 74 61 6c 	mov    $0x6c61741a,%rcx
   25921:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25925:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2592c:	00 
   2592d:	48 89 c1             	mov    %rax,%rcx
   25930:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25934:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2593b:	00 
   2593c:	ff 32                	pushq  (%rdx)
   2593e:	48 8b 15 d3 df 72 00 	mov    0x72dfd3(%rip),%rdx        # 753918 <tmpquadone>
   25945:	48 8b 0d e4 82 5d 00 	mov    0x5d82e4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2594c:	48 c7 05 f9 df 72 00 	movq   $0x1,0x72dff9(%rip)        # 753950 <cmpPassed>
   25953:	01 00 00 00 
   25957:	e8 0c 2a fe ff       	callq  8368 <_storeDataFn>
   2595c:	3d 1a 74 61 6c       	cmp    $0x6c61741a,%eax
   25961:	0f 84 94 00 00 00    	je     259fb <rpl_fclose+0xd4b>
   25967:	50                   	push   %rax
   25968:	48 c7 c0 86 4c d1 56 	mov    $0x56d14c86,%rax
   2596f:	48 89 05 ca df 72 00 	mov    %rax,0x72dfca(%rip)        # 753940 <edgeId>
   25976:	58                   	pop    %rax
   25977:	e8 54 29 fe ff       	callq  82d0 <_storeEdge>
   2597c:	bf 47 02 00 00       	mov    $0x247,%edi
   25981:	e8 0a 75 fe ff       	callq  ce90 <lava_get>
   25986:	48 89 15 8b df 72 00 	mov    %rdx,0x72df8b(%rip)        # 753918 <tmpquadone>
   2598d:	48 89 0d 9c 82 5d 00 	mov    %rcx,0x5d829c(%rip)        # 5fdc30 <tmpquadtwo>
   25994:	48 8d 15 55 82 5d 00 	lea    0x5d8255(%rip),%rdx        # 5fdbf0 <funcinptr>
   2599b:	48 c7 02 68 0f 00 00 	movq   $0xf68,(%rdx)
   259a2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   259a9:	00 
   259aa:	48 c7 c1 6c 61 74 1a 	mov    $0x1a74616c,%rcx
   259b1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   259b5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   259bc:	00 
   259bd:	48 89 c1             	mov    %rax,%rcx
   259c0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   259c4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   259cb:	00 
   259cc:	ff 32                	pushq  (%rdx)
   259ce:	48 8b 15 43 df 72 00 	mov    0x72df43(%rip),%rdx        # 753918 <tmpquadone>
   259d5:	48 8b 0d 54 82 5d 00 	mov    0x5d8254(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   259dc:	48 c7 05 69 df 72 00 	movq   $0x1,0x72df69(%rip)        # 753950 <cmpPassed>
   259e3:	01 00 00 00 
   259e7:	e8 7c 29 fe ff       	callq  8368 <_storeDataFn>
   259ec:	3d 6c 61 74 1a       	cmp    $0x1a74616c,%eax
   259f1:	0f 94 c1             	sete   %cl
   259f4:	0f b6 f1             	movzbl %cl,%esi
   259f7:	44 0f af ee          	imul   %esi,%r13d
   259fb:	50                   	push   %rax
   259fc:	48 b8 a6 68 ab b5 00 	movabs $0xb5ab68a6,%rax
   25a03:	00 00 00 
   25a06:	48 89 05 33 df 72 00 	mov    %rax,0x72df33(%rip)        # 753940 <edgeId>
   25a0d:	58                   	pop    %rax
   25a0e:	e8 bd 28 fe ff       	callq  82d0 <_storeEdge>
   25a13:	44 89 ef             	mov    %r13d,%edi
   25a16:	48 01 fd             	add    %rdi,%rbp
   25a19:	bf 48 02 00 00       	mov    $0x248,%edi
   25a1e:	e8 6d 74 fe ff       	callq  ce90 <lava_get>
   25a23:	bf 48 02 00 00       	mov    $0x248,%edi
   25a28:	89 c3                	mov    %eax,%ebx
   25a2a:	e8 61 74 fe ff       	callq  ce90 <lava_get>
   25a2f:	48 89 15 e2 de 72 00 	mov    %rdx,0x72dee2(%rip)        # 753918 <tmpquadone>
   25a36:	48 89 0d f3 81 5d 00 	mov    %rcx,0x5d81f3(%rip)        # 5fdc30 <tmpquadtwo>
   25a3d:	48 8d 15 ac 81 5d 00 	lea    0x5d81ac(%rip),%rdx        # 5fdbf0 <funcinptr>
   25a44:	48 c7 02 69 0f 00 00 	movq   $0xf69,(%rdx)
   25a4b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25a52:	00 
   25a53:	48 c7 c1 19 74 61 6c 	mov    $0x6c617419,%rcx
   25a5a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25a5e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25a65:	00 
   25a66:	48 89 c1             	mov    %rax,%rcx
   25a69:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25a6d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25a74:	00 
   25a75:	ff 32                	pushq  (%rdx)
   25a77:	48 8b 15 9a de 72 00 	mov    0x72de9a(%rip),%rdx        # 753918 <tmpquadone>
   25a7e:	48 8b 0d ab 81 5d 00 	mov    0x5d81ab(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25a85:	48 c7 05 c0 de 72 00 	movq   $0x1,0x72dec0(%rip)        # 753950 <cmpPassed>
   25a8c:	01 00 00 00 
   25a90:	e8 d3 28 fe ff       	callq  8368 <_storeDataFn>
   25a95:	3d 19 74 61 6c       	cmp    $0x6c617419,%eax
   25a9a:	0f 84 96 00 00 00    	je     25b36 <rpl_fclose+0xe86>
   25aa0:	50                   	push   %rax
   25aa1:	48 c7 c0 b6 5a eb 53 	mov    $0x53eb5ab6,%rax
   25aa8:	48 89 05 91 de 72 00 	mov    %rax,0x72de91(%rip)        # 753940 <edgeId>
   25aaf:	58                   	pop    %rax
   25ab0:	e8 1b 28 fe ff       	callq  82d0 <_storeEdge>
   25ab5:	bf 48 02 00 00       	mov    $0x248,%edi
   25aba:	e8 d1 73 fe ff       	callq  ce90 <lava_get>
   25abf:	48 89 15 52 de 72 00 	mov    %rdx,0x72de52(%rip)        # 753918 <tmpquadone>
   25ac6:	48 89 0d 63 81 5d 00 	mov    %rcx,0x5d8163(%rip)        # 5fdc30 <tmpquadtwo>
   25acd:	48 8d 15 1c 81 5d 00 	lea    0x5d811c(%rip),%rdx        # 5fdbf0 <funcinptr>
   25ad4:	48 c7 02 6a 0f 00 00 	movq   $0xf6a,(%rdx)
   25adb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25ae2:	00 
   25ae3:	48 c7 c1 6c 61 74 19 	mov    $0x1974616c,%rcx
   25aea:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25aee:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25af5:	00 
   25af6:	48 89 c1             	mov    %rax,%rcx
   25af9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25afd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25b04:	00 
   25b05:	ff 32                	pushq  (%rdx)
   25b07:	48 8b 15 0a de 72 00 	mov    0x72de0a(%rip),%rdx        # 753918 <tmpquadone>
   25b0e:	48 8b 0d 1b 81 5d 00 	mov    0x5d811b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25b15:	48 c7 05 30 de 72 00 	movq   $0x1,0x72de30(%rip)        # 753950 <cmpPassed>
   25b1c:	01 00 00 00 
   25b20:	e8 43 28 fe ff       	callq  8368 <_storeDataFn>
   25b25:	3d 6c 61 74 19       	cmp    $0x1974616c,%eax
   25b2a:	41 0f 94 c0          	sete   %r8b
   25b2e:	45 0f b6 c8          	movzbl %r8b,%r9d
   25b32:	41 0f af d9          	imul   %r9d,%ebx
   25b36:	50                   	push   %rax
   25b37:	48 b8 ad f5 29 e5 00 	movabs $0xe529f5ad,%rax
   25b3e:	00 00 00 
   25b41:	48 89 05 f8 dd 72 00 	mov    %rax,0x72ddf8(%rip)        # 753940 <edgeId>
   25b48:	58                   	pop    %rax
   25b49:	e8 82 27 fe ff       	callq  82d0 <_storeEdge>
   25b4e:	41 89 da             	mov    %ebx,%r10d
   25b51:	49 01 ea             	add    %rbp,%r10
   25b54:	4f 8d 1c 52          	lea    (%r10,%r10,2),%r11
   25b58:	4b 8d 2c db          	lea    (%r11,%r11,8),%rbp
   25b5c:	49 8d 3c ec          	lea    (%r12,%rbp,8),%rdi
   25b60:	e8 3b bf fd ff       	callq  1aa0 <fileno@plt>
  if (fd < 0)
   25b65:	85 c0                	test   %eax,%eax
    return fclose_nothrow (fp);
   25b67:	4c 89 e7             	mov    %r12,%rdi
  if (fd < 0)
   25b6a:	0f 88 9e 01 00 00    	js     25d0e <rpl_fclose+0x105e>
   25b70:	50                   	push   %rax
   25b71:	48 c7 c0 a7 94 3f 52 	mov    $0x523f94a7,%rax
   25b78:	48 89 05 c1 dd 72 00 	mov    %rax,0x72ddc1(%rip)        # 753940 <edgeId>
   25b7f:	58                   	pop    %rax
   25b80:	e8 4b 27 fe ff       	callq  82d0 <_storeEdge>

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
   25b85:	e8 76 bf fd ff       	callq  1b00 <__freading@plt>
   25b8a:	85 c0                	test   %eax,%eax
   25b8c:	0f 85 ae 00 00 00    	jne    25c40 <rpl_fclose+0xf90>
   25b92:	50                   	push   %rax
   25b93:	48 b8 52 fe 48 a1 00 	movabs $0xa148fe52,%rax
   25b9a:	00 00 00 
   25b9d:	48 89 05 9c dd 72 00 	mov    %rax,0x72dd9c(%rip)        # 753940 <edgeId>
   25ba4:	58                   	pop    %rax
   25ba5:	e8 26 27 fe ff       	callq  82d0 <_storeEdge>
   25baa:	50                   	push   %rax
   25bab:	48 b8 29 7f a4 d0 00 	movabs $0xd0a47f29,%rax
   25bb2:	00 00 00 
   25bb5:	48 89 05 84 dd 72 00 	mov    %rax,0x72dd84(%rip)        # 753940 <edgeId>
   25bbc:	58                   	pop    %rax
   25bbd:	e8 0e 27 fe ff       	callq  82d0 <_storeEdge>
      && fflush (fp))
   25bc2:	4c 89 e7             	mov    %r12,%rdi
   25bc5:	e8 96 01 00 00       	callq  25d60 <rpl_fflush>
   25bca:	85 c0                	test   %eax,%eax
   25bcc:	0f 84 21 01 00 00    	je     25cf3 <rpl_fclose+0x1043>
   25bd2:	50                   	push   %rax
   25bd3:	48 b8 fc 91 42 bf 00 	movabs $0xbf4291fc,%rax
   25bda:	00 00 00 
   25bdd:	48 89 05 5c dd 72 00 	mov    %rax,0x72dd5c(%rip)        # 753940 <edgeId>
   25be4:	58                   	pop    %rax
   25be5:	e8 e6 26 fe ff       	callq  82d0 <_storeEdge>
    saved_errno = errno;
   25bea:	e8 a1 bc fd ff       	callq  1890 <__errno_location@plt>
   25bef:	8b 18                	mov    (%rax),%ebx
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
   25bf1:	4c 89 e7             	mov    %r12,%rdi
    saved_errno = errno;
   25bf4:	49 89 c5             	mov    %rax,%r13
  result = fclose_nothrow (fp);
   25bf7:	e8 04 bd fd ff       	callq  1900 <fclose@plt>
# endif

#endif /* !WINDOWS_SOCKETS */

  if (saved_errno != 0)
   25bfc:	85 db                	test   %ebx,%ebx
   25bfe:	0f 85 34 01 00 00    	jne    25d38 <rpl_fclose+0x1088>
   25c04:	50                   	push   %rax
   25c05:	48 b8 85 7e 65 a3 00 	movabs $0xa3657e85,%rax
   25c0c:	00 00 00 
   25c0f:	48 89 05 2a dd 72 00 	mov    %rax,0x72dd2a(%rip)        # 753940 <edgeId>
   25c16:	58                   	pop    %rax
   25c17:	e8 b4 26 fe ff       	callq  82d0 <_storeEdge>
   25c1c:	50                   	push   %rax
   25c1d:	48 c7 c0 a1 5f d9 28 	mov    $0x28d95fa1,%rax
   25c24:	48 89 05 15 dd 72 00 	mov    %rax,0x72dd15(%rip)        # 753940 <edgeId>
   25c2b:	58                   	pop    %rax
   25c2c:	e8 9f 26 fe ff       	callq  82d0 <_storeEdge>
      errno = saved_errno;
      result = EOF;
    }

  return result;
}
   25c31:	48 83 c4 08          	add    $0x8,%rsp
   25c35:	5b                   	pop    %rbx
   25c36:	5d                   	pop    %rbp
   25c37:	41 5c                	pop    %r12
   25c39:	41 5d                	pop    %r13
   25c3b:	c3                   	retq   
   25c3c:	0f 1f 40 00          	nopl   0x0(%rax)
   25c40:	50                   	push   %rax
   25c41:	48 b8 1b 45 f8 e2 00 	movabs $0xe2f8451b,%rax
   25c48:	00 00 00 
   25c4b:	48 89 05 ee dc 72 00 	mov    %rax,0x72dcee(%rip)        # 753940 <edgeId>
   25c52:	58                   	pop    %rax
   25c53:	e8 78 26 fe ff       	callq  82d0 <_storeEdge>
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
   25c58:	4c 89 e7             	mov    %r12,%rdi
   25c5b:	e8 40 be fd ff       	callq  1aa0 <fileno@plt>
   25c60:	31 f6                	xor    %esi,%esi
   25c62:	ba 01 00 00 00       	mov    $0x1,%edx
   25c67:	89 c7                	mov    %eax,%edi
   25c69:	e8 12 11 00 00       	callq  26d80 <rpl_lseek>
   25c6e:	48 89 15 a3 dc 72 00 	mov    %rdx,0x72dca3(%rip)        # 753918 <tmpquadone>
   25c75:	48 89 0d b4 7f 5d 00 	mov    %rcx,0x5d7fb4(%rip)        # 5fdc30 <tmpquadtwo>
   25c7c:	48 8d 15 6d 7f 5d 00 	lea    0x5d7f6d(%rip),%rdx        # 5fdbf0 <funcinptr>
   25c83:	48 c7 02 6b 0f 00 00 	movq   $0xf6b,(%rdx)
   25c8a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   25c91:	00 
   25c92:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   25c99:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25c9d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25ca4:	00 
   25ca5:	48 89 c1             	mov    %rax,%rcx
   25ca8:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25cac:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25cb3:	00 
   25cb4:	ff 32                	pushq  (%rdx)
   25cb6:	48 8b 15 5b dc 72 00 	mov    0x72dc5b(%rip),%rdx        # 753918 <tmpquadone>
   25cbd:	48 8b 0d 6c 7f 5d 00 	mov    0x5d7f6c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25cc4:	48 c7 05 81 dc 72 00 	movq   $0x1,0x72dc81(%rip)        # 753950 <cmpPassed>
   25ccb:	01 00 00 00 
   25ccf:	e8 94 26 fe ff       	callq  8368 <_storeDataFn>
   25cd4:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
   25cd8:	0f 85 cc fe ff ff    	jne    25baa <rpl_fclose+0xefa>
   25cde:	50                   	push   %rax
   25cdf:	48 c7 c0 84 2f 3e 51 	mov    $0x513e2f84,%rax
   25ce6:	48 89 05 53 dc 72 00 	mov    %rax,0x72dc53(%rip)        # 753940 <edgeId>
   25ced:	58                   	pop    %rax
   25cee:	e8 dd 25 fe ff       	callq  82d0 <_storeEdge>
   25cf3:	50                   	push   %rax
   25cf4:	48 b8 c2 17 9f a8 00 	movabs $0xa89f17c2,%rax
   25cfb:	00 00 00 
   25cfe:	48 89 05 3b dc 72 00 	mov    %rax,0x72dc3b(%rip)        # 753940 <edgeId>
   25d05:	58                   	pop    %rax
   25d06:	e8 c5 25 fe ff       	callq  82d0 <_storeEdge>
  result = fclose_nothrow (fp);
   25d0b:	4c 89 e7             	mov    %r12,%rdi
   25d0e:	50                   	push   %rax
   25d0f:	48 b8 7c f1 89 8a 00 	movabs $0x8a89f17c,%rax
   25d16:	00 00 00 
   25d19:	48 89 05 20 dc 72 00 	mov    %rax,0x72dc20(%rip)        # 753940 <edgeId>
   25d20:	58                   	pop    %rax
   25d21:	e8 aa 25 fe ff       	callq  82d0 <_storeEdge>
}
   25d26:	48 83 c4 08          	add    $0x8,%rsp
   25d2a:	5b                   	pop    %rbx
   25d2b:	5d                   	pop    %rbp
   25d2c:	41 5c                	pop    %r12
   25d2e:	41 5d                	pop    %r13
  result = fclose_nothrow (fp);
   25d30:	e9 cb bb fd ff       	jmpq   1900 <fclose@plt>
   25d35:	0f 1f 00             	nopl   (%rax)
   25d38:	50                   	push   %rax
   25d39:	48 c7 c0 a2 62 54 49 	mov    $0x495462a2,%rax
   25d40:	48 89 05 f9 db 72 00 	mov    %rax,0x72dbf9(%rip)        # 753940 <edgeId>
   25d47:	58                   	pop    %rax
   25d48:	e8 83 25 fe ff       	callq  82d0 <_storeEdge>
      errno = saved_errno;
   25d4d:	41 89 5d 00          	mov    %ebx,0x0(%r13)
      result = EOF;
   25d51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   25d56:	e9 c1 fe ff ff       	jmpq   25c1c <rpl_fclose+0xf6c>
   25d5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025d60 <rpl_fflush>:
     fflush in this case.

     We test ! freading (stream) here, rather than fwriting (stream), because
     what we need to know is whether the stream holds a "read buffer", and on
     mingw this is indicated by _IOREAD, regardless of _IOWRT.  */
  if (stream == NULL || ! freading (stream))
   25d60:	48 85 ff             	test   %rdi,%rdi
{
   25d63:	41 54                	push   %r12
   25d65:	49 89 fc             	mov    %rdi,%r12
   25d68:	55                   	push   %rbp
   25d69:	53                   	push   %rbx
  if (stream == NULL || ! freading (stream))
   25d6a:	74 6c                	je     25dd8 <rpl_fflush+0x78>
   25d6c:	50                   	push   %rax
   25d6d:	48 c7 c0 20 c6 cc 04 	mov    $0x4ccc620,%rax
   25d74:	48 89 05 c5 db 72 00 	mov    %rax,0x72dbc5(%rip)        # 753940 <edgeId>
   25d7b:	58                   	pop    %rax
   25d7c:	e8 77 2c fe ff       	callq  89f8 <_storeEdge>
   25d81:	e8 7a bd fd ff       	callq  1b00 <__freading@plt>
   25d86:	85 c0                	test   %eax,%eax
   25d88:	74 4e                	je     25dd8 <rpl_fflush+0x78>
   25d8a:	50                   	push   %rax
   25d8b:	48 c7 c0 31 66 26 30 	mov    $0x30266631,%rax
   25d92:	48 89 05 a7 db 72 00 	mov    %rax,0x72dba7(%rip)        # 753940 <edgeId>
   25d99:	58                   	pop    %rax
   25d9a:	e8 59 2c fe ff       	callq  89f8 <_storeEdge>
  if (fp->_flags & _IO_IN_BACKUP)
   25d9f:	41 f7 04 24 00 01 00 	testl  $0x100,(%r12)
   25da6:	00 
   25da7:	0f 85 33 0c 00 00    	jne    269e0 <rpl_fflush+0xc80>
   25dad:	50                   	push   %rax
   25dae:	48 b8 98 99 c0 ec 00 	movabs $0xecc09998,%rax
   25db5:	00 00 00 
   25db8:	48 89 05 81 db 72 00 	mov    %rax,0x72db81(%rip)        # 753940 <edgeId>
   25dbf:	58                   	pop    %rax
   25dc0:	e8 33 2c fe ff       	callq  89f8 <_storeEdge>
    return 0;

# endif
  }
#endif
}
   25dc5:	5b                   	pop    %rbx
  return fflush (stream);
   25dc6:	4c 89 e7             	mov    %r12,%rdi
}
   25dc9:	5d                   	pop    %rbp
   25dca:	41 5c                	pop    %r12
  return fflush (stream);
   25dcc:	e9 ef bc fd ff       	jmpq   1ac0 <fflush@plt>
   25dd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   25dd8:	50                   	push   %rax
   25dd9:	48 c7 c0 66 47 45 5a 	mov    $0x5a454766,%rax
   25de0:	48 89 05 59 db 72 00 	mov    %rax,0x72db59(%rip)        # 753940 <edgeId>
   25de7:	58                   	pop    %rax
   25de8:	e8 0b 2c fe ff       	callq  89f8 <_storeEdge>
    return fflush (stream+(lava_get(813))*(0x6c617334==(lava_get(813))||0x3473616c==(lava_get(813)))+(lava_get(815))*(0x6c617332==(lava_get(815))||0x3273616c==(lava_get(815)))+(lava_get(817))*(0x6c617330==(lava_get(817))||0x3073616c==(lava_get(817)))+(lava_get(831))*(0x6c617322==(lava_get(831))||0x2273616c==(lava_get(831)))+(lava_get(832))*(0x6c617321==(lava_get(832))||0x2173616c==(lava_get(832)))+(lava_get(835))*(0x6c61731e==(lava_get(835))||0x1e73616c==(lava_get(835)))+(lava_get(841))*(0x6c617318==(lava_get(841))||0x1873616c==(lava_get(841)))+(lava_get(842))*(0x6c617317==(lava_get(842))||0x1773616c==(lava_get(842)))+(lava_get(843))*(0x6c617316==(lava_get(843))||0x1673616c==(lava_get(843))));
   25ded:	bf 2d 03 00 00       	mov    $0x32d,%edi
   25df2:	e8 99 70 fe ff       	callq  ce90 <lava_get>
   25df7:	bf 2d 03 00 00       	mov    $0x32d,%edi
   25dfc:	89 c5                	mov    %eax,%ebp
   25dfe:	e8 8d 70 fe ff       	callq  ce90 <lava_get>
   25e03:	48 89 15 0e db 72 00 	mov    %rdx,0x72db0e(%rip)        # 753918 <tmpquadone>
   25e0a:	48 89 0d 1f 7e 5d 00 	mov    %rcx,0x5d7e1f(%rip)        # 5fdc30 <tmpquadtwo>
   25e11:	48 8d 15 d8 7d 5d 00 	lea    0x5d7dd8(%rip),%rdx        # 5fdbf0 <funcinptr>
   25e18:	48 c7 02 71 0f 00 00 	movq   $0xf71,(%rdx)
   25e1f:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25e26:	00 
   25e27:	48 c7 c1 34 73 61 6c 	mov    $0x6c617334,%rcx
   25e2e:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25e32:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25e39:	00 
   25e3a:	48 89 c1             	mov    %rax,%rcx
   25e3d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25e41:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25e48:	00 
   25e49:	ff 32                	pushq  (%rdx)
   25e4b:	48 8b 15 c6 da 72 00 	mov    0x72dac6(%rip),%rdx        # 753918 <tmpquadone>
   25e52:	48 8b 0d d7 7d 5d 00 	mov    0x5d7dd7(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25e59:	48 c7 05 ec da 72 00 	movq   $0x1,0x72daec(%rip)        # 753950 <cmpPassed>
   25e60:	01 00 00 00 
   25e64:	e8 27 2c fe ff       	callq  8a90 <_storeDataFn>
   25e69:	3d 34 73 61 6c       	cmp    $0x6c617334,%eax
   25e6e:	0f 85 cc 0a 00 00    	jne    26940 <rpl_fflush+0xbe0>
   25e74:	50                   	push   %rax
   25e75:	48 c7 c0 a8 48 cb 66 	mov    $0x66cb48a8,%rax
   25e7c:	48 89 05 bd da 72 00 	mov    %rax,0x72dabd(%rip)        # 753940 <edgeId>
   25e83:	58                   	pop    %rax
   25e84:	e8 6f 2b fe ff       	callq  89f8 <_storeEdge>
   25e89:	50                   	push   %rax
   25e8a:	48 c7 c0 54 a4 65 33 	mov    $0x3365a454,%rax
   25e91:	48 89 05 a8 da 72 00 	mov    %rax,0x72daa8(%rip)        # 753940 <edgeId>
   25e98:	58                   	pop    %rax
   25e99:	e8 5a 2b fe ff       	callq  89f8 <_storeEdge>
   25e9e:	bf 2f 03 00 00       	mov    $0x32f,%edi
   25ea3:	e8 e8 6f fe ff       	callq  ce90 <lava_get>
   25ea8:	bf 2f 03 00 00       	mov    $0x32f,%edi
   25ead:	89 c3                	mov    %eax,%ebx
   25eaf:	e8 dc 6f fe ff       	callq  ce90 <lava_get>
   25eb4:	48 89 15 5d da 72 00 	mov    %rdx,0x72da5d(%rip)        # 753918 <tmpquadone>
   25ebb:	48 89 0d 6e 7d 5d 00 	mov    %rcx,0x5d7d6e(%rip)        # 5fdc30 <tmpquadtwo>
   25ec2:	48 8d 15 27 7d 5d 00 	lea    0x5d7d27(%rip),%rdx        # 5fdbf0 <funcinptr>
   25ec9:	48 c7 02 72 0f 00 00 	movq   $0xf72,(%rdx)
   25ed0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25ed7:	00 
   25ed8:	48 c7 c1 32 73 61 6c 	mov    $0x6c617332,%rcx
   25edf:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25ee3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25eea:	00 
   25eeb:	48 89 c1             	mov    %rax,%rcx
   25eee:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25ef2:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25ef9:	00 
   25efa:	ff 32                	pushq  (%rdx)
   25efc:	48 8b 15 15 da 72 00 	mov    0x72da15(%rip),%rdx        # 753918 <tmpquadone>
   25f03:	48 8b 0d 26 7d 5d 00 	mov    0x5d7d26(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25f0a:	48 c7 05 3b da 72 00 	movq   $0x1,0x72da3b(%rip)        # 753950 <cmpPassed>
   25f11:	01 00 00 00 
   25f15:	e8 76 2b fe ff       	callq  8a90 <_storeDataFn>
   25f1a:	3d 32 73 61 6c       	cmp    $0x6c617332,%eax
   25f1f:	0f 85 7b 09 00 00    	jne    268a0 <rpl_fflush+0xb40>
   25f25:	50                   	push   %rax
   25f26:	48 c7 c0 69 d9 4c 3f 	mov    $0x3f4cd969,%rax
   25f2d:	48 89 05 0c da 72 00 	mov    %rax,0x72da0c(%rip)        # 753940 <edgeId>
   25f34:	58                   	pop    %rax
   25f35:	e8 be 2a fe ff       	callq  89f8 <_storeEdge>
   25f3a:	50                   	push   %rax
   25f3b:	48 c7 c0 b4 6c a6 1f 	mov    $0x1fa66cb4,%rax
   25f42:	48 89 05 f7 d9 72 00 	mov    %rax,0x72d9f7(%rip)        # 753940 <edgeId>
   25f49:	58                   	pop    %rax
   25f4a:	e8 a9 2a fe ff       	callq  89f8 <_storeEdge>
   25f4f:	bf 31 03 00 00       	mov    $0x331,%edi
   25f54:	48 01 dd             	add    %rbx,%rbp
   25f57:	e8 34 6f fe ff       	callq  ce90 <lava_get>
   25f5c:	bf 31 03 00 00       	mov    $0x331,%edi
   25f61:	89 c3                	mov    %eax,%ebx
   25f63:	e8 28 6f fe ff       	callq  ce90 <lava_get>
   25f68:	48 89 15 a9 d9 72 00 	mov    %rdx,0x72d9a9(%rip)        # 753918 <tmpquadone>
   25f6f:	48 89 0d ba 7c 5d 00 	mov    %rcx,0x5d7cba(%rip)        # 5fdc30 <tmpquadtwo>
   25f76:	48 8d 15 73 7c 5d 00 	lea    0x5d7c73(%rip),%rdx        # 5fdbf0 <funcinptr>
   25f7d:	48 c7 02 73 0f 00 00 	movq   $0xf73,(%rdx)
   25f84:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   25f8b:	00 
   25f8c:	48 c7 c1 30 73 61 6c 	mov    $0x6c617330,%rcx
   25f93:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   25f97:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   25f9e:	00 
   25f9f:	48 89 c1             	mov    %rax,%rcx
   25fa2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   25fa6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   25fad:	00 
   25fae:	ff 32                	pushq  (%rdx)
   25fb0:	48 8b 15 61 d9 72 00 	mov    0x72d961(%rip),%rdx        # 753918 <tmpquadone>
   25fb7:	48 8b 0d 72 7c 5d 00 	mov    0x5d7c72(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   25fbe:	48 c7 05 87 d9 72 00 	movq   $0x1,0x72d987(%rip)        # 753950 <cmpPassed>
   25fc5:	01 00 00 00 
   25fc9:	e8 c2 2a fe ff       	callq  8a90 <_storeDataFn>
   25fce:	3d 30 73 61 6c       	cmp    $0x6c617330,%eax
   25fd3:	0f 85 27 08 00 00    	jne    26800 <rpl_fflush+0xaa0>
   25fd9:	50                   	push   %rax
   25fda:	48 b8 cd f4 23 bd 00 	movabs $0xbd23f4cd,%rax
   25fe1:	00 00 00 
   25fe4:	48 89 05 55 d9 72 00 	mov    %rax,0x72d955(%rip)        # 753940 <edgeId>
   25feb:	58                   	pop    %rax
   25fec:	e8 07 2a fe ff       	callq  89f8 <_storeEdge>
   25ff1:	50                   	push   %rax
   25ff2:	48 c7 c0 66 fa 91 5e 	mov    $0x5e91fa66,%rax
   25ff9:	48 89 05 40 d9 72 00 	mov    %rax,0x72d940(%rip)        # 753940 <edgeId>
   26000:	58                   	pop    %rax
   26001:	e8 f2 29 fe ff       	callq  89f8 <_storeEdge>
   26006:	bf 3f 03 00 00       	mov    $0x33f,%edi
   2600b:	48 01 eb             	add    %rbp,%rbx
   2600e:	e8 7d 6e fe ff       	callq  ce90 <lava_get>
   26013:	bf 3f 03 00 00       	mov    $0x33f,%edi
   26018:	89 c5                	mov    %eax,%ebp
   2601a:	e8 71 6e fe ff       	callq  ce90 <lava_get>
   2601f:	48 89 15 f2 d8 72 00 	mov    %rdx,0x72d8f2(%rip)        # 753918 <tmpquadone>
   26026:	48 89 0d 03 7c 5d 00 	mov    %rcx,0x5d7c03(%rip)        # 5fdc30 <tmpquadtwo>
   2602d:	48 8d 15 bc 7b 5d 00 	lea    0x5d7bbc(%rip),%rdx        # 5fdbf0 <funcinptr>
   26034:	48 c7 02 74 0f 00 00 	movq   $0xf74,(%rdx)
   2603b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26042:	00 
   26043:	48 c7 c1 22 73 61 6c 	mov    $0x6c617322,%rcx
   2604a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2604e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26055:	00 
   26056:	48 89 c1             	mov    %rax,%rcx
   26059:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2605d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26064:	00 
   26065:	ff 32                	pushq  (%rdx)
   26067:	48 8b 15 aa d8 72 00 	mov    0x72d8aa(%rip),%rdx        # 753918 <tmpquadone>
   2606e:	48 8b 0d bb 7b 5d 00 	mov    0x5d7bbb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26075:	48 c7 05 d0 d8 72 00 	movq   $0x1,0x72d8d0(%rip)        # 753950 <cmpPassed>
   2607c:	01 00 00 00 
   26080:	e8 0b 2a fe ff       	callq  8a90 <_storeDataFn>
   26085:	3d 22 73 61 6c       	cmp    $0x6c617322,%eax
   2608a:	0f 85 d0 06 00 00    	jne    26760 <rpl_fflush+0xa00>
   26090:	50                   	push   %rax
   26091:	48 c7 c0 3f d2 eb 4c 	mov    $0x4cebd23f,%rax
   26098:	48 89 05 a1 d8 72 00 	mov    %rax,0x72d8a1(%rip)        # 753940 <edgeId>
   2609f:	58                   	pop    %rax
   260a0:	e8 53 29 fe ff       	callq  89f8 <_storeEdge>
   260a5:	50                   	push   %rax
   260a6:	48 c7 c0 1f e9 75 26 	mov    $0x2675e91f,%rax
   260ad:	48 89 05 8c d8 72 00 	mov    %rax,0x72d88c(%rip)        # 753940 <edgeId>
   260b4:	58                   	pop    %rax
   260b5:	e8 3e 29 fe ff       	callq  89f8 <_storeEdge>
   260ba:	bf 40 03 00 00       	mov    $0x340,%edi
   260bf:	48 01 dd             	add    %rbx,%rbp
   260c2:	e8 c9 6d fe ff       	callq  ce90 <lava_get>
   260c7:	bf 40 03 00 00       	mov    $0x340,%edi
   260cc:	89 c3                	mov    %eax,%ebx
   260ce:	e8 bd 6d fe ff       	callq  ce90 <lava_get>
   260d3:	48 89 15 3e d8 72 00 	mov    %rdx,0x72d83e(%rip)        # 753918 <tmpquadone>
   260da:	48 89 0d 4f 7b 5d 00 	mov    %rcx,0x5d7b4f(%rip)        # 5fdc30 <tmpquadtwo>
   260e1:	48 8d 15 08 7b 5d 00 	lea    0x5d7b08(%rip),%rdx        # 5fdbf0 <funcinptr>
   260e8:	48 c7 02 75 0f 00 00 	movq   $0xf75,(%rdx)
   260ef:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   260f6:	00 
   260f7:	48 c7 c1 21 73 61 6c 	mov    $0x6c617321,%rcx
   260fe:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26102:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26109:	00 
   2610a:	48 89 c1             	mov    %rax,%rcx
   2610d:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26111:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26118:	00 
   26119:	ff 32                	pushq  (%rdx)
   2611b:	48 8b 15 f6 d7 72 00 	mov    0x72d7f6(%rip),%rdx        # 753918 <tmpquadone>
   26122:	48 8b 0d 07 7b 5d 00 	mov    0x5d7b07(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26129:	48 c7 05 1c d8 72 00 	movq   $0x1,0x72d81c(%rip)        # 753950 <cmpPassed>
   26130:	01 00 00 00 
   26134:	e8 57 29 fe ff       	callq  8a90 <_storeDataFn>
   26139:	3d 21 73 61 6c       	cmp    $0x6c617321,%eax
   2613e:	0f 85 7c 05 00 00    	jne    266c0 <rpl_fflush+0x960>
   26144:	50                   	push   %rax
   26145:	48 b8 bd ce 64 eb 00 	movabs $0xeb64cebd,%rax
   2614c:	00 00 00 
   2614f:	48 89 05 ea d7 72 00 	mov    %rax,0x72d7ea(%rip)        # 753940 <edgeId>
   26156:	58                   	pop    %rax
   26157:	e8 9c 28 fe ff       	callq  89f8 <_storeEdge>
   2615c:	50                   	push   %rax
   2615d:	48 c7 c0 5e 67 b2 75 	mov    $0x75b2675e,%rax
   26164:	48 89 05 d5 d7 72 00 	mov    %rax,0x72d7d5(%rip)        # 753940 <edgeId>
   2616b:	58                   	pop    %rax
   2616c:	e8 87 28 fe ff       	callq  89f8 <_storeEdge>
   26171:	bf 43 03 00 00       	mov    $0x343,%edi
   26176:	48 01 dd             	add    %rbx,%rbp
   26179:	e8 12 6d fe ff       	callq  ce90 <lava_get>
   2617e:	bf 43 03 00 00       	mov    $0x343,%edi
   26183:	89 c3                	mov    %eax,%ebx
   26185:	e8 06 6d fe ff       	callq  ce90 <lava_get>
   2618a:	48 89 15 87 d7 72 00 	mov    %rdx,0x72d787(%rip)        # 753918 <tmpquadone>
   26191:	48 89 0d 98 7a 5d 00 	mov    %rcx,0x5d7a98(%rip)        # 5fdc30 <tmpquadtwo>
   26198:	48 8d 15 51 7a 5d 00 	lea    0x5d7a51(%rip),%rdx        # 5fdbf0 <funcinptr>
   2619f:	48 c7 02 76 0f 00 00 	movq   $0xf76,(%rdx)
   261a6:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   261ad:	00 
   261ae:	48 c7 c1 1e 73 61 6c 	mov    $0x6c61731e,%rcx
   261b5:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   261b9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   261c0:	00 
   261c1:	48 89 c1             	mov    %rax,%rcx
   261c4:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   261c8:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   261cf:	00 
   261d0:	ff 32                	pushq  (%rdx)
   261d2:	48 8b 15 3f d7 72 00 	mov    0x72d73f(%rip),%rdx        # 753918 <tmpquadone>
   261d9:	48 8b 0d 50 7a 5d 00 	mov    0x5d7a50(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   261e0:	48 c7 05 65 d7 72 00 	movq   $0x1,0x72d765(%rip)        # 753950 <cmpPassed>
   261e7:	01 00 00 00 
   261eb:	e8 a0 28 fe ff       	callq  8a90 <_storeDataFn>
   261f0:	3d 1e 73 61 6c       	cmp    $0x6c61731e,%eax
   261f5:	0f 85 25 04 00 00    	jne    26620 <rpl_fflush+0x8c0>
   261fb:	50                   	push   %rax
   261fc:	48 b8 4c b6 6e b5 00 	movabs $0xb56eb64c,%rax
   26203:	00 00 00 
   26206:	48 89 05 33 d7 72 00 	mov    %rax,0x72d733(%rip)        # 753940 <edgeId>
   2620d:	58                   	pop    %rax
   2620e:	e8 e5 27 fe ff       	callq  89f8 <_storeEdge>
   26213:	50                   	push   %rax
   26214:	48 c7 c0 26 5b b7 5a 	mov    $0x5ab75b26,%rax
   2621b:	48 89 05 1e d7 72 00 	mov    %rax,0x72d71e(%rip)        # 753940 <edgeId>
   26222:	58                   	pop    %rax
   26223:	e8 d0 27 fe ff       	callq  89f8 <_storeEdge>
   26228:	bf 49 03 00 00       	mov    $0x349,%edi
   2622d:	48 01 eb             	add    %rbp,%rbx
   26230:	e8 5b 6c fe ff       	callq  ce90 <lava_get>
   26235:	bf 49 03 00 00       	mov    $0x349,%edi
   2623a:	89 c5                	mov    %eax,%ebp
   2623c:	e8 4f 6c fe ff       	callq  ce90 <lava_get>
   26241:	48 89 15 d0 d6 72 00 	mov    %rdx,0x72d6d0(%rip)        # 753918 <tmpquadone>
   26248:	48 89 0d e1 79 5d 00 	mov    %rcx,0x5d79e1(%rip)        # 5fdc30 <tmpquadtwo>
   2624f:	48 8d 15 9a 79 5d 00 	lea    0x5d799a(%rip),%rdx        # 5fdbf0 <funcinptr>
   26256:	48 c7 02 77 0f 00 00 	movq   $0xf77,(%rdx)
   2625d:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26264:	00 
   26265:	48 c7 c1 18 73 61 6c 	mov    $0x6c617318,%rcx
   2626c:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26270:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26277:	00 
   26278:	48 89 c1             	mov    %rax,%rcx
   2627b:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2627f:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26286:	00 
   26287:	ff 32                	pushq  (%rdx)
   26289:	48 8b 15 88 d6 72 00 	mov    0x72d688(%rip),%rdx        # 753918 <tmpquadone>
   26290:	48 8b 0d 99 79 5d 00 	mov    0x5d7999(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26297:	48 c7 05 ae d6 72 00 	movq   $0x1,0x72d6ae(%rip)        # 753950 <cmpPassed>
   2629e:	01 00 00 00 
   262a2:	e8 e9 27 fe ff       	callq  8a90 <_storeDataFn>
   262a7:	3d 18 73 61 6c       	cmp    $0x6c617318,%eax
   262ac:	0f 85 ce 02 00 00    	jne    26580 <rpl_fflush+0x820>
   262b2:	50                   	push   %rax
   262b3:	48 c7 c0 eb 56 0b 09 	mov    $0x90b56eb,%rax
   262ba:	48 89 05 7f d6 72 00 	mov    %rax,0x72d67f(%rip)        # 753940 <edgeId>
   262c1:	58                   	pop    %rax
   262c2:	e8 31 27 fe ff       	callq  89f8 <_storeEdge>
   262c7:	50                   	push   %rax
   262c8:	48 b8 75 ab 85 84 00 	movabs $0x8485ab75,%rax
   262cf:	00 00 00 
   262d2:	48 89 05 67 d6 72 00 	mov    %rax,0x72d667(%rip)        # 753940 <edgeId>
   262d9:	58                   	pop    %rax
   262da:	e8 19 27 fe ff       	callq  89f8 <_storeEdge>
   262df:	bf 4a 03 00 00       	mov    $0x34a,%edi
   262e4:	48 01 dd             	add    %rbx,%rbp
   262e7:	e8 a4 6b fe ff       	callq  ce90 <lava_get>
   262ec:	bf 4a 03 00 00       	mov    $0x34a,%edi
   262f1:	89 c3                	mov    %eax,%ebx
   262f3:	e8 98 6b fe ff       	callq  ce90 <lava_get>
   262f8:	48 89 15 19 d6 72 00 	mov    %rdx,0x72d619(%rip)        # 753918 <tmpquadone>
   262ff:	48 89 0d 2a 79 5d 00 	mov    %rcx,0x5d792a(%rip)        # 5fdc30 <tmpquadtwo>
   26306:	48 8d 15 e3 78 5d 00 	lea    0x5d78e3(%rip),%rdx        # 5fdbf0 <funcinptr>
   2630d:	48 c7 02 78 0f 00 00 	movq   $0xf78,(%rdx)
   26314:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2631b:	00 
   2631c:	48 c7 c1 17 73 61 6c 	mov    $0x6c617317,%rcx
   26323:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26327:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2632e:	00 
   2632f:	48 89 c1             	mov    %rax,%rcx
   26332:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26336:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2633d:	00 
   2633e:	ff 32                	pushq  (%rdx)
   26340:	48 8b 15 d1 d5 72 00 	mov    0x72d5d1(%rip),%rdx        # 753918 <tmpquadone>
   26347:	48 8b 0d e2 78 5d 00 	mov    0x5d78e2(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2634e:	48 c7 05 f7 d5 72 00 	movq   $0x1,0x72d5f7(%rip)        # 753950 <cmpPassed>
   26355:	01 00 00 00 
   26359:	e8 32 27 fe ff       	callq  8a90 <_storeDataFn>
   2635e:	3d 17 73 61 6c       	cmp    $0x6c617317,%eax
   26363:	0f 85 77 01 00 00    	jne    264e0 <rpl_fflush+0x780>
   26369:	50                   	push   %rax
   2636a:	48 c7 c0 b5 90 f0 3a 	mov    $0x3af090b5,%rax
   26371:	48 89 05 c8 d5 72 00 	mov    %rax,0x72d5c8(%rip)        # 753940 <edgeId>
   26378:	58                   	pop    %rax
   26379:	e8 7a 26 fe ff       	callq  89f8 <_storeEdge>
   2637e:	50                   	push   %rax
   2637f:	48 c7 c0 5a 48 78 1d 	mov    $0x1d78485a,%rax
   26386:	48 89 05 b3 d5 72 00 	mov    %rax,0x72d5b3(%rip)        # 753940 <edgeId>
   2638d:	58                   	pop    %rax
   2638e:	e8 65 26 fe ff       	callq  89f8 <_storeEdge>
   26393:	bf 4b 03 00 00       	mov    $0x34b,%edi
   26398:	48 01 dd             	add    %rbx,%rbp
   2639b:	e8 f0 6a fe ff       	callq  ce90 <lava_get>
   263a0:	bf 4b 03 00 00       	mov    $0x34b,%edi
   263a5:	89 c3                	mov    %eax,%ebx
   263a7:	e8 e4 6a fe ff       	callq  ce90 <lava_get>
   263ac:	48 89 15 65 d5 72 00 	mov    %rdx,0x72d565(%rip)        # 753918 <tmpquadone>
   263b3:	48 89 0d 76 78 5d 00 	mov    %rcx,0x5d7876(%rip)        # 5fdc30 <tmpquadtwo>
   263ba:	48 8d 15 2f 78 5d 00 	lea    0x5d782f(%rip),%rdx        # 5fdbf0 <funcinptr>
   263c1:	48 c7 02 79 0f 00 00 	movq   $0xf79,(%rdx)
   263c8:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   263cf:	00 
   263d0:	48 c7 c1 16 73 61 6c 	mov    $0x6c617316,%rcx
   263d7:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   263db:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   263e2:	00 
   263e3:	48 89 c1             	mov    %rax,%rcx
   263e6:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   263ea:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   263f1:	00 
   263f2:	ff 32                	pushq  (%rdx)
   263f4:	48 8b 15 1d d5 72 00 	mov    0x72d51d(%rip),%rdx        # 753918 <tmpquadone>
   263fb:	48 8b 0d 2e 78 5d 00 	mov    0x5d782e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26402:	48 c7 05 43 d5 72 00 	movq   $0x1,0x72d543(%rip)        # 753950 <cmpPassed>
   26409:	01 00 00 00 
   2640d:	e8 7e 26 fe ff       	callq  8a90 <_storeDataFn>
   26412:	3d 16 73 61 6c       	cmp    $0x6c617316,%eax
   26417:	0f 84 96 00 00 00    	je     264b3 <rpl_fflush+0x753>
   2641d:	50                   	push   %rax
   2641e:	48 c7 c0 09 af 43 19 	mov    $0x1943af09,%rax
   26425:	48 89 05 14 d5 72 00 	mov    %rax,0x72d514(%rip)        # 753940 <edgeId>
   2642c:	58                   	pop    %rax
   2642d:	e8 c6 25 fe ff       	callq  89f8 <_storeEdge>
   26432:	bf 4b 03 00 00       	mov    $0x34b,%edi
   26437:	e8 54 6a fe ff       	callq  ce90 <lava_get>
   2643c:	48 89 15 d5 d4 72 00 	mov    %rdx,0x72d4d5(%rip)        # 753918 <tmpquadone>
   26443:	48 89 0d e6 77 5d 00 	mov    %rcx,0x5d77e6(%rip)        # 5fdc30 <tmpquadtwo>
   2644a:	48 8d 15 9f 77 5d 00 	lea    0x5d779f(%rip),%rdx        # 5fdbf0 <funcinptr>
   26451:	48 c7 02 7a 0f 00 00 	movq   $0xf7a,(%rdx)
   26458:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2645f:	00 
   26460:	48 c7 c1 6c 61 73 16 	mov    $0x1673616c,%rcx
   26467:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2646b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26472:	00 
   26473:	48 89 c1             	mov    %rax,%rcx
   26476:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2647a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26481:	00 
   26482:	ff 32                	pushq  (%rdx)
   26484:	48 8b 15 8d d4 72 00 	mov    0x72d48d(%rip),%rdx        # 753918 <tmpquadone>
   2648b:	48 8b 0d 9e 77 5d 00 	mov    0x5d779e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26492:	48 c7 05 b3 d4 72 00 	movq   $0x1,0x72d4b3(%rip)        # 753950 <cmpPassed>
   26499:	01 00 00 00 
   2649d:	e8 ee 25 fe ff       	callq  8a90 <_storeDataFn>
   264a2:	3d 6c 61 73 16       	cmp    $0x1673616c,%eax
   264a7:	41 0f 94 c2          	sete   %r10b
   264ab:	45 0f b6 da          	movzbl %r10b,%r11d
   264af:	41 0f af db          	imul   %r11d,%ebx
   264b3:	50                   	push   %rax
   264b4:	48 c7 c0 d7 a1 0c 0f 	mov    $0xf0ca1d7,%rax
   264bb:	48 89 05 7e d4 72 00 	mov    %rax,0x72d47e(%rip)        # 753940 <edgeId>
   264c2:	58                   	pop    %rax
   264c3:	e8 30 25 fe ff       	callq  89f8 <_storeEdge>
   264c8:	48 01 eb             	add    %rbp,%rbx
   264cb:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
}
   264cf:	5b                   	pop    %rbx
    return fflush (stream+(lava_get(813))*(0x6c617334==(lava_get(813))||0x3473616c==(lava_get(813)))+(lava_get(815))*(0x6c617332==(lava_get(815))||0x3273616c==(lava_get(815)))+(lava_get(817))*(0x6c617330==(lava_get(817))||0x3073616c==(lava_get(817)))+(lava_get(831))*(0x6c617322==(lava_get(831))||0x2273616c==(lava_get(831)))+(lava_get(832))*(0x6c617321==(lava_get(832))||0x2173616c==(lava_get(832)))+(lava_get(835))*(0x6c61731e==(lava_get(835))||0x1e73616c==(lava_get(835)))+(lava_get(841))*(0x6c617318==(lava_get(841))||0x1873616c==(lava_get(841)))+(lava_get(842))*(0x6c617317==(lava_get(842))||0x1773616c==(lava_get(842)))+(lava_get(843))*(0x6c617316==(lava_get(843))||0x1673616c==(lava_get(843))));
   264d0:	48 8d 14 c0          	lea    (%rax,%rax,8),%rdx
}
   264d4:	5d                   	pop    %rbp
    return fflush (stream+(lava_get(813))*(0x6c617334==(lava_get(813))||0x3473616c==(lava_get(813)))+(lava_get(815))*(0x6c617332==(lava_get(815))||0x3273616c==(lava_get(815)))+(lava_get(817))*(0x6c617330==(lava_get(817))||0x3073616c==(lava_get(817)))+(lava_get(831))*(0x6c617322==(lava_get(831))||0x2273616c==(lava_get(831)))+(lava_get(832))*(0x6c617321==(lava_get(832))||0x2173616c==(lava_get(832)))+(lava_get(835))*(0x6c61731e==(lava_get(835))||0x1e73616c==(lava_get(835)))+(lava_get(841))*(0x6c617318==(lava_get(841))||0x1873616c==(lava_get(841)))+(lava_get(842))*(0x6c617317==(lava_get(842))||0x1773616c==(lava_get(842)))+(lava_get(843))*(0x6c617316==(lava_get(843))||0x1673616c==(lava_get(843))));
   264d5:	49 8d 3c d4          	lea    (%r12,%rdx,8),%rdi
}
   264d9:	41 5c                	pop    %r12
    return fflush (stream+(lava_get(813))*(0x6c617334==(lava_get(813))||0x3473616c==(lava_get(813)))+(lava_get(815))*(0x6c617332==(lava_get(815))||0x3273616c==(lava_get(815)))+(lava_get(817))*(0x6c617330==(lava_get(817))||0x3073616c==(lava_get(817)))+(lava_get(831))*(0x6c617322==(lava_get(831))||0x2273616c==(lava_get(831)))+(lava_get(832))*(0x6c617321==(lava_get(832))||0x2173616c==(lava_get(832)))+(lava_get(835))*(0x6c61731e==(lava_get(835))||0x1e73616c==(lava_get(835)))+(lava_get(841))*(0x6c617318==(lava_get(841))||0x1873616c==(lava_get(841)))+(lava_get(842))*(0x6c617317==(lava_get(842))||0x1773616c==(lava_get(842)))+(lava_get(843))*(0x6c617316==(lava_get(843))||0x1673616c==(lava_get(843))));
   264db:	e9 e0 b5 fd ff       	jmpq   1ac0 <fflush@plt>
   264e0:	50                   	push   %rax
   264e1:	48 b8 0f cb 45 91 00 	movabs $0x9145cb0f,%rax
   264e8:	00 00 00 
   264eb:	48 89 05 4e d4 72 00 	mov    %rax,0x72d44e(%rip)        # 753940 <edgeId>
   264f2:	58                   	pop    %rax
   264f3:	e8 00 25 fe ff       	callq  89f8 <_storeEdge>
   264f8:	bf 4a 03 00 00       	mov    $0x34a,%edi
   264fd:	e8 8e 69 fe ff       	callq  ce90 <lava_get>
   26502:	48 89 15 0f d4 72 00 	mov    %rdx,0x72d40f(%rip)        # 753918 <tmpquadone>
   26509:	48 89 0d 20 77 5d 00 	mov    %rcx,0x5d7720(%rip)        # 5fdc30 <tmpquadtwo>
   26510:	48 8d 15 d9 76 5d 00 	lea    0x5d76d9(%rip),%rdx        # 5fdbf0 <funcinptr>
   26517:	48 c7 02 7b 0f 00 00 	movq   $0xf7b,(%rdx)
   2651e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26525:	00 
   26526:	48 c7 c1 6c 61 73 17 	mov    $0x1773616c,%rcx
   2652d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26531:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26538:	00 
   26539:	48 89 c1             	mov    %rax,%rcx
   2653c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26540:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26547:	00 
   26548:	ff 32                	pushq  (%rdx)
   2654a:	48 8b 15 c7 d3 72 00 	mov    0x72d3c7(%rip),%rdx        # 753918 <tmpquadone>
   26551:	48 8b 0d d8 76 5d 00 	mov    0x5d76d8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26558:	48 c7 05 ed d3 72 00 	movq   $0x1,0x72d3ed(%rip)        # 753950 <cmpPassed>
   2655f:	01 00 00 00 
   26563:	e8 28 25 fe ff       	callq  8a90 <_storeDataFn>
   26568:	3d 6c 61 73 17       	cmp    $0x1773616c,%eax
   2656d:	41 0f 94 c0          	sete   %r8b
   26571:	45 0f b6 c8          	movzbl %r8b,%r9d
   26575:	41 0f af d9          	imul   %r9d,%ebx
   26579:	e9 00 fe ff ff       	jmpq   2637e <rpl_fflush+0x61e>
   2657e:	66 90                	xchg   %ax,%ax
   26580:	50                   	push   %rax
   26581:	48 c7 c0 2e 8a f4 6f 	mov    $0x6ff48a2e,%rax
   26588:	48 89 05 b1 d3 72 00 	mov    %rax,0x72d3b1(%rip)        # 753940 <edgeId>
   2658f:	58                   	pop    %rax
   26590:	e8 63 24 fe ff       	callq  89f8 <_storeEdge>
   26595:	bf 49 03 00 00       	mov    $0x349,%edi
   2659a:	e8 f1 68 fe ff       	callq  ce90 <lava_get>
   2659f:	48 89 15 72 d3 72 00 	mov    %rdx,0x72d372(%rip)        # 753918 <tmpquadone>
   265a6:	48 89 0d 83 76 5d 00 	mov    %rcx,0x5d7683(%rip)        # 5fdc30 <tmpquadtwo>
   265ad:	48 8d 15 3c 76 5d 00 	lea    0x5d763c(%rip),%rdx        # 5fdbf0 <funcinptr>
   265b4:	48 c7 02 7c 0f 00 00 	movq   $0xf7c,(%rdx)
   265bb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   265c2:	00 
   265c3:	48 c7 c1 6c 61 73 18 	mov    $0x1873616c,%rcx
   265ca:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   265ce:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   265d5:	00 
   265d6:	48 89 c1             	mov    %rax,%rcx
   265d9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   265dd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   265e4:	00 
   265e5:	ff 32                	pushq  (%rdx)
   265e7:	48 8b 15 2a d3 72 00 	mov    0x72d32a(%rip),%rdx        # 753918 <tmpquadone>
   265ee:	48 8b 0d 3b 76 5d 00 	mov    0x5d763b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   265f5:	48 c7 05 50 d3 72 00 	movq   $0x1,0x72d350(%rip)        # 753950 <cmpPassed>
   265fc:	01 00 00 00 
   26600:	e8 8b 24 fe ff       	callq  8a90 <_storeDataFn>
   26605:	3d 6c 61 73 18       	cmp    $0x1873616c,%eax
   2660a:	40 0f 94 c6          	sete   %sil
   2660e:	40 0f b6 fe          	movzbl %sil,%edi
   26612:	0f af ef             	imul   %edi,%ebp
   26615:	e9 ad fc ff ff       	jmpq   262c7 <rpl_fflush+0x567>
   2661a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   26620:	50                   	push   %rax
   26621:	48 c7 c0 48 ff 86 4c 	mov    $0x4c86ff48,%rax
   26628:	48 89 05 11 d3 72 00 	mov    %rax,0x72d311(%rip)        # 753940 <edgeId>
   2662f:	58                   	pop    %rax
   26630:	e8 c3 23 fe ff       	callq  89f8 <_storeEdge>
   26635:	bf 43 03 00 00       	mov    $0x343,%edi
   2663a:	e8 51 68 fe ff       	callq  ce90 <lava_get>
   2663f:	48 89 15 d2 d2 72 00 	mov    %rdx,0x72d2d2(%rip)        # 753918 <tmpquadone>
   26646:	48 89 0d e3 75 5d 00 	mov    %rcx,0x5d75e3(%rip)        # 5fdc30 <tmpquadtwo>
   2664d:	48 8d 15 9c 75 5d 00 	lea    0x5d759c(%rip),%rdx        # 5fdbf0 <funcinptr>
   26654:	48 c7 02 7d 0f 00 00 	movq   $0xf7d,(%rdx)
   2665b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26662:	00 
   26663:	48 c7 c1 6c 61 73 1e 	mov    $0x1e73616c,%rcx
   2666a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2666e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26675:	00 
   26676:	48 89 c1             	mov    %rax,%rcx
   26679:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2667d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26684:	00 
   26685:	ff 32                	pushq  (%rdx)
   26687:	48 8b 15 8a d2 72 00 	mov    0x72d28a(%rip),%rdx        # 753918 <tmpquadone>
   2668e:	48 8b 0d 9b 75 5d 00 	mov    0x5d759b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26695:	48 c7 05 b0 d2 72 00 	movq   $0x1,0x72d2b0(%rip)        # 753950 <cmpPassed>
   2669c:	01 00 00 00 
   266a0:	e8 eb 23 fe ff       	callq  8a90 <_storeDataFn>
   266a5:	3d 6c 61 73 1e       	cmp    $0x1e73616c,%eax
   266aa:	0f 94 c2             	sete   %dl
   266ad:	0f b6 ca             	movzbl %dl,%ecx
   266b0:	0f af d9             	imul   %ecx,%ebx
   266b3:	e9 5b fb ff ff       	jmpq   26213 <rpl_fflush+0x4b3>
   266b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   266bf:	00 
   266c0:	50                   	push   %rax
   266c1:	48 c7 c0 6f c8 14 6d 	mov    $0x6d14c86f,%rax
   266c8:	48 89 05 71 d2 72 00 	mov    %rax,0x72d271(%rip)        # 753940 <edgeId>
   266cf:	58                   	pop    %rax
   266d0:	e8 23 23 fe ff       	callq  89f8 <_storeEdge>
   266d5:	bf 40 03 00 00       	mov    $0x340,%edi
   266da:	e8 b1 67 fe ff       	callq  ce90 <lava_get>
   266df:	48 89 15 32 d2 72 00 	mov    %rdx,0x72d232(%rip)        # 753918 <tmpquadone>
   266e6:	48 89 0d 43 75 5d 00 	mov    %rcx,0x5d7543(%rip)        # 5fdc30 <tmpquadtwo>
   266ed:	48 8d 15 fc 74 5d 00 	lea    0x5d74fc(%rip),%rdx        # 5fdbf0 <funcinptr>
   266f4:	48 c7 02 7e 0f 00 00 	movq   $0xf7e,(%rdx)
   266fb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26702:	00 
   26703:	48 c7 c1 6c 61 73 21 	mov    $0x2173616c,%rcx
   2670a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2670e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26715:	00 
   26716:	48 89 c1             	mov    %rax,%rcx
   26719:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2671d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26724:	00 
   26725:	ff 32                	pushq  (%rdx)
   26727:	48 8b 15 ea d1 72 00 	mov    0x72d1ea(%rip),%rdx        # 753918 <tmpquadone>
   2672e:	48 8b 0d fb 74 5d 00 	mov    0x5d74fb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26735:	48 c7 05 10 d2 72 00 	movq   $0x1,0x72d210(%rip)        # 753950 <cmpPassed>
   2673c:	01 00 00 00 
   26740:	e8 4b 23 fe ff       	callq  8a90 <_storeDataFn>
   26745:	3d 6c 61 73 21       	cmp    $0x2173616c,%eax
   2674a:	41 0f 94 c3          	sete   %r11b
   2674e:	41 0f b6 c3          	movzbl %r11b,%eax
   26752:	0f af d8             	imul   %eax,%ebx
   26755:	e9 02 fa ff ff       	jmpq   2615c <rpl_fflush+0x3fc>
   2675a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   26760:	50                   	push   %rax
   26761:	48 c7 c0 4c d1 56 6b 	mov    $0x6b56d14c,%rax
   26768:	48 89 05 d1 d1 72 00 	mov    %rax,0x72d1d1(%rip)        # 753940 <edgeId>
   2676f:	58                   	pop    %rax
   26770:	e8 83 22 fe ff       	callq  89f8 <_storeEdge>
   26775:	bf 3f 03 00 00       	mov    $0x33f,%edi
   2677a:	e8 11 67 fe ff       	callq  ce90 <lava_get>
   2677f:	48 89 15 92 d1 72 00 	mov    %rdx,0x72d192(%rip)        # 753918 <tmpquadone>
   26786:	48 89 0d a3 74 5d 00 	mov    %rcx,0x5d74a3(%rip)        # 5fdc30 <tmpquadtwo>
   2678d:	48 8d 15 5c 74 5d 00 	lea    0x5d745c(%rip),%rdx        # 5fdbf0 <funcinptr>
   26794:	48 c7 02 7f 0f 00 00 	movq   $0xf7f,(%rdx)
   2679b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   267a2:	00 
   267a3:	48 c7 c1 6c 61 73 22 	mov    $0x2273616c,%rcx
   267aa:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   267ae:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   267b5:	00 
   267b6:	48 89 c1             	mov    %rax,%rcx
   267b9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   267bd:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   267c4:	00 
   267c5:	ff 32                	pushq  (%rdx)
   267c7:	48 8b 15 4a d1 72 00 	mov    0x72d14a(%rip),%rdx        # 753918 <tmpquadone>
   267ce:	48 8b 0d 5b 74 5d 00 	mov    0x5d745b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   267d5:	48 c7 05 70 d1 72 00 	movq   $0x1,0x72d170(%rip)        # 753950 <cmpPassed>
   267dc:	01 00 00 00 
   267e0:	e8 ab 22 fe ff       	callq  8a90 <_storeDataFn>
   267e5:	3d 6c 61 73 22       	cmp    $0x2273616c,%eax
   267ea:	41 0f 94 c1          	sete   %r9b
   267ee:	45 0f b6 d1          	movzbl %r9b,%r10d
   267f2:	41 0f af ea          	imul   %r10d,%ebp
   267f6:	e9 aa f8 ff ff       	jmpq   260a5 <rpl_fflush+0x345>
   267fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   26800:	50                   	push   %rax
   26801:	48 b8 6d b5 d6 a7 00 	movabs $0xa7d6b56d,%rax
   26808:	00 00 00 
   2680b:	48 89 05 2e d1 72 00 	mov    %rax,0x72d12e(%rip)        # 753940 <edgeId>
   26812:	58                   	pop    %rax
   26813:	e8 e0 21 fe ff       	callq  89f8 <_storeEdge>
   26818:	bf 31 03 00 00       	mov    $0x331,%edi
   2681d:	e8 6e 66 fe ff       	callq  ce90 <lava_get>
   26822:	48 89 15 ef d0 72 00 	mov    %rdx,0x72d0ef(%rip)        # 753918 <tmpquadone>
   26829:	48 89 0d 00 74 5d 00 	mov    %rcx,0x5d7400(%rip)        # 5fdc30 <tmpquadtwo>
   26830:	48 8d 15 b9 73 5d 00 	lea    0x5d73b9(%rip),%rdx        # 5fdbf0 <funcinptr>
   26837:	48 c7 02 80 0f 00 00 	movq   $0xf80,(%rdx)
   2683e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26845:	00 
   26846:	48 c7 c1 6c 61 73 30 	mov    $0x3073616c,%rcx
   2684d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26851:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26858:	00 
   26859:	48 89 c1             	mov    %rax,%rcx
   2685c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26860:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26867:	00 
   26868:	ff 32                	pushq  (%rdx)
   2686a:	48 8b 15 a7 d0 72 00 	mov    0x72d0a7(%rip),%rdx        # 753918 <tmpquadone>
   26871:	48 8b 0d b8 73 5d 00 	mov    0x5d73b8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26878:	48 c7 05 cd d0 72 00 	movq   $0x1,0x72d0cd(%rip)        # 753950 <cmpPassed>
   2687f:	01 00 00 00 
   26883:	e8 08 22 fe ff       	callq  8a90 <_storeDataFn>
   26888:	3d 6c 61 73 30       	cmp    $0x3073616c,%eax
   2688d:	40 0f 94 c7          	sete   %dil
   26891:	44 0f b6 c7          	movzbl %dil,%r8d
   26895:	41 0f af d8          	imul   %r8d,%ebx
   26899:	e9 53 f7 ff ff       	jmpq   25ff1 <rpl_fflush+0x291>
   2689e:	66 90                	xchg   %ax,%ax
   268a0:	50                   	push   %rax
   268a1:	48 b8 6b 7d 4a f9 00 	movabs $0xf94a7d6b,%rax
   268a8:	00 00 00 
   268ab:	48 89 05 8e d0 72 00 	mov    %rax,0x72d08e(%rip)        # 753940 <edgeId>
   268b2:	58                   	pop    %rax
   268b3:	e8 40 21 fe ff       	callq  89f8 <_storeEdge>
   268b8:	bf 2f 03 00 00       	mov    $0x32f,%edi
   268bd:	e8 ce 65 fe ff       	callq  ce90 <lava_get>
   268c2:	48 89 15 4f d0 72 00 	mov    %rdx,0x72d04f(%rip)        # 753918 <tmpquadone>
   268c9:	48 89 0d 60 73 5d 00 	mov    %rcx,0x5d7360(%rip)        # 5fdc30 <tmpquadtwo>
   268d0:	48 8d 15 19 73 5d 00 	lea    0x5d7319(%rip),%rdx        # 5fdbf0 <funcinptr>
   268d7:	48 c7 02 81 0f 00 00 	movq   $0xf81,(%rdx)
   268de:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   268e5:	00 
   268e6:	48 c7 c1 6c 61 73 32 	mov    $0x3273616c,%rcx
   268ed:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   268f1:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   268f8:	00 
   268f9:	48 89 c1             	mov    %rax,%rcx
   268fc:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26900:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26907:	00 
   26908:	ff 32                	pushq  (%rdx)
   2690a:	48 8b 15 07 d0 72 00 	mov    0x72d007(%rip),%rdx        # 753918 <tmpquadone>
   26911:	48 8b 0d 18 73 5d 00 	mov    0x5d7318(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26918:	48 c7 05 2d d0 72 00 	movq   $0x1,0x72d02d(%rip)        # 753950 <cmpPassed>
   2691f:	01 00 00 00 
   26923:	e8 68 21 fe ff       	callq  8a90 <_storeDataFn>
   26928:	3d 6c 61 73 32       	cmp    $0x3273616c,%eax
   2692d:	0f 94 c1             	sete   %cl
   26930:	0f b6 f1             	movzbl %cl,%esi
   26933:	0f af de             	imul   %esi,%ebx
   26936:	e9 ff f5 ff ff       	jmpq   25f3a <rpl_fflush+0x1da>
   2693b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   26940:	50                   	push   %rax
   26941:	48 c7 c0 a7 94 3f 52 	mov    $0x523f94a7,%rax
   26948:	48 89 05 f1 cf 72 00 	mov    %rax,0x72cff1(%rip)        # 753940 <edgeId>
   2694f:	58                   	pop    %rax
   26950:	e8 a3 20 fe ff       	callq  89f8 <_storeEdge>
   26955:	bf 2d 03 00 00       	mov    $0x32d,%edi
   2695a:	e8 31 65 fe ff       	callq  ce90 <lava_get>
   2695f:	48 89 15 b2 cf 72 00 	mov    %rdx,0x72cfb2(%rip)        # 753918 <tmpquadone>
   26966:	48 89 0d c3 72 5d 00 	mov    %rcx,0x5d72c3(%rip)        # 5fdc30 <tmpquadtwo>
   2696d:	48 8d 15 7c 72 5d 00 	lea    0x5d727c(%rip),%rdx        # 5fdbf0 <funcinptr>
   26974:	48 c7 02 82 0f 00 00 	movq   $0xf82,(%rdx)
   2697b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26982:	00 
   26983:	48 c7 c1 6c 61 73 34 	mov    $0x3473616c,%rcx
   2698a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2698e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26995:	00 
   26996:	48 89 c1             	mov    %rax,%rcx
   26999:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2699d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   269a4:	00 
   269a5:	ff 32                	pushq  (%rdx)
   269a7:	48 8b 15 6a cf 72 00 	mov    0x72cf6a(%rip),%rdx        # 753918 <tmpquadone>
   269ae:	48 8b 0d 7b 72 5d 00 	mov    0x5d727b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   269b5:	48 c7 05 90 cf 72 00 	movq   $0x1,0x72cf90(%rip)        # 753950 <cmpPassed>
   269bc:	01 00 00 00 
   269c0:	e8 cb 20 fe ff       	callq  8a90 <_storeDataFn>
   269c5:	3d 6c 61 73 34       	cmp    $0x3473616c,%eax
   269ca:	0f 94 c0             	sete   %al
   269cd:	0f b6 d0             	movzbl %al,%edx
   269d0:	0f af ea             	imul   %edx,%ebp
   269d3:	e9 b1 f4 ff ff       	jmpq   25e89 <rpl_fflush+0x129>
   269d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   269df:	00 
   269e0:	50                   	push   %rax
   269e1:	48 b8 fc 91 42 bf 00 	movabs $0xbf4291fc,%rax
   269e8:	00 00 00 
   269eb:	48 89 05 4e cf 72 00 	mov    %rax,0x72cf4e(%rip)        # 753940 <edgeId>
   269f2:	58                   	pop    %rax
   269f3:	e8 00 20 fe ff       	callq  89f8 <_storeEdge>
    fseeko (fp, 0, SEEK_CUR);
   269f8:	4c 89 e7             	mov    %r12,%rdi
   269fb:	ba 01 00 00 00       	mov    $0x1,%edx
   26a00:	31 f6                	xor    %esi,%esi
   26a02:	e8 19 00 00 00       	callq  26a20 <rpl_fseeko>
}
   26a07:	5b                   	pop    %rbx
  return fflush (stream);
   26a08:	4c 89 e7             	mov    %r12,%rdi
}
   26a0b:	5d                   	pop    %rbp
   26a0c:	41 5c                	pop    %r12
  return fflush (stream);
   26a0e:	e9 ad b0 fd ff       	jmpq   1ac0 <fflush@plt>
   26a13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   26a1a:	00 00 00 
   26a1d:	0f 1f 00             	nopl   (%rax)

0000000000026a20 <rpl_fseeko>:
#  define fseeko _fseeki64
# else /* mingw */
#  define fseeko fseeko64
# endif
#endif
{
   26a20:	41 54                	push   %r12
   26a22:	55                   	push   %rbp
   26a23:	41 89 d4             	mov    %edx,%r12d
   26a26:	53                   	push   %rbx
   26a27:	48 89 f5             	mov    %rsi,%rbp
   26a2a:	48 89 fb             	mov    %rdi,%rbx
#if LSEEK_PIPE_BROKEN
  /* mingw gives bogus answers rather than failure on non-seekable files.  */
  if (lseek (fileno (fp), 0, SEEK_CUR) == -1)
   26a2d:	e8 6e b0 fd ff       	callq  1aa0 <fileno@plt>
   26a32:	31 f6                	xor    %esi,%esi
   26a34:	ba 01 00 00 00       	mov    $0x1,%edx
   26a39:	89 c7                	mov    %eax,%edi
   26a3b:	e8 40 03 00 00       	callq  26d80 <rpl_lseek>
   26a40:	48 89 15 d1 ce 72 00 	mov    %rdx,0x72ced1(%rip)        # 753918 <tmpquadone>
   26a47:	48 89 0d e2 71 5d 00 	mov    %rcx,0x5d71e2(%rip)        # 5fdc30 <tmpquadtwo>
   26a4e:	48 8d 15 9b 71 5d 00 	lea    0x5d719b(%rip),%rdx        # 5fdbf0 <funcinptr>
   26a55:	48 c7 02 a2 0f 00 00 	movq   $0xfa2,(%rdx)
   26a5c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   26a63:	00 
   26a64:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   26a6b:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26a6f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26a76:	00 
   26a77:	48 89 c1             	mov    %rax,%rcx
   26a7a:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26a7e:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26a85:	00 
   26a86:	ff 32                	pushq  (%rdx)
   26a88:	48 8b 15 89 ce 72 00 	mov    0x72ce89(%rip),%rdx        # 753918 <tmpquadone>
   26a8f:	48 8b 0d 9a 71 5d 00 	mov    0x5d719a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26a96:	48 c7 05 af ce 72 00 	movq   $0x1,0x72ceaf(%rip)        # 753950 <cmpPassed>
   26a9d:	01 00 00 00 
   26aa1:	e8 12 27 fe ff       	callq  91b8 <_storeDataFn>
   26aa6:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
   26aaa:	0f 84 b0 02 00 00    	je     26d60 <rpl_fseeko+0x340>
   26ab0:	50                   	push   %rax
   26ab1:	48 c7 c0 c6 cc 04 66 	mov    $0x6604ccc6,%rax
   26ab8:	48 89 05 81 ce 72 00 	mov    %rax,0x72ce81(%rip)        # 753940 <edgeId>
   26abf:	58                   	pop    %rax
   26ac0:	e8 5b 26 fe ff       	callq  9120 <_storeEdge>
    return EOF;
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
   26ac5:	48 8b 43 08          	mov    0x8(%rbx),%rax
   26ac9:	48 89 15 48 ce 72 00 	mov    %rdx,0x72ce48(%rip)        # 753918 <tmpquadone>
   26ad0:	48 89 0d 59 71 5d 00 	mov    %rcx,0x5d7159(%rip)        # 5fdc30 <tmpquadtwo>
   26ad7:	48 8d 15 12 71 5d 00 	lea    0x5d7112(%rip),%rdx        # 5fdbf0 <funcinptr>
   26ade:	48 c7 02 a3 0f 00 00 	movq   $0xfa3,(%rdx)
   26ae5:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   26aec:	00 
   26aed:	48 89 c1             	mov    %rax,%rcx
   26af0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26af4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26afb:	00 
   26afc:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
   26b00:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26b04:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26b0b:	00 
   26b0c:	ff 32                	pushq  (%rdx)
   26b0e:	48 8b 15 03 ce 72 00 	mov    0x72ce03(%rip),%rdx        # 753918 <tmpquadone>
   26b15:	48 8b 0d 14 71 5d 00 	mov    0x5d7114(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26b1c:	48 c7 05 29 ce 72 00 	movq   $0x1,0x72ce29(%rip)        # 753950 <cmpPassed>
   26b23:	01 00 00 00 
   26b27:	e8 8c 26 fe ff       	callq  91b8 <_storeDataFn>
   26b2c:	48 39 43 10          	cmp    %rax,0x10(%rbx)
   26b30:	74 3e                	je     26b70 <rpl_fseeko+0x150>
   26b32:	50                   	push   %rax
   26b33:	48 c7 c0 cc 4c 60 76 	mov    $0x76604ccc,%rax
   26b3a:	48 89 05 ff cd 72 00 	mov    %rax,0x72cdff(%rip)        # 753940 <edgeId>
   26b41:	58                   	pop    %rax
   26b42:	e8 d9 25 fe ff       	callq  9120 <_storeEdge>
   26b47:	50                   	push   %rax
   26b48:	48 c7 c0 66 26 30 3b 	mov    $0x3b302666,%rax
   26b4f:	48 89 05 ea cd 72 00 	mov    %rax,0x72cdea(%rip)        # 753940 <edgeId>
   26b56:	58                   	pop    %rax
   26b57:	e8 c4 25 fe ff       	callq  9120 <_storeEdge>
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
   26b5c:	44 89 e2             	mov    %r12d,%edx
   26b5f:	48 89 ee             	mov    %rbp,%rsi
   26b62:	48 89 df             	mov    %rbx,%rdi
}
   26b65:	5b                   	pop    %rbx
   26b66:	5d                   	pop    %rbp
   26b67:	41 5c                	pop    %r12
  return fseeko (fp, offset, whence);
   26b69:	e9 32 b0 fd ff       	jmpq   1ba0 <fseeko@plt>
   26b6e:	66 90                	xchg   %ax,%ax
   26b70:	50                   	push   %rax
   26b71:	48 b8 d9 51 91 96 00 	movabs $0x969151d9,%rax
   26b78:	00 00 00 
   26b7b:	48 89 05 be cd 72 00 	mov    %rax,0x72cdbe(%rip)        # 753940 <edgeId>
   26b82:	58                   	pop    %rax
   26b83:	e8 98 25 fe ff       	callq  9120 <_storeEdge>
      && fp->_IO_write_ptr == fp->_IO_write_base
   26b88:	48 8b 53 20          	mov    0x20(%rbx),%rdx
   26b8c:	48 89 0d 85 cd 72 00 	mov    %rcx,0x72cd85(%rip)        # 753918 <tmpquadone>
   26b93:	48 89 05 96 70 5d 00 	mov    %rax,0x5d7096(%rip)        # 5fdc30 <tmpquadtwo>
   26b9a:	48 8d 0d 4f 70 5d 00 	lea    0x5d704f(%rip),%rcx        # 5fdbf0 <funcinptr>
   26ba1:	48 c7 01 a4 0f 00 00 	movq   $0xfa4,(%rcx)
   26ba8:	48 c7 41 08 71 00 00 	movq   $0x71,0x8(%rcx)
   26baf:	00 
   26bb0:	48 89 d0             	mov    %rdx,%rax
   26bb3:	48 89 41 10          	mov    %rax,0x10(%rcx)
   26bb7:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
   26bbe:	00 
   26bbf:	48 8b 43 28          	mov    0x28(%rbx),%rax
   26bc3:	48 89 41 20          	mov    %rax,0x20(%rcx)
   26bc7:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
   26bce:	00 
   26bcf:	ff 31                	pushq  (%rcx)
   26bd1:	48 8b 0d 40 cd 72 00 	mov    0x72cd40(%rip),%rcx        # 753918 <tmpquadone>
   26bd8:	48 8b 05 51 70 5d 00 	mov    0x5d7051(%rip),%rax        # 5fdc30 <tmpquadtwo>
   26bdf:	48 c7 05 66 cd 72 00 	movq   $0x1,0x72cd66(%rip)        # 753950 <cmpPassed>
   26be6:	01 00 00 00 
   26bea:	e8 c9 25 fe ff       	callq  91b8 <_storeDataFn>
   26bef:	48 39 53 28          	cmp    %rdx,0x28(%rbx)
   26bf3:	0f 85 4e ff ff ff    	jne    26b47 <rpl_fseeko+0x127>
   26bf9:	50                   	push   %rax
   26bfa:	48 c7 c0 8e 8a b4 6c 	mov    $0x6cb48a8e,%rax
   26c01:	48 89 05 38 cd 72 00 	mov    %rax,0x72cd38(%rip)        # 753940 <edgeId>
   26c08:	58                   	pop    %rax
   26c09:	e8 12 25 fe ff       	callq  9120 <_storeEdge>
      && fp->_IO_save_base == NULL)
   26c0e:	48 89 15 03 cd 72 00 	mov    %rdx,0x72cd03(%rip)        # 753918 <tmpquadone>
   26c15:	48 89 0d 14 70 5d 00 	mov    %rcx,0x5d7014(%rip)        # 5fdc30 <tmpquadtwo>
   26c1c:	48 8d 15 cd 6f 5d 00 	lea    0x5d6fcd(%rip),%rdx        # 5fdbf0 <funcinptr>
   26c23:	48 c7 02 a5 0f 00 00 	movq   $0xfa5,(%rdx)
   26c2a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   26c31:	00 
   26c32:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   26c39:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26c3d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26c44:	00 
   26c45:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
   26c49:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26c4d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26c54:	00 
   26c55:	ff 32                	pushq  (%rdx)
   26c57:	48 8b 15 ba cc 72 00 	mov    0x72ccba(%rip),%rdx        # 753918 <tmpquadone>
   26c5e:	48 8b 0d cb 6f 5d 00 	mov    0x5d6fcb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26c65:	48 c7 05 e0 cc 72 00 	movq   $0x1,0x72cce0(%rip)        # 753950 <cmpPassed>
   26c6c:	01 00 00 00 
   26c70:	e8 43 25 fe ff       	callq  91b8 <_storeDataFn>
   26c75:	48 83 7b 48 00       	cmpq   $0x0,0x48(%rbx)
   26c7a:	0f 85 c7 fe ff ff    	jne    26b47 <rpl_fseeko+0x127>
   26c80:	50                   	push   %rax
   26c81:	48 b8 51 91 96 cd 00 	movabs $0xcd969151,%rax
   26c88:	00 00 00 
   26c8b:	48 89 05 ae cc 72 00 	mov    %rax,0x72ccae(%rip)        # 753940 <edgeId>
   26c92:	58                   	pop    %rax
   26c93:	e8 88 24 fe ff       	callq  9120 <_storeEdge>
      off_t pos = lseek (fileno (fp), offset, whence);
   26c98:	48 89 df             	mov    %rbx,%rdi
   26c9b:	e8 00 ae fd ff       	callq  1aa0 <fileno@plt>
   26ca0:	44 89 e2             	mov    %r12d,%edx
   26ca3:	48 89 ee             	mov    %rbp,%rsi
   26ca6:	89 c7                	mov    %eax,%edi
   26ca8:	e8 d3 00 00 00       	callq  26d80 <rpl_lseek>
      if (pos == -1)
   26cad:	48 89 15 64 cc 72 00 	mov    %rdx,0x72cc64(%rip)        # 753918 <tmpquadone>
   26cb4:	48 89 0d 75 6f 5d 00 	mov    %rcx,0x5d6f75(%rip)        # 5fdc30 <tmpquadtwo>
   26cbb:	48 8d 15 2e 6f 5d 00 	lea    0x5d6f2e(%rip),%rdx        # 5fdbf0 <funcinptr>
   26cc2:	48 c7 02 a6 0f 00 00 	movq   $0xfa6,(%rdx)
   26cc9:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   26cd0:	00 
   26cd1:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   26cd8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26cdc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26ce3:	00 
   26ce4:	48 89 c1             	mov    %rax,%rcx
   26ce7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26ceb:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26cf2:	00 
   26cf3:	ff 32                	pushq  (%rdx)
   26cf5:	48 8b 15 1c cc 72 00 	mov    0x72cc1c(%rip),%rdx        # 753918 <tmpquadone>
   26cfc:	48 8b 0d 2d 6f 5d 00 	mov    0x5d6f2d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26d03:	48 c7 05 42 cc 72 00 	movq   $0x1,0x72cc42(%rip)        # 753950 <cmpPassed>
   26d0a:	01 00 00 00 
   26d0e:	e8 a5 24 fe ff       	callq  91b8 <_storeDataFn>
   26d13:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
   26d17:	74 47                	je     26d60 <rpl_fseeko+0x340>
   26d19:	50                   	push   %rax
   26d1a:	48 c7 c0 b4 6c a6 1f 	mov    $0x1fa66cb4,%rax
   26d21:	48 89 05 18 cc 72 00 	mov    %rax,0x72cc18(%rip)        # 753940 <edgeId>
   26d28:	58                   	pop    %rax
   26d29:	e8 f2 23 fe ff       	callq  9120 <_storeEdge>
      fp->_flags &= ~_IO_EOF_SEEN;
   26d2e:	83 23 ef             	andl   $0xffffffef,(%rbx)
      fp->_offset = pos;
   26d31:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
      return 0;
   26d38:	31 c0                	xor    %eax,%eax
   26d3a:	50                   	push   %rax
   26d3b:	48 b8 6c a6 1f e9 00 	movabs $0xe91fa66c,%rax
   26d42:	00 00 00 
   26d45:	48 89 05 f4 cb 72 00 	mov    %rax,0x72cbf4(%rip)        # 753940 <edgeId>
   26d4c:	58                   	pop    %rax
   26d4d:	e8 ce 23 fe ff       	callq  9120 <_storeEdge>
}
   26d52:	5b                   	pop    %rbx
   26d53:	5d                   	pop    %rbp
   26d54:	41 5c                	pop    %r12
   26d56:	c3                   	retq   
   26d57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   26d5e:	00 00 
   26d60:	50                   	push   %rax
   26d61:	48 b8 8f f4 3a 93 00 	movabs $0x933af48f,%rax
   26d68:	00 00 00 
   26d6b:	48 89 05 ce cb 72 00 	mov    %rax,0x72cbce(%rip)        # 753940 <edgeId>
   26d72:	58                   	pop    %rax
   26d73:	e8 a8 23 fe ff       	callq  9120 <_storeEdge>
    return EOF;
   26d78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   26d7d:	eb bb                	jmp    26d3a <rpl_fseeko+0x31a>
   26d7f:	90                   	nop

0000000000026d80 <rpl_lseek>:

#undef lseek

off_t
rpl_lseek (int fd, off_t offset, int whence)
{
   26d80:	41 54                	push   %r12
   26d82:	55                   	push   %rbp
   26d83:	41 89 d4             	mov    %edx,%r12d
   26d86:	53                   	push   %rbx
   26d87:	48 89 f5             	mov    %rsi,%rbp
   26d8a:	89 fb                	mov    %edi,%ebx
# endif

__extern_inline int
__NTH (fstat (int __fd, struct stat *__statbuf))
{
  return __fxstat (_STAT_VER, __fd, __statbuf);
   26d8c:	89 fe                	mov    %edi,%esi
   26d8e:	bf 01 00 00 00       	mov    $0x1,%edi
   26d93:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   26d9a:	48 89 e2             	mov    %rsp,%rdx
   26d9d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   26da4:	00 00 
   26da6:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   26dad:	00 
   26dae:	31 c0                	xor    %eax,%eax
   26db0:	e8 3b ad fd ff       	callq  1af0 <__fxstat@plt>
      return -1;
    }
#else
  /* BeOS lseek mistakenly succeeds on pipes...  */
  struct stat statbuf;
  if (fstat (fd, &statbuf) < 0)
   26db5:	85 c0                	test   %eax,%eax
   26db7:	0f 88 33 01 00 00    	js     26ef0 <rpl_lseek+0x170>
   26dbd:	50                   	push   %rax
   26dbe:	48 c7 c0 66 47 45 5a 	mov    $0x5a454766,%rax
   26dc5:	48 89 05 74 cb 72 00 	mov    %rax,0x72cb74(%rip)        # 753940 <edgeId>
   26dcc:	58                   	pop    %rax
   26dcd:	e8 76 2a fe ff       	callq  9848 <_storeEdge>
    return -1;
  if (!S_ISREG (statbuf.st_mode))
   26dd2:	8b 44 24 18          	mov    0x18(%rsp),%eax
   26dd6:	25 00 f0 00 00       	and    $0xf000,%eax
   26ddb:	48 89 15 36 cb 72 00 	mov    %rdx,0x72cb36(%rip)        # 753918 <tmpquadone>
   26de2:	48 89 0d 47 6e 5d 00 	mov    %rcx,0x5d6e47(%rip)        # 5fdc30 <tmpquadtwo>
   26de9:	48 8d 15 00 6e 5d 00 	lea    0x5d6e00(%rip),%rdx        # 5fdbf0 <funcinptr>
   26df0:	48 c7 02 6d 10 00 00 	movq   $0x106d,(%rdx)
   26df7:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26dfe:	00 
   26dff:	48 c7 c1 00 80 00 00 	mov    $0x8000,%rcx
   26e06:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26e0a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26e11:	00 
   26e12:	48 89 c1             	mov    %rax,%rcx
   26e15:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26e19:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26e20:	00 
   26e21:	ff 32                	pushq  (%rdx)
   26e23:	48 8b 15 ee ca 72 00 	mov    0x72caee(%rip),%rdx        # 753918 <tmpquadone>
   26e2a:	48 8b 0d ff 6d 5d 00 	mov    0x5d6dff(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26e31:	48 c7 05 14 cb 72 00 	movq   $0x1,0x72cb14(%rip)        # 753950 <cmpPassed>
   26e38:	01 00 00 00 
   26e3c:	e8 9f 2a fe ff       	callq  98e0 <_storeDataFn>
   26e41:	3d 00 80 00 00       	cmp    $0x8000,%eax
   26e46:	75 78                	jne    26ec0 <rpl_lseek+0x140>
   26e48:	50                   	push   %rax
   26e49:	48 b8 3b 2a d2 b2 00 	movabs $0xb2d22a3b,%rax
   26e50:	00 00 00 
   26e53:	48 89 05 e6 ca 72 00 	mov    %rax,0x72cae6(%rip)        # 753940 <edgeId>
   26e5a:	58                   	pop    %rax
   26e5b:	e8 e8 29 fe ff       	callq  9848 <_storeEdge>
    }
#endif
#if _GL_WINDOWS_64_BIT_OFF_T
  return _lseeki64 (fd, offset, whence);
#else
  return lseek (fd, offset, whence);
   26e60:	44 89 e2             	mov    %r12d,%edx
   26e63:	48 89 ee             	mov    %rbp,%rsi
   26e66:	89 df                	mov    %ebx,%edi
   26e68:	e8 53 ab fd ff       	callq  19c0 <lseek@plt>
   26e6d:	50                   	push   %rax
   26e6e:	48 c7 c0 54 a4 65 33 	mov    $0x3365a454,%rax
   26e75:	48 89 05 c4 ca 72 00 	mov    %rax,0x72cac4(%rip)        # 753940 <edgeId>
   26e7c:	58                   	pop    %rax
   26e7d:	e8 c6 29 fe ff       	callq  9848 <_storeEdge>
#endif
}
   26e82:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
   26e89:	00 
   26e8a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   26e91:	00 00 
   26e93:	75 7c                	jne    26f11 <rpl_lseek+0x191>
   26e95:	50                   	push   %rax
   26e96:	48 b8 45 5a 36 d3 00 	movabs $0xd3365a45,%rax
   26e9d:	00 00 00 
   26ea0:	48 89 05 99 ca 72 00 	mov    %rax,0x72ca99(%rip)        # 753940 <edgeId>
   26ea7:	58                   	pop    %rax
   26ea8:	e8 9b 29 fe ff       	callq  9848 <_storeEdge>
   26ead:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   26eb4:	5b                   	pop    %rbx
   26eb5:	5d                   	pop    %rbp
   26eb6:	41 5c                	pop    %r12
   26eb8:	c3                   	retq   
   26eb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   26ec0:	50                   	push   %rax
   26ec1:	48 c7 c0 9b e9 47 7a 	mov    $0x7a47e99b,%rax
   26ec8:	48 89 05 71 ca 72 00 	mov    %rax,0x72ca71(%rip)        # 753940 <edgeId>
   26ecf:	58                   	pop    %rax
   26ed0:	e8 73 29 fe ff       	callq  9848 <_storeEdge>
      errno = ESPIPE;
   26ed5:	e8 b6 a9 fd ff       	callq  1890 <__errno_location@plt>
   26eda:	c7 00 1d 00 00 00    	movl   $0x1d,(%rax)
      return -1;
   26ee0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   26ee7:	eb 84                	jmp    26e6d <rpl_lseek+0xed>
   26ee9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   26ef0:	50                   	push   %rax
   26ef1:	48 c7 c0 fd 48 af 33 	mov    $0x33af48fd,%rax
   26ef8:	48 89 05 41 ca 72 00 	mov    %rax,0x72ca41(%rip)        # 753940 <edgeId>
   26eff:	58                   	pop    %rax
   26f00:	e8 43 29 fe ff       	callq  9848 <_storeEdge>
    return -1;
   26f05:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   26f0c:	e9 5c ff ff ff       	jmpq   26e6d <rpl_lseek+0xed>
   26f11:	50                   	push   %rax
   26f12:	48 b8 8f f4 3a 93 00 	movabs $0x933af48f,%rax
   26f19:	00 00 00 
   26f1c:	48 89 05 1d ca 72 00 	mov    %rax,0x72ca1d(%rip)        # 753940 <edgeId>
   26f23:	58                   	pop    %rax
   26f24:	e8 1f 29 fe ff       	callq  9848 <_storeEdge>
}
   26f29:	e8 22 aa fd ff       	callq  1950 <__stack_chk_fail@plt>
   26f2e:	66 90                	xchg   %ax,%ax

0000000000026f30 <close_stream>:
   that writes to STREAM -- just let the internal stream state record
   the failure.  That's what the ferror test is checking below.  */

int
close_stream (FILE *stream)
{
   26f30:	41 55                	push   %r13
   26f32:	41 54                	push   %r12
   26f34:	49 89 fc             	mov    %rdi,%r12
   26f37:	55                   	push   %rbp
   26f38:	53                   	push   %rbx
  const bool some_pending = (__fpending (stream+(lava_get(774))*(0x6c61735b==(lava_get(774))||0x5b73616c==(lava_get(774)))+(lava_get(776))*(0x6c617359==(lava_get(776))||0x5973616c==(lava_get(776)))+(lava_get(778))*(0x6c617357==(lava_get(778))||0x5773616c==(lava_get(778)))+(lava_get(780))*(0x6c617355==(lava_get(780))||0x5573616c==(lava_get(780)))+(lava_get(782))*(0x6c617353==(lava_get(782))||0x5373616c==(lava_get(782)))+(lava_get(784))*(0x6c617351==(lava_get(784))||0x5173616c==(lava_get(784)))+(lava_get(786))*(0x6c61734f==(lava_get(786))||0x4f73616c==(lava_get(786)))+(lava_get(788))*(0x6c61734d==(lava_get(788))||0x4d73616c==(lava_get(788)))+(lava_get(790))*(0x6c61734b==(lava_get(790))||0x4b73616c==(lava_get(790)))+(lava_get(792))*(0x6c617349==(lava_get(792))||0x4973616c==(lava_get(792)))+(lava_get(798))*(0x6c617343==(lava_get(798))||0x4373616c==(lava_get(798)))+(lava_get(804))*(0x6c61733d==(lava_get(804))||0x3d73616c==(lava_get(804)))+(lava_get(805))*(0x6c61733c==(lava_get(805))||0x3c73616c==(lava_get(805)))+(lava_get(806))*(0x6c61733b==(lava_get(806))||0x3b73616c==(lava_get(806)))) != 0);
   26f39:	bf 06 03 00 00       	mov    $0x306,%edi
{
   26f3e:	48 83 ec 08          	sub    $0x8,%rsp
  const bool some_pending = (__fpending (stream+(lava_get(774))*(0x6c61735b==(lava_get(774))||0x5b73616c==(lava_get(774)))+(lava_get(776))*(0x6c617359==(lava_get(776))||0x5973616c==(lava_get(776)))+(lava_get(778))*(0x6c617357==(lava_get(778))||0x5773616c==(lava_get(778)))+(lava_get(780))*(0x6c617355==(lava_get(780))||0x5573616c==(lava_get(780)))+(lava_get(782))*(0x6c617353==(lava_get(782))||0x5373616c==(lava_get(782)))+(lava_get(784))*(0x6c617351==(lava_get(784))||0x5173616c==(lava_get(784)))+(lava_get(786))*(0x6c61734f==(lava_get(786))||0x4f73616c==(lava_get(786)))+(lava_get(788))*(0x6c61734d==(lava_get(788))||0x4d73616c==(lava_get(788)))+(lava_get(790))*(0x6c61734b==(lava_get(790))||0x4b73616c==(lava_get(790)))+(lava_get(792))*(0x6c617349==(lava_get(792))||0x4973616c==(lava_get(792)))+(lava_get(798))*(0x6c617343==(lava_get(798))||0x4373616c==(lava_get(798)))+(lava_get(804))*(0x6c61733d==(lava_get(804))||0x3d73616c==(lava_get(804)))+(lava_get(805))*(0x6c61733c==(lava_get(805))||0x3c73616c==(lava_get(805)))+(lava_get(806))*(0x6c61733b==(lava_get(806))||0x3b73616c==(lava_get(806)))) != 0);
   26f42:	e8 49 5f fe ff       	callq  ce90 <lava_get>
   26f47:	bf 06 03 00 00       	mov    $0x306,%edi
   26f4c:	41 89 c5             	mov    %eax,%r13d
   26f4f:	e8 3c 5f fe ff       	callq  ce90 <lava_get>
   26f54:	48 89 15 bd c9 72 00 	mov    %rdx,0x72c9bd(%rip)        # 753918 <tmpquadone>
   26f5b:	48 89 0d ce 6c 5d 00 	mov    %rcx,0x5d6cce(%rip)        # 5fdc30 <tmpquadtwo>
   26f62:	48 8d 15 87 6c 5d 00 	lea    0x5d6c87(%rip),%rdx        # 5fdbf0 <funcinptr>
   26f69:	48 c7 02 28 01 00 00 	movq   $0x128,(%rdx)
   26f70:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   26f77:	00 
   26f78:	48 c7 c1 5b 73 61 6c 	mov    $0x6c61735b,%rcx
   26f7f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   26f83:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   26f8a:	00 
   26f8b:	48 89 c1             	mov    %rax,%rcx
   26f8e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   26f92:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   26f99:	00 
   26f9a:	ff 32                	pushq  (%rdx)
   26f9c:	48 8b 15 75 c9 72 00 	mov    0x72c975(%rip),%rdx        # 753918 <tmpquadone>
   26fa3:	48 8b 0d 86 6c 5d 00 	mov    0x5d6c86(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   26faa:	48 c7 05 9b c9 72 00 	movq   $0x1,0x72c99b(%rip)        # 753950 <cmpPassed>
   26fb1:	01 00 00 00 
   26fb5:	e8 4e 30 fe ff       	callq  a008 <_storeDataFn>
   26fba:	3d 5b 73 61 6c       	cmp    $0x6c61735b,%eax
   26fbf:	0f 84 94 00 00 00    	je     27059 <close_stream+0x129>
   26fc5:	50                   	push   %rax
   26fc6:	48 c7 c0 66 26 30 3b 	mov    $0x3b302666,%rax
   26fcd:	48 89 05 6c c9 72 00 	mov    %rax,0x72c96c(%rip)        # 753940 <edgeId>
   26fd4:	58                   	pop    %rax
   26fd5:	e8 96 2f fe ff       	callq  9f70 <_storeEdge>
   26fda:	bf 06 03 00 00       	mov    $0x306,%edi
   26fdf:	e8 ac 5e fe ff       	callq  ce90 <lava_get>
   26fe4:	48 89 15 2d c9 72 00 	mov    %rdx,0x72c92d(%rip)        # 753918 <tmpquadone>
   26feb:	48 89 0d 3e 6c 5d 00 	mov    %rcx,0x5d6c3e(%rip)        # 5fdc30 <tmpquadtwo>
   26ff2:	48 8d 15 f7 6b 5d 00 	lea    0x5d6bf7(%rip),%rdx        # 5fdbf0 <funcinptr>
   26ff9:	48 c7 02 29 01 00 00 	movq   $0x129,(%rdx)
   27000:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27007:	00 
   27008:	48 c7 c1 6c 61 73 5b 	mov    $0x5b73616c,%rcx
   2700f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27013:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2701a:	00 
   2701b:	48 89 c1             	mov    %rax,%rcx
   2701e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27022:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27029:	00 
   2702a:	ff 32                	pushq  (%rdx)
   2702c:	48 8b 15 e5 c8 72 00 	mov    0x72c8e5(%rip),%rdx        # 753918 <tmpquadone>
   27033:	48 8b 0d f6 6b 5d 00 	mov    0x5d6bf6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2703a:	48 c7 05 0b c9 72 00 	movq   $0x1,0x72c90b(%rip)        # 753950 <cmpPassed>
   27041:	01 00 00 00 
   27045:	e8 be 2f fe ff       	callq  a008 <_storeDataFn>
   2704a:	3d 6c 61 73 5b       	cmp    $0x5b73616c,%eax
   2704f:	0f 94 c0             	sete   %al
   27052:	0f b6 d0             	movzbl %al,%edx
   27055:	44 0f af ea          	imul   %edx,%r13d
   27059:	50                   	push   %rax
   2705a:	48 c7 c0 13 98 1d 15 	mov    $0x151d9813,%rax
   27061:	48 89 05 d8 c8 72 00 	mov    %rax,0x72c8d8(%rip)        # 753940 <edgeId>
   27068:	58                   	pop    %rax
   27069:	e8 02 2f fe ff       	callq  9f70 <_storeEdge>
   2706e:	bf 08 03 00 00       	mov    $0x308,%edi
   27073:	e8 18 5e fe ff       	callq  ce90 <lava_get>
   27078:	bf 08 03 00 00       	mov    $0x308,%edi
   2707d:	89 c3                	mov    %eax,%ebx
   2707f:	e8 0c 5e fe ff       	callq  ce90 <lava_get>
   27084:	48 89 15 8d c8 72 00 	mov    %rdx,0x72c88d(%rip)        # 753918 <tmpquadone>
   2708b:	48 89 0d 9e 6b 5d 00 	mov    %rcx,0x5d6b9e(%rip)        # 5fdc30 <tmpquadtwo>
   27092:	48 8d 15 57 6b 5d 00 	lea    0x5d6b57(%rip),%rdx        # 5fdbf0 <funcinptr>
   27099:	48 c7 02 2a 01 00 00 	movq   $0x12a,(%rdx)
   270a0:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   270a7:	00 
   270a8:	48 c7 c1 59 73 61 6c 	mov    $0x6c617359,%rcx
   270af:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   270b3:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   270ba:	00 
   270bb:	48 89 c1             	mov    %rax,%rcx
   270be:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   270c2:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   270c9:	00 
   270ca:	ff 32                	pushq  (%rdx)
   270cc:	48 8b 15 45 c8 72 00 	mov    0x72c845(%rip),%rdx        # 753918 <tmpquadone>
   270d3:	48 8b 0d 56 6b 5d 00 	mov    0x5d6b56(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   270da:	48 c7 05 6b c8 72 00 	movq   $0x1,0x72c86b(%rip)        # 753950 <cmpPassed>
   270e1:	01 00 00 00 
   270e5:	e8 1e 2f fe ff       	callq  a008 <_storeDataFn>
   270ea:	3d 59 73 61 6c       	cmp    $0x6c617359,%eax
   270ef:	0f 84 93 00 00 00    	je     27188 <close_stream+0x258>
   270f5:	50                   	push   %rax
   270f6:	48 c7 c0 66 47 45 5a 	mov    $0x5a454766,%rax
   270fd:	48 89 05 3c c8 72 00 	mov    %rax,0x72c83c(%rip)        # 753940 <edgeId>
   27104:	58                   	pop    %rax
   27105:	e8 66 2e fe ff       	callq  9f70 <_storeEdge>
   2710a:	bf 08 03 00 00       	mov    $0x308,%edi
   2710f:	e8 7c 5d fe ff       	callq  ce90 <lava_get>
   27114:	48 89 15 fd c7 72 00 	mov    %rdx,0x72c7fd(%rip)        # 753918 <tmpquadone>
   2711b:	48 89 0d 0e 6b 5d 00 	mov    %rcx,0x5d6b0e(%rip)        # 5fdc30 <tmpquadtwo>
   27122:	48 8d 15 c7 6a 5d 00 	lea    0x5d6ac7(%rip),%rdx        # 5fdbf0 <funcinptr>
   27129:	48 c7 02 2b 01 00 00 	movq   $0x12b,(%rdx)
   27130:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27137:	00 
   27138:	48 c7 c1 6c 61 73 59 	mov    $0x5973616c,%rcx
   2713f:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27143:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2714a:	00 
   2714b:	48 89 c1             	mov    %rax,%rcx
   2714e:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27152:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27159:	00 
   2715a:	ff 32                	pushq  (%rdx)
   2715c:	48 8b 15 b5 c7 72 00 	mov    0x72c7b5(%rip),%rdx        # 753918 <tmpquadone>
   27163:	48 8b 0d c6 6a 5d 00 	mov    0x5d6ac6(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2716a:	48 c7 05 db c7 72 00 	movq   $0x1,0x72c7db(%rip)        # 753950 <cmpPassed>
   27171:	01 00 00 00 
   27175:	e8 8e 2e fe ff       	callq  a008 <_storeDataFn>
   2717a:	3d 6c 61 73 59       	cmp    $0x5973616c,%eax
   2717f:	0f 94 c1             	sete   %cl
   27182:	0f b6 f1             	movzbl %cl,%esi
   27185:	0f af de             	imul   %esi,%ebx
   27188:	50                   	push   %rax
   27189:	48 b8 a3 22 2d 9b 00 	movabs $0x9b2d22a3,%rax
   27190:	00 00 00 
   27193:	48 89 05 a6 c7 72 00 	mov    %rax,0x72c7a6(%rip)        # 753940 <edgeId>
   2719a:	58                   	pop    %rax
   2719b:	e8 d0 2d fe ff       	callq  9f70 <_storeEdge>
   271a0:	bf 0a 03 00 00       	mov    $0x30a,%edi
   271a5:	49 01 dd             	add    %rbx,%r13
   271a8:	e8 e3 5c fe ff       	callq  ce90 <lava_get>
   271ad:	bf 0a 03 00 00       	mov    $0x30a,%edi
   271b2:	89 c5                	mov    %eax,%ebp
   271b4:	e8 d7 5c fe ff       	callq  ce90 <lava_get>
   271b9:	48 89 15 58 c7 72 00 	mov    %rdx,0x72c758(%rip)        # 753918 <tmpquadone>
   271c0:	48 89 0d 69 6a 5d 00 	mov    %rcx,0x5d6a69(%rip)        # 5fdc30 <tmpquadtwo>
   271c7:	48 8d 15 22 6a 5d 00 	lea    0x5d6a22(%rip),%rdx        # 5fdbf0 <funcinptr>
   271ce:	48 c7 02 2c 01 00 00 	movq   $0x12c,(%rdx)
   271d5:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   271dc:	00 
   271dd:	48 c7 c1 57 73 61 6c 	mov    $0x6c617357,%rcx
   271e4:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   271e8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   271ef:	00 
   271f0:	48 89 c1             	mov    %rax,%rcx
   271f3:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   271f7:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   271fe:	00 
   271ff:	ff 32                	pushq  (%rdx)
   27201:	48 8b 15 10 c7 72 00 	mov    0x72c710(%rip),%rdx        # 753918 <tmpquadone>
   27208:	48 8b 0d 21 6a 5d 00 	mov    0x5d6a21(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2720f:	48 c7 05 36 c7 72 00 	movq   $0x1,0x72c736(%rip)        # 753950 <cmpPassed>
   27216:	01 00 00 00 
   2721a:	e8 e9 2d fe ff       	callq  a008 <_storeDataFn>
   2721f:	3d 57 73 61 6c       	cmp    $0x6c617357,%eax
   27224:	0f 84 99 00 00 00    	je     272c3 <close_stream+0x393>
   2722a:	50                   	push   %rax
   2722b:	48 b8 a4 65 33 fd 00 	movabs $0xfd3365a4,%rax
   27232:	00 00 00 
   27235:	48 89 05 04 c7 72 00 	mov    %rax,0x72c704(%rip)        # 753940 <edgeId>
   2723c:	58                   	pop    %rax
   2723d:	e8 2e 2d fe ff       	callq  9f70 <_storeEdge>
   27242:	bf 0a 03 00 00       	mov    $0x30a,%edi
   27247:	e8 44 5c fe ff       	callq  ce90 <lava_get>
   2724c:	48 89 15 c5 c6 72 00 	mov    %rdx,0x72c6c5(%rip)        # 753918 <tmpquadone>
   27253:	48 89 0d d6 69 5d 00 	mov    %rcx,0x5d69d6(%rip)        # 5fdc30 <tmpquadtwo>
   2725a:	48 8d 15 8f 69 5d 00 	lea    0x5d698f(%rip),%rdx        # 5fdbf0 <funcinptr>
   27261:	48 c7 02 2d 01 00 00 	movq   $0x12d,(%rdx)
   27268:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2726f:	00 
   27270:	48 c7 c1 6c 61 73 57 	mov    $0x5773616c,%rcx
   27277:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2727b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27282:	00 
   27283:	48 89 c1             	mov    %rax,%rcx
   27286:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2728a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27291:	00 
   27292:	ff 32                	pushq  (%rdx)
   27294:	48 8b 15 7d c6 72 00 	mov    0x72c67d(%rip),%rdx        # 753918 <tmpquadone>
   2729b:	48 8b 0d 8e 69 5d 00 	mov    0x5d698e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   272a2:	48 c7 05 a3 c6 72 00 	movq   $0x1,0x72c6a3(%rip)        # 753950 <cmpPassed>
   272a9:	01 00 00 00 
   272ad:	e8 56 2d fe ff       	callq  a008 <_storeDataFn>
   272b2:	3d 6c 61 73 57       	cmp    $0x5773616c,%eax
   272b7:	40 0f 94 c7          	sete   %dil
   272bb:	44 0f b6 c7          	movzbl %dil,%r8d
   272bf:	41 0f af e8          	imul   %r8d,%ebp
   272c3:	50                   	push   %rax
   272c4:	48 b8 b2 99 7e a4 00 	movabs $0xa47e99b2,%rax
   272cb:	00 00 00 
   272ce:	48 89 05 6b c6 72 00 	mov    %rax,0x72c66b(%rip)        # 753940 <edgeId>
   272d5:	58                   	pop    %rax
   272d6:	e8 95 2c fe ff       	callq  9f70 <_storeEdge>
   272db:	bf 0c 03 00 00       	mov    $0x30c,%edi
   272e0:	4c 01 ed             	add    %r13,%rbp
   272e3:	e8 a8 5b fe ff       	callq  ce90 <lava_get>
   272e8:	bf 0c 03 00 00       	mov    $0x30c,%edi
   272ed:	41 89 c5             	mov    %eax,%r13d
   272f0:	e8 9b 5b fe ff       	callq  ce90 <lava_get>
   272f5:	48 89 15 1c c6 72 00 	mov    %rdx,0x72c61c(%rip)        # 753918 <tmpquadone>
   272fc:	48 89 0d 2d 69 5d 00 	mov    %rcx,0x5d692d(%rip)        # 5fdc30 <tmpquadtwo>
   27303:	48 8d 15 e6 68 5d 00 	lea    0x5d68e6(%rip),%rdx        # 5fdbf0 <funcinptr>
   2730a:	48 c7 02 2e 01 00 00 	movq   $0x12e,(%rdx)
   27311:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27318:	00 
   27319:	48 c7 c1 55 73 61 6c 	mov    $0x6c617355,%rcx
   27320:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27324:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2732b:	00 
   2732c:	48 89 c1             	mov    %rax,%rcx
   2732f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27333:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2733a:	00 
   2733b:	ff 32                	pushq  (%rdx)
   2733d:	48 8b 15 d4 c5 72 00 	mov    0x72c5d4(%rip),%rdx        # 753918 <tmpquadone>
   27344:	48 8b 0d e5 68 5d 00 	mov    0x5d68e5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2734b:	48 c7 05 fa c5 72 00 	movq   $0x1,0x72c5fa(%rip)        # 753950 <cmpPassed>
   27352:	01 00 00 00 
   27356:	e8 ad 2c fe ff       	callq  a008 <_storeDataFn>
   2735b:	3d 55 73 61 6c       	cmp    $0x6c617355,%eax
   27360:	0f 84 96 00 00 00    	je     273fc <close_stream+0x4cc>
   27366:	50                   	push   %rax
   27367:	48 c7 c0 d3 8f f4 3a 	mov    $0x3af48fd3,%rax
   2736e:	48 89 05 cb c5 72 00 	mov    %rax,0x72c5cb(%rip)        # 753940 <edgeId>
   27375:	58                   	pop    %rax
   27376:	e8 f5 2b fe ff       	callq  9f70 <_storeEdge>
   2737b:	bf 0c 03 00 00       	mov    $0x30c,%edi
   27380:	e8 0b 5b fe ff       	callq  ce90 <lava_get>
   27385:	48 89 15 8c c5 72 00 	mov    %rdx,0x72c58c(%rip)        # 753918 <tmpquadone>
   2738c:	48 89 0d 9d 68 5d 00 	mov    %rcx,0x5d689d(%rip)        # 5fdc30 <tmpquadtwo>
   27393:	48 8d 15 56 68 5d 00 	lea    0x5d6856(%rip),%rdx        # 5fdbf0 <funcinptr>
   2739a:	48 c7 02 2f 01 00 00 	movq   $0x12f,(%rdx)
   273a1:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   273a8:	00 
   273a9:	48 c7 c1 6c 61 73 55 	mov    $0x5573616c,%rcx
   273b0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   273b4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   273bb:	00 
   273bc:	48 89 c1             	mov    %rax,%rcx
   273bf:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   273c3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   273ca:	00 
   273cb:	ff 32                	pushq  (%rdx)
   273cd:	48 8b 15 44 c5 72 00 	mov    0x72c544(%rip),%rdx        # 753918 <tmpquadone>
   273d4:	48 8b 0d 55 68 5d 00 	mov    0x5d6855(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   273db:	48 c7 05 6a c5 72 00 	movq   $0x1,0x72c56a(%rip)        # 753950 <cmpPassed>
   273e2:	01 00 00 00 
   273e6:	e8 1d 2c fe ff       	callq  a008 <_storeDataFn>
   273eb:	3d 6c 61 73 55       	cmp    $0x5573616c,%eax
   273f0:	41 0f 94 c1          	sete   %r9b
   273f4:	45 0f b6 d1          	movzbl %r9b,%r10d
   273f8:	45 0f af ea          	imul   %r10d,%r13d
   273fc:	50                   	push   %rax
   273fd:	48 b8 47 7a 9d c9 00 	movabs $0xc99d7a47,%rax
   27404:	00 00 00 
   27407:	48 89 05 32 c5 72 00 	mov    %rax,0x72c532(%rip)        # 753940 <edgeId>
   2740e:	58                   	pop    %rax
   2740f:	e8 5c 2b fe ff       	callq  9f70 <_storeEdge>
   27414:	bf 0e 03 00 00       	mov    $0x30e,%edi
   27419:	4c 01 ed             	add    %r13,%rbp
   2741c:	e8 6f 5a fe ff       	callq  ce90 <lava_get>
   27421:	bf 0e 03 00 00       	mov    $0x30e,%edi
   27426:	89 c3                	mov    %eax,%ebx
   27428:	e8 63 5a fe ff       	callq  ce90 <lava_get>
   2742d:	48 89 15 e4 c4 72 00 	mov    %rdx,0x72c4e4(%rip)        # 753918 <tmpquadone>
   27434:	48 89 0d f5 67 5d 00 	mov    %rcx,0x5d67f5(%rip)        # 5fdc30 <tmpquadtwo>
   2743b:	48 8d 15 ae 67 5d 00 	lea    0x5d67ae(%rip),%rdx        # 5fdbf0 <funcinptr>
   27442:	48 c7 02 30 01 00 00 	movq   $0x130,(%rdx)
   27449:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27450:	00 
   27451:	48 c7 c1 53 73 61 6c 	mov    $0x6c617353,%rcx
   27458:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2745c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27463:	00 
   27464:	48 89 c1             	mov    %rax,%rcx
   27467:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2746b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27472:	00 
   27473:	ff 32                	pushq  (%rdx)
   27475:	48 8b 15 9c c4 72 00 	mov    0x72c49c(%rip),%rdx        # 753918 <tmpquadone>
   2747c:	48 8b 0d ad 67 5d 00 	mov    0x5d67ad(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27483:	48 c7 05 c2 c4 72 00 	movq   $0x1,0x72c4c2(%rip)        # 753950 <cmpPassed>
   2748a:	01 00 00 00 
   2748e:	e8 75 2b fe ff       	callq  a008 <_storeDataFn>
   27493:	3d 53 73 61 6c       	cmp    $0x6c617353,%eax
   27498:	0f 84 98 00 00 00    	je     27536 <close_stream+0x606>
   2749e:	50                   	push   %rax
   2749f:	48 b8 af 33 d9 ba 00 	movabs $0xbad933af,%rax
   274a6:	00 00 00 
   274a9:	48 89 05 90 c4 72 00 	mov    %rax,0x72c490(%rip)        # 753940 <edgeId>
   274b0:	58                   	pop    %rax
   274b1:	e8 ba 2a fe ff       	callq  9f70 <_storeEdge>
   274b6:	bf 0e 03 00 00       	mov    $0x30e,%edi
   274bb:	e8 d0 59 fe ff       	callq  ce90 <lava_get>
   274c0:	48 89 15 51 c4 72 00 	mov    %rdx,0x72c451(%rip)        # 753918 <tmpquadone>
   274c7:	48 89 0d 62 67 5d 00 	mov    %rcx,0x5d6762(%rip)        # 5fdc30 <tmpquadtwo>
   274ce:	48 8d 15 1b 67 5d 00 	lea    0x5d671b(%rip),%rdx        # 5fdbf0 <funcinptr>
   274d5:	48 c7 02 31 01 00 00 	movq   $0x131,(%rdx)
   274dc:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   274e3:	00 
   274e4:	48 c7 c1 6c 61 73 53 	mov    $0x5373616c,%rcx
   274eb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   274ef:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   274f6:	00 
   274f7:	48 89 c1             	mov    %rax,%rcx
   274fa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   274fe:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27505:	00 
   27506:	ff 32                	pushq  (%rdx)
   27508:	48 8b 15 09 c4 72 00 	mov    0x72c409(%rip),%rdx        # 753918 <tmpquadone>
   2750f:	48 8b 0d 1a 67 5d 00 	mov    0x5d671a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27516:	48 c7 05 2f c4 72 00 	movq   $0x1,0x72c42f(%rip)        # 753950 <cmpPassed>
   2751d:	01 00 00 00 
   27521:	e8 e2 2a fe ff       	callq  a008 <_storeDataFn>
   27526:	3d 6c 61 73 53       	cmp    $0x5373616c,%eax
   2752b:	41 0f 94 c3          	sete   %r11b
   2752f:	41 0f b6 c3          	movzbl %r11b,%eax
   27533:	0f af d8             	imul   %eax,%ebx
   27536:	50                   	push   %rax
   27537:	48 c7 c0 99 6c dd 6a 	mov    $0x6add6c99,%rax
   2753e:	48 89 05 fb c3 72 00 	mov    %rax,0x72c3fb(%rip)        # 753940 <edgeId>
   27545:	58                   	pop    %rax
   27546:	e8 25 2a fe ff       	callq  9f70 <_storeEdge>
   2754b:	bf 10 03 00 00       	mov    $0x310,%edi
   27550:	4c 8d 2c 2b          	lea    (%rbx,%rbp,1),%r13
   27554:	e8 37 59 fe ff       	callq  ce90 <lava_get>
   27559:	bf 10 03 00 00       	mov    $0x310,%edi
   2755e:	89 c5                	mov    %eax,%ebp
   27560:	e8 2b 59 fe ff       	callq  ce90 <lava_get>
   27565:	48 89 15 ac c3 72 00 	mov    %rdx,0x72c3ac(%rip)        # 753918 <tmpquadone>
   2756c:	48 89 0d bd 66 5d 00 	mov    %rcx,0x5d66bd(%rip)        # 5fdc30 <tmpquadtwo>
   27573:	48 8d 15 76 66 5d 00 	lea    0x5d6676(%rip),%rdx        # 5fdbf0 <funcinptr>
   2757a:	48 c7 02 32 01 00 00 	movq   $0x132,(%rdx)
   27581:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27588:	00 
   27589:	48 c7 c1 51 73 61 6c 	mov    $0x6c617351,%rcx
   27590:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27594:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2759b:	00 
   2759c:	48 89 c1             	mov    %rax,%rcx
   2759f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   275a3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   275aa:	00 
   275ab:	ff 32                	pushq  (%rdx)
   275ad:	48 8b 15 64 c3 72 00 	mov    0x72c364(%rip),%rdx        # 753918 <tmpquadone>
   275b4:	48 8b 0d 75 66 5d 00 	mov    0x5d6675(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   275bb:	48 c7 05 8a c3 72 00 	movq   $0x1,0x72c38a(%rip)        # 753950 <cmpPassed>
   275c2:	01 00 00 00 
   275c6:	e8 3d 2a fe ff       	callq  a008 <_storeDataFn>
   275cb:	3d 51 73 61 6c       	cmp    $0x6c617351,%eax
   275d0:	0f 84 93 00 00 00    	je     27669 <close_stream+0x739>
   275d6:	50                   	push   %rax
   275d7:	48 c7 c0 ad 5b 2d 24 	mov    $0x242d5bad,%rax
   275de:	48 89 05 5b c3 72 00 	mov    %rax,0x72c35b(%rip)        # 753940 <edgeId>
   275e5:	58                   	pop    %rax
   275e6:	e8 85 29 fe ff       	callq  9f70 <_storeEdge>
   275eb:	bf 10 03 00 00       	mov    $0x310,%edi
   275f0:	e8 9b 58 fe ff       	callq  ce90 <lava_get>
   275f5:	48 89 15 1c c3 72 00 	mov    %rdx,0x72c31c(%rip)        # 753918 <tmpquadone>
   275fc:	48 89 0d 2d 66 5d 00 	mov    %rcx,0x5d662d(%rip)        # 5fdc30 <tmpquadtwo>
   27603:	48 8d 15 e6 65 5d 00 	lea    0x5d65e6(%rip),%rdx        # 5fdbf0 <funcinptr>
   2760a:	48 c7 02 33 01 00 00 	movq   $0x133,(%rdx)
   27611:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27618:	00 
   27619:	48 c7 c1 6c 61 73 51 	mov    $0x5173616c,%rcx
   27620:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27624:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2762b:	00 
   2762c:	48 89 c1             	mov    %rax,%rcx
   2762f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27633:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2763a:	00 
   2763b:	ff 32                	pushq  (%rdx)
   2763d:	48 8b 15 d4 c2 72 00 	mov    0x72c2d4(%rip),%rdx        # 753918 <tmpquadone>
   27644:	48 8b 0d e5 65 5d 00 	mov    0x5d65e5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2764b:	48 c7 05 fa c2 72 00 	movq   $0x1,0x72c2fa(%rip)        # 753950 <cmpPassed>
   27652:	01 00 00 00 
   27656:	e8 ad 29 fe ff       	callq  a008 <_storeDataFn>
   2765b:	3d 6c 61 73 51       	cmp    $0x5173616c,%eax
   27660:	0f 94 c2             	sete   %dl
   27663:	0f b6 ca             	movzbl %dl,%ecx
   27666:	0f af e9             	imul   %ecx,%ebp
   27669:	50                   	push   %rax
   2766a:	48 c7 c0 ad 16 12 5e 	mov    $0x5e1216ad,%rax
   27671:	48 89 05 c8 c2 72 00 	mov    %rax,0x72c2c8(%rip)        # 753940 <edgeId>
   27678:	58                   	pop    %rax
   27679:	e8 f2 28 fe ff       	callq  9f70 <_storeEdge>
   2767e:	bf 12 03 00 00       	mov    $0x312,%edi
   27683:	4c 01 ed             	add    %r13,%rbp
   27686:	e8 05 58 fe ff       	callq  ce90 <lava_get>
   2768b:	bf 12 03 00 00       	mov    $0x312,%edi
   27690:	89 c3                	mov    %eax,%ebx
   27692:	e8 f9 57 fe ff       	callq  ce90 <lava_get>
   27697:	48 89 15 7a c2 72 00 	mov    %rdx,0x72c27a(%rip)        # 753918 <tmpquadone>
   2769e:	48 89 0d 8b 65 5d 00 	mov    %rcx,0x5d658b(%rip)        # 5fdc30 <tmpquadtwo>
   276a5:	48 8d 15 44 65 5d 00 	lea    0x5d6544(%rip),%rdx        # 5fdbf0 <funcinptr>
   276ac:	48 c7 02 34 01 00 00 	movq   $0x134,(%rdx)
   276b3:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   276ba:	00 
   276bb:	48 c7 c1 4f 73 61 6c 	mov    $0x6c61734f,%rcx
   276c2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   276c6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   276cd:	00 
   276ce:	48 89 c1             	mov    %rax,%rcx
   276d1:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   276d5:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   276dc:	00 
   276dd:	ff 32                	pushq  (%rdx)
   276df:	48 8b 15 32 c2 72 00 	mov    0x72c232(%rip),%rdx        # 753918 <tmpquadone>
   276e6:	48 8b 0d 43 65 5d 00 	mov    0x5d6543(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   276ed:	48 c7 05 58 c2 72 00 	movq   $0x1,0x72c258(%rip)        # 753950 <cmpPassed>
   276f4:	01 00 00 00 
   276f8:	e8 0b 29 fe ff       	callq  a008 <_storeDataFn>
   276fd:	3d 4f 73 61 6c       	cmp    $0x6c61734f,%eax
   27702:	0f 84 95 00 00 00    	je     2779d <close_stream+0x86d>
   27708:	50                   	push   %rax
   27709:	48 c7 c0 42 c2 eb 50 	mov    $0x50ebc242,%rax
   27710:	48 89 05 29 c2 72 00 	mov    %rax,0x72c229(%rip)        # 753940 <edgeId>
   27717:	58                   	pop    %rax
   27718:	e8 53 28 fe ff       	callq  9f70 <_storeEdge>
   2771d:	bf 12 03 00 00       	mov    $0x312,%edi
   27722:	e8 69 57 fe ff       	callq  ce90 <lava_get>
   27727:	48 89 15 ea c1 72 00 	mov    %rdx,0x72c1ea(%rip)        # 753918 <tmpquadone>
   2772e:	48 89 0d fb 64 5d 00 	mov    %rcx,0x5d64fb(%rip)        # 5fdc30 <tmpquadtwo>
   27735:	48 8d 15 b4 64 5d 00 	lea    0x5d64b4(%rip),%rdx        # 5fdbf0 <funcinptr>
   2773c:	48 c7 02 35 01 00 00 	movq   $0x135,(%rdx)
   27743:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2774a:	00 
   2774b:	48 c7 c1 6c 61 73 4f 	mov    $0x4f73616c,%rcx
   27752:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27756:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2775d:	00 
   2775e:	48 89 c1             	mov    %rax,%rcx
   27761:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27765:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2776c:	00 
   2776d:	ff 32                	pushq  (%rdx)
   2776f:	48 8b 15 a2 c1 72 00 	mov    0x72c1a2(%rip),%rdx        # 753918 <tmpquadone>
   27776:	48 8b 0d b3 64 5d 00 	mov    0x5d64b3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2777d:	48 c7 05 c8 c1 72 00 	movq   $0x1,0x72c1c8(%rip)        # 753950 <cmpPassed>
   27784:	01 00 00 00 
   27788:	e8 7b 28 fe ff       	callq  a008 <_storeDataFn>
   2778d:	3d 6c 61 73 4f       	cmp    $0x4f73616c,%eax
   27792:	40 0f 94 c6          	sete   %sil
   27796:	40 0f b6 fe          	movzbl %sil,%edi
   2779a:	0f af df             	imul   %edi,%ebx
   2779d:	50                   	push   %rax
   2779e:	48 b8 e1 75 28 c3 00 	movabs $0xc32875e1,%rax
   277a5:	00 00 00 
   277a8:	48 89 05 91 c1 72 00 	mov    %rax,0x72c191(%rip)        # 753940 <edgeId>
   277af:	58                   	pop    %rax
   277b0:	e8 bb 27 fe ff       	callq  9f70 <_storeEdge>
   277b5:	bf 14 03 00 00       	mov    $0x314,%edi
   277ba:	48 01 dd             	add    %rbx,%rbp
   277bd:	e8 ce 56 fe ff       	callq  ce90 <lava_get>
   277c2:	bf 14 03 00 00       	mov    $0x314,%edi
   277c7:	41 89 c5             	mov    %eax,%r13d
   277ca:	e8 c1 56 fe ff       	callq  ce90 <lava_get>
   277cf:	48 89 15 42 c1 72 00 	mov    %rdx,0x72c142(%rip)        # 753918 <tmpquadone>
   277d6:	48 89 0d 53 64 5d 00 	mov    %rcx,0x5d6453(%rip)        # 5fdc30 <tmpquadtwo>
   277dd:	48 8d 15 0c 64 5d 00 	lea    0x5d640c(%rip),%rdx        # 5fdbf0 <funcinptr>
   277e4:	48 c7 02 36 01 00 00 	movq   $0x136,(%rdx)
   277eb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   277f2:	00 
   277f3:	48 c7 c1 4d 73 61 6c 	mov    $0x6c61734d,%rcx
   277fa:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   277fe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27805:	00 
   27806:	48 89 c1             	mov    %rax,%rcx
   27809:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2780d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27814:	00 
   27815:	ff 32                	pushq  (%rdx)
   27817:	48 8b 15 fa c0 72 00 	mov    0x72c0fa(%rip),%rdx        # 753918 <tmpquadone>
   2781e:	48 8b 0d 0b 64 5d 00 	mov    0x5d640b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27825:	48 c7 05 20 c1 72 00 	movq   $0x1,0x72c120(%rip)        # 753950 <cmpPassed>
   2782c:	01 00 00 00 
   27830:	e8 d3 27 fe ff       	callq  a008 <_storeDataFn>
   27835:	3d 4d 73 61 6c       	cmp    $0x6c61734d,%eax
   2783a:	0f 84 96 00 00 00    	je     278d6 <close_stream+0x9a6>
   27840:	50                   	push   %rax
   27841:	48 c7 c0 0e 65 78 58 	mov    $0x5878650e,%rax
   27848:	48 89 05 f1 c0 72 00 	mov    %rax,0x72c0f1(%rip)        # 753940 <edgeId>
   2784f:	58                   	pop    %rax
   27850:	e8 1b 27 fe ff       	callq  9f70 <_storeEdge>
   27855:	bf 14 03 00 00       	mov    $0x314,%edi
   2785a:	e8 31 56 fe ff       	callq  ce90 <lava_get>
   2785f:	48 89 15 b2 c0 72 00 	mov    %rdx,0x72c0b2(%rip)        # 753918 <tmpquadone>
   27866:	48 89 0d c3 63 5d 00 	mov    %rcx,0x5d63c3(%rip)        # 5fdc30 <tmpquadtwo>
   2786d:	48 8d 15 7c 63 5d 00 	lea    0x5d637c(%rip),%rdx        # 5fdbf0 <funcinptr>
   27874:	48 c7 02 37 01 00 00 	movq   $0x137,(%rdx)
   2787b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27882:	00 
   27883:	48 c7 c1 6c 61 73 4d 	mov    $0x4d73616c,%rcx
   2788a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2788e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27895:	00 
   27896:	48 89 c1             	mov    %rax,%rcx
   27899:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2789d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   278a4:	00 
   278a5:	ff 32                	pushq  (%rdx)
   278a7:	48 8b 15 6a c0 72 00 	mov    0x72c06a(%rip),%rdx        # 753918 <tmpquadone>
   278ae:	48 8b 0d 7b 63 5d 00 	mov    0x5d637b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   278b5:	48 c7 05 90 c0 72 00 	movq   $0x1,0x72c090(%rip)        # 753950 <cmpPassed>
   278bc:	01 00 00 00 
   278c0:	e8 43 27 fe ff       	callq  a008 <_storeDataFn>
   278c5:	3d 6c 61 73 4d       	cmp    $0x4d73616c,%eax
   278ca:	41 0f 94 c0          	sete   %r8b
   278ce:	45 0f b6 c8          	movzbl %r8b,%r9d
   278d2:	45 0f af e9          	imul   %r9d,%r13d
   278d6:	50                   	push   %rax
   278d7:	48 c7 c0 32 3c 2c 17 	mov    $0x172c3c32,%rax
   278de:	48 89 05 5b c0 72 00 	mov    %rax,0x72c05b(%rip)        # 753940 <edgeId>
   278e5:	58                   	pop    %rax
   278e6:	e8 85 26 fe ff       	callq  9f70 <_storeEdge>
   278eb:	bf 16 03 00 00       	mov    $0x316,%edi
   278f0:	49 8d 5c 2d 00       	lea    0x0(%r13,%rbp,1),%rbx
   278f5:	e8 96 55 fe ff       	callq  ce90 <lava_get>
   278fa:	bf 16 03 00 00       	mov    $0x316,%edi
   278ff:	89 c5                	mov    %eax,%ebp
   27901:	e8 8a 55 fe ff       	callq  ce90 <lava_get>
   27906:	48 89 15 0b c0 72 00 	mov    %rdx,0x72c00b(%rip)        # 753918 <tmpquadone>
   2790d:	48 89 0d 1c 63 5d 00 	mov    %rcx,0x5d631c(%rip)        # 5fdc30 <tmpquadtwo>
   27914:	48 8d 15 d5 62 5d 00 	lea    0x5d62d5(%rip),%rdx        # 5fdbf0 <funcinptr>
   2791b:	48 c7 02 38 01 00 00 	movq   $0x138,(%rdx)
   27922:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27929:	00 
   2792a:	48 c7 c1 4b 73 61 6c 	mov    $0x6c61734b,%rcx
   27931:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27935:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2793c:	00 
   2793d:	48 89 c1             	mov    %rax,%rcx
   27940:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27944:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2794b:	00 
   2794c:	ff 32                	pushq  (%rdx)
   2794e:	48 8b 15 c3 bf 72 00 	mov    0x72bfc3(%rip),%rdx        # 753918 <tmpquadone>
   27955:	48 8b 0d d4 62 5d 00 	mov    0x5d62d4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2795c:	48 c7 05 e9 bf 72 00 	movq   $0x1,0x72bfe9(%rip)        # 753950 <cmpPassed>
   27963:	01 00 00 00 
   27967:	e8 9c 26 fe ff       	callq  a008 <_storeDataFn>
   2796c:	3d 4b 73 61 6c       	cmp    $0x6c61734b,%eax
   27971:	0f 84 96 00 00 00    	je     27a0d <close_stream+0xadd>
   27977:	50                   	push   %rax
   27978:	48 c7 c0 87 e5 a2 48 	mov    $0x48a2e587,%rax
   2797f:	48 89 05 ba bf 72 00 	mov    %rax,0x72bfba(%rip)        # 753940 <edgeId>
   27986:	58                   	pop    %rax
   27987:	e8 e4 25 fe ff       	callq  9f70 <_storeEdge>
   2798c:	bf 16 03 00 00       	mov    $0x316,%edi
   27991:	e8 fa 54 fe ff       	callq  ce90 <lava_get>
   27996:	48 89 15 7b bf 72 00 	mov    %rdx,0x72bf7b(%rip)        # 753918 <tmpquadone>
   2799d:	48 89 0d 8c 62 5d 00 	mov    %rcx,0x5d628c(%rip)        # 5fdc30 <tmpquadtwo>
   279a4:	48 8d 15 45 62 5d 00 	lea    0x5d6245(%rip),%rdx        # 5fdbf0 <funcinptr>
   279ab:	48 c7 02 39 01 00 00 	movq   $0x139,(%rdx)
   279b2:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   279b9:	00 
   279ba:	48 c7 c1 6c 61 73 4b 	mov    $0x4b73616c,%rcx
   279c1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   279c5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   279cc:	00 
   279cd:	48 89 c1             	mov    %rax,%rcx
   279d0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   279d4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   279db:	00 
   279dc:	ff 32                	pushq  (%rdx)
   279de:	48 8b 15 33 bf 72 00 	mov    0x72bf33(%rip),%rdx        # 753918 <tmpquadone>
   279e5:	48 8b 0d 44 62 5d 00 	mov    0x5d6244(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   279ec:	48 c7 05 59 bf 72 00 	movq   $0x1,0x72bf59(%rip)        # 753950 <cmpPassed>
   279f3:	01 00 00 00 
   279f7:	e8 0c 26 fe ff       	callq  a008 <_storeDataFn>
   279fc:	3d 6c 61 73 4b       	cmp    $0x4b73616c,%eax
   27a01:	41 0f 94 c2          	sete   %r10b
   27a05:	45 0f b6 da          	movzbl %r10b,%r11d
   27a09:	41 0f af eb          	imul   %r11d,%ebp
   27a0d:	50                   	push   %rax
   27a0e:	48 c7 c0 72 51 a4 7f 	mov    $0x7fa45172,%rax
   27a15:	48 89 05 24 bf 72 00 	mov    %rax,0x72bf24(%rip)        # 753940 <edgeId>
   27a1c:	58                   	pop    %rax
   27a1d:	e8 4e 25 fe ff       	callq  9f70 <_storeEdge>
   27a22:	bf 18 03 00 00       	mov    $0x318,%edi
   27a27:	48 01 dd             	add    %rbx,%rbp
   27a2a:	e8 61 54 fe ff       	callq  ce90 <lava_get>
   27a2f:	bf 18 03 00 00       	mov    $0x318,%edi
   27a34:	41 89 c5             	mov    %eax,%r13d
   27a37:	e8 54 54 fe ff       	callq  ce90 <lava_get>
   27a3c:	48 89 15 d5 be 72 00 	mov    %rdx,0x72bed5(%rip)        # 753918 <tmpquadone>
   27a43:	48 89 0d e6 61 5d 00 	mov    %rcx,0x5d61e6(%rip)        # 5fdc30 <tmpquadtwo>
   27a4a:	48 8d 15 9f 61 5d 00 	lea    0x5d619f(%rip),%rdx        # 5fdbf0 <funcinptr>
   27a51:	48 c7 02 3a 01 00 00 	movq   $0x13a,(%rdx)
   27a58:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27a5f:	00 
   27a60:	48 c7 c1 49 73 61 6c 	mov    $0x6c617349,%rcx
   27a67:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27a6b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27a72:	00 
   27a73:	48 89 c1             	mov    %rax,%rcx
   27a76:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27a7a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27a81:	00 
   27a82:	ff 32                	pushq  (%rdx)
   27a84:	48 8b 15 8d be 72 00 	mov    0x72be8d(%rip),%rdx        # 753918 <tmpquadone>
   27a8b:	48 8b 0d 9e 61 5d 00 	mov    0x5d619e(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27a92:	48 c7 05 b3 be 72 00 	movq   $0x1,0x72beb3(%rip)        # 753950 <cmpPassed>
   27a99:	01 00 00 00 
   27a9d:	e8 66 25 fe ff       	callq  a008 <_storeDataFn>
   27aa2:	3d 49 73 61 6c       	cmp    $0x6c617349,%eax
   27aa7:	0f 84 97 00 00 00    	je     27b44 <close_stream+0xc14>
   27aad:	50                   	push   %rax
   27aae:	48 b8 8a f4 6f c8 00 	movabs $0xc86ff48a,%rax
   27ab5:	00 00 00 
   27ab8:	48 89 05 81 be 72 00 	mov    %rax,0x72be81(%rip)        # 753940 <edgeId>
   27abf:	58                   	pop    %rax
   27ac0:	e8 ab 24 fe ff       	callq  9f70 <_storeEdge>
   27ac5:	bf 18 03 00 00       	mov    $0x318,%edi
   27aca:	e8 c1 53 fe ff       	callq  ce90 <lava_get>
   27acf:	48 89 15 42 be 72 00 	mov    %rdx,0x72be42(%rip)        # 753918 <tmpquadone>
   27ad6:	48 89 0d 53 61 5d 00 	mov    %rcx,0x5d6153(%rip)        # 5fdc30 <tmpquadtwo>
   27add:	48 8d 15 0c 61 5d 00 	lea    0x5d610c(%rip),%rdx        # 5fdbf0 <funcinptr>
   27ae4:	48 c7 02 3b 01 00 00 	movq   $0x13b,(%rdx)
   27aeb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27af2:	00 
   27af3:	48 c7 c1 6c 61 73 49 	mov    $0x4973616c,%rcx
   27afa:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27afe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27b05:	00 
   27b06:	48 89 c1             	mov    %rax,%rcx
   27b09:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27b0d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27b14:	00 
   27b15:	ff 32                	pushq  (%rdx)
   27b17:	48 8b 15 fa bd 72 00 	mov    0x72bdfa(%rip),%rdx        # 753918 <tmpquadone>
   27b1e:	48 8b 0d 0b 61 5d 00 	mov    0x5d610b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27b25:	48 c7 05 20 be 72 00 	movq   $0x1,0x72be20(%rip)        # 753950 <cmpPassed>
   27b2c:	01 00 00 00 
   27b30:	e8 d3 24 fe ff       	callq  a008 <_storeDataFn>
   27b35:	3d 6c 61 73 49       	cmp    $0x4973616c,%eax
   27b3a:	0f 94 c0             	sete   %al
   27b3d:	0f b6 d0             	movzbl %al,%edx
   27b40:	44 0f af ea          	imul   %edx,%r13d
   27b44:	50                   	push   %rax
   27b45:	48 b8 fa 37 64 8a 00 	movabs $0x8a6437fa,%rax
   27b4c:	00 00 00 
   27b4f:	48 89 05 ea bd 72 00 	mov    %rax,0x72bdea(%rip)        # 753940 <edgeId>
   27b56:	58                   	pop    %rax
   27b57:	e8 14 24 fe ff       	callq  9f70 <_storeEdge>
   27b5c:	bf 1e 03 00 00       	mov    $0x31e,%edi
   27b61:	4c 01 ed             	add    %r13,%rbp
   27b64:	e8 27 53 fe ff       	callq  ce90 <lava_get>
   27b69:	bf 1e 03 00 00       	mov    $0x31e,%edi
   27b6e:	89 c3                	mov    %eax,%ebx
   27b70:	e8 1b 53 fe ff       	callq  ce90 <lava_get>
   27b75:	48 89 15 9c bd 72 00 	mov    %rdx,0x72bd9c(%rip)        # 753918 <tmpquadone>
   27b7c:	48 89 0d ad 60 5d 00 	mov    %rcx,0x5d60ad(%rip)        # 5fdc30 <tmpquadtwo>
   27b83:	48 8d 15 66 60 5d 00 	lea    0x5d6066(%rip),%rdx        # 5fdbf0 <funcinptr>
   27b8a:	48 c7 02 3c 01 00 00 	movq   $0x13c,(%rdx)
   27b91:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27b98:	00 
   27b99:	48 c7 c1 43 73 61 6c 	mov    $0x6c617343,%rcx
   27ba0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27ba4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27bab:	00 
   27bac:	48 89 c1             	mov    %rax,%rcx
   27baf:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27bb3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27bba:	00 
   27bbb:	ff 32                	pushq  (%rdx)
   27bbd:	48 8b 15 54 bd 72 00 	mov    0x72bd54(%rip),%rdx        # 753918 <tmpquadone>
   27bc4:	48 8b 0d 65 60 5d 00 	mov    0x5d6065(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27bcb:	48 c7 05 7a bd 72 00 	movq   $0x1,0x72bd7a(%rip)        # 753950 <cmpPassed>
   27bd2:	01 00 00 00 
   27bd6:	e8 2d 24 fe ff       	callq  a008 <_storeDataFn>
   27bdb:	3d 43 73 61 6c       	cmp    $0x6c617343,%eax
   27be0:	0f 84 93 00 00 00    	je     27c79 <close_stream+0xd49>
   27be6:	50                   	push   %rax
   27be7:	48 c7 c0 86 4c d1 56 	mov    $0x56d14c86,%rax
   27bee:	48 89 05 4b bd 72 00 	mov    %rax,0x72bd4b(%rip)        # 753940 <edgeId>
   27bf5:	58                   	pop    %rax
   27bf6:	e8 75 23 fe ff       	callq  9f70 <_storeEdge>
   27bfb:	bf 1e 03 00 00       	mov    $0x31e,%edi
   27c00:	e8 8b 52 fe ff       	callq  ce90 <lava_get>
   27c05:	48 89 15 0c bd 72 00 	mov    %rdx,0x72bd0c(%rip)        # 753918 <tmpquadone>
   27c0c:	48 89 0d 1d 60 5d 00 	mov    %rcx,0x5d601d(%rip)        # 5fdc30 <tmpquadtwo>
   27c13:	48 8d 15 d6 5f 5d 00 	lea    0x5d5fd6(%rip),%rdx        # 5fdbf0 <funcinptr>
   27c1a:	48 c7 02 3d 01 00 00 	movq   $0x13d,(%rdx)
   27c21:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27c28:	00 
   27c29:	48 c7 c1 6c 61 73 43 	mov    $0x4373616c,%rcx
   27c30:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27c34:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27c3b:	00 
   27c3c:	48 89 c1             	mov    %rax,%rcx
   27c3f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27c43:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27c4a:	00 
   27c4b:	ff 32                	pushq  (%rdx)
   27c4d:	48 8b 15 c4 bc 72 00 	mov    0x72bcc4(%rip),%rdx        # 753918 <tmpquadone>
   27c54:	48 8b 0d d5 5f 5d 00 	mov    0x5d5fd5(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27c5b:	48 c7 05 ea bc 72 00 	movq   $0x1,0x72bcea(%rip)        # 753950 <cmpPassed>
   27c62:	01 00 00 00 
   27c66:	e8 9d 23 fe ff       	callq  a008 <_storeDataFn>
   27c6b:	3d 6c 61 73 43       	cmp    $0x4373616c,%eax
   27c70:	0f 94 c1             	sete   %cl
   27c73:	0f b6 f1             	movzbl %cl,%esi
   27c76:	0f af de             	imul   %esi,%ebx
   27c79:	50                   	push   %rax
   27c7a:	48 b8 a6 68 ab b5 00 	movabs $0xb5ab68a6,%rax
   27c81:	00 00 00 
   27c84:	48 89 05 b5 bc 72 00 	mov    %rax,0x72bcb5(%rip)        # 753940 <edgeId>
   27c8b:	58                   	pop    %rax
   27c8c:	e8 df 22 fe ff       	callq  9f70 <_storeEdge>
   27c91:	bf 24 03 00 00       	mov    $0x324,%edi
   27c96:	4c 8d 2c 2b          	lea    (%rbx,%rbp,1),%r13
   27c9a:	e8 f1 51 fe ff       	callq  ce90 <lava_get>
   27c9f:	bf 24 03 00 00       	mov    $0x324,%edi
   27ca4:	89 c5                	mov    %eax,%ebp
   27ca6:	e8 e5 51 fe ff       	callq  ce90 <lava_get>
   27cab:	48 89 15 66 bc 72 00 	mov    %rdx,0x72bc66(%rip)        # 753918 <tmpquadone>
   27cb2:	48 89 0d 77 5f 5d 00 	mov    %rcx,0x5d5f77(%rip)        # 5fdc30 <tmpquadtwo>
   27cb9:	48 8d 15 30 5f 5d 00 	lea    0x5d5f30(%rip),%rdx        # 5fdbf0 <funcinptr>
   27cc0:	48 c7 02 3e 01 00 00 	movq   $0x13e,(%rdx)
   27cc7:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27cce:	00 
   27ccf:	48 c7 c1 3d 73 61 6c 	mov    $0x6c61733d,%rcx
   27cd6:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27cda:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27ce1:	00 
   27ce2:	48 89 c1             	mov    %rax,%rcx
   27ce5:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27ce9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27cf0:	00 
   27cf1:	ff 32                	pushq  (%rdx)
   27cf3:	48 8b 15 1e bc 72 00 	mov    0x72bc1e(%rip),%rdx        # 753918 <tmpquadone>
   27cfa:	48 8b 0d 2f 5f 5d 00 	mov    0x5d5f2f(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27d01:	48 c7 05 44 bc 72 00 	movq   $0x1,0x72bc44(%rip)        # 753950 <cmpPassed>
   27d08:	01 00 00 00 
   27d0c:	e8 f7 22 fe ff       	callq  a008 <_storeDataFn>
   27d11:	3d 3d 73 61 6c       	cmp    $0x6c61733d,%eax
   27d16:	0f 84 99 00 00 00    	je     27db5 <close_stream+0xe85>
   27d1c:	50                   	push   %rax
   27d1d:	48 b8 6d b5 d6 a7 00 	movabs $0xa7d6b56d,%rax
   27d24:	00 00 00 
   27d27:	48 89 05 12 bc 72 00 	mov    %rax,0x72bc12(%rip)        # 753940 <edgeId>
   27d2e:	58                   	pop    %rax
   27d2f:	e8 3c 22 fe ff       	callq  9f70 <_storeEdge>
   27d34:	bf 24 03 00 00       	mov    $0x324,%edi
   27d39:	e8 52 51 fe ff       	callq  ce90 <lava_get>
   27d3e:	48 89 15 d3 bb 72 00 	mov    %rdx,0x72bbd3(%rip)        # 753918 <tmpquadone>
   27d45:	48 89 0d e4 5e 5d 00 	mov    %rcx,0x5d5ee4(%rip)        # 5fdc30 <tmpquadtwo>
   27d4c:	48 8d 15 9d 5e 5d 00 	lea    0x5d5e9d(%rip),%rdx        # 5fdbf0 <funcinptr>
   27d53:	48 c7 02 3f 01 00 00 	movq   $0x13f,(%rdx)
   27d5a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27d61:	00 
   27d62:	48 c7 c1 6c 61 73 3d 	mov    $0x3d73616c,%rcx
   27d69:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27d6d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27d74:	00 
   27d75:	48 89 c1             	mov    %rax,%rcx
   27d78:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27d7c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27d83:	00 
   27d84:	ff 32                	pushq  (%rdx)
   27d86:	48 8b 15 8b bb 72 00 	mov    0x72bb8b(%rip),%rdx        # 753918 <tmpquadone>
   27d8d:	48 8b 0d 9c 5e 5d 00 	mov    0x5d5e9c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27d94:	48 c7 05 b1 bb 72 00 	movq   $0x1,0x72bbb1(%rip)        # 753950 <cmpPassed>
   27d9b:	01 00 00 00 
   27d9f:	e8 64 22 fe ff       	callq  a008 <_storeDataFn>
   27da4:	3d 6c 61 73 3d       	cmp    $0x3d73616c,%eax
   27da9:	40 0f 94 c7          	sete   %dil
   27dad:	44 0f b6 c7          	movzbl %dil,%r8d
   27db1:	41 0f af e8          	imul   %r8d,%ebp
   27db5:	50                   	push   %rax
   27db6:	48 b8 5a eb 53 ca 00 	movabs $0xca53eb5a,%rax
   27dbd:	00 00 00 
   27dc0:	48 89 05 79 bb 72 00 	mov    %rax,0x72bb79(%rip)        # 753940 <edgeId>
   27dc7:	58                   	pop    %rax
   27dc8:	e8 a3 21 fe ff       	callq  9f70 <_storeEdge>
   27dcd:	bf 25 03 00 00       	mov    $0x325,%edi
   27dd2:	4c 01 ed             	add    %r13,%rbp
   27dd5:	e8 b6 50 fe ff       	callq  ce90 <lava_get>
   27dda:	bf 25 03 00 00       	mov    $0x325,%edi
   27ddf:	89 c3                	mov    %eax,%ebx
   27de1:	e8 aa 50 fe ff       	callq  ce90 <lava_get>
   27de6:	48 89 15 2b bb 72 00 	mov    %rdx,0x72bb2b(%rip)        # 753918 <tmpquadone>
   27ded:	48 89 0d 3c 5e 5d 00 	mov    %rcx,0x5d5e3c(%rip)        # 5fdc30 <tmpquadtwo>
   27df4:	48 8d 15 f5 5d 5d 00 	lea    0x5d5df5(%rip),%rdx        # 5fdbf0 <funcinptr>
   27dfb:	48 c7 02 40 01 00 00 	movq   $0x140,(%rdx)
   27e02:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27e09:	00 
   27e0a:	48 c7 c1 3c 73 61 6c 	mov    $0x6c61733c,%rcx
   27e11:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27e15:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27e1c:	00 
   27e1d:	48 89 c1             	mov    %rax,%rcx
   27e20:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27e24:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27e2b:	00 
   27e2c:	ff 32                	pushq  (%rdx)
   27e2e:	48 8b 15 e3 ba 72 00 	mov    0x72bae3(%rip),%rdx        # 753918 <tmpquadone>
   27e35:	48 8b 0d f4 5d 5d 00 	mov    0x5d5df4(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27e3c:	48 c7 05 09 bb 72 00 	movq   $0x1,0x72bb09(%rip)        # 753950 <cmpPassed>
   27e43:	01 00 00 00 
   27e47:	e8 bc 21 fe ff       	callq  a008 <_storeDataFn>
   27e4c:	3d 3c 73 61 6c       	cmp    $0x6c61733c,%eax
   27e51:	0f 84 96 00 00 00    	je     27eed <close_stream+0xfbd>
   27e57:	50                   	push   %rax
   27e58:	48 c7 c0 7d 4a f9 23 	mov    $0x23f94a7d,%rax
   27e5f:	48 89 05 da ba 72 00 	mov    %rax,0x72bada(%rip)        # 753940 <edgeId>
   27e66:	58                   	pop    %rax
   27e67:	e8 04 21 fe ff       	callq  9f70 <_storeEdge>
   27e6c:	bf 25 03 00 00       	mov    $0x325,%edi
   27e71:	e8 1a 50 fe ff       	callq  ce90 <lava_get>
   27e76:	48 89 15 9b ba 72 00 	mov    %rdx,0x72ba9b(%rip)        # 753918 <tmpquadone>
   27e7d:	48 89 0d ac 5d 5d 00 	mov    %rcx,0x5d5dac(%rip)        # 5fdc30 <tmpquadtwo>
   27e84:	48 8d 15 65 5d 5d 00 	lea    0x5d5d65(%rip),%rdx        # 5fdbf0 <funcinptr>
   27e8b:	48 c7 02 41 01 00 00 	movq   $0x141,(%rdx)
   27e92:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27e99:	00 
   27e9a:	48 c7 c1 6c 61 73 3c 	mov    $0x3c73616c,%rcx
   27ea1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27ea5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27eac:	00 
   27ead:	48 89 c1             	mov    %rax,%rcx
   27eb0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27eb4:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27ebb:	00 
   27ebc:	ff 32                	pushq  (%rdx)
   27ebe:	48 8b 15 53 ba 72 00 	mov    0x72ba53(%rip),%rdx        # 753918 <tmpquadone>
   27ec5:	48 8b 0d 64 5d 5d 00 	mov    0x5d5d64(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27ecc:	48 c7 05 79 ba 72 00 	movq   $0x1,0x72ba79(%rip)        # 753950 <cmpPassed>
   27ed3:	01 00 00 00 
   27ed7:	e8 2c 21 fe ff       	callq  a008 <_storeDataFn>
   27edc:	3d 6c 61 73 3c       	cmp    $0x3c73616c,%eax
   27ee1:	41 0f 94 c1          	sete   %r9b
   27ee5:	45 0f b6 d1          	movzbl %r9b,%r10d
   27ee9:	41 0f af da          	imul   %r10d,%ebx
   27eed:	50                   	push   %rax
   27eee:	48 c7 c0 a5 fc 91 42 	mov    $0x4291fca5,%rax
   27ef5:	48 89 05 44 ba 72 00 	mov    %rax,0x72ba44(%rip)        # 753940 <edgeId>
   27efc:	58                   	pop    %rax
   27efd:	e8 6e 20 fe ff       	callq  9f70 <_storeEdge>
   27f02:	41 89 db             	mov    %ebx,%r11d
   27f05:	bf 26 03 00 00       	mov    $0x326,%edi
   27f0a:	4c 01 dd             	add    %r11,%rbp
   27f0d:	e8 7e 4f fe ff       	callq  ce90 <lava_get>
   27f12:	bf 26 03 00 00       	mov    $0x326,%edi
   27f17:	41 89 c5             	mov    %eax,%r13d
   27f1a:	e8 71 4f fe ff       	callq  ce90 <lava_get>
   27f1f:	48 89 15 f2 b9 72 00 	mov    %rdx,0x72b9f2(%rip)        # 753918 <tmpquadone>
   27f26:	48 89 0d 03 5d 5d 00 	mov    %rcx,0x5d5d03(%rip)        # 5fdc30 <tmpquadtwo>
   27f2d:	48 8d 15 bc 5c 5d 00 	lea    0x5d5cbc(%rip),%rdx        # 5fdbf0 <funcinptr>
   27f34:	48 c7 02 42 01 00 00 	movq   $0x142,(%rdx)
   27f3b:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27f42:	00 
   27f43:	48 c7 c1 3b 73 61 6c 	mov    $0x6c61733b,%rcx
   27f4a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27f4e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27f55:	00 
   27f56:	48 89 c1             	mov    %rax,%rcx
   27f59:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27f5d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27f64:	00 
   27f65:	ff 32                	pushq  (%rdx)
   27f67:	48 8b 15 aa b9 72 00 	mov    0x72b9aa(%rip),%rdx        # 753918 <tmpquadone>
   27f6e:	48 8b 0d bb 5c 5d 00 	mov    0x5d5cbb(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   27f75:	48 c7 05 d0 b9 72 00 	movq   $0x1,0x72b9d0(%rip)        # 753950 <cmpPassed>
   27f7c:	01 00 00 00 
   27f80:	e8 83 20 fe ff       	callq  a008 <_storeDataFn>
   27f85:	3d 3b 73 61 6c       	cmp    $0x6c61733b,%eax
   27f8a:	0f 84 94 00 00 00    	je     28024 <close_stream+0x10f4>
   27f90:	50                   	push   %rax
   27f91:	48 c7 c0 1f 29 f4 2b 	mov    $0x2bf4291f,%rax
   27f98:	48 89 05 a1 b9 72 00 	mov    %rax,0x72b9a1(%rip)        # 753940 <edgeId>
   27f9f:	58                   	pop    %rax
   27fa0:	e8 cb 1f fe ff       	callq  9f70 <_storeEdge>
   27fa5:	bf 26 03 00 00       	mov    $0x326,%edi
   27faa:	e8 e1 4e fe ff       	callq  ce90 <lava_get>
   27faf:	48 89 15 62 b9 72 00 	mov    %rdx,0x72b962(%rip)        # 753918 <tmpquadone>
   27fb6:	48 89 0d 73 5c 5d 00 	mov    %rcx,0x5d5c73(%rip)        # 5fdc30 <tmpquadtwo>
   27fbd:	48 8d 15 2c 5c 5d 00 	lea    0x5d5c2c(%rip),%rdx        # 5fdbf0 <funcinptr>
   27fc4:	48 c7 02 43 01 00 00 	movq   $0x143,(%rdx)
   27fcb:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   27fd2:	00 
   27fd3:	48 c7 c1 6c 61 73 3b 	mov    $0x3b73616c,%rcx
   27fda:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   27fde:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   27fe5:	00 
   27fe6:	48 89 c1             	mov    %rax,%rcx
   27fe9:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   27fed:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   27ff4:	00 
   27ff5:	ff 32                	pushq  (%rdx)
   27ff7:	48 8b 15 1a b9 72 00 	mov    0x72b91a(%rip),%rdx        # 753918 <tmpquadone>
   27ffe:	48 8b 0d 2b 5c 5d 00 	mov    0x5d5c2b(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28005:	48 c7 05 40 b9 72 00 	movq   $0x1,0x72b940(%rip)        # 753950 <cmpPassed>
   2800c:	01 00 00 00 
   28010:	e8 f3 1f fe ff       	callq  a008 <_storeDataFn>
   28015:	3d 6c 61 73 3b       	cmp    $0x3b73616c,%eax
   2801a:	0f 94 c0             	sete   %al
   2801d:	0f b6 d0             	movzbl %al,%edx
   28020:	44 0f af ea          	imul   %edx,%r13d
   28024:	50                   	push   %rax
   28025:	48 b8 14 fa 95 8d 00 	movabs $0x8d95fa14,%rax
   2802c:	00 00 00 
   2802f:	48 89 05 0a b9 72 00 	mov    %rax,0x72b90a(%rip)        # 753940 <edgeId>
   28036:	58                   	pop    %rax
   28037:	e8 34 1f fe ff       	callq  9f70 <_storeEdge>
   2803c:	44 89 e9             	mov    %r13d,%ecx
   2803f:	48 01 e9             	add    %rbp,%rcx
   28042:	48 8d 34 49          	lea    (%rcx,%rcx,2),%rsi
   28046:	48 8d 2c f6          	lea    (%rsi,%rsi,8),%rbp
   2804a:	49 8d 3c ec          	lea    (%r12,%rbp,8),%rdi
   2804e:	e8 6d 98 fd ff       	callq  18c0 <__fpending@plt>
   28053:	41 8b 1c 24          	mov    (%r12),%ebx
  const bool prev_fail = (ferror (stream) != 0);
  const bool fclose_fail = (fclose (stream) != 0);
   28057:	4c 89 e7             	mov    %r12,%rdi
  const bool some_pending = (__fpending (stream+(lava_get(774))*(0x6c61735b==(lava_get(774))||0x5b73616c==(lava_get(774)))+(lava_get(776))*(0x6c617359==(lava_get(776))||0x5973616c==(lava_get(776)))+(lava_get(778))*(0x6c617357==(lava_get(778))||0x5773616c==(lava_get(778)))+(lava_get(780))*(0x6c617355==(lava_get(780))||0x5573616c==(lava_get(780)))+(lava_get(782))*(0x6c617353==(lava_get(782))||0x5373616c==(lava_get(782)))+(lava_get(784))*(0x6c617351==(lava_get(784))||0x5173616c==(lava_get(784)))+(lava_get(786))*(0x6c61734f==(lava_get(786))||0x4f73616c==(lava_get(786)))+(lava_get(788))*(0x6c61734d==(lava_get(788))||0x4d73616c==(lava_get(788)))+(lava_get(790))*(0x6c61734b==(lava_get(790))||0x4b73616c==(lava_get(790)))+(lava_get(792))*(0x6c617349==(lava_get(792))||0x4973616c==(lava_get(792)))+(lava_get(798))*(0x6c617343==(lava_get(798))||0x4373616c==(lava_get(798)))+(lava_get(804))*(0x6c61733d==(lava_get(804))||0x3d73616c==(lava_get(804)))+(lava_get(805))*(0x6c61733c==(lava_get(805))||0x3c73616c==(lava_get(805)))+(lava_get(806))*(0x6c61733b==(lava_get(806))||0x3b73616c==(lava_get(806)))) != 0);
   2805a:	49 89 c5             	mov    %rax,%r13
  const bool fclose_fail = (fclose (stream) != 0);
   2805d:	e8 4e cc ff ff       	callq  24cb0 <rpl_fclose>
   28062:	83 e3 20             	and    $0x20,%ebx
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
   28065:	85 db                	test   %ebx,%ebx
   28067:	75 77                	jne    280e0 <close_stream+0x11b0>
   28069:	50                   	push   %rax
   2806a:	48 c7 c0 11 be f8 44 	mov    $0x44f8be11,%rax
   28071:	48 89 05 c8 b8 72 00 	mov    %rax,0x72b8c8(%rip)        # 753940 <edgeId>
   28078:	58                   	pop    %rax
   28079:	e8 f2 1e fe ff       	callq  9f70 <_storeEdge>
   2807e:	85 c0                	test   %eax,%eax
   28080:	74 3b                	je     280bd <close_stream+0x118d>
   28082:	50                   	push   %rax
   28083:	48 b8 c2 17 9f a8 00 	movabs $0xa89f17c2,%rax
   2808a:	00 00 00 
   2808d:	48 89 05 ac b8 72 00 	mov    %rax,0x72b8ac(%rip)        # 753940 <edgeId>
   28094:	58                   	pop    %rax
   28095:	e8 d6 1e fe ff       	callq  9f70 <_storeEdge>
   2809a:	4d 85 ed             	test   %r13,%r13
    {
      if (! fclose_fail)
        errno = 0;
      return EOF;
   2809d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
   280a2:	0f 84 b0 00 00 00    	je     28158 <close_stream+0x1228>
   280a8:	50                   	push   %rax
   280a9:	48 c7 c0 2f 3e 51 31 	mov    $0x31513e2f,%rax
   280b0:	48 89 05 89 b8 72 00 	mov    %rax,0x72b889(%rip)        # 753940 <edgeId>
   280b7:	58                   	pop    %rax
   280b8:	e8 b3 1e fe ff       	callq  9f70 <_storeEdge>
   280bd:	50                   	push   %rax
   280be:	48 c7 c0 17 9f a8 18 	mov    $0x18a89f17,%rax
   280c5:	48 89 05 74 b8 72 00 	mov    %rax,0x72b874(%rip)        # 753940 <edgeId>
   280cc:	58                   	pop    %rax
   280cd:	e8 9e 1e fe ff       	callq  9f70 <_storeEdge>
    }

  return 0;
}
   280d2:	48 83 c4 08          	add    $0x8,%rsp
   280d6:	5b                   	pop    %rbx
   280d7:	5d                   	pop    %rbp
   280d8:	41 5c                	pop    %r12
   280da:	41 5d                	pop    %r13
   280dc:	c3                   	retq   
   280dd:	0f 1f 00             	nopl   (%rax)
   280e0:	50                   	push   %rax
   280e1:	48 c7 c0 8a 51 25 09 	mov    $0x925518a,%rax
   280e8:	48 89 05 51 b8 72 00 	mov    %rax,0x72b851(%rip)        # 753940 <edgeId>
   280ef:	58                   	pop    %rax
   280f0:	e8 7b 1e fe ff       	callq  9f70 <_storeEdge>
      if (! fclose_fail)
   280f5:	85 c0                	test   %eax,%eax
   280f7:	75 37                	jne    28130 <close_stream+0x1200>
   280f9:	50                   	push   %rax
   280fa:	48 c7 c0 18 55 92 30 	mov    $0x30925518,%rax
   28101:	48 89 05 38 b8 72 00 	mov    %rax,0x72b838(%rip)        # 753940 <edgeId>
   28108:	58                   	pop    %rax
   28109:	e8 62 1e fe ff       	callq  9f70 <_storeEdge>
        errno = 0;
   2810e:	e8 7d 97 fd ff       	callq  1890 <__errno_location@plt>
   28113:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
   28119:	48 83 c4 08          	add    $0x8,%rsp
      return EOF;
   2811d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   28122:	5b                   	pop    %rbx
   28123:	5d                   	pop    %rbp
   28124:	41 5c                	pop    %r12
   28126:	41 5d                	pop    %r13
   28128:	c3                   	retq   
   28129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   28130:	50                   	push   %rax
   28131:	48 c7 c0 06 3c f6 14 	mov    $0x14f63c06,%rax
   28138:	48 89 05 01 b8 72 00 	mov    %rax,0x72b801(%rip)        # 753940 <edgeId>
   2813f:	58                   	pop    %rax
   28140:	e8 2b 1e fe ff       	callq  9f70 <_storeEdge>
   28145:	48 83 c4 08          	add    $0x8,%rsp
      return EOF;
   28149:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   2814e:	5b                   	pop    %rbx
   2814f:	5d                   	pop    %rbp
   28150:	41 5c                	pop    %r12
   28152:	41 5d                	pop    %r13
   28154:	c3                   	retq   
   28155:	0f 1f 00             	nopl   (%rax)
   28158:	50                   	push   %rax
   28159:	48 b8 14 50 be 83 00 	movabs $0x83be5014,%rax
   28160:	00 00 00 
   28163:	48 89 05 d6 b7 72 00 	mov    %rax,0x72b7d6(%rip)        # 753940 <edgeId>
   2816a:	58                   	pop    %rax
   2816b:	e8 00 1e fe ff       	callq  9f70 <_storeEdge>
  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
   28170:	e8 1b 97 fd ff       	callq  1890 <__errno_location@plt>
   28175:	48 89 15 9c b7 72 00 	mov    %rdx,0x72b79c(%rip)        # 753918 <tmpquadone>
   2817c:	48 89 0d ad 5a 5d 00 	mov    %rcx,0x5d5aad(%rip)        # 5fdc30 <tmpquadtwo>
   28183:	48 8d 15 66 5a 5d 00 	lea    0x5d5a66(%rip),%rdx        # 5fdbf0 <funcinptr>
   2818a:	48 c7 02 44 01 00 00 	movq   $0x144,(%rdx)
   28191:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   28198:	00 
   28199:	48 c7 c1 09 00 00 00 	mov    $0x9,%rcx
   281a0:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   281a4:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   281ab:	00 
   281ac:	48 8b 08             	mov    (%rax),%rcx
   281af:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   281b3:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   281ba:	00 
   281bb:	ff 32                	pushq  (%rdx)
   281bd:	48 8b 15 54 b7 72 00 	mov    0x72b754(%rip),%rdx        # 753918 <tmpquadone>
   281c4:	48 8b 0d 65 5a 5d 00 	mov    0x5d5a65(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   281cb:	48 c7 05 7a b7 72 00 	movq   $0x1,0x72b77a(%rip)        # 753950 <cmpPassed>
   281d2:	01 00 00 00 
   281d6:	e8 2d 1e fe ff       	callq  a008 <_storeDataFn>
   281db:	83 38 09             	cmpl   $0x9,(%rax)
   281de:	41 0f 95 c4          	setne  %r12b
}
   281e2:	48 83 c4 08          	add    $0x8,%rsp
  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
   281e6:	41 0f b6 c4          	movzbl %r12b,%eax
}
   281ea:	5b                   	pop    %rbx
  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
   281eb:	f7 d8                	neg    %eax
}
   281ed:	5d                   	pop    %rbp
   281ee:	41 5c                	pop    %r12
   281f0:	41 5d                	pop    %r13
   281f2:	c3                   	retq   
   281f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   281fa:	00 00 00 
   281fd:	0f 1f 00             	nopl   (%rax)

0000000000028200 <locale_charset>:
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
   28200:	41 57                	push   %r15
   28202:	41 56                	push   %r14
#if !(defined WINDOWS_NATIVE || defined OS2)

# if HAVE_LANGINFO_CODESET

  /* Most systems support nl_langinfo (CODESET) nowadays.  */
  codeset = nl_langinfo (CODESET);
   28204:	bf 0e 00 00 00       	mov    $0xe,%edi
{
   28209:	41 55                	push   %r13
   2820b:	41 54                	push   %r12
   2820d:	55                   	push   %rbp
   2820e:	53                   	push   %rbx

#endif

  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";
   2820f:	48 8d 1d 03 1c 00 00 	lea    0x1c03(%rip),%rbx        # 29e19 <quoting_style_vals+0x79>
{
   28216:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
   2821d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   28224:	00 00 
   28226:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   2822d:	00 
   2822e:	31 c0                	xor    %eax,%eax
  codeset = nl_langinfo (CODESET);
   28230:	e8 9b 98 fd ff       	callq  1ad0 <nl_langinfo@plt>
  cp = charset_aliases;
   28235:	4c 8b 3d 94 59 5d 00 	mov    0x5d5994(%rip),%r15        # 5fdbd0 <charset_aliases>
    codeset = "";
   2823c:	48 85 c0             	test   %rax,%rax
   2823f:	48 0f 45 d8          	cmovne %rax,%rbx
  if (cp == NULL)
   28243:	4d 85 ff             	test   %r15,%r15
   28246:	75 52                	jne    2829a <locale_charset+0x9a>
   28248:	50                   	push   %rax
   28249:	48 c7 c0 15 69 d9 4c 	mov    $0x4cd96915,%rax
   28250:	48 89 05 e9 b6 72 00 	mov    %rax,0x72b6e9(%rip)        # 753940 <edgeId>
   28257:	58                   	pop    %rax
   28258:	e8 3b 24 fe ff       	callq  a698 <_storeEdge>
   2825d:	e9 9e 02 00 00       	jmpq   28500 <locale_charset+0x300>
   28262:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   28268:	50                   	push   %rax
   28269:	48 b8 48 cb 66 fa 00 	movabs $0xfa66cb48,%rax
   28270:	00 00 00 
   28273:	48 89 05 c6 b6 72 00 	mov    %rax,0x72b6c6(%rip)        # 753940 <edgeId>
   2827a:	58                   	pop    %rax
   2827b:	e8 18 24 fe ff       	callq  a698 <_storeEdge>

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
   28280:	4c 89 ff             	mov    %r15,%rdi
   28283:	e8 b8 96 fd ff       	callq  1940 <strlen@plt>
   28288:	4d 8d 6c 07 01       	lea    0x1(%r15,%rax,1),%r13
   2828d:	4c 89 ef             	mov    %r13,%rdi
   28290:	e8 ab 96 fd ff       	callq  1940 <strlen@plt>
   28295:	4d 8d 7c 05 01       	lea    0x1(%r13,%rax,1),%r15
   2829a:	50                   	push   %rax
   2829b:	48 c7 c0 9b e9 47 7a 	mov    $0x7a47e99b,%rax
   282a2:	48 89 05 97 b6 72 00 	mov    %rax,0x72b697(%rip)        # 753940 <edgeId>
   282a9:	58                   	pop    %rax
   282aa:	e8 e9 23 fe ff       	callq  a698 <_storeEdge>
       *aliases != '\0';
   282af:	41 0f b6 2f          	movzbl (%r15),%ebp
  for (aliases = get_charset_aliases ();
   282b3:	40 84 ed             	test   %bpl,%bpl
   282b6:	0f 84 7a 01 00 00    	je     28436 <locale_charset+0x236>
   282bc:	50                   	push   %rax
   282bd:	48 b8 4c 3f d2 eb 00 	movabs $0xebd23f4c,%rax
   282c4:	00 00 00 
   282c7:	48 89 05 72 b6 72 00 	mov    %rax,0x72b672(%rip)        # 753940 <edgeId>
   282ce:	58                   	pop    %rax
   282cf:	e8 c4 23 fe ff       	callq  a698 <_storeEdge>
    if (strcmp (codeset, aliases) == 0
   282d4:	4c 89 fe             	mov    %r15,%rsi
   282d7:	48 89 df             	mov    %rbx,%rdi
   282da:	e8 a1 97 fd ff       	callq  1a80 <strcmp@plt>
   282df:	85 c0                	test   %eax,%eax
   282e1:	0f 84 2a 01 00 00    	je     28411 <locale_charset+0x211>
   282e7:	50                   	push   %rax
   282e8:	48 b8 7e a4 d7 99 00 	movabs $0x99d7a47e,%rax
   282ef:	00 00 00 
   282f2:	48 89 05 47 b6 72 00 	mov    %rax,0x72b647(%rip)        # 753940 <edgeId>
   282f9:	58                   	pop    %rax
   282fa:	e8 99 23 fe ff       	callq  a698 <_storeEdge>
        || (aliases[0] == '*' && aliases[1] == '\0'))
   282ff:	48 89 15 12 b6 72 00 	mov    %rdx,0x72b612(%rip)        # 753918 <tmpquadone>
   28306:	48 89 0d 23 59 5d 00 	mov    %rcx,0x5d5923(%rip)        # 5fdc30 <tmpquadtwo>
   2830d:	48 8d 15 dc 58 5d 00 	lea    0x5d58dc(%rip),%rdx        # 5fdbf0 <funcinptr>
   28314:	48 c7 02 24 07 00 00 	movq   $0x724,(%rdx)
   2831b:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   28322:	00 
   28323:	48 c7 c1 2a 00 00 00 	mov    $0x2a,%rcx
   2832a:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2832e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28335:	00 
   28336:	48 89 e9             	mov    %rbp,%rcx
   28339:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2833d:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28344:	00 
   28345:	ff 32                	pushq  (%rdx)
   28347:	48 8b 15 ca b5 72 00 	mov    0x72b5ca(%rip),%rdx        # 753918 <tmpquadone>
   2834e:	48 8b 0d db 58 5d 00 	mov    0x5d58db(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28355:	48 c7 05 f0 b5 72 00 	movq   $0x1,0x72b5f0(%rip)        # 753950 <cmpPassed>
   2835c:	01 00 00 00 
   28360:	e8 cb 23 fe ff       	callq  a730 <_storeDataFn>
   28365:	40 80 fd 2a          	cmp    $0x2a,%bpl
   28369:	0f 85 f9 fe ff ff    	jne    28268 <locale_charset+0x68>
   2836f:	50                   	push   %rax
   28370:	48 b8 8f f4 3a 93 00 	movabs $0x933af48f,%rax
   28377:	00 00 00 
   2837a:	48 89 05 bf b5 72 00 	mov    %rax,0x72b5bf(%rip)        # 753940 <edgeId>
   28381:	58                   	pop    %rax
   28382:	e8 11 23 fe ff       	callq  a698 <_storeEdge>
   28387:	48 89 15 8a b5 72 00 	mov    %rdx,0x72b58a(%rip)        # 753918 <tmpquadone>
   2838e:	48 89 0d 9b 58 5d 00 	mov    %rcx,0x5d589b(%rip)        # 5fdc30 <tmpquadtwo>
   28395:	48 8d 15 54 58 5d 00 	lea    0x5d5854(%rip),%rdx        # 5fdbf0 <funcinptr>
   2839c:	48 c7 02 25 07 00 00 	movq   $0x725,(%rdx)
   283a3:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   283aa:	00 
   283ab:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   283b2:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   283b6:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   283bd:	00 
   283be:	49 8b 4f 01          	mov    0x1(%r15),%rcx
   283c2:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   283c6:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   283cd:	00 
   283ce:	ff 32                	pushq  (%rdx)
   283d0:	48 8b 15 41 b5 72 00 	mov    0x72b541(%rip),%rdx        # 753918 <tmpquadone>
   283d7:	48 8b 0d 52 58 5d 00 	mov    0x5d5852(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   283de:	48 c7 05 67 b5 72 00 	movq   $0x1,0x72b567(%rip)        # 753950 <cmpPassed>
   283e5:	01 00 00 00 
   283e9:	e8 42 23 fe ff       	callq  a730 <_storeDataFn>
   283ee:	41 80 7f 01 00       	cmpb   $0x0,0x1(%r15)
   283f3:	0f 85 6f fe ff ff    	jne    28268 <locale_charset+0x68>
   283f9:	50                   	push   %rax
   283fa:	48 b8 91 5e 67 b2 00 	movabs $0xb2675e91,%rax
   28401:	00 00 00 
   28404:	48 89 05 35 b5 72 00 	mov    %rax,0x72b535(%rip)        # 753940 <edgeId>
   2840b:	58                   	pop    %rax
   2840c:	e8 87 22 fe ff       	callq  a698 <_storeEdge>
   28411:	50                   	push   %rax
   28412:	48 b8 48 af 33 d9 00 	movabs $0xd933af48,%rax
   28419:	00 00 00 
   2841c:	48 89 05 1d b5 72 00 	mov    %rax,0x72b51d(%rip)        # 753940 <edgeId>
   28423:	58                   	pop    %rax
   28424:	e8 6f 22 fe ff       	callq  a698 <_storeEdge>
      {
        codeset = aliases + strlen (aliases) + 1;
   28429:	4c 89 ff             	mov    %r15,%rdi
   2842c:	e8 0f 95 fd ff       	callq  1940 <strlen@plt>
   28431:	49 8d 5c 07 01       	lea    0x1(%r15,%rax,1),%rbx
   28436:	50                   	push   %rax
   28437:	48 b8 bd ce 64 eb 00 	movabs $0xeb64cebd,%rax
   2843e:	00 00 00 
   28441:	48 89 05 f8 b4 72 00 	mov    %rax,0x72b4f8(%rip)        # 753940 <edgeId>
   28448:	58                   	pop    %rax
   28449:	e8 4a 22 fe ff       	callq  a698 <_storeEdge>

  /* Don't return an empty string.  GNU libc and GNU libiconv interpret
     the empty string as denoting "the locale's character encoding",
     thus GNU libiconv would call this function a second time.  */
  if (codeset[0] == '\0')
    codeset = "ASCII";
   2844e:	48 89 15 c3 b4 72 00 	mov    %rdx,0x72b4c3(%rip)        # 753918 <tmpquadone>
   28455:	48 89 0d d4 57 5d 00 	mov    %rcx,0x5d57d4(%rip)        # 5fdc30 <tmpquadtwo>
   2845c:	48 8d 15 8d 57 5d 00 	lea    0x5d578d(%rip),%rdx        # 5fdbf0 <funcinptr>
   28463:	48 c7 02 26 07 00 00 	movq   $0x726,(%rdx)
   2846a:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   28471:	00 
   28472:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   28479:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2847d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28484:	00 
   28485:	48 8b 0b             	mov    (%rbx),%rcx
   28488:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2848c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28493:	00 
   28494:	ff 32                	pushq  (%rdx)
   28496:	48 8b 15 7b b4 72 00 	mov    0x72b47b(%rip),%rdx        # 753918 <tmpquadone>
   2849d:	48 8b 0d 8c 57 5d 00 	mov    0x5d578c(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   284a4:	48 c7 05 a1 b4 72 00 	movq   $0x1,0x72b4a1(%rip)        # 753950 <cmpPassed>
   284ab:	01 00 00 00 
   284af:	e8 7c 22 fe ff       	callq  a730 <_storeDataFn>
   284b4:	80 3b 00             	cmpb   $0x0,(%rbx)
   284b7:	48 8d 05 7d 1e 00 00 	lea    0x1e7d(%rip),%rax        # 2a33b <__PRETTY_FUNCTION__.4157+0xb>
   284be:	48 0f 45 c3          	cmovne %rbx,%rax
  if (strcmp (codeset, "UTF-8") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)
    codeset = "ASCII";
#endif

  return codeset;
}
   284c2:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
   284c9:	00 
   284ca:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   284d1:	00 00 
   284d3:	0f 85 c1 0d 00 00    	jne    2929a <locale_charset+0x109a>
   284d9:	50                   	push   %rax
   284da:	48 c7 c0 ce 64 eb 56 	mov    $0x56eb64ce,%rax
   284e1:	48 89 05 58 b4 72 00 	mov    %rax,0x72b458(%rip)        # 753940 <edgeId>
   284e8:	58                   	pop    %rax
   284e9:	e8 aa 21 fe ff       	callq  a698 <_storeEdge>
   284ee:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   284f5:	5b                   	pop    %rbx
   284f6:	5d                   	pop    %rbp
   284f7:	41 5c                	pop    %r12
   284f9:	41 5d                	pop    %r13
   284fb:	41 5e                	pop    %r14
   284fd:	41 5f                	pop    %r15
   284ff:	c3                   	retq   
   28500:	50                   	push   %rax
   28501:	48 c7 c0 b7 5a 48 78 	mov    $0x78485ab7,%rax
   28508:	48 89 05 31 b4 72 00 	mov    %rax,0x72b431(%rip)        # 753940 <edgeId>
   2850f:	58                   	pop    %rax
   28510:	e8 83 21 fe ff       	callq  a698 <_storeEdge>
      dir = getenv ("CHARSETALIASDIR");
   28515:	48 8d 3d 34 1e 00 00 	lea    0x1e34(%rip),%rdi        # 2a350 <__PRETTY_FUNCTION__.4157+0x20>
   2851c:	e8 3f 93 fd ff       	callq  1860 <getenv@plt>
      if (dir == NULL || dir[0] == '\0')
   28521:	48 85 c0             	test   %rax,%rax
      dir = getenv ("CHARSETALIASDIR");
   28524:	49 89 c5             	mov    %rax,%r13
      if (dir == NULL || dir[0] == '\0')
   28527:	0f 84 53 01 00 00    	je     28680 <locale_charset+0x480>
   2852d:	50                   	push   %rax
   2852e:	48 b8 90 f0 3a 94 00 	movabs $0x943af090,%rax
   28535:	00 00 00 
   28538:	48 89 05 01 b4 72 00 	mov    %rax,0x72b401(%rip)        # 753940 <edgeId>
   2853f:	58                   	pop    %rax
   28540:	e8 53 21 fe ff       	callq  a698 <_storeEdge>
   28545:	48 89 15 cc b3 72 00 	mov    %rdx,0x72b3cc(%rip)        # 753918 <tmpquadone>
   2854c:	48 89 0d dd 56 5d 00 	mov    %rcx,0x5d56dd(%rip)        # 5fdc30 <tmpquadtwo>
   28553:	48 8d 15 96 56 5d 00 	lea    0x5d5696(%rip),%rdx        # 5fdbf0 <funcinptr>
   2855a:	48 c7 02 27 07 00 00 	movq   $0x727,(%rdx)
   28561:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   28568:	00 
   28569:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
   28570:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   28574:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2857b:	00 
   2857c:	48 8b 08             	mov    (%rax),%rcx
   2857f:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   28583:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   2858a:	00 
   2858b:	ff 32                	pushq  (%rdx)
   2858d:	48 8b 15 84 b3 72 00 	mov    0x72b384(%rip),%rdx        # 753918 <tmpquadone>
   28594:	48 8b 0d 95 56 5d 00 	mov    0x5d5695(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   2859b:	48 c7 05 aa b3 72 00 	movq   $0x1,0x72b3aa(%rip)        # 753950 <cmpPassed>
   285a2:	01 00 00 00 
   285a6:	e8 85 21 fe ff       	callq  a730 <_storeDataFn>
   285ab:	80 38 00             	cmpb   $0x0,(%rax)
   285ae:	0f 84 cc 00 00 00    	je     28680 <locale_charset+0x480>
   285b4:	50                   	push   %rax
   285b5:	48 c7 c0 24 bc 0e 65 	mov    $0x650ebc24,%rax
   285bc:	48 89 05 7d b3 72 00 	mov    %rax,0x72b37d(%rip)        # 753940 <edgeId>
   285c3:	58                   	pop    %rax
   285c4:	e8 cf 20 fe ff       	callq  a698 <_storeEdge>
        size_t dir_len = strlen (dir);
   285c9:	48 89 c7             	mov    %rax,%rdi
   285cc:	e8 6f 93 fd ff       	callq  1940 <strlen@plt>
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
   285d1:	48 85 c0             	test   %rax,%rax
        size_t dir_len = strlen (dir);
   285d4:	49 89 c4             	mov    %rax,%r12
   285d7:	49 89 c6             	mov    %rax,%r14
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
   285da:	0f 85 11 0c 00 00    	jne    291f1 <locale_charset+0xff1>
   285e0:	50                   	push   %rax
   285e1:	48 b8 75 28 c3 c3 00 	movabs $0xc3c32875,%rax
   285e8:	00 00 00 
   285eb:	48 89 05 4e b3 72 00 	mov    %rax,0x72b34e(%rip)        # 753940 <edgeId>
   285f2:	58                   	pop    %rax
   285f3:	e8 a0 20 fe ff       	callq  a698 <_storeEdge>
   285f8:	bf 0e 00 00 00       	mov    $0xe,%edi
   285fd:	50                   	push   %rax
   285fe:	48 b8 1d ca f0 b0 00 	movabs $0xb0f0ca1d,%rax
   28605:	00 00 00 
   28608:	48 89 05 31 b3 72 00 	mov    %rax,0x72b331(%rip)        # 753940 <edgeId>
   2860f:	58                   	pop    %rax
   28610:	e8 83 20 fe ff       	callq  a698 <_storeEdge>
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
   28615:	e8 96 94 fd ff       	callq  1ab0 <malloc@plt>
        if (file_name != NULL)
   2861a:	48 85 c0             	test   %rax,%rax
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
   2861d:	48 89 c5             	mov    %rax,%rbp
        if (file_name != NULL)
   28620:	0f 85 89 01 00 00    	jne    287af <locale_charset+0x5af>
   28626:	50                   	push   %rax
   28627:	48 b8 19 1e 96 8b 00 	movabs $0x8b961e19,%rax
   2862e:	00 00 00 
   28631:	48 89 05 08 b3 72 00 	mov    %rax,0x72b308(%rip)        # 753940 <edgeId>
   28638:	58                   	pop    %rax
   28639:	e8 5a 20 fe ff       	callq  a698 <_storeEdge>
   2863e:	50                   	push   %rax
   2863f:	48 b8 86 87 e5 a2 00 	movabs $0xa2e58786,%rax
   28646:	00 00 00 
   28649:	48 89 05 f0 b2 72 00 	mov    %rax,0x72b2f0(%rip)        # 753940 <edgeId>
   28650:	58                   	pop    %rax
   28651:	e8 42 20 fe ff       	callq  a698 <_storeEdge>
        cp = "";
   28656:	4c 8d 3d bc 17 00 00 	lea    0x17bc(%rip),%r15        # 29e19 <quoting_style_vals+0x79>
   2865d:	50                   	push   %rax
   2865e:	48 c7 c0 3c 2c 17 45 	mov    $0x45172c3c,%rax
   28665:	48 89 05 d4 b2 72 00 	mov    %rax,0x72b2d4(%rip)        # 753940 <edgeId>
   2866c:	58                   	pop    %rax
   2866d:	e8 26 20 fe ff       	callq  a698 <_storeEdge>
      charset_aliases = cp;
   28672:	4c 89 3d 57 55 5d 00 	mov    %r15,0x5d5557(%rip)        # 5fdbd0 <charset_aliases>
   28679:	e9 1c fc ff ff       	jmpq   2829a <locale_charset+0x9a>
   2867e:	66 90                	xchg   %ax,%ax
   28680:	50                   	push   %rax
   28681:	48 b8 2c 17 45 fa 00 	movabs $0xfa45172c,%rax
   28688:	00 00 00 
   2868b:	48 89 05 ae b2 72 00 	mov    %rax,0x72b2ae(%rip)        # 753940 <edgeId>
   28692:	58                   	pop    %rax
   28693:	e8 00 20 fe ff       	callq  a698 <_storeEdge>
      if (dir == NULL || dir[0] == '\0')
   28698:	4c 8d 2d a2 1c 00 00 	lea    0x1ca2(%rip),%r13        # 2a341 <__PRETTY_FUNCTION__.4157+0x11>
   2869f:	bf 1d 00 00 00       	mov    $0x1d,%edi
   286a4:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
        size_t dir_len = strlen (dir);
   286aa:	41 bf 0e 00 00 00    	mov    $0xe,%r15d
   286b0:	50                   	push   %rax
   286b1:	48 c7 c0 8b 22 fd 1b 	mov    $0x1bfd228b,%rax
   286b8:	48 89 05 81 b2 72 00 	mov    %rax,0x72b281(%rip)        # 753940 <edgeId>
   286bf:	58                   	pop    %rax
   286c0:	e8 d3 1f fe ff       	callq  a698 <_storeEdge>
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
   286c5:	e8 e6 93 fd ff       	callq  1ab0 <malloc@plt>
        if (file_name != NULL)
   286ca:	48 85 c0             	test   %rax,%rax
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
   286cd:	48 89 c5             	mov    %rax,%rbp
        if (file_name != NULL)
   286d0:	0f 84 68 ff ff ff    	je     2863e <locale_charset+0x43e>
   286d6:	50                   	push   %rax
   286d7:	48 c7 c0 48 ff 86 4c 	mov    $0x4c86ff48,%rax
   286de:	48 89 05 5b b2 72 00 	mov    %rax,0x72b25b(%rip)        # 753940 <edgeId>
   286e5:	58                   	pop    %rax
   286e6:	e8 ad 1f fe ff       	callq  a698 <_storeEdge>
   286eb:	4c 89 fa             	mov    %r15,%rdx
   286ee:	4c 89 ee             	mov    %r13,%rsi
   286f1:	48 89 ef             	mov    %rbp,%rdi
   286f4:	e8 97 93 fd ff       	callq  1a90 <memcpy@plt>
              file_name[dir_len] = DIRECTORY_SEPARATOR;
   286f9:	42 c6 44 3d 00 2f    	movb   $0x2f,0x0(%rbp,%r15,1)
   286ff:	50                   	push   %rax
   28700:	48 c7 c0 86 4c d1 56 	mov    $0x56d14c86,%rax
   28707:	48 89 05 32 b2 72 00 	mov    %rax,0x72b232(%rip)        # 753940 <edgeId>
   2870e:	58                   	pop    %rax
   2870f:	e8 84 1f fe ff       	callq  a698 <_storeEdge>
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
   28714:	49 01 ec             	add    %rbp,%r12
   28717:	48 b8 63 68 61 72 73 	movabs $0x2e74657372616863,%rax
   2871e:	65 74 2e 
   28721:	ba 73 00 00 00       	mov    $0x73,%edx
   28726:	49 89 04 24          	mov    %rax,(%r12)
   2872a:	41 c7 44 24 08 61 6c 	movl   $0x61696c61,0x8(%r12)
   28731:	69 61 
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
   28733:	31 c0                	xor    %eax,%eax
   28735:	66 41 89 54 24 0c    	mov    %dx,0xc(%r12)
   2873b:	be 00 00 02 00       	mov    $0x20000,%esi
   28740:	48 89 ef             	mov    %rbp,%rdi
   28743:	e8 48 94 fd ff       	callq  1b90 <open@plt>
          if (fd < 0)
   28748:	85 c0                	test   %eax,%eax
   2874a:	41 89 c4             	mov    %eax,%r12d
   2874d:	0f 89 84 00 00 00    	jns    287d7 <locale_charset+0x5d7>
   28753:	50                   	push   %rax
   28754:	48 b8 94 3f 52 e8 00 	movabs $0xe8523f94,%rax
   2875b:	00 00 00 
   2875e:	48 89 05 db b1 72 00 	mov    %rax,0x72b1db(%rip)        # 753940 <edgeId>
   28765:	58                   	pop    %rax
   28766:	e8 2d 1f fe ff       	callq  a698 <_storeEdge>
   2876b:	50                   	push   %rax
   2876c:	48 b8 e5 8f 14 fa 00 	movabs $0xfa148fe5,%rax
   28773:	00 00 00 
   28776:	48 89 05 c3 b1 72 00 	mov    %rax,0x72b1c3(%rip)        # 753940 <edgeId>
   2877d:	58                   	pop    %rax
   2877e:	e8 15 1f fe ff       	callq  a698 <_storeEdge>
                  cp = "";
   28783:	4c 8d 3d 8f 16 00 00 	lea    0x168f(%rip),%r15        # 29e19 <quoting_style_vals+0x79>
   2878a:	50                   	push   %rax
   2878b:	48 b8 7f a4 d0 af 00 	movabs $0xafd0a47f,%rax
   28792:	00 00 00 
   28795:	48 89 05 a4 b1 72 00 	mov    %rax,0x72b1a4(%rip)        # 753940 <edgeId>
   2879c:	58                   	pop    %rax
   2879d:	e8 f6 1e fe ff       	callq  a698 <_storeEdge>
          free (file_name);
   287a2:	48 89 ef             	mov    %rbp,%rdi
   287a5:	e8 c6 90 fd ff       	callq  1870 <free@plt>
   287aa:	e9 ae fe ff ff       	jmpq   2865d <locale_charset+0x45d>
   287af:	50                   	push   %rax
   287b0:	48 c7 c0 a4 d0 af 6c 	mov    $0x6cafd0a4,%rax
   287b7:	48 89 05 82 b1 72 00 	mov    %rax,0x72b182(%rip)        # 753940 <edgeId>
   287be:	58                   	pop    %rax
   287bf:	e8 d4 1e fe ff       	callq  a698 <_storeEdge>
   287c4:	4c 89 f2             	mov    %r14,%rdx
   287c7:	4c 89 ee             	mov    %r13,%rsi
   287ca:	48 89 ef             	mov    %rbp,%rdi
   287cd:	e8 be 92 fd ff       	callq  1a90 <memcpy@plt>
   287d2:	e9 28 ff ff ff       	jmpq   286ff <locale_charset+0x4ff>
   287d7:	50                   	push   %rax
   287d8:	48 c7 c0 7e 65 a3 08 	mov    $0x8a3657e,%rax
   287df:	48 89 05 5a b1 72 00 	mov    %rax,0x72b15a(%rip)        # 753940 <edgeId>
   287e6:	58                   	pop    %rax
   287e7:	e8 ac 1e fe ff       	callq  a698 <_storeEdge>
              fp = fdopen (fd, "r");
   287ec:	48 8d 35 a6 0b 00 00 	lea    0xba6(%rip),%rsi        # 29399 <_IO_stdin_used+0x19>
   287f3:	89 c7                	mov    %eax,%edi
                  size_t res_size = 0;
   287f5:	45 31 f6             	xor    %r14d,%r14d
                  char *res_ptr = NULL;
   287f8:	45 31 ff             	xor    %r15d,%r15d
              fp = fdopen (fd, "r");
   287fb:	e8 30 93 fd ff       	callq  1b30 <fdopen@plt>
              if (fp == NULL)
   28800:	48 85 c0             	test   %rax,%rax
              fp = fdopen (fd, "r");
   28803:	49 89 c5             	mov    %rax,%r13
              if (fp == NULL)
   28806:	0f 84 86 07 00 00    	je     28f92 <locale_charset+0xd92>
   2880c:	50                   	push   %rax
   2880d:	48 b8 08 5f 7c a2 00 	movabs $0xa27c5f08,%rax
   28814:	00 00 00 
   28817:	48 89 05 22 b1 72 00 	mov    %rax,0x72b122(%rip)        # 753940 <edgeId>
   2881e:	58                   	pop    %rax
   2881f:	e8 74 1e fe ff       	callq  a698 <_storeEdge>
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
   28824:	48 8d 4c 24 60       	lea    0x60(%rsp),%rcx
   28829:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
   2882e:	48 89 0c 24          	mov    %rcx,(%rsp)
   28832:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   28837:	50                   	push   %rax
   28838:	48 c7 c0 2f 3e 51 31 	mov    $0x31513e2f,%rax
   2883f:	48 89 05 fa b0 72 00 	mov    %rax,0x72b0fa(%rip)        # 753940 <edgeId>
   28846:	58                   	pop    %rax
   28847:	e8 4c 1e fe ff       	callq  a698 <_storeEdge>
  return _IO_getc_unlocked (__fp);
   2884c:	49 8b 7d 08          	mov    0x8(%r13),%rdi
   28850:	48 89 15 c1 b0 72 00 	mov    %rdx,0x72b0c1(%rip)        # 753918 <tmpquadone>
   28857:	48 89 0d d2 53 5d 00 	mov    %rcx,0x5d53d2(%rip)        # 5fdc30 <tmpquadtwo>
   2885e:	48 8d 15 8b 53 5d 00 	lea    0x5d538b(%rip),%rdx        # 5fdbf0 <funcinptr>
   28865:	48 c7 02 28 07 00 00 	movq   $0x728,(%rdx)
   2886c:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   28873:	00 
   28874:	49 8b 4d 10          	mov    0x10(%r13),%rcx
   28878:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2887c:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28883:	00 
   28884:	48 89 f9             	mov    %rdi,%rcx
   28887:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2888b:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28892:	00 
   28893:	ff 32                	pushq  (%rdx)
   28895:	48 8b 15 7c b0 72 00 	mov    0x72b07c(%rip),%rdx        # 753918 <tmpquadone>
   2889c:	48 8b 0d 8d 53 5d 00 	mov    0x5d538d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   288a3:	48 c7 05 a2 b0 72 00 	movq   $0x1,0x72b0a2(%rip)        # 753950 <cmpPassed>
   288aa:	01 00 00 00 
   288ae:	e8 7d 1e fe ff       	callq  a730 <_storeDataFn>
   288b3:	49 3b 7d 10          	cmp    0x10(%r13),%rdi
   288b7:	0f 83 b3 04 00 00    	jae    28d70 <locale_charset+0xb70>
   288bd:	50                   	push   %rax
   288be:	48 c7 c0 7c a2 62 54 	mov    $0x5462a27c,%rax
   288c5:	48 89 05 74 b0 72 00 	mov    %rax,0x72b074(%rip)        # 753940 <edgeId>
   288cc:	58                   	pop    %rax
   288cd:	e8 c6 1d fe ff       	callq  a698 <_storeEdge>
   288d2:	50                   	push   %rax
   288d3:	48 b8 3e 51 31 aa 00 	movabs $0xaa31513e,%rax
   288da:	00 00 00 
   288dd:	48 89 05 5c b0 72 00 	mov    %rax,0x72b05c(%rip)        # 753940 <edgeId>
   288e4:	58                   	pop    %rax
   288e5:	e8 ae 1d fe ff       	callq  a698 <_storeEdge>
   288ea:	4c 8d 47 01          	lea    0x1(%rdi),%r8
   288ee:	4d 89 45 08          	mov    %r8,0x8(%r13)
   288f2:	0f b6 3f             	movzbl (%rdi),%edi
   288f5:	50                   	push   %rax
   288f6:	48 c7 c0 89 8a 51 25 	mov    $0x25518a89,%rax
   288fd:	48 89 05 3c b0 72 00 	mov    %rax,0x72b03c(%rip)        # 753940 <edgeId>
   28904:	58                   	pop    %rax
   28905:	e8 8e 1d fe ff       	callq  a698 <_storeEdge>
                      if (c == '\n' || c == ' ' || c == '\t')
   2890a:	44 8d 4f f7          	lea    -0x9(%rdi),%r9d
   2890e:	48 89 15 03 b0 72 00 	mov    %rdx,0x72b003(%rip)        # 753918 <tmpquadone>
   28915:	48 89 0d 14 53 5d 00 	mov    %rcx,0x5d5314(%rip)        # 5fdc30 <tmpquadtwo>
   2891c:	48 8d 15 cd 52 5d 00 	lea    0x5d52cd(%rip),%rdx        # 5fdbf0 <funcinptr>
   28923:	48 c7 02 29 07 00 00 	movq   $0x729,(%rdx)
   2892a:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   28931:	00 
   28932:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   28939:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2893d:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28944:	00 
   28945:	4c 89 c9             	mov    %r9,%rcx
   28948:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2894c:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28953:	00 
   28954:	ff 32                	pushq  (%rdx)
   28956:	48 8b 15 bb af 72 00 	mov    0x72afbb(%rip),%rdx        # 753918 <tmpquadone>
   2895d:	48 8b 0d cc 52 5d 00 	mov    0x5d52cc(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28964:	48 c7 05 e1 af 72 00 	movq   $0x1,0x72afe1(%rip)        # 753950 <cmpPassed>
   2896b:	01 00 00 00 
   2896f:	e8 bc 1d fe ff       	callq  a730 <_storeDataFn>
   28974:	41 83 f9 01          	cmp    $0x1,%r9d
   28978:	0f 86 b9 fe ff ff    	jbe    28837 <locale_charset+0x637>
   2897e:	50                   	push   %rax
   2897f:	48 c7 c0 2a 46 95 24 	mov    $0x2495462a,%rax
   28986:	48 89 05 b3 af 72 00 	mov    %rax,0x72afb3(%rip)        # 753940 <edgeId>
   2898d:	58                   	pop    %rax
   2898e:	e8 05 1d fe ff       	callq  a698 <_storeEdge>
   28993:	48 89 15 7e af 72 00 	mov    %rdx,0x72af7e(%rip)        # 753918 <tmpquadone>
   2899a:	48 89 0d 8f 52 5d 00 	mov    %rcx,0x5d528f(%rip)        # 5fdc30 <tmpquadtwo>
   289a1:	48 8d 15 48 52 5d 00 	lea    0x5d5248(%rip),%rdx        # 5fdbf0 <funcinptr>
   289a8:	48 c7 02 2a 07 00 00 	movq   $0x72a,(%rdx)
   289af:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   289b6:	00 
   289b7:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
   289be:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   289c2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   289c9:	00 
   289ca:	48 89 f9             	mov    %rdi,%rcx
   289cd:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   289d1:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   289d8:	00 
   289d9:	ff 32                	pushq  (%rdx)
   289db:	48 8b 15 36 af 72 00 	mov    0x72af36(%rip),%rdx        # 753918 <tmpquadone>
   289e2:	48 8b 0d 47 52 5d 00 	mov    0x5d5247(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   289e9:	48 c7 05 5c af 72 00 	movq   $0x1,0x72af5c(%rip)        # 753950 <cmpPassed>
   289f0:	01 00 00 00 
   289f4:	e8 37 1d fe ff       	callq  a730 <_storeDataFn>
   289f9:	83 ff 20             	cmp    $0x20,%edi
   289fc:	0f 84 35 fe ff ff    	je     28837 <locale_charset+0x637>
   28a02:	50                   	push   %rax
   28a03:	48 c7 c0 8a 51 25 09 	mov    $0x925518a,%rax
   28a0a:	48 89 05 2f af 72 00 	mov    %rax,0x72af2f(%rip)        # 753940 <edgeId>
   28a11:	58                   	pop    %rax
   28a12:	e8 81 1c fe ff       	callq  a698 <_storeEdge>
                      if (c == '#')
   28a17:	48 89 15 fa ae 72 00 	mov    %rdx,0x72aefa(%rip)        # 753918 <tmpquadone>
   28a1e:	48 89 0d 0b 52 5d 00 	mov    %rcx,0x5d520b(%rip)        # 5fdc30 <tmpquadtwo>
   28a25:	48 8d 15 c4 51 5d 00 	lea    0x5d51c4(%rip),%rdx        # 5fdbf0 <funcinptr>
   28a2c:	48 c7 02 2b 07 00 00 	movq   $0x72b,(%rdx)
   28a33:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   28a3a:	00 
   28a3b:	48 c7 c1 23 00 00 00 	mov    $0x23,%rcx
   28a42:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   28a46:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28a4d:	00 
   28a4e:	48 89 f9             	mov    %rdi,%rcx
   28a51:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   28a55:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28a5c:	00 
   28a5d:	ff 32                	pushq  (%rdx)
   28a5f:	48 8b 15 b2 ae 72 00 	mov    0x72aeb2(%rip),%rdx        # 753918 <tmpquadone>
   28a66:	48 8b 0d c3 51 5d 00 	mov    0x5d51c3(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28a6d:	48 c7 05 d8 ae 72 00 	movq   $0x1,0x72aed8(%rip)        # 753950 <cmpPassed>
   28a74:	01 00 00 00 
   28a78:	e8 b3 1c fe ff       	callq  a730 <_storeDataFn>
   28a7d:	83 ff 23             	cmp    $0x23,%edi
   28a80:	0f 84 da 03 00 00    	je     28e60 <locale_charset+0xc60>
   28a86:	50                   	push   %rax
   28a87:	48 c7 c0 31 aa 24 61 	mov    $0x6124aa31,%rax
   28a8e:	48 89 05 ab ae 72 00 	mov    %rax,0x72aeab(%rip)        # 753940 <edgeId>
   28a95:	58                   	pop    %rax
   28a96:	e8 fd 1b fe ff       	callq  a698 <_storeEdge>
                      ungetc (c, fp);
   28a9b:	4c 89 ee             	mov    %r13,%rsi
   28a9e:	e8 3d 90 fd ff       	callq  1ae0 <ungetc@plt>
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
   28aa3:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
   28aa8:	48 8b 0c 24          	mov    (%rsp),%rcx
   28aac:	48 8d 35 ad 18 00 00 	lea    0x18ad(%rip),%rsi        # 2a360 <__PRETTY_FUNCTION__.4157+0x30>
   28ab3:	31 c0                	xor    %eax,%eax
   28ab5:	4c 89 ef             	mov    %r13,%rdi
   28ab8:	4c 89 e2             	mov    %r12,%rdx
   28abb:	e8 40 8f fd ff       	callq  1a00 <fscanf@plt>
   28ac0:	48 89 15 51 ae 72 00 	mov    %rdx,0x72ae51(%rip)        # 753918 <tmpquadone>
   28ac7:	48 89 0d 62 51 5d 00 	mov    %rcx,0x5d5162(%rip)        # 5fdc30 <tmpquadtwo>
   28ace:	48 8d 15 1b 51 5d 00 	lea    0x5d511b(%rip),%rdx        # 5fdbf0 <funcinptr>
   28ad5:	48 c7 02 2c 07 00 00 	movq   $0x72c,(%rdx)
   28adc:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   28ae3:	00 
   28ae4:	48 c7 c1 01 00 00 00 	mov    $0x1,%rcx
   28aeb:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   28aef:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28af6:	00 
   28af7:	48 89 c1             	mov    %rax,%rcx
   28afa:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   28afe:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28b05:	00 
   28b06:	ff 32                	pushq  (%rdx)
   28b08:	48 8b 15 09 ae 72 00 	mov    0x72ae09(%rip),%rdx        # 753918 <tmpquadone>
   28b0f:	48 8b 0d 1a 51 5d 00 	mov    0x5d511a(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28b16:	48 c7 05 2f ae 72 00 	movq   $0x1,0x72ae2f(%rip)        # 753950 <cmpPassed>
   28b1d:	01 00 00 00 
   28b21:	e8 0a 1c fe ff       	callq  a730 <_storeDataFn>
   28b26:	83 f8 01             	cmp    $0x1,%eax
   28b29:	0f 8e e7 02 00 00    	jle    28e16 <locale_charset+0xc16>
   28b2f:	50                   	push   %rax
   28b30:	48 b8 49 c2 80 c7 00 	movabs $0xc780c249,%rax
   28b37:	00 00 00 
   28b3a:	48 89 05 ff ad 72 00 	mov    %rax,0x72adff(%rip)        # 753940 <edgeId>
   28b41:	58                   	pop    %rax
   28b42:	e8 51 1b fe ff       	callq  a698 <_storeEdge>
   28b47:	50                   	push   %rax
   28b48:	48 c7 c0 24 61 c0 63 	mov    $0x63c06124,%rax
   28b4f:	48 89 05 ea ad 72 00 	mov    %rax,0x72adea(%rip)        # 753940 <edgeId>
   28b56:	58                   	pop    %rax
   28b57:	e8 3c 1b fe ff       	callq  a698 <_storeEdge>
                      l1 = strlen (buf1);
   28b5c:	45 8b 14 24          	mov    (%r12),%r10d
   28b60:	49 83 c4 04          	add    $0x4,%r12
   28b64:	41 8d 82 ff fe fe fe 	lea    -0x1010101(%r10),%eax
   28b6b:	41 f7 d2             	not    %r10d
   28b6e:	44 21 d0             	and    %r10d,%eax
   28b71:	41 89 c3             	mov    %eax,%r11d
   28b74:	41 81 e3 80 80 80 80 	and    $0x80808080,%r11d
   28b7b:	74 ca                	je     28b47 <locale_charset+0x947>
   28b7d:	50                   	push   %rax
   28b7e:	48 b8 30 e0 b1 a7 00 	movabs $0xa7b1e030,%rax
   28b85:	00 00 00 
   28b88:	48 89 05 b1 ad 72 00 	mov    %rax,0x72adb1(%rip)        # 753940 <edgeId>
   28b8f:	58                   	pop    %rax
   28b90:	e8 03 1b fe ff       	callq  a698 <_storeEdge>
   28b95:	44 89 da             	mov    %r11d,%edx
   28b98:	44 89 de             	mov    %r11d,%esi
   28b9b:	4d 8d 44 24 02       	lea    0x2(%r12),%r8
   28ba0:	c1 ea 10             	shr    $0x10,%edx
   28ba3:	a9 80 80 00 00       	test   $0x8080,%eax
                      l2 = strlen (buf2);
   28ba8:	4c 8b 0c 24          	mov    (%rsp),%r9
                      l1 = strlen (buf1);
   28bac:	0f 44 f2             	cmove  %edx,%esi
   28baf:	4d 0f 45 c4          	cmovne %r12,%r8
   28bb3:	89 f1                	mov    %esi,%ecx
   28bb5:	40 00 f1             	add    %sil,%cl
   28bb8:	49 83 d8 03          	sbb    $0x3,%r8
   28bbc:	4c 2b 44 24 08       	sub    0x8(%rsp),%r8
   28bc1:	50                   	push   %rax
   28bc2:	48 b8 b1 a7 80 f2 00 	movabs $0xf280a7b1,%rax
   28bc9:	00 00 00 
   28bcc:	48 89 05 6d ad 72 00 	mov    %rax,0x72ad6d(%rip)        # 753940 <edgeId>
   28bd3:	58                   	pop    %rax
   28bd4:	e8 bf 1a fe ff       	callq  a698 <_storeEdge>
                      l2 = strlen (buf2);
   28bd9:	41 8b 39             	mov    (%r9),%edi
   28bdc:	49 83 c1 04          	add    $0x4,%r9
   28be0:	8d 87 ff fe fe fe    	lea    -0x1010101(%rdi),%eax
   28be6:	f7 d7                	not    %edi
   28be8:	21 f8                	and    %edi,%eax
   28bea:	41 89 c4             	mov    %eax,%r12d
   28bed:	41 81 e4 80 80 80 80 	and    $0x80808080,%r12d
   28bf4:	74 cb                	je     28bc1 <locale_charset+0x9c1>
   28bf6:	50                   	push   %rax
   28bf7:	48 c7 c0 53 40 f9 0e 	mov    $0xef94053,%rax
   28bfe:	48 89 05 3b ad 72 00 	mov    %rax,0x72ad3b(%rip)        # 753940 <edgeId>
   28c05:	58                   	pop    %rax
   28c06:	e8 8d 1a fe ff       	callq  a698 <_storeEdge>
   28c0b:	45 89 e2             	mov    %r12d,%r10d
   28c0e:	44 89 e7             	mov    %r12d,%edi
   28c11:	4d 8d 59 02          	lea    0x2(%r9),%r11
   28c15:	41 c1 ea 10          	shr    $0x10,%r10d
   28c19:	a9 80 80 00 00       	test   $0x8080,%eax
   28c1e:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
   28c23:	41 0f 44 fa          	cmove  %r10d,%edi
   28c27:	4d 0f 45 d9          	cmovne %r9,%r11
   28c2b:	89 fa                	mov    %edi,%edx
   28c2d:	40 00 fa             	add    %dil,%dl
   28c30:	49 83 db 03          	sbb    $0x3,%r11
   28c34:	4c 2b 1c 24          	sub    (%rsp),%r11
                      if (res_size == 0)
   28c38:	4d 85 f6             	test   %r14,%r14
                      l2 = strlen (buf2);
   28c3b:	4c 89 5c 24 10       	mov    %r11,0x10(%rsp)
   28c40:	4b 8d 34 18          	lea    (%r8,%r11,1),%rsi
                      if (res_size == 0)
   28c44:	0f 85 6d 03 00 00    	jne    28fb7 <locale_charset+0xdb7>
   28c4a:	50                   	push   %rax
   28c4b:	48 c7 c0 ef e0 36 45 	mov    $0x4536e0ef,%rax
   28c52:	48 89 05 e7 ac 72 00 	mov    %rax,0x72ace7(%rip)        # 753940 <edgeId>
   28c59:	58                   	pop    %rax
   28c5a:	e8 39 1a fe ff       	callq  a698 <_storeEdge>
                          res_ptr = (char *) malloc (res_size + 1);
   28c5f:	48 8d 7e 03          	lea    0x3(%rsi),%rdi
                          res_size = l1 + 1 + l2 + 1;
   28c63:	4c 8d 76 02          	lea    0x2(%rsi),%r14
                          res_ptr = (char *) malloc (res_size + 1);
   28c67:	e8 44 8e fd ff       	callq  1ab0 <malloc@plt>
   28c6c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   28c71:	49 89 c4             	mov    %rax,%r12
   28c74:	50                   	push   %rax
   28c75:	48 b8 6e 53 74 d4 00 	movabs $0xd474536e,%rax
   28c7c:	00 00 00 
   28c7f:	48 89 05 ba ac 72 00 	mov    %rax,0x72acba(%rip)        # 753940 <edgeId>
   28c86:	58                   	pop    %rax
   28c87:	e8 0c 1a fe ff       	callq  a698 <_storeEdge>
                      if (res_ptr == NULL)
   28c8c:	4d 85 e4             	test   %r12,%r12
   28c8f:	0f 84 2b 05 00 00    	je     291c0 <locale_charset+0xfc0>
   28c95:	50                   	push   %rax
   28c96:	48 c7 c0 6d 8a 8e 3a 	mov    $0x3a8e8a6d,%rax
   28c9d:	48 89 05 9c ac 72 00 	mov    %rax,0x72ac9c(%rip)        # 753940 <edgeId>
   28ca4:	58                   	pop    %rax
   28ca5:	e8 ee 19 fe ff       	callq  a698 <_storeEdge>
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
   28caa:	4d 89 f7             	mov    %r14,%r15
   28cad:	4c 2b 7c 24 10       	sub    0x10(%rsp),%r15
   28cb2:	48 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdi
   28cb9:	48 29 d7             	sub    %rdx,%rdi
#endif

__fortify_function char *
__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
{
  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
   28cbc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   28cc1:	48 83 c2 01          	add    $0x1,%rdx
   28cc5:	4c 01 ff             	add    %r15,%rdi
   28cc8:	4c 01 e7             	add    %r12,%rdi
   28ccb:	e8 c0 8d fd ff       	callq  1a90 <memcpy@plt>
   28cd0:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
   28cd5:	48 8b 34 24          	mov    (%rsp),%rsi
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
   28cd9:	4b 8d 7c 3c ff       	lea    -0x1(%r12,%r15,1),%rdi
   28cde:	4d 89 e7             	mov    %r12,%r15
   28ce1:	49 8d 50 01          	lea    0x1(%r8),%rdx
   28ce5:	e8 a6 8d fd ff       	callq  1a90 <memcpy@plt>
   28cea:	49 8b 7d 08          	mov    0x8(%r13),%rdi
   28cee:	48 89 15 23 ac 72 00 	mov    %rdx,0x72ac23(%rip)        # 753918 <tmpquadone>
   28cf5:	48 89 0d 34 4f 5d 00 	mov    %rcx,0x5d4f34(%rip)        # 5fdc30 <tmpquadtwo>
   28cfc:	48 8d 15 ed 4e 5d 00 	lea    0x5d4eed(%rip),%rdx        # 5fdbf0 <funcinptr>
   28d03:	48 c7 02 2d 07 00 00 	movq   $0x72d,(%rdx)
   28d0a:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   28d11:	00 
   28d12:	49 8b 4d 10          	mov    0x10(%r13),%rcx
   28d16:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   28d1a:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28d21:	00 
   28d22:	48 89 f9             	mov    %rdi,%rcx
   28d25:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   28d29:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28d30:	00 
   28d31:	ff 32                	pushq  (%rdx)
   28d33:	48 8b 15 de ab 72 00 	mov    0x72abde(%rip),%rdx        # 753918 <tmpquadone>
   28d3a:	48 8b 0d ef 4e 5d 00 	mov    0x5d4eef(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28d41:	48 c7 05 04 ac 72 00 	movq   $0x1,0x72ac04(%rip)        # 753950 <cmpPassed>
   28d48:	01 00 00 00 
   28d4c:	e8 df 19 fe ff       	callq  a730 <_storeDataFn>
   28d51:	49 3b 7d 10          	cmp    0x10(%r13),%rdi
   28d55:	0f 82 77 fb ff ff    	jb     288d2 <locale_charset+0x6d2>
   28d5b:	50                   	push   %rax
   28d5c:	48 c7 c0 e6 fc 21 3a 	mov    $0x3a21fce6,%rax
   28d63:	48 89 05 d6 ab 72 00 	mov    %rax,0x72abd6(%rip)        # 753940 <edgeId>
   28d6a:	58                   	pop    %rax
   28d6b:	e8 28 19 fe ff       	callq  a698 <_storeEdge>
   28d70:	50                   	push   %rax
   28d71:	48 c7 c0 39 7f 88 0e 	mov    $0xe887f39,%rax
   28d78:	48 89 05 c1 ab 72 00 	mov    %rax,0x72abc1(%rip)        # 753940 <edgeId>
   28d7f:	58                   	pop    %rax
   28d80:	e8 13 19 fe ff       	callq  a698 <_storeEdge>
   28d85:	4c 89 ef             	mov    %r13,%rdi
   28d88:	e8 c3 8a fd ff       	callq  1850 <__uflow@plt>
                      if (c == EOF)
   28d8d:	48 89 15 84 ab 72 00 	mov    %rdx,0x72ab84(%rip)        # 753918 <tmpquadone>
   28d94:	48 89 0d 95 4e 5d 00 	mov    %rcx,0x5d4e95(%rip)        # 5fdc30 <tmpquadtwo>
   28d9b:	48 8d 15 4e 4e 5d 00 	lea    0x5d4e4e(%rip),%rdx        # 5fdbf0 <funcinptr>
   28da2:	48 c7 02 2e 07 00 00 	movq   $0x72e,(%rdx)
   28da9:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   28db0:	00 
   28db1:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   28db8:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   28dbc:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28dc3:	00 
   28dc4:	48 89 c1             	mov    %rax,%rcx
   28dc7:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   28dcb:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28dd2:	00 
   28dd3:	ff 32                	pushq  (%rdx)
   28dd5:	48 8b 15 3c ab 72 00 	mov    0x72ab3c(%rip),%rdx        # 753918 <tmpquadone>
   28ddc:	48 8b 0d 4d 4e 5d 00 	mov    0x5d4e4d(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   28de3:	48 c7 05 62 ab 72 00 	movq   $0x1,0x72ab62(%rip)        # 753950 <cmpPassed>
   28dea:	01 00 00 00 
   28dee:	e8 3d 19 fe ff       	callq  a730 <_storeDataFn>
   28df3:	83 f8 ff             	cmp    $0xffffffff,%eax
   28df6:	89 c7                	mov    %eax,%edi
   28df8:	0f 85 f7 fa ff ff    	jne    288f5 <locale_charset+0x6f5>
   28dfe:	50                   	push   %rax
   28dff:	48 b8 88 0e e3 eb 00 	movabs $0xebe30e88,%rax
   28e06:	00 00 00 
   28e09:	48 89 05 30 ab 72 00 	mov    %rax,0x72ab30(%rip)        # 753940 <edgeId>
   28e10:	58                   	pop    %rax
   28e11:	e8 82 18 fe ff       	callq  a698 <_storeEdge>
   28e16:	50                   	push   %rax
   28e17:	48 c7 c0 44 87 f1 75 	mov    $0x75f18744,%rax
   28e1e:	48 89 05 1b ab 72 00 	mov    %rax,0x72ab1b(%rip)        # 753940 <edgeId>
   28e25:	58                   	pop    %rax
   28e26:	e8 6d 18 fe ff       	callq  a698 <_storeEdge>
                  fclose (fp);
   28e2b:	4c 89 ef             	mov    %r13,%rdi
   28e2e:	e8 7d be ff ff       	callq  24cb0 <rpl_fclose>
                  if (res_size == 0)
   28e33:	4d 85 f6             	test   %r14,%r14
   28e36:	0f 84 2f f9 ff ff    	je     2876b <locale_charset+0x56b>
   28e3c:	50                   	push   %rax
   28e3d:	48 c7 c0 87 f1 75 17 	mov    $0x1775f187,%rax
   28e44:	48 89 05 f5 aa 72 00 	mov    %rax,0x72aaf5(%rip)        # 753940 <edgeId>
   28e4b:	58                   	pop    %rax
   28e4c:	e8 47 18 fe ff       	callq  a698 <_storeEdge>
                      *(res_ptr + res_size) = '\0';
   28e51:	43 c6 04 37 00       	movb   $0x0,(%r15,%r14,1)
   28e56:	e9 2f f9 ff ff       	jmpq   2878a <locale_charset+0x58a>
   28e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   28e60:	50                   	push   %rax
   28e61:	48 b8 f1 75 17 89 00 	movabs $0x891775f1,%rax
   28e68:	00 00 00 
   28e6b:	48 89 05 ce aa 72 00 	mov    %rax,0x72aace(%rip)        # 753940 <edgeId>
   28e72:	58                   	pop    %rax
   28e73:	e8 20 18 fe ff       	callq  a698 <_storeEdge>
   28e78:	49 8b 4d 08          	mov    0x8(%r13),%rcx
   28e7c:	48 89 15 95 aa 72 00 	mov    %rdx,0x72aa95(%rip)        # 753918 <tmpquadone>
   28e83:	48 89 1d a6 4d 5d 00 	mov    %rbx,0x5d4da6(%rip)        # 5fdc30 <tmpquadtwo>
   28e8a:	48 8d 15 5f 4d 5d 00 	lea    0x5d4d5f(%rip),%rdx        # 5fdbf0 <funcinptr>
   28e91:	48 c7 02 2f 07 00 00 	movq   $0x72f,(%rdx)
   28e98:	48 c7 42 08 71 00 00 	movq   $0x71,0x8(%rdx)
   28e9f:	00 
   28ea0:	49 8b 5d 10          	mov    0x10(%r13),%rbx
   28ea4:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   28ea8:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28eaf:	00 
   28eb0:	48 89 cb             	mov    %rcx,%rbx
   28eb3:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   28eb7:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28ebe:	00 
   28ebf:	ff 32                	pushq  (%rdx)
   28ec1:	48 8b 15 50 aa 72 00 	mov    0x72aa50(%rip),%rdx        # 753918 <tmpquadone>
   28ec8:	48 8b 1d 61 4d 5d 00 	mov    0x5d4d61(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   28ecf:	48 c7 05 76 aa 72 00 	movq   $0x1,0x72aa76(%rip)        # 753950 <cmpPassed>
   28ed6:	01 00 00 00 
   28eda:	e8 51 18 fe ff       	callq  a730 <_storeDataFn>
   28edf:	49 3b 4d 10          	cmp    0x10(%r13),%rcx
   28ee3:	0f 83 06 01 00 00    	jae    28fef <locale_charset+0xdef>
   28ee9:	50                   	push   %rax
   28eea:	48 c7 c0 eb 2e 12 51 	mov    $0x51122eeb,%rax
   28ef1:	48 89 05 48 aa 72 00 	mov    %rax,0x72aa48(%rip)        # 753940 <edgeId>
   28ef8:	58                   	pop    %rax
   28ef9:	e8 9a 17 fe ff       	callq  a698 <_storeEdge>
   28efe:	4c 8d 49 01          	lea    0x1(%rcx),%r9
   28f02:	4d 89 4d 08          	mov    %r9,0x8(%r13)
                          while (!(c == EOF || c == '\n'));
   28f06:	48 89 15 0b aa 72 00 	mov    %rdx,0x72aa0b(%rip)        # 753918 <tmpquadone>
   28f0d:	48 89 1d 1c 4d 5d 00 	mov    %rbx,0x5d4d1c(%rip)        # 5fdc30 <tmpquadtwo>
   28f14:	48 8d 15 d5 4c 5d 00 	lea    0x5d4cd5(%rip),%rdx        # 5fdbf0 <funcinptr>
   28f1b:	48 c7 02 30 07 00 00 	movq   $0x730,(%rdx)
   28f22:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   28f29:	00 
   28f2a:	48 c7 c3 0a 00 00 00 	mov    $0xa,%rbx
   28f31:	48 89 5a 10          	mov    %rbx,0x10(%rdx)
   28f35:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   28f3c:	00 
   28f3d:	48 8b 19             	mov    (%rcx),%rbx
   28f40:	48 89 5a 20          	mov    %rbx,0x20(%rdx)
   28f44:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   28f4b:	00 
   28f4c:	ff 32                	pushq  (%rdx)
   28f4e:	48 8b 15 c3 a9 72 00 	mov    0x72a9c3(%rip),%rdx        # 753918 <tmpquadone>
   28f55:	48 8b 1d d4 4c 5d 00 	mov    0x5d4cd4(%rip),%rbx        # 5fdc30 <tmpquadtwo>
   28f5c:	48 c7 05 e9 a9 72 00 	movq   $0x1,0x72a9e9(%rip)        # 753950 <cmpPassed>
   28f63:	01 00 00 00 
   28f67:	e8 c4 17 fe ff       	callq  a730 <_storeDataFn>
   28f6c:	80 39 0a             	cmpb   $0xa,(%rcx)
   28f6f:	0f 85 eb fe ff ff    	jne    28e60 <locale_charset+0xc60>
   28f75:	50                   	push   %rax
   28f76:	48 b8 2e 12 51 e3 00 	movabs $0xe351122e,%rax
   28f7d:	00 00 00 
   28f80:	48 89 05 b9 a9 72 00 	mov    %rax,0x72a9b9(%rip)        # 753940 <edgeId>
   28f87:	58                   	pop    %rax
   28f88:	e8 0b 17 fe ff       	callq  a698 <_storeEdge>
   28f8d:	e9 a5 f8 ff ff       	jmpq   28837 <locale_charset+0x637>
   28f92:	50                   	push   %rax
   28f93:	48 b8 45 22 6a fc 00 	movabs $0xfc6a2245,%rax
   28f9a:	00 00 00 
   28f9d:	48 89 05 9c a9 72 00 	mov    %rax,0x72a99c(%rip)        # 753940 <edgeId>
   28fa4:	58                   	pop    %rax
   28fa5:	e8 ee 16 fe ff       	callq  a698 <_storeEdge>
                  close (fd);
   28faa:	44 89 e7             	mov    %r12d,%edi
   28fad:	e8 5e 8a fd ff       	callq  1a10 <close@plt>
   28fb2:	e9 b4 f7 ff ff       	jmpq   2876b <locale_charset+0x56b>
   28fb7:	50                   	push   %rax
   28fb8:	48 b8 11 35 fe d1 00 	movabs $0xd1fe3511,%rax
   28fbf:	00 00 00 
   28fc2:	48 89 05 77 a9 72 00 	mov    %rax,0x72a977(%rip)        # 753940 <edgeId>
   28fc9:	58                   	pop    %rax
   28fca:	e8 c9 16 fe ff       	callq  a698 <_storeEdge>
                          res_size += l1 + 1 + l2 + 1;
   28fcf:	4c 01 f6             	add    %r14,%rsi
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
   28fd2:	4c 89 ff             	mov    %r15,%rdi
                          res_size += l1 + 1 + l2 + 1;
   28fd5:	4c 8d 76 02          	lea    0x2(%rsi),%r14
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
   28fd9:	48 8d 76 03          	lea    0x3(%rsi),%rsi
   28fdd:	e8 3e 8b fd ff       	callq  1b20 <realloc@plt>
   28fe2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   28fe7:	49 89 c4             	mov    %rax,%r12
   28fea:	e9 85 fc ff ff       	jmpq   28c74 <locale_charset+0xa74>
   28fef:	50                   	push   %rax
   28ff0:	48 c7 c0 3f 9a 50 33 	mov    $0x33509a3f,%rax
   28ff7:	48 89 05 42 a9 72 00 	mov    %rax,0x72a942(%rip)        # 753940 <edgeId>
   28ffe:	58                   	pop    %rax
   28fff:	e8 94 16 fe ff       	callq  a698 <_storeEdge>
   29004:	4c 89 ef             	mov    %r13,%rdi
   29007:	e8 44 88 fd ff       	callq  1850 <__uflow@plt>
                          while (!(c == EOF || c == '\n'));
   2900c:	48 89 15 05 a9 72 00 	mov    %rdx,0x72a905(%rip)        # 753918 <tmpquadone>
   29013:	48 89 0d 16 4c 5d 00 	mov    %rcx,0x5d4c16(%rip)        # 5fdc30 <tmpquadtwo>
   2901a:	48 8d 15 cf 4b 5d 00 	lea    0x5d4bcf(%rip),%rdx        # 5fdbf0 <funcinptr>
   29021:	48 c7 02 31 07 00 00 	movq   $0x731,(%rdx)
   29028:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   2902f:	00 
   29030:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   29037:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   2903b:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   29042:	00 
   29043:	48 89 c1             	mov    %rax,%rcx
   29046:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   2904a:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   29051:	00 
   29052:	ff 32                	pushq  (%rdx)
   29054:	48 8b 15 bd a8 72 00 	mov    0x72a8bd(%rip),%rdx        # 753918 <tmpquadone>
   2905b:	48 8b 0d ce 4b 5d 00 	mov    0x5d4bce(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   29062:	48 c7 05 e3 a8 72 00 	movq   $0x1,0x72a8e3(%rip)        # 753950 <cmpPassed>
   29069:	01 00 00 00 
   2906d:	e8 be 16 fe ff       	callq  a730 <_storeDataFn>
   29072:	83 f8 ff             	cmp    $0xffffffff,%eax
   29075:	0f 84 9f 00 00 00    	je     2911a <locale_charset+0xf1a>
   2907b:	50                   	push   %rax
   2907c:	48 b8 13 6a 46 f8 00 	movabs $0xf8466a13,%rax
   29083:	00 00 00 
   29086:	48 89 05 b3 a8 72 00 	mov    %rax,0x72a8b3(%rip)        # 753940 <edgeId>
   2908d:	58                   	pop    %rax
   2908e:	e8 05 16 fe ff       	callq  a698 <_storeEdge>
   29093:	48 89 15 7e a8 72 00 	mov    %rdx,0x72a87e(%rip)        # 753918 <tmpquadone>
   2909a:	48 89 0d 8f 4b 5d 00 	mov    %rcx,0x5d4b8f(%rip)        # 5fdc30 <tmpquadtwo>
   290a1:	48 8d 15 48 4b 5d 00 	lea    0x5d4b48(%rip),%rdx        # 5fdbf0 <funcinptr>
   290a8:	48 c7 02 32 07 00 00 	movq   $0x732,(%rdx)
   290af:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   290b6:	00 
   290b7:	48 c7 c1 0a 00 00 00 	mov    $0xa,%rcx
   290be:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   290c2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   290c9:	00 
   290ca:	48 89 c1             	mov    %rax,%rcx
   290cd:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   290d1:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   290d8:	00 
   290d9:	ff 32                	pushq  (%rdx)
   290db:	48 8b 15 36 a8 72 00 	mov    0x72a836(%rip),%rdx        # 753918 <tmpquadone>
   290e2:	48 8b 0d 47 4b 5d 00 	mov    0x5d4b47(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   290e9:	48 c7 05 5c a8 72 00 	movq   $0x1,0x72a85c(%rip)        # 753950 <cmpPassed>
   290f0:	01 00 00 00 
   290f4:	e8 37 16 fe ff       	callq  a730 <_storeDataFn>
   290f9:	83 f8 0a             	cmp    $0xa,%eax
   290fc:	0f 85 5e fd ff ff    	jne    28e60 <locale_charset+0xc60>
   29102:	50                   	push   %rax
   29103:	48 b8 84 9a 11 fe 00 	movabs $0xfe119a84,%rax
   2910a:	00 00 00 
   2910d:	48 89 05 2c a8 72 00 	mov    %rax,0x72a82c(%rip)        # 753940 <edgeId>
   29114:	58                   	pop    %rax
   29115:	e8 7e 15 fe ff       	callq  a698 <_storeEdge>
   2911a:	50                   	push   %rax
   2911b:	48 b8 42 cd 08 ff 00 	movabs $0xff08cd42,%rax
   29122:	00 00 00 
   29125:	48 89 05 14 a8 72 00 	mov    %rax,0x72a814(%rip)        # 753940 <edgeId>
   2912c:	58                   	pop    %rax
   2912d:	e8 66 15 fe ff       	callq  a698 <_storeEdge>
                          if (c == EOF)
   29132:	48 89 15 df a7 72 00 	mov    %rdx,0x72a7df(%rip)        # 753918 <tmpquadone>
   29139:	48 89 0d f0 4a 5d 00 	mov    %rcx,0x5d4af0(%rip)        # 5fdc30 <tmpquadtwo>
   29140:	48 8d 15 a9 4a 5d 00 	lea    0x5d4aa9(%rip),%rdx        # 5fdbf0 <funcinptr>
   29147:	48 c7 02 33 07 00 00 	movq   $0x733,(%rdx)
   2914e:	48 c7 42 08 6c 00 00 	movq   $0x6c,0x8(%rdx)
   29155:	00 
   29156:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   2915d:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   29161:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   29168:	00 
   29169:	48 89 c1             	mov    %rax,%rcx
   2916c:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   29170:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   29177:	00 
   29178:	ff 32                	pushq  (%rdx)
   2917a:	48 8b 15 97 a7 72 00 	mov    0x72a797(%rip),%rdx        # 753918 <tmpquadone>
   29181:	48 8b 0d a8 4a 5d 00 	mov    0x5d4aa8(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   29188:	48 c7 05 bd a7 72 00 	movq   $0x1,0x72a7bd(%rip)        # 753950 <cmpPassed>
   2918f:	01 00 00 00 
   29193:	e8 98 15 fe ff       	callq  a730 <_storeDataFn>
   29198:	83 f8 ff             	cmp    $0xffffffff,%eax
   2919b:	0f 84 75 fc ff ff    	je     28e16 <locale_charset+0xc16>
   291a1:	50                   	push   %rax
   291a2:	48 b8 a8 19 e1 ff 00 	movabs $0xffe119a8,%rax
   291a9:	00 00 00 
   291ac:	48 89 05 8d a7 72 00 	mov    %rax,0x72a78d(%rip)        # 753940 <edgeId>
   291b3:	58                   	pop    %rax
   291b4:	e8 df 14 fe ff       	callq  a698 <_storeEdge>
   291b9:	e9 79 f6 ff ff       	jmpq   28837 <locale_charset+0x637>
   291be:	66 90                	xchg   %ax,%ax
   291c0:	50                   	push   %rax
   291c1:	48 c7 c0 cd 08 ff 3f 	mov    $0x3fff08cd,%rax
   291c8:	48 89 05 71 a7 72 00 	mov    %rax,0x72a771(%rip)        # 753940 <edgeId>
   291cf:	58                   	pop    %rax
   291d0:	e8 c3 14 fe ff       	callq  a698 <_storeEdge>
                          free (old_res_ptr);
   291d5:	4c 89 ff             	mov    %r15,%rdi
                    cp = "";
   291d8:	4c 8d 3d 3a 0c 00 00 	lea    0xc3a(%rip),%r15        # 29e19 <quoting_style_vals+0x79>
                          free (old_res_ptr);
   291df:	e8 8c 86 fd ff       	callq  1870 <free@plt>
                  fclose (fp);
   291e4:	4c 89 ef             	mov    %r13,%rdi
   291e7:	e8 c4 ba ff ff       	callq  24cb0 <rpl_fclose>
   291ec:	e9 99 f5 ff ff       	jmpq   2878a <locale_charset+0x58a>
   291f1:	50                   	push   %rax
   291f2:	48 b8 ff 4f c5 a9 00 	movabs $0xa9c54fff,%rax
   291f9:	00 00 00 
   291fc:	48 89 05 3d a7 72 00 	mov    %rax,0x72a73d(%rip)        # 753940 <edgeId>
   29203:	58                   	pop    %rax
   29204:	e8 8f 14 fe ff       	callq  a698 <_storeEdge>
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
   29209:	48 89 15 08 a7 72 00 	mov    %rdx,0x72a708(%rip)        # 753918 <tmpquadone>
   29210:	48 89 0d 19 4a 5d 00 	mov    %rcx,0x5d4a19(%rip)        # 5fdc30 <tmpquadtwo>
   29217:	48 8d 15 d2 49 5d 00 	lea    0x5d49d2(%rip),%rdx        # 5fdbf0 <funcinptr>
   2921e:	48 c7 02 34 07 00 00 	movq   $0x734,(%rdx)
   29225:	48 c7 42 08 62 00 00 	movq   $0x62,0x8(%rdx)
   2922c:	00 
   2922d:	48 c7 c1 2f 00 00 00 	mov    $0x2f,%rcx
   29234:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
   29238:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
   2923f:	00 
   29240:	49 8b 4c 05 ff       	mov    -0x1(%r13,%rax,1),%rcx
   29245:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
   29249:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
   29250:	00 
   29251:	ff 32                	pushq  (%rdx)
   29253:	48 8b 15 be a6 72 00 	mov    0x72a6be(%rip),%rdx        # 753918 <tmpquadone>
   2925a:	48 8b 0d cf 49 5d 00 	mov    0x5d49cf(%rip),%rcx        # 5fdc30 <tmpquadtwo>
   29261:	48 c7 05 e4 a6 72 00 	movq   $0x1,0x72a6e4(%rip)        # 753950 <cmpPassed>
   29268:	01 00 00 00 
   2926c:	e8 bf 14 fe ff       	callq  a730 <_storeDataFn>
   29271:	41 80 7c 05 ff 2f    	cmpb   $0x2f,-0x1(%r13,%rax,1)
   29277:	75 3e                	jne    292b7 <locale_charset+0x10b7>
   29279:	50                   	push   %rax
   2927a:	48 b8 9f 8a 53 db 00 	movabs $0xdb538a9f,%rax
   29281:	00 00 00 
   29284:	48 89 05 b5 a6 72 00 	mov    %rax,0x72a6b5(%rip)        # 753940 <edgeId>
   2928b:	58                   	pop    %rax
   2928c:	e8 07 14 fe ff       	callq  a698 <_storeEdge>
   29291:	48 8d 78 0e          	lea    0xe(%rax),%rdi
   29295:	e9 63 f3 ff ff       	jmpq   285fd <locale_charset+0x3fd>
   2929a:	50                   	push   %rax
   2929b:	48 b8 a9 38 b5 dd 00 	movabs $0xddb538a9,%rax
   292a2:	00 00 00 
   292a5:	48 89 05 94 a6 72 00 	mov    %rax,0x72a694(%rip)        # 753940 <edgeId>
   292ac:	58                   	pop    %rax
   292ad:	e8 e6 13 fe ff       	callq  a698 <_storeEdge>
}
   292b2:	e8 99 86 fd ff       	callq  1950 <__stack_chk_fail@plt>
   292b7:	50                   	push   %rax
   292b8:	48 c7 c0 38 b5 dd 26 	mov    $0x26ddb538,%rax
   292bf:	48 89 05 7a a6 72 00 	mov    %rax,0x72a67a(%rip)        # 753940 <edgeId>
   292c6:	58                   	pop    %rax
   292c7:	e8 cc 13 fe ff       	callq  a698 <_storeEdge>
   292cc:	48 8d 78 0f          	lea    0xf(%rax),%rdi
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
   292d0:	49 89 c7             	mov    %rax,%r15
   292d3:	49 83 c4 01          	add    $0x1,%r12
   292d7:	e9 d4 f3 ff ff       	jmpq   286b0 <locale_charset+0x4b0>
   292dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000292e0 <__libc_csu_init>:
   292e0:	41 57                	push   %r15
   292e2:	41 56                	push   %r14
   292e4:	49 89 d7             	mov    %rdx,%r15
   292e7:	41 55                	push   %r13
   292e9:	41 54                	push   %r12
   292eb:	4c 8d 25 7e 37 20 00 	lea    0x20377e(%rip),%r12        # 22ca70 <__frame_dummy_init_array_entry>
   292f2:	55                   	push   %rbp
   292f3:	48 8d 2d 7e 37 20 00 	lea    0x20377e(%rip),%rbp        # 22ca78 <__init_array_end>
   292fa:	53                   	push   %rbx
   292fb:	41 89 fd             	mov    %edi,%r13d
   292fe:	49 89 f6             	mov    %rsi,%r14
   29301:	4c 29 e5             	sub    %r12,%rbp
   29304:	48 83 ec 08          	sub    $0x8,%rsp
   29308:	48 c1 fd 03          	sar    $0x3,%rbp
   2930c:	e8 17 85 fd ff       	callq  1828 <_init>
   29311:	48 85 ed             	test   %rbp,%rbp
   29314:	74 20                	je     29336 <__libc_csu_init+0x56>
   29316:	31 db                	xor    %ebx,%ebx
   29318:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2931f:	00 
   29320:	4c 89 fa             	mov    %r15,%rdx
   29323:	4c 89 f6             	mov    %r14,%rsi
   29326:	44 89 ef             	mov    %r13d,%edi
   29329:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
   2932d:	48 83 c3 01          	add    $0x1,%rbx
   29331:	48 39 dd             	cmp    %rbx,%rbp
   29334:	75 ea                	jne    29320 <__libc_csu_init+0x40>
   29336:	48 83 c4 08          	add    $0x8,%rsp
   2933a:	5b                   	pop    %rbx
   2933b:	5d                   	pop    %rbp
   2933c:	41 5c                	pop    %r12
   2933e:	41 5d                	pop    %r13
   29340:	41 5e                	pop    %r14
   29342:	41 5f                	pop    %r15
   29344:	c3                   	retq   
   29345:	90                   	nop
   29346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2934d:	00 00 00 

0000000000029350 <__libc_csu_fini>:
   29350:	f3 c3                	repz retq 
   29352:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   29359:	00 00 00 
   2935c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000029360 <atexit>:
   29360:	48 8b 15 a1 3c 20 00 	mov    0x203ca1(%rip),%rdx        # 22d008 <__dso_handle>
   29367:	31 f6                	xor    %esi,%esi
   29369:	e9 72 88 fd ff       	jmpq   1be0 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000029370 <_fini>:
   29370:	48 83 ec 08          	sub    $0x8,%rsp
   29374:	48 83 c4 08          	add    $0x8,%rsp
   29378:	c3                   	retq   
